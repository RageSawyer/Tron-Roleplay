/*************************************************/
/********* Kodlama Baþlangýcý: 13/05/2021 ********/
/*************************************************/


#pragma warning disable 217 // Satýr uyarýlarý fazla sorun çýkarmaz vakit olunca fixleriz.
#pragma compat 1
#pragma dynamic 500000
#include <a_samp>
#include <a_http>
#include <fix>
#include <a_mysql>
#include <streamer>
#include <sqlitei>
#include <sscanf2>
#include <Pawn.CMD>
#include <FCNPC>
#include <YSI\y_iterate>
#include <YSI\y_bit>
#include <foreach>
#include <dialogs>
#include <SKY>
#include <weapon-config>
#include <easyDialog>
#include <mSelection>
#include <progress2>
#include <cuffs>
#include <evi>
#include <vSyncALS>
#include <AFK>
#include <garage_block>
#include <textdraw>
#include <td-actions>
#include <animated-textdraw>
#include <Pawn.RakNet>
#include <speedcap>

#undef MAX_PLAYERS
#define MAX_PLAYERS 100
AntiDeAMX()
{
    new sawyer[][] =
    {
        "Unarmed (Fist)",
        "Brass K"
    };
    #pragma unused sawyer
}
WasteDeAMXersTime()
{
    new
		sawyer;
    #emit load.pri sawyer
    #emit stor.pri sawyer
}
#define MAXIMUM_NPC 100
#define MAX_SECENEK 5
enum NPC
{
	npcID,
	bool:npcExists,
	npcAd[24],
	npcSkin,
	Float:npcPos[4],
	npcVw,
	npcActor,
	Text3D:npcLabel
}
new Float:mekanikPos[MAX_PLAYERS][3];
new PlayerText:ParaBilgilendirme[2][MAX_PLAYERS];
new PlayerText:Textdraw1[MAX_PLAYERS];
new MekanikTimer[MAX_PLAYERS];
new NPCBilgi[MAXIMUM_NPC][NPC];
new NPCSecenekler[MAXIMUM_NPC][MAX_SECENEK][50];
new NPCSecenekCevaplar[MAXIMUM_NPC][MAX_SECENEK][200];
new NotMoving[MAX_PLAYERS];
new WeaponID[MAX_PLAYERS];
new CheckCrouch[MAX_PLAYERS];
new Ammo[MAX_PLAYERS][40];
new pDrunkLevelLast[MAX_PLAYERS];
new pFPS[MAX_PLAYERS];
new TohumTutuyor[MAX_PLAYERS];
new TohumSayisi[MAX_PLAYERS];
new TohumCP[MAX_PLAYERS];
new AracTohumObjeler[MAX_VEHICLES][5];
new AracTohumlar[MAX_VEHICLES][3];
new EsyaAdi[MAX_PLAYERS][30];
new
	Float: CCTV_oldX[MAX_PLAYERS],
	Float: CCTV_oldY[MAX_PLAYERS],
	Float: CCTV_oldZ[MAX_PLAYERS],
	CCTV_oldSkin[MAX_PLAYERS],
	CCTV_oldVW[MAX_PLAYERS],
	CCTV_oldInterior[MAX_PLAYERS],
	CCTV_ID[MAX_PLAYERS],
	CCTV_inEditing[MAX_PLAYERS];

new karakterbasvuru = 0;
#define MAX_SORU 200 // Maksimum oluþturulabilecek soru sayýsýdýr.
enum SoruBilgi
{
    soruID,
    soruExists,
    Soru[50],
    SoruCevap[128],
    OkunmaSayisi,
    EklenmeTarihi[25],
    Ekleyen[24]
}
new SoruData[MAX_SORU][SoruBilgi];
new SoruListeleme[MAX_PLAYERS][45];
new AnahtarKelime[MAX_PLAYERS][20];

#define MAX_ARSA 100 // Maksimum oluþturulabilecek arsa sayýsýdýr.
enum arsa
{
	arsaExists,
	arsaSahip,
	arsaTip,
	Float:arsaPos[3],
	arsaFiyat,
	KiraSure,
	arsaMaxTohum,
	Metrekare,
	arsaPickup,
	Text3D:arsaLabel
}
new ArsaBilgi[MAX_ARSA][arsa];
#define MAX_TOHUM 200
enum tohum
{
	tohumArsa,
	tohumTip,
	Float:tohumPos[3],
	tohumBuyume,
	tohumSayi,
	tohumObject,
	Text3D:tohumLabel
}
new Tohumlar[MAX_TOHUM][tohum];

new
    Float: TohumAttachOffsets[5][3] = {
    {-0.500000, -0.899999, 0.000000},
    {0.100000, -0.899999, 0.000000},
    {0.599999, -0.900000, 0.000000},
    {-0.299999, -1.700000, 0.000000},
    {0.300000, -1.700000, 0.000000}


};

//---------Destek Botu Sistemi--------------
#define BOT_NAME "Destek Botu"
#define RED "{FF0000}"
#define WHITE "{FFFFFF}"

// ----------------------------- MYSQL BILGILERI --------------------------------
#define MYSQL_HOST "localhost"
#define MYSQL_USER "root"
#define MYSQL_PASS ""
#define MYSQL_BASE "sunucu"
new MySQL:baglanti;
new bool:sunucuKilitli;
new CarUpdate[MAX_VEHICLES] = {0, ...};
new actors[3];
new Download[MAX_PLAYERS];
#define CBUG_INTERVAL_DEAGLE    700
#define CBUG_INTERVAL_SHOTGUN   1000
#define CBUG_INTERVAL_COMBATSG  340
#define CBUG_INTERVAL_COUNTRY   850
#define CBUG_INTERVAL_SNIPER    850

// Key state definitions
#define MOVE_FORWARD    		1
#define MOVE_BACK       		2
#define MOVE_LEFT       		3
#define MOVE_RIGHT      		4
#define MOVE_FORWARD_LEFT       5
#define MOVE_FORWARD_RIGHT      6
#define MOVE_BACK_LEFT          7
#define MOVE_BACK_RIGHT         8
static
        WeaponTick[MAX_PLAYERS];

new SonMobilyaID[MAX_PLAYERS];
// ------------------------------------------------------------------------------
#define MesajGonder(%0,%1) \
	SendClientMessageEx(%0, 0xFF6347FF, "Sunucu: {C8C8C8}"%1)

#define BilgiMesajGonder(%0,%1) \
	SendClientMessageEx(%0, 0xFFBF00FF, "Bilgi: {C8C8C8}"%1)

#define HataMesajGonder(%0,%1) \
	SendClientMessageEx(%0, 0xFF6347FF, "Hata: {C8C8C8}"%1)

#define SendAdminAction(%0,%1) \
	SendClientMessageEx(%0, COLOR_CLIENT, " {FFFFFF}"%1)

#define MAX_ENTRANCES (100) // Maksimum oluþturulabilecek bina sayýsýdýr.
#define MAX_ARAC 1200 // Maksimum oluþturulabilecek araç sayýsýdýr.
#define MAX_GATES 200 // Maksimum oluþturulabilecek gate sayýsýdýr.
#define MAX_EV 500 // Maksimum oluþturulabilecek ev sayýsýdýr.
#define MAX_BIRLIK 100 // Maksimum oluþturulabilecek birlik sayýsýdýr.
#define MAX_ISYERI 350 // Maksimum oluþturulabilecek iþyeri sayýsýdýr.
#define MAX_DEALERSHIP_CARS 250 // Maksimum galeri aracý.
#define MAX_GARAGE 300
#define MAX_GAS_PUMPS 78
#define MAX_LOKASYON 100
#define MAX_HASAR 40
#define MAX_OWNABLE_CARS 5
#define MAX_ARREST_POINTS (30)
#define MAX_CCTV 100
#define MAX_HOUSE_KEYS 3
#define MAX_CAR_KEYS 3
#define MAX_REKLAM 50
#define MAX_CADIR 50
#define MAX_DROPPED_WEAPONS 300
#define MAX_PLAYER_TICKETS (20)
#define VERGI_GUN 7
#define LITRE_PRICE 5
#define     ZAR_NXR()       random(6) + 1
#define ARMEDBODY_USE_HEAVY_WEAPON                      (false)
#define MAX_INVENTORY (120)
#define WALK_DEFAULT    0
#define WALK_NORMAL     1
#define WALK_PED        2
#define WALK_GANGSTA    3
#define WALK_GANGSTA2   4
#define WALK_OLD        5
#define WALK_FAT_OLD    6
#define WALK_FAT        7
#define WALK_LADY      	8
#define WALK_LADY2      9
#define WALK_WHORE      10
#define WALK_WHORE2     11
#define WALK_DRUNK     	12
#define WALK_BLIND     	13

enum inventoryData {
	invExists,
	invID,
	invItem[64 char],
	invModel,
	invQuantity
};


// ======================= PB Sistemi =================================
#define MAX_ODA 20 // Maksimum oluþturulabilecek oda sayýsýdýr.
#define ODA_PARA 200 // Oda kurmak için gereken para.
#define ODA_BEKLEME 1
#define ODA_BASLADI 2
#define ODA_AYARLARI 9500 // Dialog id. Mod ile çakýþýrsa buradan deðiþtirebilirsiniz.
#define ODA_AYARLARI_AD 9501 // Dialog id. Mod ile çakýþýrsa buradan deðiþtirebilirsiniz.
#define ODA_AYARLARI_SIFRE 9502 // Dialog id. Mod ile çakýþýrsa buradan deðiþtirebilirsiniz.
#define ODA_AYARLARI_TAKIMAD 9503 // Dialog id. Mod ile çakýþýrsa buradan deðiþtirebilirsiniz.
#define ODA_AYARLARI_SURE 9505 // Dialog id. Mod ile çakýþýrsa buradan deðiþtirebilirsiniz.
#define ODA_AYARLARI_ARENA 9506 // Dialog id. Mod ile çakýþýrsa buradan deðiþtirebilirsiniz.
#define ODA_AYARLARI_ZIRH 9507 // Dialog id. Mod ile çakýþýrsa buradan deðiþtirebilirsiniz.
#define ODA_AYARLARI_SILAH 9508 // Dialog id. Mod ile çakýþýrsa buradan deðiþtirebilirsiniz.
#define ODA_AYARLARI_KATILIMCI 9510 // Dialog id. Mod ile çakýþýrsa buradan deðiþtirebilirsiniz.
#define DIALOG_KATIL 9512 // Dialog id. Mod ile çakýþýrsa buradan deðiþtirebilirsiniz.
#define DIALOG_KATIL_SIFRE 9514
#define TAKIM_SEC 9513
enum PaintballDegiskenler
{
	bool:odaExists,
	odaIsim[30],
	odaSifre[30],
	odaSahip,
	odaTakim1Ad[20],
	odaTakim2Ad[20],
	odaSilahlar[4],
	odaZirh,
	odaSure,
	odaOyunTuru,
	odaArena,
	odaPuan[2],
	bool:TakimDengeleme,
	odaDurum,
	odaSayac
}
new Paintball[MAX_ODA][PaintballDegiskenler];
new pbOda[MAX_PLAYERS];
new pbTakim[MAX_PLAYERS];
new pbOldurme[MAX_PLAYERS];
new pbOlme[MAX_PLAYERS];
new PlayerText:PaintballTD[MAX_PLAYERS][9];
new PlayerText:TaxiTD[MAX_PLAYERS][2];
new gPlayerAnimLibsPreloaded[MAX_PLAYERS];
new surf_LastChecked[MAX_PLAYERS];
// ================================================================
// ======================  Dinamik Label Sistemi By Sawyer ==========================================

#define	MAX_LABEL			100
#define	MAX_LABEL_ADI		90
#define	MAX_LABEL_MESAFE	100.0

enum Labeller
{
	Text3D: ID,
	objeID,
	LabelAdi[MAX_LABEL_ADI],
	Renk,
	VW,
	Int,
	Duzenleniyor,
	Float: Pos[3],
	Float: Mesafe
}
new Label[MAX_LABEL][Labeller];

new DuzenleLabelID[MAX_PLAYERS];
new bool: DuzenleLabel[MAX_PLAYERS];


// ============= UYUÞTURUCU SÝSTEMÝ =============================
#define     MAX_DEALERS         (3)    // limit of drug dealers
#define     MAX_PLANTS      	(250)   // limit of drug plants

#define     USE_DRUNKLEVEL              // remove this line if you don't want SetPlayerDrunkLevel to be used while on drugs
#define     PLAYER_LIMIT    	(1)     // a player can plant up to x drug plants (Default: 5)
#define     PLANT_MAX_GROWTH	(10)    // a plant will grow up to x grams of drugs (Default: 75)
#define     GROWTH_INTERVAL 	(100)    // a plant will grow up every x seconds (Default: 45)
#define     ROT_INTERVAL        (300)   // a plant will rot after x seconds of fully growing (Default: 300)

#define     CARRY_LIMIT         (50)   // a player can carry up to x grams of drugs (Default: 150)
#define     SEED_LIMIT         	(5)   	// a player can carry up to x drug plant seeds (Default: 25)
#define     SEED_PRICE      	(2300)    // price players will pay for a drug plant seed (Default: 50)
#define     DRUG_BUY_PRICE      (250)    // price players will pay a dealer for a gram of drugs (Default: 20)
#define     DRUG_SELL_PRICE     (140)    // price dealers will pay a player for a gram of drugs (Default: 16)
#define     OFFER_COOLDOWN      (30)    // how many seconds does a player wait to send an another offer to someone (Default: 30)
// ===============================================================

// ================ BANKA SISTEMI ==================================
#define     MAX_BANKERS     (10)
#define     MAX_ATMS        (150)

//#define     BANKER_USE_MAPICON      			// comment or remove this line if you don't want bankers to have mapicons
//#define     ATM_USE_MAPICON         			// comment or remove this line if you don't want atms to have mapicons
//#define     BANKER_ICON_RANGE       (10.0)		// banker mapicon stream distance, you can remove this if you're not using banker icons (default: 10.0)
//#define     ATM_ICON_RANGE       	(100.0)		// atm mapicon stream distance, you can remove this if you're not using banker icons (default: 100.0)
#define     ACCOUNT_PRICE           (500)      	// amount of money required to create a new bank account (default: 100)
#define     ACCOUNT_CLIMIT          (5)         // a player can create x accounts, you can comment or remove this line if you don't want an account limit (default: 5)
#define     ACCOUNT_LIMIT           (500000000) // how much money can a bank account have (default: 500,000,000)

// ATM Robbery Config
//#define     ROBBABLE_ATMS           // uncomment this line if you want robbable atms

#if defined ROBBABLE_ATMS
	#define     ATM_HEALTH              (350.0)     // health of an atm (Default: 350.0)
	#define     ATM_REGEN               (120)       // a robbed atm will start working after x seconds (Default: 120)
	#define     ATM_ROB_MIN  			(1500)   	// min. amount of money stolen from an atm (Default: 1500)
	#define     ATM_ROB_MAX  			(3500)  	// max. amount of money stolen from an atm (Default: 3500)
#endif

enum    _:E_BANK_DIALOG
{
    DIALOG_BANK_MENU_NOLOGIN = 12450,
    DIALOG_BANK_MENU,
    DIALOG_BANK_CREATE_ACCOUNT,
    DIALOG_BANK_ACCOUNTS,
    DIALOG_BANK_LOGIN_ID,
	DIALOG_BANK_LOGIN_PASS,
	DIALOG_BANK_DEPOSIT,
	DIALOG_BANK_WITHDRAW,
	DIALOG_BANK_TRANSFER_1,
	DIALOG_BANK_TRANSFER_2,
	DIALOG_BANK_PASSWORD,
	DIALOG_BANK_REMOVE,
	DIALOG_BANK_LOGS,
	DIALOG_BANK_LOG_PAGE
}

enum    _:E_BANK_LOGTYPE
{
	TYPE_NONE,
	TYPE_LOGIN,
	TYPE_DEPOSIT,
	TYPE_WITHDRAW,
	TYPE_TRANSFER,
	TYPE_PASSCHANGE
}

#if defined ROBBABLE_ATMS
enum    _:E_ATMDATA
{
	IDString[8],
	refID
}
#endif

enum    E_BANKER
{
	// saved
	Skin,
	Float: bankerX,
	Float: bankerY,
	Float: bankerZ,
	Float: bankerA,
	bankerVw,
	// temp
	bankerActorID,
	#if defined BANKER_USE_MAPICON
	bankerIconID,
	#endif
	Text3D: bankerLabel
}

enum    E_ATM
{
	// saved
	Float: atmX,
	Float: atmY,
	Float: atmZ,
	Float: atmRX,
	Float: atmRY,
	Float: atmRZ,
	// temp
	atmObjID,

	#if defined ATM_USE_MAPICON
	atmIconID,
	#endif

	#if defined ROBBABLE_ATMS
	Float: atmHealth,
	atmRegen,
	atmTimer,
	atmPickup,
	#endif

	Text3D: atmLabel
}

new
	BankerData[MAX_BANKERS][E_BANKER],
	ATMData[MAX_ATMS][E_ATM];

new
	Iterator: Bankers<MAX_BANKERS>,
	Iterator: ATMs<MAX_ATMS>;

new
	CurrentAccountID[MAX_PLAYERS] = {-1, ...},
	LogListType[MAX_PLAYERS] = {TYPE_NONE, ...},
	LogListPage[MAX_PLAYERS],
	EditingATMID[MAX_PLAYERS] = {-1, ...};

// ======================= LSPD Obje Sistemi ===================================
#define     MAX_COP_OBJECTS     (300)
#define     COPOBJECTS_DIALOG   (7100)
#define     SPEEDCAM_RANGE      (30.0)

enum    _:e_object_types
{
	OBJECT_TYPE_ROADBLOCK,
	OBJECT_TYPE_SIGN,
	OBJECT_TYPE_POLICELINE,
	OBJECT_TYPE_SPIKE,
	OBJECT_TYPE_SPEEDCAM
}

enum	e_object_data
{
	Owner,
	Type,
	ObjData,
	ObjModel,
	Float: ObjX,
	Float: ObjY,
	Float: ObjZ,
	Float: ObjRX,
	Float: ObjRY,
	Float: ObjRZ,
	ObjInterior,
	ObjVirtualWorld,
	ObjID,
	Text3D: ObjLabel,
	ObjArea,
	bool: ObjCreated
}

new
	CopObjectData[MAX_COP_OBJECTS][e_object_data],
	EditingCopObjectID[MAX_PLAYERS] = {-1,  ...},
	RoadblockList = mS_INVALID_LISTID,
	SignList = mS_INVALID_LISTID;

new
    Float: zOffsets[5] = {1.35, 3.25, 0.35, 0.4, 5.35},
    Float: streamDistances[5] = {10.0, 10.0, 5.0, 3.0, SPEEDCAM_RANGE};

new
	DB: ObjectDB,
	DBStatement: LoadObjects,
	DBStatement: AddObject,
	DBStatement: UpdateObject,
	DBStatement: RemoveObject;


// ============================ ÇÖPÇÜ Mesleði ========================
#define     TRASH_BAG_VALUE     (30)    	// value of a collected trash bag (default: 125)
#define     REFILL_TIME         (300)   	// trash container refill time - in seconds (default: 300)
#define     ATTACHMENT_INDEX    (4)     	// for setplayerattachedobject (default: 4)
#define     TRASH_LIMIT         (10)    	// trashmaster capacity (default: 10)

enum	_:e_trashtypes
{
	TYPE_BIN,
	TYPE_DUMPSTER
}

enum	e_trashdata
{
	TrashType,
	Float: TrashX,
	Float: TrashY,
	Float: TrashZ,
	Text3D: TrashLabel,
	TrashLevel,
	TrashTimer
}

enum    e_factorydata
{
    FactoryName[32],
	Float: FactoryX,
	Float: FactoryY,
	Float: FactoryZ,
	FactoryCurrent,
	FactoryCP,
	Text3D: FactoryLabel
}

new
	TrashData[][e_trashdata] = {
		{TYPE_DUMPSTER, -169.9766, 1027.1953, 19.4453},
		{TYPE_DUMPSTER, -160.2656, 1122.5391, 19.5391},
		{TYPE_DUMPSTER, -149.8516, 1133.7656, 19.5391},
		{TYPE_DUMPSTER, -170.1719, 1169.0547, 19.5391},
		{TYPE_DUMPSTER, -218.0312, 1164.9219, 19.5391},
		{TYPE_DUMPSTER, -149.8203, 1164.1094, 19.5391},
		{TYPE_DUMPSTER, -162.0938, 1175.1406, 19.5391},
		{TYPE_DUMPSTER, -155.6953, 1234.4219, 19.4766},
		{TYPE_DUMPSTER, -123.8125, 1079.3984, 19.5000},
		{TYPE_DUMPSTER, -90.6016, 1128.2188, 19.4609},
		{TYPE_DUMPSTER, -88.8594, 1165.3828, 19.4609},
		{TYPE_DUMPSTER, -44.3047, 1179.2734, 19.2422},
		{TYPE_DUMPSTER, -24.8203, 1165.4062, 19.2422},
		{TYPE_DUMPSTER, 776.8281, 1866.1562, 3.8906},
		{TYPE_DUMPSTER, 338.0547, 39.8438, 6.2656},
		{TYPE_DUMPSTER, 339.7188, 52.9844, 3.2656},
		{TYPE_DUMPSTER, 341.4219, 55.0078, 3.2656},
		{TYPE_DUMPSTER, 1353.1016, 201.7578, 19.2656},
		{TYPE_DUMPSTER, 1353.5781, 204.2266, 19.2656},
		{TYPE_DUMPSTER, 244.1250, -313.1250, 1.2734},
		{TYPE_DUMPSTER, 251.4453, -262.5469, 1.2734},
		{TYPE_DUMPSTER, 254.0000, -263.2578, 1.2734},
		{TYPE_DUMPSTER, 306.0625, -255.1016, 1.2578},
		{TYPE_DUMPSTER, 308.6719, -255.0938, 1.2578},
		{TYPE_BIN, 2317.1562, 29.2031, 26.2188},
		{TYPE_DUMPSTER, 2321.1172, 14.3359, 26.1953},
		{TYPE_BIN, 2317.5938, 30.4766, 26.2188},
		{TYPE_DUMPSTER, 196.7109, -121.4062, 1.2734},
		{TYPE_DUMPSTER, 255.1172, -161.2891, 1.3047},
		{TYPE_DUMPSTER, 255.3125, -132.6250, 1.2734},
		{TYPE_DUMPSTER, 259.5547, -132.7891, 1.2734},
		{TYPE_DUMPSTER, 165.9219, -107.6328, 1.2734},
		{TYPE_DUMPSTER, 182.9922, -93.6172, 1.2734},
		{TYPE_DUMPSTER, 171.4453, -93.4453, 1.2734},
		{TYPE_DUMPSTER, 657.8516, -650.0703, 16.0625},
		{TYPE_DUMPSTER, 665.2266, -624.3750, 16.0625},
		{TYPE_DUMPSTER, 668.2109, -624.4453, 16.0625},
		{TYPE_DUMPSTER, 652.7422, -496.5156, 16.0469},
		{TYPE_DUMPSTER, 652.8125, -499.3203, 16.0469},
		{TYPE_DUMPSTER, 725.8750, -465.7422, 15.9375},
		{TYPE_DUMPSTER, 656.0000, -439.2734, 16.2812},
		{TYPE_DUMPSTER, 693.2891, -456.0156, 16.0078},
		{TYPE_DUMPSTER, 830.4766, -754.6016, 84.9375},
		{TYPE_BIN, 842.5156, -756.1719, 84.3047},
		{TYPE_DUMPSTER, 1300.4531, 221.5078, 19.2656},
		{TYPE_DUMPSTER, 1320.6328, 211.4688, 19.2656},
		{TYPE_DUMPSTER, 1328.8672, 207.3438, 19.2656},
		{TYPE_DUMPSTER, 1362.0391, 232.6094, 19.2656},
		{TYPE_DUMPSTER, 1364.2891, 231.4844, 19.2656},
		{TYPE_DUMPSTER, 1307.6875, 349.7578, 19.2812},
		{TYPE_DUMPSTER, 1315.2500, 349.5625, 19.2578},
		{TYPE_DUMPSTER, 1413.4141, 451.1172, 19.7344},
		{TYPE_DUMPSTER, 1368.6250, 484.1406, 19.7344},
		{TYPE_DUMPSTER, -2146.7344, -2462.4844, 30.5547},
		{TYPE_DUMPSTER, -2105.9375, -2458.1562, 30.5547},
		{TYPE_DUMPSTER, -2108.4922, -2456.1719, 30.5547},
		{TYPE_DUMPSTER, -2103.7734, -2479.7344, 30.5547},
		{TYPE_DUMPSTER, -2218.8828, -2336.2109, 30.4844},
		{TYPE_DUMPSTER, -2213.9609, -2339.3047, 30.4844},
		{TYPE_DUMPSTER, -2136.5547, -2450.5938, 30.5547},
		{TYPE_DUMPSTER, -2176.3438, -2424.5781, 30.5547},
		{TYPE_DUMPSTER, -2174.8594, -2365.2734, 30.7969},
		{TYPE_DUMPSTER, -2136.5000, -2263.8984, 30.7266},
		{TYPE_DUMPSTER, -2138.6641, -2262.1953, 30.7266},
		{TYPE_DUMPSTER, -2087.9922, -2440.9453, 30.6953},
		{TYPE_DUMPSTER, -2107.2109, -2423.8906, 30.7969},
		{TYPE_DUMPSTER, -2085.3203, -2414.5078, 30.6406},
		{TYPE_DUMPSTER, -2087.2031, -2343.1016, 30.7969},
		{TYPE_DUMPSTER, -77.2188, -1188.3672, 0.8359},
		{TYPE_DUMPSTER, -68.3516, -1104.9922, 0.2188},
		{TYPE_DUMPSTER, -63.8125, -1106.4219, 0.2188},
		{TYPE_DUMPSTER, -541.4297, -561.2266, 24.5859},
		{TYPE_DUMPSTER, -513.7578, -561.0078, 24.5859},
		{TYPE_DUMPSTER, -502.6094, -528.6484, 24.5859},
		{TYPE_DUMPSTER, -620.4141, -490.5078, 24.5859},
		{TYPE_DUMPSTER, -619.6250, -473.4531, 24.5859},
		{TYPE_BIN, 788.3438, -863.3828, 59.7031},
		{TYPE_BIN, 787.9766, -862.3750, 59.7109},
		{TYPE_BIN, 787.9766, -862.3750, 59.7109},
		{TYPE_BIN, 787.9844, -841.5234, 59.7031},
		{TYPE_DUMPSTER, 792.6250, -838.8906, 60.6406},
		{TYPE_BIN, 911.7031, -836.2031, 91.3594},
		{TYPE_BIN, 910.8750, -836.6953, 91.1250},
		{TYPE_BIN, 960.2422, -822.8594, 95.5391},
		{TYPE_BIN, 974.9219, -815.5156, 96.7266},
		{TYPE_BIN, 948.4922, -699.7422, 121.2969},
		{TYPE_BIN, 948.0078, -698.7891, 121.3203},
		{TYPE_BIN, 914.3125, -670.3594, 116.2891},
		{TYPE_BIN, 1072.1406, -778.3828, 106.4453},
		{TYPE_BIN, 1072.1406, -778.3828, 106.4453},
		{TYPE_BIN, 1071.0547, -778.4766, 106.2891},
		{TYPE_BIN, 2380.0312, -1038.0703, 52.8281},
		{TYPE_BIN, 2380.8516, -1039.0547, 52.7891},
		{TYPE_BIN, 2426.7266, -1016.7500, 53.4453},
		{TYPE_BIN, 2436.7109, -1052.2500, 53.4297},
		{TYPE_BIN, 2459.4531, -1051.6094, 58.8438},
		{TYPE_BIN, 2457.3984, -1023.1719, 58.7891},
		{TYPE_BIN, 2484.0859, -1053.1406, 66.6406},
		{TYPE_BIN, 2489.6172, -1022.6094, 64.5156},
		{TYPE_BIN, 2505.0781, -1061.0781, 69.3125},
		{TYPE_BIN, 2527.9219, -1058.1406, 68.6875},
		{TYPE_BIN, 2510.2891, -1029.5859, 69.1797},
		{TYPE_BIN, 2528.6719, -1034.9219, 68.6719},
		{TYPE_BIN, 2538.6484, -1058.6016, 68.6719},
		{TYPE_BIN, 2545.1562, -1034.8984, 68.6641},
		{TYPE_BIN, 2567.8203, -1035.2812, 68.6719},
		{TYPE_DUMPSTER, 1420.1172, -1356.8438, 13.3828},
		{TYPE_DUMPSTER, 1425.5312, -1320.5781, 13.3672},
		{TYPE_DUMPSTER, 1415.6016, -1299.1875, 13.3672},
		{TYPE_DUMPSTER, 1425.5703, -1317.9688, 13.3672},
		{TYPE_DUMPSTER, 1439.8594, -1323.7031, 13.3828},
		{TYPE_DUMPSTER, 1593.0781, -1200.3750, 19.6875},
		{TYPE_DUMPSTER, 1616.5547, -1200.3750, 19.6875},
		{TYPE_DUMPSTER, 1660.4688, -1200.3750, 19.6875},
		{TYPE_DUMPSTER, 1435.5859, -1095.7969, 17.4141},
		{TYPE_DUMPSTER, 1438.1953, -1095.8438, 17.4141},
		{TYPE_DUMPSTER, 1424.5234, -1084.3047, 17.4141},
		{TYPE_DUMPSTER, 1424.5781, -1080.3828, 17.4141},
		{TYPE_DUMPSTER, 1520.1562, -1018.5547, 23.8438},
		{TYPE_DUMPSTER, 1520.2109, -1014.6328, 23.8438},
		{TYPE_DUMPSTER, 1611.6875, -993.9062, 23.8438},
		{TYPE_DUMPSTER, 1659.9141, -1065.1172, 23.7969},
		{TYPE_DUMPSTER, 1631.9219, -987.8281, 23.8438},
		{TYPE_DUMPSTER, 1633.9375, -990.5547, 23.8438},
		{TYPE_DUMPSTER, 1660.2500, -1000.4141, 23.7891},
		{TYPE_DUMPSTER, 1666.3984, -997.7031, 23.7891},
		{TYPE_DUMPSTER, 1786.2109, -1148.2969, 23.6797},
		{TYPE_DUMPSTER, 1800.4531, -1148.2969, 23.6797},
		{TYPE_DUMPSTER, 1830.5703, -1147.3828, 23.6797},
		{TYPE_DUMPSTER, 1830.6172, -1143.8203, 23.6797},
		{TYPE_DUMPSTER, 1789.7734, -1116.0625, 23.8906},
		{TYPE_DUMPSTER, 1789.9062, -1112.6406, 23.8906},
		{TYPE_DUMPSTER, 1830.5703, -1113.9297, 23.6797},
		{TYPE_DUMPSTER, 1830.5703, -1097.3047, 23.6797},
		{TYPE_DUMPSTER, 1830.5703, -1084.2891, 23.6797},
		{TYPE_DUMPSTER, 1336.3359, -1842.8516, 12.6641},
		{TYPE_DUMPSTER, 1336.7891, -1816.3047, 12.6641},
		{TYPE_DUMPSTER, 1466.9453, -1847.8438, 12.6641},
		{TYPE_DUMPSTER, 1419.7344, -1846.5469, 12.6641},
		{TYPE_DUMPSTER, 1419.6953, -1844.2031, 12.6641},
		{TYPE_DUMPSTER, 1486.2109, -1848.1250, 12.6641},
		{TYPE_DUMPSTER, 1468.0625, -1847.7891, 12.6641},
		{TYPE_DUMPSTER, 1516.6875, -1850.0547, 12.6641},
		{TYPE_DUMPSTER, 1337.6953, -1774.7344, 12.6641},
		{TYPE_DUMPSTER, 1461.4297, -1489.2188, 12.6797},
		{TYPE_DUMPSTER, 1538.9453, -1849.2734, 12.6641},
		{TYPE_DUMPSTER, 1534.9297, -1480.9922, 8.6094},
		{TYPE_DUMPSTER, 1537.9297, -1480.6094, 8.6094},
		{TYPE_DUMPSTER, 2382.0234, -1941.0391, 12.6641},
		{TYPE_DUMPSTER, 1920.0547, -2122.4141, 12.6875},
		{TYPE_DUMPSTER, 1920.4844, -2088.1719, 12.6875},
		{TYPE_DUMPSTER, 1092.0078, -1881.2812, 13.3047},
		{TYPE_DUMPSTER, 1175.3828, -1877.5625, 13.3047},
		{TYPE_DUMPSTER, 1091.9844, -1876.8281, 13.3047},
		{TYPE_DUMPSTER, 1101.9922, -1874.9766, 13.3047},
		{TYPE_DUMPSTER, 1117.4688, -1874.9766, 13.3047},
		{TYPE_DUMPSTER, 432.2422, -1747.8828, 8.3281},
		{TYPE_DUMPSTER, 477.7734, -1746.4531, 8.5000},
		{TYPE_DUMPSTER, 569.5078, -1765.0312, 13.5312},
		{TYPE_DUMPSTER, 732.8516, -1332.8984, 12.6875},
		{TYPE_DUMPSTER, 732.7266, -1341.7734, 12.6328},
		{TYPE_DUMPSTER, 387.1484, -1751.5078, 7.9453},
		{TYPE_DUMPSTER, 387.2266, -1747.7266, 8.3594},
		{TYPE_DUMPSTER, 1322.1875, -1235.8828, 13.4375},
		{TYPE_DUMPSTER, -826.2812, 495.1172, 1357.8594},
		{TYPE_DUMPSTER, -827.2656, 498.1953, 1357.7656},
		{TYPE_DUMPSTER, -829.0312, 498.1953, 1357.5938},
		{TYPE_BIN, -800.9453, 500.8984, 1360.0312},
		{TYPE_BIN, -800.9453, 501.7422, 1360.0312},
		{TYPE_DUMPSTER, -2531.9062, 2295.0312, 4.7578},
		{TYPE_DUMPSTER, -2526.9453, 2295.0312, 4.7578},
		{TYPE_DUMPSTER, -2527.2422, 2353.1250, 4.7578},
		{TYPE_DUMPSTER, -2520.7188, 2353.1250, 4.7578},
		{TYPE_DUMPSTER, -2524.0625, 2353.1250, 4.7578},
		{TYPE_DUMPSTER, -2480.8828, 2295.0312, 4.7578},
		{TYPE_DUMPSTER, -2503.0703, 2364.2188, 4.7578},
		{TYPE_DUMPSTER, -2503.0469, 2368.0469, 4.7578},
		{TYPE_DUMPSTER, -2253.5391, 2372.5469, 4.7578},
		{TYPE_DUMPSTER, -2455.3750, -143.8750, 26.0156},
		{TYPE_DUMPSTER, -2455.3516, -138.0156, 26.0156},
		{TYPE_DUMPSTER, -2753.9453, -178.3281, 6.8359},
		{TYPE_DUMPSTER, -2658.9766, -168.8984, 3.9844},
		{TYPE_DUMPSTER, -2657.9297, -189.0703, 3.9844},
		{TYPE_DUMPSTER, -2652.7891, -188.2891, 3.9844},
		{TYPE_DUMPSTER, -2653.3828, -167.3984, 3.9844},
		{TYPE_DUMPSTER, -2759.2578, -136.2031, 6.8359},
		{TYPE_DUMPSTER, -2753.3125, -149.8516, 6.8359},
		{TYPE_DUMPSTER, -2659.2734, -125.2031, 3.9844},
		{TYPE_DUMPSTER, -2753.2734, -121.6016, 6.8359},
		{TYPE_DUMPSTER, -2759.2031, -120.8203, 6.8359},
		{TYPE_DUMPSTER, -2653.6797, -124.7422, 3.9844},
		{TYPE_DUMPSTER, -2759.9453, -96.8203, 6.8359},
		{TYPE_DUMPSTER, -2763.7031, -13.7344, 6.8359},
		{TYPE_DUMPSTER, -2766.0312, 25.0156, 6.8359},
		{TYPE_DUMPSTER, -2760.7188, -54.3438, 6.8359},
		{TYPE_DUMPSTER, -2759.4766, 7.8906, 6.8359},
		{TYPE_DUMPSTER, -2754.4219, -85.3906, 6.8359},
		{TYPE_DUMPSTER, -2754.8516, -56.6016, 6.8359},
		{TYPE_DUMPSTER, -2755.9141, -36.3828, 6.8359},
		{TYPE_DUMPSTER, -2747.3594, -8.6641, 6.0938},
		{TYPE_DUMPSTER, -2766.4297, 52.0781, 6.9297},
		{TYPE_DUMPSTER, -2766.2109, 86.5781, 6.9297},
		{TYPE_DUMPSTER, -2760.3672, 63.8594, 6.9375},
		{TYPE_DUMPSTER, -2757.9688, 95.9844, 6.9297},
		{TYPE_DUMPSTER, -2756.2656, 90.3594, 6.9297},
		{TYPE_DUMPSTER, -2756.4844, 93.1875, 6.9297},
		{TYPE_DUMPSTER, -2763.1328, 115.3828, 6.8906},
		{TYPE_DUMPSTER, -2760.3672, 144.3516, 6.8828},
		{TYPE_DUMPSTER, -2658.3125, -89.6172, 3.9844},
		{TYPE_DUMPSTER, -2716.9844, 74.3594, 4.0781},
		{TYPE_DUMPSTER, -2717.9219, 77.9219, 4.0781},
		{TYPE_DUMPSTER, -2656.5938, 71.5625, 3.9844},
		{TYPE_DUMPSTER, -2651.2500, 92.4375, 3.9844},
		{TYPE_DUMPSTER, -2649.8125, 52.7500, 3.9844},
		{TYPE_DUMPSTER, -2651.9062, 133.3438, 3.9844},
		{TYPE_DUMPSTER, -2656.7109, 115.3828, 3.9844},
		{TYPE_DUMPSTER, -2657.7734, 135.6016, 3.9844},
		{TYPE_DUMPSTER, 2535.3906, 1942.2500, 10.6094},
		{TYPE_DUMPSTER, 2676.4531, 1665.6875, 10.6094},
		{TYPE_DUMPSTER, 2676.4531, 1705.5703, 10.6094},
		{TYPE_DUMPSTER, 2657.1250, 1942.2500, 10.6094},
		{TYPE_DUMPSTER, 2676.4531, 1825.4062, 10.6094},
		{TYPE_DUMPSTER, 2178.2188, 1418.8438, 10.6250},
		{TYPE_DUMPSTER, 2181.5625, 1418.8438, 10.6250},
		{TYPE_BIN, 2065.7344, 637.5781, 11.2031},
		{TYPE_BIN, 2011.1328, 638.1172, 11.2031},
		{TYPE_DUMPSTER, 1878.6484, 683.7734, 10.6250},
		{TYPE_DUMPSTER, 1881.3828, 683.7734, 10.6250},
		{TYPE_BIN, 1885.4844, 683.7500, 10.5625},
		{TYPE_DUMPSTER, 1969.9453, 693.7422, 10.6250},
		{TYPE_BIN, 1976.6797, 693.7109, 10.5625},
		{TYPE_BIN, 1969.2109, 712.7344, 10.5625},
		{TYPE_DUMPSTER, 1975.6953, 712.7031, 10.6250},
		{TYPE_DUMPSTER, 2006.1953, 706.4531, 11.2500},
		{TYPE_BIN, 2043.4531, 708.3672, 11.1953},
		{TYPE_DUMPSTER, 1884.8359, 722.7031, 10.6250},
		{TYPE_DUMPSTER, 1882.1016, 722.7031, 10.6250},
		{TYPE_BIN, 1877.8828, 722.7344, 10.5625},
		{TYPE_BIN, 2010.3125, 718.0391, 11.1953},
		{TYPE_DUMPSTER, 2009.2812, 786.4297, 11.2500},
		{TYPE_BIN, 2046.0547, 788.3906, 11.1953},
		{TYPE_BIN, 2065.2812, 717.4688, 11.1953},
		{TYPE_BIN, 2071.4609, 788.9609, 11.1953},
		{TYPE_BIN, 2128.2500, 640.0781, 11.2031},
		{TYPE_BIN, 2090.1562, 638.1016, 11.2031},
		{TYPE_DUMPSTER, 2224.1328, 666.4062, 11.2500},
		{TYPE_DUMPSTER, 2086.3672, 706.4531, 11.2500},
		{TYPE_BIN, 2123.2734, 708.4297, 11.1953},
		{TYPE_BIN, 2174.5703, 678.0625, 11.1953},
		{TYPE_BIN, 2180.9531, 668.4141, 11.2031},
		{TYPE_BIN, 2206.4688, 669.0078, 11.2031},
		{TYPE_DUMPSTER, 2210.4766, 679.9453, 11.2500},
		{TYPE_BIN, 2219.0312, 677.5234, 11.1953},
		{TYPE_BIN, 2254.0859, 677.9844, 11.1953},
		{TYPE_BIN, 2261.4688, 668.3828, 11.1953},
		{TYPE_BIN, 2088.5156, 718.0469, 11.1953},
		{TYPE_DUMPSTER, 2087.4219, 786.4297, 11.2500},
		{TYPE_BIN, 2126.7969, 719.9062, 11.1953},
		{TYPE_BIN, 2126.6797, 788.4062, 11.1953},
		{TYPE_BIN, 2180.2188, 748.3828, 11.1953},
		{TYPE_DUMPSTER, 2180.6016, 778.2266, 11.2500},
		{TYPE_BIN, 2186.9219, 748.3828, 11.1953},
		{TYPE_BIN, 2205.6641, 748.9141, 11.1953},
		{TYPE_DUMPSTER, 2222.5234, 746.4219, 11.2500},
		{TYPE_BIN, 2260.3438, 748.4219, 11.1953},
		{TYPE_DUMPSTER, 2364.0781, 666.5703, 11.2500},
		{TYPE_BIN, 2359.7109, 677.4844, 11.1953},
		{TYPE_BIN, 2394.3906, 678.0312, 11.1953},
		{TYPE_DUMPSTER, 2460.6172, 696.5859, 11.2500},
		{TYPE_BIN, 2463.1250, 706.3438, 11.1953},
		{TYPE_BIN, 2463.1250, 707.8203, 11.1953},
		{TYPE_DUMPSTER, 2538.3125, 716.4219, 10.6172},
		{TYPE_DUMPSTER, 2364.0781, 746.4219, 11.2500},
		{TYPE_BIN, 2462.5859, 739.7500, 11.1953},
		{TYPE_DUMPSTER, 2578.8906, 723.9531, 10.6172},
		{TYPE_DUMPSTER, 2615.2578, 716.3984, 10.6172},
		{TYPE_DUMPSTER, 2658.3438, 716.3984, 10.6172},
		{TYPE_BIN, 2821.8750, 858.1875, 10.4844},
		{TYPE_BIN, 2836.9531, 858.1953, 10.4844},
		{TYPE_DUMPSTER, 2879.0859, 858.1562, 10.5391},
		{TYPE_BIN, 2863.4688, 946.0156, 10.4844},
		{TYPE_DUMPSTER, 2879.6484, 945.9688, 10.5391},
		{TYPE_DUMPSTER, 2764.9766, 1437.9766, 10.5547},
		{TYPE_DUMPSTER, 2763.0469, 1443.0781, 10.5547},
		{TYPE_DUMPSTER, 2108.6562, 2650.0625, 10.5938},
		{TYPE_DUMPSTER, 2120.5156, 2667.0859, 10.6172},
		{TYPE_DUMPSTER, 2120.3359, 2669.8984, 10.6172},
		{TYPE_DUMPSTER, 2180.9766, 2747.1484, 10.6172},
		{TYPE_DUMPSTER, 2190.2500, 2792.6016, 10.6172},
		{TYPE_DUMPSTER, 2203.6406, 2808.6719, 10.6172},
		{TYPE_DUMPSTER, 2229.1641, 2812.1562, 10.5938},
		{TYPE_DUMPSTER, 2256.7500, 2527.4922, 10.6172},
		{TYPE_DUMPSTER, 2260.3516, 2563.2500, 10.6172},
		{TYPE_DUMPSTER, 2264.1719, 2563.2500, 10.6172},
		{TYPE_DUMPSTER, 2273.8438, 2784.4531, 10.5703},
		{TYPE_DUMPSTER, 2287.7891, 2784.2891, 10.5703},
		{TYPE_DUMPSTER, 2361.7969, 2793.0156, 10.6172},
		{TYPE_DUMPSTER, 2361.1016, 2783.2188, 10.6172},
		{TYPE_DUMPSTER, 2361.2422, 2781.7656, 10.6250},
		{TYPE_DUMPSTER, 2374.3516, 2759.8750, 10.6328},
		{TYPE_DUMPSTER, 2377.2109, 2759.4453, 10.6172},
		{TYPE_DUMPSTER, 2379.2578, 2759.4062, 10.6328},
		{TYPE_DUMPSTER, 2596.2500, 2045.4141, 10.6172},
		{TYPE_DUMPSTER, 2579.4141, 2081.3516, 10.6172},
		{TYPE_DUMPSTER, 2596.3203, 2053.7578, 10.6172},
		{TYPE_DUMPSTER, 2596.3203, 2072.0000, 10.6172},
		{TYPE_DUMPSTER, 2596.2500, 2077.6953, 10.6172},
		{TYPE_DUMPSTER, 2514.1875, 2316.5938, 10.6250},
		{TYPE_DUMPSTER, 2550.1094, 2245.0234, 10.6172},
		{TYPE_DUMPSTER, 2542.9141, 2317.9609, 10.6328},
		{TYPE_DUMPSTER, 2545.7031, 2317.8594, 10.6250},
		{TYPE_DUMPSTER, 2257.9375, 2298.6797, 10.6250},
		{TYPE_DUMPSTER, 2781.6250, 2544.4375, 10.6172},
		{TYPE_DUMPSTER, 2809.6094, 2581.0000, 10.6172},
		{TYPE_DUMPSTER, 2818.9297, 2590.2969, 10.6250},
		{TYPE_DUMPSTER, 2820.3594, 2592.9375, 10.6172},
		{TYPE_DUMPSTER, 2253.9062, 2336.5156, 10.6172},
		{TYPE_DUMPSTER, 1004.8125, 1068.0703, 10.6250},
		{TYPE_DUMPSTER, 1002.5625, 1068.0703, 10.6250},
		{TYPE_DUMPSTER, 1346.2734, 1064.0781, 10.9297},
		{TYPE_DUMPSTER, 1341.3516, 1064.0781, 10.9297},
		{TYPE_DUMPSTER, 1339.0781, 1064.0781, 10.6250},
		{TYPE_DUMPSTER, 1303.2188, 1102.7188, 10.6250},
		{TYPE_DUMPSTER, 1338.8047, 1164.1562, 10.9297},
		{TYPE_DUMPSTER, 1584.9297, 663.9844, 10.9297},
		{TYPE_DUMPSTER, 1632.0156, 663.9844, 10.9297},
		{TYPE_DUMPSTER, 1634.6797, 663.9844, 10.9297},
		{TYPE_DUMPSTER, 1635.9844, 892.2109, 10.9297},
		{TYPE_DUMPSTER, 1756.5781, 691.1641, 10.9297},
		{TYPE_DUMPSTER, 1756.5781, 688.6250, 10.9297},
		{TYPE_DUMPSTER, 1478.1250, 963.5625, 10.6250},
		{TYPE_DUMPSTER, 1478.1250, 967.0703, 10.6250},
		{TYPE_DUMPSTER, 1518.2500, 971.4609, 10.9297},
		{TYPE_DUMPSTER, 1518.2500, 979.7656, 10.9297},
		{TYPE_DUMPSTER, 1557.6562, 970.5625, 10.6250},
		{TYPE_DUMPSTER, 1557.7422, 968.3125, 10.9297},
		{TYPE_DUMPSTER, 1464.2188, 1081.7422, 10.6250},
		{TYPE_DUMPSTER, 1598.6250, 1060.6562, 10.9297},
		{TYPE_DUMPSTER, 1603.0078, 1060.6562, 10.9297},
		{TYPE_DUMPSTER, 1668.0547, 911.7969, 10.9297},
		{TYPE_DUMPSTER, 1732.7422, 967.8359, 10.9297},
		{TYPE_DUMPSTER, 1745.3594, 1049.3906, 10.9297},
		{TYPE_DUMPSTER, 1680.0547, 1168.2734, 10.9297},
		{TYPE_DUMPSTER, 1680.0547, 1164.1562, 10.9297},
		{TYPE_DUMPSTER, 1694.4141, 1160.8594, 9.8125},
		{TYPE_DUMPSTER, 1680.2734, 1251.8594, 9.9062},
		{TYPE_DUMPSTER, 1734.2578, 1249.0547, 10.9297},
		{TYPE_DUMPSTER, 1947.6875, 2331.5469, 10.5625},
		{TYPE_DUMPSTER, 1980.8438, 2331.5156, 10.5625},
		{TYPE_DUMPSTER, 1427.1797, 1905.2578, 9.9453},
		{TYPE_BIN, 1427.2422, 1891.8828, 9.9219},
		{TYPE_BIN, 1427.2422, 1893.1094, 9.9219},
		{TYPE_BIN, 1427.2422, 1911.9297, 9.9219},
		{TYPE_BIN, 1427.2422, 1910.7031, 9.9219},
		{TYPE_BIN, 1427.2422, 1915.1328, 9.9219},
		{TYPE_BIN, 1430.2031, 1932.2812, 9.9219},
		{TYPE_BIN, 1431.4297, 1932.2812, 9.9219},
		{TYPE_BIN, 1434.6328, 1932.2812, 9.9219},
		{TYPE_BIN, 1446.2656, 1884.8438, 9.9219},
		{TYPE_BIN, 1446.2656, 1888.0547, 9.9219},
		{TYPE_BIN, 1446.2656, 1910.7031, 9.9219},
		{TYPE_BIN, 1446.2656, 1911.9297, 9.9219},
		{TYPE_BIN, 1446.2656, 1915.1328, 9.9219},
		{TYPE_DUMPSTER, 1446.1016, 1917.5938, 9.9453},
		{TYPE_BIN, 1666.5469, 2042.2109, 9.9219},
		{TYPE_BIN, 1666.5469, 2039.0078, 9.9219},
		{TYPE_BIN, 1666.5469, 2037.7812, 9.9219},
		{TYPE_DUMPSTER, 1666.5781, 2034.5312, 9.9453},
		{TYPE_BIN, 1659.1406, 2050.9062, 9.9219},
		{TYPE_BIN, 1659.1406, 2049.1406, 9.9219},
		{TYPE_BIN, 1659.1406, 2046.4688, 9.9219},
		{TYPE_DUMPSTER, 1666.5781, 2056.0000, 9.9453},
		{TYPE_BIN, 1659.1406, 2068.9688, 9.9219},
		{TYPE_BIN, 1659.1406, 2070.7344, 9.9219},
		{TYPE_BIN, 1659.2109, 2086.6094, 9.9219},
		{TYPE_BIN, 1659.2109, 2092.3047, 9.9219},
		{TYPE_DUMPSTER, 1659.1016, 2084.4844, 9.9453},
		{TYPE_BIN, 1666.6562, 2062.5312, 9.9219},
		{TYPE_BIN, 1666.6562, 2064.2969, 9.9219},
		{TYPE_BIN, 1666.6562, 2098.8438, 9.9219},
		{TYPE_BIN, 1666.6562, 2100.6094, 9.9219},
		{TYPE_BIN, 1659.2109, 2116.0156, 9.9219},
		{TYPE_DUMPSTER, 1666.5781, 2109.2188, 9.9453},
		{TYPE_BIN, 1659.2109, 2121.7031, 9.9219},
		{TYPE_DUMPSTER, 1659.1016, 2124.2266, 9.9453},
		{TYPE_BIN, 1666.9609, 2128.7344, 9.9219},
		{TYPE_BIN, 1666.9609, 2134.4219, 9.9219},
		{TYPE_BIN, 1659.0078, 2144.4297, 9.9219},
		{TYPE_BIN, 1659.0078, 2142.6641, 9.9219},
		{TYPE_DUMPSTER, 1659.1016, 2159.1094, 9.9453},
		{TYPE_DUMPSTER, 1659.1016, 2161.6016, 9.9453},
		{TYPE_BIN, 1047.7969, 1991.3906, 9.9531},
		{TYPE_BIN, 1047.7969, 1990.1641, 9.9531},
		{TYPE_BIN, 1047.7969, 1994.5938, 9.9531},
		{TYPE_BIN, 1066.8203, 1991.3906, 9.9531},
		{TYPE_BIN, 1066.8203, 1994.5938, 9.9531},
		{TYPE_BIN, 1066.8203, 1990.1641, 9.9531},
		{TYPE_DUMPSTER, 1066.6562, 1997.0547, 9.9453},
		{TYPE_BIN, 1066.4766, 2017.5078, 9.9531},
		{TYPE_BIN, 1048.5000, 2012.0391, 9.9531},
		{TYPE_BIN, 1066.4766, 2018.7344, 9.9531},
		{TYPE_BIN, 1066.4766, 2021.9375, 9.9531},
		{TYPE_DUMPSTER, 1048.3359, 2017.7031, 9.9453},
		{TYPE_BIN, 1567.8203, 2096.8047, 9.9219},
		{TYPE_BIN, 1567.8203, 2095.5781, 9.9219},
		{TYPE_BIN, 1567.8203, 2133.4844, 9.9219},
		{TYPE_BIN, 1567.8203, 2134.7109, 9.9219},
		{TYPE_BIN, 1567.8203, 2157.5469, 9.9219},
		{TYPE_BIN, 1567.8203, 2156.3203, 9.9219},
		{TYPE_BIN, 1567.8203, 2160.7500, 9.9219},
		{TYPE_DUMPSTER, 1577.5859, 2161.1484, 10.2109},
		{TYPE_DUMPSTER, 1577.5859, 2119.1016, 10.2109},
		{TYPE_DUMPSTER, 1577.5859, 2091.5391, 10.2109},
		{TYPE_BIN, 1577.7578, 2158.6875, 9.9219},
		{TYPE_BIN, 1577.7578, 2155.4844, 9.9219},
		{TYPE_BIN, 1577.7578, 2154.2578, 9.9219},
		{TYPE_BIN, 1577.7578, 2113.4375, 9.9219},
		{TYPE_BIN, 1577.7578, 2112.2109, 9.9219}
	};

new
	FactoryData[][e_factorydata] = {
	// location, x, y, z
	    {"Los Santos", 2432.553710, -2115.611328, 13.546875},
		{"Las Venturas", 981.711303, 2168.738769, 10.820312},
		{"San Fierro", -1044.592895, -606.348876, 32.007812}
	};

new
	bool: HasTrash[MAX_PLAYERS],
	TrashCP[MAX_PLAYERS] = {-1, ...},
    FactoryIcons[MAX_PLAYERS][sizeof(FactoryData)],
    PlayerText: CapacityText[MAX_PLAYERS],
    PlayerBar: CapacityBar[MAX_PLAYERS];

new
	LoadedTrash[MAX_VEHICLES];

new Flasher[MAX_VEHICLES] = 0;

new FlasherState[MAX_VEHICLES];
new Beanbag[MAX_VEHICLES];
new CarInterior[MAX_VEHICLES];
// ======================== ODUNCULUK ==============================
#define     MAX_TREES       (100)   // tree limit
#define     MAX_BUYERS      (5)    // log buyer limit

#define     CUTTING_TIME    (8)		// required seconds to cut a tree down (Default: 8)
//#define     LOG_LIMIT     	(10)    // how many logs a player can load to a bobcat (if you change this, don't forget to modify LogAttachOffsets array) (Default: 10)
#define     ATTACH_INDEX    (4)     // for setplayerattachedobject (Default: 7)
#define     TREE_RESPAWN    (180)   // required seconds to respawn a tree (Default: 300)
//#define     LOG_LIFETIME	(120)   // life time of a dropped log, in seconds (Default: 120)
#define     LOG_PRICE       (12)    // price of a log (Default: 50)
#define     CSAW_PRICE      (50)  	// price of a chainsaw (Default: 500)

enum    E_TREE
{
	// loaded from db
	Float: treeX,
	Float: treeY,
	Float: treeZ,
	Float: treeRX,
	Float: treeRY,
	Float: treeRZ,
	// temp
	treeLogs,
	treeSeconds,
	bool: treeGettingCut,
	treeObjID,
	Text3D: treeLabel,
	treeTimer
}

enum    E_BUYER
{
	// loaded from db
	buyerSkin,
	Float: buyerX,
	Float: buyerY,
	Float: buyerZ,
	Float: buyerA,
	// temp
	buyerActorID,
	Text3D: buyerLabel
}

new
	TreeData[MAX_TREES][E_TREE],
	BuyerData[MAX_BUYERS][E_BUYER];

new
	Iterator: Trees<MAX_TREES>,
	Iterator: Buyers<MAX_BUYERS>;

new
	CuttingTreeID[MAX_PLAYERS] = {-1, ...},
	CuttingTimer[MAX_PLAYERS] = {-1, ...},
	PlayerBar: CuttingBar[MAX_PLAYERS] = {INVALID_PLAYER_BAR_ID, ...},
	bool: CarryingLog[MAX_PLAYERS],
	EditingTreeID[MAX_PLAYERS] = {-1, ...};

new
	DB: ScriptDBHandle;

new
	DBStatement: LoadTrees,
	DBStatement: AddTree,
	DBStatement: UpdateTree,
	DBStatement: RemoveTree;

new
	DBStatement: LoadBuyers,
	DBStatement: AddBuyer,
	DBStatement: UpdateBuyer,
	DBStatement: RemoveBuyer;

// ========================= MADENCI ==============================
#define     MAX_ORE_TYPES   (6)
#define     MAX_VEINS       (128)
#define     MAX_ORES        (256)

#define     UPDATE_RATE     (200)		// update rate of mining in miliseconds, higher the value longer the mining time (default: 200)
#define     BAR_MAX         (15.0)		// maximum value of the progress bar, higher the value longer the mining time (default: 15.0)
#define     VEHICLE_LIMIT   (8)			// how many ores someone can store in their vehicle (default: 8)
//#define     ATTACH_INDEX    (3)			// setplayerattachedobject index

#define     REGEN_TIME    	(45)        // how many minutes before respawning veins (default: 45)
#define     ORE_TIME        (5)         // how many minutes before destroying a dropped ore (default: 5)

enum    e_ores
{
	Name[16],
	Color,
	Float: Modifier,
	Amount, // how many of this ore spawns in a vein
	Value, // value of this ore
	Rate // successful mining rate
}

enum    e_veins
{
	Type,
	Amount,
	bool: BeingMined,
	VeinObject,
	Text3D: VeinLabel,
	bool: VeinExists
}

enum    e_dialogs
{
    DIALOG_ORE_INFO = 18740,
    DIALOG_ORE_TAKE
}

enum    e_droppedores
{
	Type,
	OreTimer,
	OreObject,
	Text3D: OreLabel,
	bool: OreExists
}

enum    e_droppoints
{
	Location[32],
	Float: PointX,
	Float: PointY,
	Float: PointZ,
	PointCP,
	Text3D: PointLabel
}

new
	OreData[MAX_ORE_TYPES][e_ores] = {
	// name, color, modifier, spawn amount, value, mining rate
	    {"Bakir", 0xB87333FF, 0.60, 8, 130, 65},
	    {"Ametist", 0x9B59B6FF, 0.50, 6, 140, 58},
	    {"Zumrut", 0x2ECC71FF, 0.40, 4, 150, 50},
		{"Yakut", 0xD10056FF, 0.30, 3, 160, 55},
		{"Safir", 0x0F52BAFF, 0.20, 3, 180, 45},
        {"Altin", 0xFFD700FF, 0.15, 4, 200, 40}
	};

new
	VeinData[MAX_VEINS][e_veins],
	DroppedOres[MAX_ORES][e_droppedores];

new
	MiningVein[MAX_PLAYERS] = {-1, ...},
	MiningTimer[MAX_PLAYERS] = {-1, ...},
	CarryingOre[MAX_PLAYERS] = {-1, ...},
	LoadingPoint[MAX_PLAYERS] = {-1, ...},
	PlayerBar: MiningBar[MAX_PLAYERS] = {INVALID_PLAYER_BAR_ID, ...};

new
	LoadedOres[MAX_VEHICLES][MAX_ORE_TYPES];

new
	DropPoints[][e_droppoints] = {
	// location, x, y, z
	    {"Las Venturas", 2489.462646, 2773.271240, 10.789896},
		{"San Fierro", -1823.034057, 2.284350, 15.117187},
		{"Los Santos", 2660.815673, -1433.876098, 30.050680}
	};

new
    PointIcons[MAX_PLAYERS][sizeof(DropPoints)];
// ============================PET SISTEMI =====================================
#define MAX_FURNITURE (500) // Maksimum mobilya.
#define DIALOG_PETLERIM 3300
#define DIALOG_PET 3301
#define DIALOG_PET_IYILESTIR 3556
#define MAX_PET 500
#define MAX_HOOD 50
#define MAX_TALEP 80
new Iterator:Petler<MAX_PET>;
new Iterator:Mobilyalar[MAX_EV]<MAX_FURNITURE>;
enum PetDegisken
{
	petID,
	NPCID,
	petAdi[24],
	petSahip,
	petTuru,
	petCinsiyet,
	petRenk,
	petAclik,
	Float:petSaglik,
	petTakip,
	petYarali,
	bool:petDurum,
	petSaldir,
	Text3D:petText,
	petAcikma,

}
new PetBilgi[MAX_PET][PetDegisken];
new PetKontrol[MAX_PLAYERS];
new Float:LastPos[MAX_PLAYERS][3];
enum talepler
{
	bool:tExists,
	tIcerik[128],
	tGonderen,
	tIlgilenen
}
new Talep[MAX_TALEP][talepler];
#define MAX_YARDIM_KOMUTLARI (300)
enum komutEnum
{
	komutVarmi,
	komutAd[24],
	komutTanim[256],
	komutKatagori,
	komutOlusum
};
new Komutlar[MAX_YARDIM_KOMUTLARI][komutEnum];

#define MAX_JAMMERS (25)

enum jammerData {
	jammerExists,
	jammerObject,
	Float:jammerPos[3],
	Text3D:jammerText3D,
	jammerMenzil
};

new JammerData[MAX_JAMMERS][jammerData];
enum hoodlar
{
	hID,
	bool:hExists,
	Float:hPos[3],
	hBirlik,
	hZone,
	hMapIcon,
	hPickup,
	Text3D:hLabel
}
new Hood[MAX_HOOD][hoodlar];
// ==================== PET SISTEMI ================================
#define BILDIRIM_DIALOG 9998
#define BILDIRIM_DIALOG2 9999
#define BALIK_TUTMA_ORANI 25
#define BIRLIK_CETE 1
#define BIRLIK_MAFYA 2
#define BIRLIK_HABER 3
#define BIRLIK_LEGAL 4
#define BIRLIK_LSPD 5
#define BIRLIK_LSMD 6
#define BIRLIK_FBI 7
#define BIRLIK_GOV 8
#define ARAMA_ARIYOR 1
#define ARAMA_ARANIYOR 2
#define ARAMA_KONUSUYOR 3
#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

native IsValidVehicle(vehicleid);
// =========================== UYUÞTURUCU SÝSTEMÝ ================================
enum    _:E_DIALOG
{
	DIALOG_DRUG_STATS = 8620,
	DIALOG_CONFIRM_RESET,
	DIALOG_DRUG_DEALER,
	DIALOG_DRUG_DEALER_BUY_SEEDS,
	DIALOG_DRUG_DEALER_BUY_DRUGS,
	DIALOG_DRUG_DEALER_SELL,
	DIALOG_DRUG_OFFER
}
enum    E_PLANT
{
	plantedBy,
	Float: plantX,
	Float: plantY,
	Float: plantZ,
	plantGrowth,
	plantObj,
	plantTimer,
	Text3D: plantLabel,
	bool: gotLeaves
}
new
	PlantData[MAX_PLANTS][E_PLANT],
	Iterator: Plants<MAX_PLANTS>;
enum    E_PLAYER
{
	// saved
	Drugs,
	Seeds,
	TotalUsed,
	TotalPlanted,
	TotalHarvestedPlants,
	TotalHarvestedGrams,
	TotalGiven,
	TotalReceived,
	TotalBought,
	TotalBoughtPrice,
	TotalSold,
	TotalSoldPrice,
	// temp
	DrugsCooldown,
	DealerID,
	DrugsOfferedBy,
	DrugsOfferedPrice,
	DrugsOfferedGram,
	DrugsOfferCooldown
}

enum    E_DEALER
{
	// loaded from db
	dealerDrugs,
	dealerSkin,
	Float: dealerX,
	Float: dealerY,
	Float: dealerZ,
	Float: dealerA,
	dealerVw,
	// temp
	dealerActorID,
	Text3D: dealerLabel
}

new
	PlayerDrugData[MAX_PLAYERS][E_PLAYER],
	RegenTimer[MAX_PLAYERS] = {-1, ...},
	EffectTimer[MAX_PLAYERS] = {-1, ...};

new
	DealerData[MAX_DEALERS][E_DEALER],
	Iterator: Dealers<MAX_DEALERS>;

new
	DB: DrugDB;

new
	DBStatement: LoadPlayer,
	DBStatement: InsertPlayer,
	DBStatement: SavePlayer;

new
	DBStatement: LoadDealers,
	DBStatement: AddDealer,
	DBStatement: UpdateDealer,
	DBStatement: RemoveDealer,
	DBStatement: UpdateDealerDrugs;


new DB:ArsaDB;
new DBStatement: LoadArsa;
new DBStatement: AddArsa;
new DBStatement: UpdateArsa;
new DBStatement: RemoveArsa;
// ===============================================================================

#define MAX_GRAFFITI_POINTS (50)
enum graffitiData {
    graffitiID,
    graffitiExists,
    Float:graffitiPos[6],
    graffitiObject,
    graffitiFont[64],
    graffitiText[64]
};
new GraffitiData[MAX_GRAFFITI_POINTS][graffitiData];
enum ticketData {
    ticketID,
    ticketExists,
    ticketFee,
    ticketMemur[24],
    ticketDate[36],
    ticketReason[64]
};
new TicketData[MAX_PLAYERS][MAX_PLAYER_TICKETS][ticketData];
enum droppedWeapons
{
	droppedID,
	bool:droppedExists,
	droppedPlayer,
	Float:droppedPos[3],
	droppedWeapon,
	droppedAmmo,
	droppedInt,
	droppedVw,
	droppedObject,
	Text3D:droppedText
}
new DroppedWeapon[MAX_DROPPED_WEAPONS][droppedWeapons];
enum cadirlar
{
	bool:cadirExists,
	cadirSahip,
	Float:cadirPos[3],
	cadirObject,
	Text3D:cadirText
}
new CadirData[MAX_CADIR][cadirlar];
enum reklam
{
	reklamExists,
	ajansID,
	reklamIletisim,
	reklamIcerik[128],
	reklamGonderen,
	reklamUcret

}
new Reklamlar[MAX_REKLAM][reklam];
new Text:Karanlik;
new Text:Logo[9];
new Text:GirisTD;
new PlayerText:MesafeTD[MAX_PLAYERS];
new PlayerText: FuelText[MAX_PLAYERS];
new PlayerText:OnayliHoodGirisTD[MAX_PLAYERS][3];
enum pData
{
 	pID,
 	pYas,
 	pCinsiyet,
 	pDogum[30],
 	pTen,
 	pSkin,
 	pCikisInt,
 	Float:pCikisPos[3],
 	pCikisVw,
 	pAdmin,
 	pHelper,
 	pCash,
 	pAdminName[24],
 	pAdminDuty,
 	pHelperDuty,
	pEhliyet,
	pHouse,
	pFaction,
	pFactionRutbe,
	pFactionDivizyon,
	pBalikID[10],
	pBalikGram[10],
	pIsyeri,
	pGarage,
	pSu,
	pASlot[10],
	pTSlot[10],
	pABone[10],
	pARenk[10],
	Float:pHealth,
	Float:pArmour,
	pOnDuty,
	pOnDutySkin,
	pSilahlar[13],
	pMermiler[13],
	pAranma,
	pHapis,
	pHapisSure,
	pHapisSebep[50],
	pHapiseAtan[24],
	pTelefon,
	pTarife,
	pTarifeKalan[3],
	pTarifeSure,
	pBitcoin,
	pBoombox,
	pRadyo,
	pFrekans,
	pLevel,
	pEXP,
	pMaasSure,
	pOynamaSaati,
	pMaas,
	pDinle,
	pEsyalar[15],
	pTohumlar[3],
	pBagimlilik,
	pSilahAlmaSayisi,
	pSilahAlma,
	pTasimacilikSeviye,
	pTasimacilikSefer,
	pBakiye,
	pEXPBoost,
	pBalikOrani,
	pVip,
	pVipSure,
	pDovusStili,
	pMaskeHakki,
	pMaskeID,
	pAyarlar[15],
	pPartner,
	pSerial[75],
	pHediye,
	pHediyeSaat,
	pYoutuber,
	bool:pYoutuberTag,
	pOldurme,
	pOlme,
	pTalepSayi,
	pCK,
	//
	pMuted,
	pYatKontrol[5],
	pKelepceKir,
	pBeanbag,
	bool:pSoyun,
	pTaxiCalled,
	pTaksiKabul,
	bool:pTaxiDuty,
	Float:pTaksiUcret,
	pTaxiPlayer,
	pShootedBody,
	pLastShot,
	pPartnerTeklif,
	bool:pStand,
	pStandObject,
	Text3D:pStandText,
	bool:pHUD,
	pFriskOffer,
	pShakeOffer,
	pShakeType,
	bool:pGOD,
	pJetpack,
	pNameChange[24],
	pSpecID,
	pGraffiti,
	pGraffitiYazi[64],
	bool:pMaske,
	pVipRenk,
	pBagimlilikSayac[2],
	pSilahOffer,
	pSilahOfferID,
	pSilahOfferFiyat,
	pCadir,
	bool:pKampAtesi,
	pKampAtesiObject,
	bool:pMangalKuruldu,
	pMangalObject[2],
	pYemekPisiriliyor,
	pPisirilenYemek,
	Text3D:MangalText,
	yayinKonuk,
	pMuzikKutusu,
	pGPS,
	pTelefonAyar[6],
	pIhbar[128],
	pIhbarSayac,
	pAramada,
	pCallLine,
	pKonusmaSure,
	bool:pTopallama,
	pTopallamaSayac,
	pIyilestiriyor,
	pIyilestirmeSure,
	pBaygin,
	pBayginSure,
	bool:pLoopAnim,
	pDestek,
	pCCTV,
	pSoklandi,
	pYereYatirildi,
	pKelepce,
	pDragged,
	pDraggedBy,
	pDragTimer,
	pTazer,
	pLastCar,
	pEditGate,
	pEditType,
	pSelectType,
	pSelectFurniture,
	pEditFurniture,
	pMateryalDuzenle,
	pMateryalSlot,
	pFactionDavet,
	pFactionDavetEden,
	pFactionEdit,
	pSelectedSlot,
	pDrinking,
	pMekanik,
	pMekanikSure,
	pDuzkontak,
	pKilitkir,
	PlayerBar:pDrinkBar
}

new AcilDurum = 0;


/*============================================================================*/

#define MAX_GISE                                                           (100)

#define GISE_KAPALI                                                          (1)
#define GISE_ACIK                                                            (2)

enum e_GISE
{
	gs_ID,
	bool:gs_Exists,
	gs_Obje,
	gs_GateObje,
	gs_Durum,
	Float:gs_GateBar[6],
	Float:gs_Kapali[6],
	Float:gs_Acik[6],
	Text3D:gs_id,
	Text3D:gs_inf
};

new Gise[MAX_GISE][e_GISE];

/*============================================================================*/

new PlayerData[MAX_PLAYERS][pData];
enum hasarData {
	bool:hasarVarmi,
	hasarBolge,
	Float:hasarDeger,
	hasarVeren,
	hasarSilah
};
new Hasarlar[MAX_PLAYERS][MAX_HASAR][hasarData];
enum entranceData {
    entranceID,
    entranceExists,
    entranceName[32],
    entrancePass[32],
    entranceIcon,
    entranceLocked,
    entranceInteriorVw,
    entranceBaglanti,
    Float:entrancePos[4],
    Float:entranceInt[4],
    entranceInterior,
    entranceExterior,
    entranceExteriorVW,
    entrancePickup,
    entranceMapIcon,
    Text3D:entranceText3D
};
new EntranceData[MAX_ENTRANCES][entranceData];
enum AracBilgi
{
	aracID,
	aracExists,
	aracModel,
	aracSahip,
	aracDisplay,
	Float:aracPos[4],
	aracInterior,
	aracWorld,
	aracRenkler[2],
	aracPaintjob,
	aracZirh,
	aracKilit,
	aracVergi,
	aracVergiSure,
	aracMods[14],
	aracGaraj,
	TaksiPlaka,
	aracBaglandi,
	aracBaglandiCeza,
	aracTicket,
	aracTicketTime,
	aracElKonuldu,
	aracFaction,
	aracFactionType,
	aracKira,
	aracKiralayan,
	aracTip,
	aracSatilik,
	aracPlaka[24],
	aracKiraZaman,
	aracSilahlar[5],
	aracMermiler[5],
	aracFiyat,
	aracUyusturucu,
	Float:aracKM,
	Float:aracBenzin,
	aracVehicle,
	Text3D:aracLabel,
	bool:aracCamlar,
	bool:aracSirenAcik,
	SirenObject,
	bool:aracRadar,
	TaksiObje,
	Taksimetre,
	OturumKazanci,
	aracSeviye,
	aracSigorta,
	DuzKontak,
	KilitKir,
	KancaIzin
}
new AracInfo[MAX_ARAC][AracBilgi];
enum cruiser
{
	Silahlar[5],
	Mermiler[5],
	AgriKesici,
	CelikYelek
}
new PolisAraci[MAX_VEHICLES][cruiser];
new RadyoLink[MAX_VEHICLES][128];
enum gateData {
	gateID,
	gateExists,
	gateOpened,
	gateModel,
	Float:gateSpeed,
	Float:gateRadius,
	gateTime,
	Float:gatePos[6],
	gateInterior,
	gateOwner,
	gateBirlik,
	gateWorld,
	Float:gateMove[6],
	gateLinkID,
	gateFaction,
	gatePass[32],
	gateTimer,
	gateObject
};
new GateData[MAX_GATES][gateData];
enum dealershipCars {
	vehID,
	vehModel,
	vehPrice
};
enum arrestPoints {
	arrestID,
	arrestExists,
	Float:arrestPos[3],
	arrestInterior,
	arrestWorld,
	Text3D:arrestText3D,
	arrestPickup
};
new ArrestData[MAX_ARREST_POINTS][arrestPoints];

enum E_CCTV_INFO
{
	ID,

	cctv_Name[30],
	Float: cctv_X,
	Float: cctv_Y,
	Float: cctv_Z,

	Float: cctv_rotX,
	Float: cctv_rotY,
	Float: cctv_rotZ,

	cctv_VW,
	cctv_Interior,
	cctvBildirim,
	cctv_Object
};
new CCTVInfo[MAX_CCTV][E_CCTV_INFO];
enum Lokasyonlar
{
	ID,
	bool:Exists,
	lokasyonAd[30],
	Float:lokasyonPos[3],
}
new Lokasyon[MAX_LOKASYON][Lokasyonlar];
enum boomboxData {
	boomboxPlaced,
	Float:boomboxPos[3],
	boomboxInterior,
	boomboxWorld,
	boomboxObject,
	boomboxURL[128 char],
	Text3D:boomboxText3D
};
new BoomboxData[MAX_PLAYERS][boomboxData];

enum garajlar
{
	gID,
	bool:gExists,
	gKilit,
	gSifre[30],
	gBirlik,
	gSahip,
	Float:gPos[3],
	gParkDurum,
	gVw,
	gInterior,
	gTip[20],
	gAracLimit,
	gPickup,
	Text3D:gText,
	gMapIcon,
}
new GarageData[MAX_GARAGE][garajlar];
// -------- QUIZ Sistemi -------------
#define     MAX_QUIZ  (15)
new
	Quiz[MAX_QUIZ][1024],
	Siklar[MAX_QUIZ][1024],
	Cevaplar[MAX_QUIZ];

new
	SoruID[MAX_PLAYERS] = {-1, ...},
	SoruSoruldu[MAX_PLAYERS][MAX_QUIZ],
	YanlisCevap[MAX_PLAYERS],
	CevaplananSoru[MAX_PLAYERS],
	SonSoruID;
// -----------------------------------

new const g_aWeaponSlots[] = {
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 8, 8, 8, 0, 0, 0, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 4, 6, 6, 7, 7, 7, 7, 8, 12, 9, 9, 9, 11, 11, 11
};

enum  gbData
{
	Float:minX,
	Float:minY,
	Float:maxX,
	Float:maxY,
	Zone,
	Rectangle,
};

new GuvenliBolge[][gbData] = {
{1421.875,-1730.46875, 1589.84375, -1593.75},
{1960.9375, -1832.03125, 2101.5625, -1757.8125},
{2126.953125, -2708.984375, 2238.28125, -2492.1875},
{1091.796875,-2082.03125, 1291.015625, -1984.375},
{1060.546875, -1574.21875, 1181.640625, -1414.0625}
};
new DealershipCars[MAX_ISYERI][MAX_DEALERSHIP_CARS][dealershipCars];
	enum e_ZoneData
	{
     	e_ZoneName[32 char],
     	Float:e_ZoneArea[6]
	};
	new const g_arrZoneData[][e_ZoneData] =
	{
		{!"The Big Ear", 	              {-410.00, 1403.30, -3.00, -137.90, 1681.20, 200.00}},
		{!"Aldea Malvada",                {-1372.10, 2498.50, 0.00, -1277.50, 2615.30, 200.00}},
		{!"Angel Pine",                   {-2324.90, -2584.20, -6.10, -1964.20, -2212.10, 200.00}},
		{!"Arco del Oeste",               {-901.10, 2221.80, 0.00, -592.00, 2571.90, 200.00}},
		{!"Avispa Country Club",          {-2646.40, -355.40, 0.00, -2270.00, -222.50, 200.00}},
		{!"Avispa Country Club",          {-2831.80, -430.20, -6.10, -2646.40, -222.50, 200.00}},
		{!"Avispa Country Club",          {-2361.50, -417.10, 0.00, -2270.00, -355.40, 200.00}},
		{!"Avispa Country Club",          {-2667.80, -302.10, -28.80, -2646.40, -262.30, 71.10}},
		{!"Avispa Country Club",          {-2470.00, -355.40, 0.00, -2270.00, -318.40, 46.10}},
		{!"Avispa Country Club",          {-2550.00, -355.40, 0.00, -2470.00, -318.40, 39.70}},
		{!"Back o Beyond",                {-1166.90, -2641.10, 0.00, -321.70, -1856.00, 200.00}},
		{!"Battery Point",                {-2741.00, 1268.40, -4.50, -2533.00, 1490.40, 200.00}},
		{!"Bayside",                      {-2741.00, 2175.10, 0.00, -2353.10, 2722.70, 200.00}},
		{!"Bayside Marina",               {-2353.10, 2275.70, 0.00, -2153.10, 2475.70, 200.00}},
		{!"Beacon Hill",                  {-399.60, -1075.50, -1.40, -319.00, -977.50, 198.50}},
		{!"Blackfield",                   {964.30, 1203.20, -89.00, 1197.30, 1403.20, 110.90}},
		{!"Blackfield",                   {964.30, 1403.20, -89.00, 1197.30, 1726.20, 110.90}},
		{!"Blackfield Chapel",            {1375.60, 596.30, -89.00, 1558.00, 823.20, 110.90}},
		{!"Blackfield Chapel",            {1325.60, 596.30, -89.00, 1375.60, 795.00, 110.90}},
		{!"Blackfield Intersection",      {1197.30, 1044.60, -89.00, 1277.00, 1163.30, 110.90}},
		{!"Blackfield Intersection",      {1166.50, 795.00, -89.00, 1375.60, 1044.60, 110.90}},
		{!"Blackfield Intersection",      {1277.00, 1044.60, -89.00, 1315.30, 1087.60, 110.90}},
		{!"Blackfield Intersection",      {1375.60, 823.20, -89.00, 1457.30, 919.40, 110.90}},
		{!"Blueberry",                    {104.50, -220.10, 2.30, 349.60, 152.20, 200.00}},
		{!"Blueberry",                    {19.60, -404.10, 3.80, 349.60, -220.10, 200.00}},
		{!"Blueberry Acres",              {-319.60, -220.10, 0.00, 104.50, 293.30, 200.00}},
		{!"Caligula's Palace",            {2087.30, 1543.20, -89.00, 2437.30, 1703.20, 110.90}},
		{!"Caligula's Palace",            {2137.40, 1703.20, -89.00, 2437.30, 1783.20, 110.90}},
		{!"Calton Heights",               {-2274.10, 744.10, -6.10, -1982.30, 1358.90, 200.00}},
		{!"Chinatown",                    {-2274.10, 578.30, -7.60, -2078.60, 744.10, 200.00}},
		{!"City Hall",                    {-2867.80, 277.40, -9.10, -2593.40, 458.40, 200.00}},
		{!"Come-A-Lot",                   {2087.30, 943.20, -89.00, 2623.10, 1203.20, 110.90}},
		{!"Commerce",                     {1323.90, -1842.20, -89.00, 1701.90, -1722.20, 110.90}},
		{!"Commerce",                     {1323.90, -1722.20, -89.00, 1440.90, -1577.50, 110.90}},
		{!"Commerce",                     {1370.80, -1577.50, -89.00, 1463.90, -1384.90, 110.90}},
		{!"Commerce",                     {1463.90, -1577.50, -89.00, 1667.90, -1430.80, 110.90}},
		{!"Commerce",                     {1583.50, -1722.20, -89.00, 1758.90, -1577.50, 110.90}},
		{!"Commerce",                     {1667.90, -1577.50, -89.00, 1812.60, -1430.80, 110.90}},
		{!"Conference Center",            {1046.10, -1804.20, -89.00, 1323.90, -1722.20, 110.90}},
		{!"Conference Center",            {1073.20, -1842.20, -89.00, 1323.90, -1804.20, 110.90}},
		{!"Cranberry Station",            {-2007.80, 56.30, 0.00, -1922.00, 224.70, 100.00}},
		{!"Creek",                        {2749.90, 1937.20, -89.00, 2921.60, 2669.70, 110.90}},
		{!"Dillimore",                    {580.70, -674.80, -9.50, 861.00, -404.70, 200.00}},
		{!"Doherty",                      {-2270.00, -324.10, -0.00, -1794.90, -222.50, 200.00}},
		{!"Doherty",                      {-2173.00, -222.50, -0.00, -1794.90, 265.20, 200.00}},
		{!"Downtown",                     {-1982.30, 744.10, -6.10, -1871.70, 1274.20, 200.00}},
		{!"Downtown",                     {-1871.70, 1176.40, -4.50, -1620.30, 1274.20, 200.00}},
		{!"Downtown",                     {-1700.00, 744.20, -6.10, -1580.00, 1176.50, 200.00}},
		{!"Downtown",                     {-1580.00, 744.20, -6.10, -1499.80, 1025.90, 200.00}},
		{!"Downtown",                     {-2078.60, 578.30, -7.60, -1499.80, 744.20, 200.00}},
		{!"Downtown",                     {-1993.20, 265.20, -9.10, -1794.90, 578.30, 200.00}},
		{!"Downtown Los Santos",          {1463.90, -1430.80, -89.00, 1724.70, -1290.80, 110.90}},
		{!"Downtown Los Santos",          {1724.70, -1430.80, -89.00, 1812.60, -1250.90, 110.90}},
		{!"Downtown Los Santos",          {1463.90, -1290.80, -89.00, 1724.70, -1150.80, 110.90}},
		{!"Downtown Los Santos",          {1370.80, -1384.90, -89.00, 1463.90, -1170.80, 110.90}},
		{!"Downtown Los Santos",          {1724.70, -1250.90, -89.00, 1812.60, -1150.80, 110.90}},
		{!"Downtown Los Santos",          {1370.80, -1170.80, -89.00, 1463.90, -1130.80, 110.90}},
		{!"Downtown Los Santos",          {1378.30, -1130.80, -89.00, 1463.90, -1026.30, 110.90}},
		{!"Downtown Los Santos",          {1391.00, -1026.30, -89.00, 1463.90, -926.90, 110.90}},
		{!"Downtown Los Santos",          {1507.50, -1385.20, 110.90, 1582.50, -1325.30, 335.90}},
		{!"East Beach",                   {2632.80, -1852.80, -89.00, 2959.30, -1668.10, 110.90}},
		{!"East Beach",                   {2632.80, -1668.10, -89.00, 2747.70, -1393.40, 110.90}},
		{!"East Beach",                   {2747.70, -1668.10, -89.00, 2959.30, -1498.60, 110.90}},
		{!"East Beach",                   {2747.70, -1498.60, -89.00, 2959.30, -1120.00, 110.90}},
		{!"East Los Santos",              {2421.00, -1628.50, -89.00, 2632.80, -1454.30, 110.90}},
		{!"East Los Santos",              {2222.50, -1628.50, -89.00, 2421.00, -1494.00, 110.90}},
		{!"East Los Santos",              {2266.20, -1494.00, -89.00, 2381.60, -1372.00, 110.90}},
		{!"East Los Santos",              {2381.60, -1494.00, -89.00, 2421.00, -1454.30, 110.90}},
		{!"East Los Santos",              {2281.40, -1372.00, -89.00, 2381.60, -1135.00, 110.90}},
		{!"East Los Santos",              {2381.60, -1454.30, -89.00, 2462.10, -1135.00, 110.90}},
		{!"East Los Santos",              {2462.10, -1454.30, -89.00, 2581.70, -1135.00, 110.90}},
		{!"Easter Basin",                 {-1794.90, 249.90, -9.10, -1242.90, 578.30, 200.00}},
		{!"Easter Basin",                 {-1794.90, -50.00, -0.00, -1499.80, 249.90, 200.00}},
		{!"Easter Bay Airport",           {-1499.80, -50.00, -0.00, -1242.90, 249.90, 200.00}},
		{!"Easter Bay Airport",           {-1794.90, -730.10, -3.00, -1213.90, -50.00, 200.00}},
		{!"Easter Bay Airport",           {-1213.90, -730.10, 0.00, -1132.80, -50.00, 200.00}},
		{!"Easter Bay Airport",           {-1242.90, -50.00, 0.00, -1213.90, 578.30, 200.00}},
		{!"Easter Bay Airport",           {-1213.90, -50.00, -4.50, -947.90, 578.30, 200.00}},
		{!"Easter Bay Airport",           {-1315.40, -405.30, 15.40, -1264.40, -209.50, 25.40}},
		{!"Easter Bay Airport",           {-1354.30, -287.30, 15.40, -1315.40, -209.50, 25.40}},
		{!"Easter Bay Airport",           {-1490.30, -209.50, 15.40, -1264.40, -148.30, 25.40}},
		{!"Easter Bay Chemicals",         {-1132.80, -768.00, 0.00, -956.40, -578.10, 200.00}},
		{!"Easter Bay Chemicals",         {-1132.80, -787.30, 0.00, -956.40, -768.00, 200.00}},
		{!"El Castillo del Diablo",       {-464.50, 2217.60, 0.00, -208.50, 2580.30, 200.00}},
		{!"El Castillo del Diablo",       {-208.50, 2123.00, -7.60, 114.00, 2337.10, 200.00}},
		{!"El Castillo del Diablo",       {-208.50, 2337.10, 0.00, 8.40, 2487.10, 200.00}},
		{!"El Corona",                    {1812.60, -2179.20, -89.00, 1970.60, -1852.80, 110.90}},
		{!"El Corona",                    {1692.60, -2179.20, -89.00, 1812.60, -1842.20, 110.90}},
		{!"El Quebrados",                 {-1645.20, 2498.50, 0.00, -1372.10, 2777.80, 200.00}},
		{!"Esplanade East",               {-1620.30, 1176.50, -4.50, -1580.00, 1274.20, 200.00}},
		{!"Esplanade East",               {-1580.00, 1025.90, -6.10, -1499.80, 1274.20, 200.00}},
		{!"Esplanade East",               {-1499.80, 578.30, -79.60, -1339.80, 1274.20, 20.30}},
		{!"Esplanade North",              {-2533.00, 1358.90, -4.50, -1996.60, 1501.20, 200.00}},
		{!"Esplanade North",              {-1996.60, 1358.90, -4.50, -1524.20, 1592.50, 200.00}},
		{!"Esplanade North",              {-1982.30, 1274.20, -4.50, -1524.20, 1358.90, 200.00}},
		{!"Fallen Tree",                  {-792.20, -698.50, -5.30, -452.40, -380.00, 200.00}},
		{!"Fallow Bridge",                {434.30, 366.50, 0.00, 603.00, 555.60, 200.00}},
		{!"Fern Ridge",                   {508.10, -139.20, 0.00, 1306.60, 119.50, 200.00}},
		{!"Financial",                    {-1871.70, 744.10, -6.10, -1701.30, 1176.40, 300.00}},
		{!"Fisher's Lagoon",              {1916.90, -233.30, -100.00, 2131.70, 13.80, 200.00}},
		{!"Flint Intersection",           {-187.70, -1596.70, -89.00, 17.00, -1276.60, 110.90}},
		{!"Flint Range",                  {-594.10, -1648.50, 0.00, -187.70, -1276.60, 200.00}},
		{!"Fort Carson",                  {-376.20, 826.30, -3.00, 123.70, 1220.40, 200.00}},
		{!"Foster Valley",                {-2270.00, -430.20, -0.00, -2178.60, -324.10, 200.00}},
		{!"Foster Valley",                {-2178.60, -599.80, -0.00, -1794.90, -324.10, 200.00}},
		{!"Foster Valley",                {-2178.60, -1115.50, 0.00, -1794.90, -599.80, 200.00}},
		{!"Foster Valley",                {-2178.60, -1250.90, 0.00, -1794.90, -1115.50, 200.00}},
		{!"Frederick Bridge",             {2759.20, 296.50, 0.00, 2774.20, 594.70, 200.00}},
		{!"Gant Bridge",                  {-2741.40, 1659.60, -6.10, -2616.40, 2175.10, 200.00}},
		{!"Gant Bridge",                  {-2741.00, 1490.40, -6.10, -2616.40, 1659.60, 200.00}},
		{!"Ganton",                       {2222.50, -1852.80, -89.00, 2632.80, -1722.30, 110.90}},
		{!"Ganton",                       {2222.50, -1722.30, -89.00, 2632.80, -1628.50, 110.90}},
		{!"Garcia",                       {-2411.20, -222.50, -0.00, -2173.00, 265.20, 200.00}},
		{!"Garcia",                       {-2395.10, -222.50, -5.30, -2354.00, -204.70, 200.00}},
		{!"Garver Bridge",                {-1339.80, 828.10, -89.00, -1213.90, 1057.00, 110.90}},
		{!"Garver Bridge",                {-1213.90, 950.00, -89.00, -1087.90, 1178.90, 110.90}},
		{!"Garver Bridge",                {-1499.80, 696.40, -179.60, -1339.80, 925.30, 20.30}},
		{!"Glen Park",                    {1812.60, -1449.60, -89.00, 1996.90, -1350.70, 110.90}},
		{!"Glen Park",                    {1812.60, -1100.80, -89.00, 1994.30, -973.30, 110.90}},
		{!"Glen Park",                    {1812.60, -1350.70, -89.00, 2056.80, -1100.80, 110.90}},
		{!"Green Palms",                  {176.50, 1305.40, -3.00, 338.60, 1520.70, 200.00}},
		{!"Greenglass College",           {964.30, 1044.60, -89.00, 1197.30, 1203.20, 110.90}},
		{!"Greenglass College",           {964.30, 930.80, -89.00, 1166.50, 1044.60, 110.90}},
		{!"Hampton Barns",                {603.00, 264.30, 0.00, 761.90, 366.50, 200.00}},
		{!"Hankypanky Point",             {2576.90, 62.10, 0.00, 2759.20, 385.50, 200.00}},
		{!"Harry Gold Parkway",           {1777.30, 863.20, -89.00, 1817.30, 2342.80, 110.90}},
		{!"Hashbury",                     {-2593.40, -222.50, -0.00, -2411.20, 54.70, 200.00}},
		{!"Hilltop Farm",                 {967.30, -450.30, -3.00, 1176.70, -217.90, 200.00}},
		{!"Hunter Quarry",                {337.20, 710.80, -115.20, 860.50, 1031.70, 203.70}},
		{!"Idlewood",                     {1812.60, -1852.80, -89.00, 1971.60, -1742.30, 110.90}},
		{!"Idlewood",                     {1812.60, -1742.30, -89.00, 1951.60, -1602.30, 110.90}},
		{!"Idlewood",                     {1951.60, -1742.30, -89.00, 2124.60, -1602.30, 110.90}},
		{!"Idlewood",                     {1812.60, -1602.30, -89.00, 2124.60, -1449.60, 110.90}},
		{!"Idlewood",                     {2124.60, -1742.30, -89.00, 2222.50, -1494.00, 110.90}},
		{!"Idlewood",                     {1971.60, -1852.80, -89.00, 2222.50, -1742.30, 110.90}},
		{!"Jefferson",                    {1996.90, -1449.60, -89.00, 2056.80, -1350.70, 110.90}},
		{!"Jefferson",                    {2124.60, -1494.00, -89.00, 2266.20, -1449.60, 110.90}},
		{!"Jefferson",                    {2056.80, -1372.00, -89.00, 2281.40, -1210.70, 110.90}},
		{!"Jefferson",                    {2056.80, -1210.70, -89.00, 2185.30, -1126.30, 110.90}},
		{!"Jefferson",                    {2185.30, -1210.70, -89.00, 2281.40, -1154.50, 110.90}},
		{!"Jefferson",                    {2056.80, -1449.60, -89.00, 2266.20, -1372.00, 110.90}},
		{!"Julius Thruway East",          {2623.10, 943.20, -89.00, 2749.90, 1055.90, 110.90}},
		{!"Julius Thruway East",          {2685.10, 1055.90, -89.00, 2749.90, 2626.50, 110.90}},
		{!"Julius Thruway East",          {2536.40, 2442.50, -89.00, 2685.10, 2542.50, 110.90}},
		{!"Julius Thruway East",          {2625.10, 2202.70, -89.00, 2685.10, 2442.50, 110.90}},
		{!"Julius Thruway North",         {2498.20, 2542.50, -89.00, 2685.10, 2626.50, 110.90}},
		{!"Julius Thruway North",         {2237.40, 2542.50, -89.00, 2498.20, 2663.10, 110.90}},
		{!"Julius Thruway North",         {2121.40, 2508.20, -89.00, 2237.40, 2663.10, 110.90}},
		{!"Julius Thruway North",         {1938.80, 2508.20, -89.00, 2121.40, 2624.20, 110.90}},
		{!"Julius Thruway North",         {1534.50, 2433.20, -89.00, 1848.40, 2583.20, 110.90}},
		{!"Julius Thruway North",         {1848.40, 2478.40, -89.00, 1938.80, 2553.40, 110.90}},
		{!"Julius Thruway North",         {1704.50, 2342.80, -89.00, 1848.40, 2433.20, 110.90}},
		{!"Julius Thruway North",         {1377.30, 2433.20, -89.00, 1534.50, 2507.20, 110.90}},
		{!"Julius Thruway South",         {1457.30, 823.20, -89.00, 2377.30, 863.20, 110.90}},
		{!"Julius Thruway South",         {2377.30, 788.80, -89.00, 2537.30, 897.90, 110.90}},
		{!"Julius Thruway West",          {1197.30, 1163.30, -89.00, 1236.60, 2243.20, 110.90}},
		{!"Julius Thruway West",          {1236.60, 2142.80, -89.00, 1297.40, 2243.20, 110.90}},
		{!"Juniper Hill",                 {-2533.00, 578.30, -7.60, -2274.10, 968.30, 200.00}},
		{!"Juniper Hollow",               {-2533.00, 968.30, -6.10, -2274.10, 1358.90, 200.00}},
		{!"K.A.C.C. Military Fuels",      {2498.20, 2626.50, -89.00, 2749.90, 2861.50, 110.90}},
		{!"Kincaid Bridge",               {-1339.80, 599.20, -89.00, -1213.90, 828.10, 110.90}},
		{!"Kincaid Bridge",               {-1213.90, 721.10, -89.00, -1087.90, 950.00, 110.90}},
		{!"Kincaid Bridge",               {-1087.90, 855.30, -89.00, -961.90, 986.20, 110.90}},
		{!"King's",                       {-2329.30, 458.40, -7.60, -1993.20, 578.30, 200.00}},
		{!"King's",                       {-2411.20, 265.20, -9.10, -1993.20, 373.50, 200.00}},
		{!"King's",                       {-2253.50, 373.50, -9.10, -1993.20, 458.40, 200.00}},
		{!"LVA Freight Depot",            {1457.30, 863.20, -89.00, 1777.40, 1143.20, 110.90}},
		{!"LVA Freight Depot",            {1375.60, 919.40, -89.00, 1457.30, 1203.20, 110.90}},
		{!"LVA Freight Depot",            {1277.00, 1087.60, -89.00, 1375.60, 1203.20, 110.90}},
		{!"LVA Freight Depot",            {1315.30, 1044.60, -89.00, 1375.60, 1087.60, 110.90}},
		{!"LVA Freight Depot",            {1236.60, 1163.40, -89.00, 1277.00, 1203.20, 110.90}},
		{!"Las Barrancas",                {-926.10, 1398.70, -3.00, -719.20, 1634.60, 200.00}},
		{!"Las Brujas",                   {-365.10, 2123.00, -3.00, -208.50, 2217.60, 200.00}},
		{!"Las Colinas",                  {1994.30, -1100.80, -89.00, 2056.80, -920.80, 110.90}},
		{!"Las Colinas",                  {2056.80, -1126.30, -89.00, 2126.80, -920.80, 110.90}},
		{!"Las Colinas",                  {2185.30, -1154.50, -89.00, 2281.40, -934.40, 110.90}},
		{!"Las Colinas",                  {2126.80, -1126.30, -89.00, 2185.30, -934.40, 110.90}},
		{!"Las Colinas",                  {2747.70, -1120.00, -89.00, 2959.30, -945.00, 110.90}},
		{!"Las Colinas",                  {2632.70, -1135.00, -89.00, 2747.70, -945.00, 110.90}},
		{!"Las Colinas",                  {2281.40, -1135.00, -89.00, 2632.70, -945.00, 110.90}},
		{!"Las Payasadas",                {-354.30, 2580.30, 2.00, -133.60, 2816.80, 200.00}},
		{!"Las Venturas Airport",         {1236.60, 1203.20, -89.00, 1457.30, 1883.10, 110.90}},
		{!"Las Venturas Airport",         {1457.30, 1203.20, -89.00, 1777.30, 1883.10, 110.90}},
		{!"Las Venturas Airport",         {1457.30, 1143.20, -89.00, 1777.40, 1203.20, 110.90}},
		{!"Las Venturas Airport",         {1515.80, 1586.40, -12.50, 1729.90, 1714.50, 87.50}},
		{!"Last Dime Motel",              {1823.00, 596.30, -89.00, 1997.20, 823.20, 110.90}},
		{!"Leafy Hollow",                 {-1166.90, -1856.00, 0.00, -815.60, -1602.00, 200.00}},
		{!"Liberty City",                 {-1000.00, 400.00, 1300.00, -700.00, 600.00, 1400.00}},
		{!"Lil' Probe Inn",               {-90.20, 1286.80, -3.00, 153.80, 1554.10, 200.00}},
		{!"Linden Side",                  {2749.90, 943.20, -89.00, 2923.30, 1198.90, 110.90}},
		{!"Linden Station",               {2749.90, 1198.90, -89.00, 2923.30, 1548.90, 110.90}},
		{!"Linden Station",               {2811.20, 1229.50, -39.50, 2861.20, 1407.50, 60.40}},
		{!"Little Mexico",                {1701.90, -1842.20, -89.00, 1812.60, -1722.20, 110.90}},
		{!"Little Mexico",                {1758.90, -1722.20, -89.00, 1812.60, -1577.50, 110.90}},
		{!"Los Flores",                   {2581.70, -1454.30, -89.00, 2632.80, -1393.40, 110.90}},
		{!"Los Flores",                   {2581.70, -1393.40, -89.00, 2747.70, -1135.00, 110.90}},
		{!"Los Santos International",     {1249.60, -2394.30, -89.00, 1852.00, -2179.20, 110.90}},
		{!"Los Santos International",     {1852.00, -2394.30, -89.00, 2089.00, -2179.20, 110.90}},
		{!"Los Santos International",     {1382.70, -2730.80, -89.00, 2201.80, -2394.30, 110.90}},
		{!"Los Santos International",     {1974.60, -2394.30, -39.00, 2089.00, -2256.50, 60.90}},
		{!"Los Santos International",     {1400.90, -2669.20, -39.00, 2189.80, -2597.20, 60.90}},
		{!"Los Santos International",     {2051.60, -2597.20, -39.00, 2152.40, -2394.30, 60.90}},
		{!"Marina",                       {647.70, -1804.20, -89.00, 851.40, -1577.50, 110.90}},
		{!"Marina",                       {647.70, -1577.50, -89.00, 807.90, -1416.20, 110.90}},
		{!"Marina",                       {807.90, -1577.50, -89.00, 926.90, -1416.20, 110.90}},
		{!"Market",                       {787.40, -1416.20, -89.00, 1072.60, -1310.20, 110.90}},
		{!"Market",                       {952.60, -1310.20, -89.00, 1072.60, -1130.80, 110.90}},
		{!"Market",                       {1072.60, -1416.20, -89.00, 1370.80, -1130.80, 110.90}},
		{!"Market",                       {926.90, -1577.50, -89.00, 1370.80, -1416.20, 110.90}},
		{!"Market Station",               {787.40, -1410.90, -34.10, 866.00, -1310.20, 65.80}},
		{!"Martin Bridge",                {-222.10, 293.30, 0.00, -122.10, 476.40, 200.00}},
		{!"Missionary Hill",              {-2994.40, -811.20, 0.00, -2178.60, -430.20, 200.00}},
		{!"Montgomery",                   {1119.50, 119.50, -3.00, 1451.40, 493.30, 200.00}},
		{!"Montgomery",                   {1451.40, 347.40, -6.10, 1582.40, 420.80, 200.00}},
		{!"Montgomery Intersection",      {1546.60, 208.10, 0.00, 1745.80, 347.40, 200.00}},
		{!"Montgomery Intersection",      {1582.40, 347.40, 0.00, 1664.60, 401.70, 200.00}},
		{!"Mulholland",                   {1414.00, -768.00, -89.00, 1667.60, -452.40, 110.90}},
		{!"Mulholland",                   {1281.10, -452.40, -89.00, 1641.10, -290.90, 110.90}},
		{!"Mulholland",                   {1269.10, -768.00, -89.00, 1414.00, -452.40, 110.90}},
		{!"Mulholland",                   {1357.00, -926.90, -89.00, 1463.90, -768.00, 110.90}},
		{!"Mulholland",                   {1318.10, -910.10, -89.00, 1357.00, -768.00, 110.90}},
		{!"Mulholland",                   {1169.10, -910.10, -89.00, 1318.10, -768.00, 110.90}},
		{!"Mulholland",                   {768.60, -954.60, -89.00, 952.60, -860.60, 110.90}},
		{!"Mulholland",                   {687.80, -860.60, -89.00, 911.80, -768.00, 110.90}},
		{!"Mulholland",                   {737.50, -768.00, -89.00, 1142.20, -674.80, 110.90}},
		{!"Mulholland",                   {1096.40, -910.10, -89.00, 1169.10, -768.00, 110.90}},
		{!"Mulholland",                   {952.60, -937.10, -89.00, 1096.40, -860.60, 110.90}},
		{!"Mulholland",                   {911.80, -860.60, -89.00, 1096.40, -768.00, 110.90}},
		{!"Mulholland",                   {861.00, -674.80, -89.00, 1156.50, -600.80, 110.90}},
		{!"Mulholland Intersection",      {1463.90, -1150.80, -89.00, 1812.60, -768.00, 110.90}},
		{!"North Rock",                   {2285.30, -768.00, 0.00, 2770.50, -269.70, 200.00}},
		{!"Ocean Docks",                  {2373.70, -2697.00, -89.00, 2809.20, -2330.40, 110.90}},
		{!"Ocean Docks",                  {2201.80, -2418.30, -89.00, 2324.00, -2095.00, 110.90}},
		{!"Ocean Docks",                  {2324.00, -2302.30, -89.00, 2703.50, -2145.10, 110.90}},
		{!"Ocean Docks",                  {2089.00, -2394.30, -89.00, 2201.80, -2235.80, 110.90}},
		{!"Ocean Docks",                  {2201.80, -2730.80, -89.00, 2324.00, -2418.30, 110.90}},
		{!"Ocean Docks",                  {2703.50, -2302.30, -89.00, 2959.30, -2126.90, 110.90}},
		{!"Ocean Docks",                  {2324.00, -2145.10, -89.00, 2703.50, -2059.20, 110.90}},
		{!"Ocean Flats",                  {-2994.40, 277.40, -9.10, -2867.80, 458.40, 200.00}},
		{!"Ocean Flats",                  {-2994.40, -222.50, -0.00, -2593.40, 277.40, 200.00}},
		{!"Ocean Flats",                  {-2994.40, -430.20, -0.00, -2831.80, -222.50, 200.00}},
		{!"Octane Springs",               {338.60, 1228.50, 0.00, 664.30, 1655.00, 200.00}},
		{!"Old Venturas Strip",           {2162.30, 2012.10, -89.00, 2685.10, 2202.70, 110.90}},
		{!"Palisades",                    {-2994.40, 458.40, -6.10, -2741.00, 1339.60, 200.00}},
		{!"Palomino Creek",               {2160.20, -149.00, 0.00, 2576.90, 228.30, 200.00}},
		{!"Paradiso",                     {-2741.00, 793.40, -6.10, -2533.00, 1268.40, 200.00}},
		{!"Pershing Square",              {1440.90, -1722.20, -89.00, 1583.50, -1577.50, 110.90}},
		{!"Pilgrim",                      {2437.30, 1383.20, -89.00, 2624.40, 1783.20, 110.90}},
		{!"Pilgrim",                      {2624.40, 1383.20, -89.00, 2685.10, 1783.20, 110.90}},
		{!"Pilson Intersection",          {1098.30, 2243.20, -89.00, 1377.30, 2507.20, 110.90}},
		{!"Pirates in Men's Pants",       {1817.30, 1469.20, -89.00, 2027.40, 1703.20, 110.90}},
		{!"Playa del Seville",            {2703.50, -2126.90, -89.00, 2959.30, -1852.80, 110.90}},
		{!"Prickle Pine",                 {1534.50, 2583.20, -89.00, 1848.40, 2863.20, 110.90}},
		{!"Prickle Pine",                 {1117.40, 2507.20, -89.00, 1534.50, 2723.20, 110.90}},
		{!"Prickle Pine",                 {1848.40, 2553.40, -89.00, 1938.80, 2863.20, 110.90}},
		{!"Prickle Pine",                 {1938.80, 2624.20, -89.00, 2121.40, 2861.50, 110.90}},
		{!"Queens",                       {-2533.00, 458.40, 0.00, -2329.30, 578.30, 200.00}},
		{!"Queens",                       {-2593.40, 54.70, 0.00, -2411.20, 458.40, 200.00}},
		{!"Queens",                       {-2411.20, 373.50, 0.00, -2253.50, 458.40, 200.00}},
		{!"Randolph Industrial Estate",   {1558.00, 596.30, -89.00, 1823.00, 823.20, 110.90}},
		{!"Redsands East",                {1817.30, 2011.80, -89.00, 2106.70, 2202.70, 110.90}},
		{!"Redsands East",                {1817.30, 2202.70, -89.00, 2011.90, 2342.80, 110.90}},
		{!"Redsands East",                {1848.40, 2342.80, -89.00, 2011.90, 2478.40, 110.90}},
		{!"Redsands West",                {1236.60, 1883.10, -89.00, 1777.30, 2142.80, 110.90}},
		{!"Redsands West",                {1297.40, 2142.80, -89.00, 1777.30, 2243.20, 110.90}},
		{!"Redsands West",                {1377.30, 2243.20, -89.00, 1704.50, 2433.20, 110.90}},
		{!"Redsands West",                {1704.50, 2243.20, -89.00, 1777.30, 2342.80, 110.90}},
		{!"Regular Tom",                  {-405.70, 1712.80, -3.00, -276.70, 1892.70, 200.00}},
		{!"Richman",                      {647.50, -1118.20, -89.00, 787.40, -954.60, 110.90}},
		{!"Richman",                      {647.50, -954.60, -89.00, 768.60, -860.60, 110.90}},
		{!"Richman",                      {225.10, -1369.60, -89.00, 334.50, -1292.00, 110.90}},
		{!"Richman",                      {225.10, -1292.00, -89.00, 466.20, -1235.00, 110.90}},
		{!"Richman",                      {72.60, -1404.90, -89.00, 225.10, -1235.00, 110.90}},
		{!"Richman",                      {72.60, -1235.00, -89.00, 321.30, -1008.10, 110.90}},
		{!"Richman",                      {321.30, -1235.00, -89.00, 647.50, -1044.00, 110.90}},
		{!"Richman",                      {321.30, -1044.00, -89.00, 647.50, -860.60, 110.90}},
		{!"Richman",                      {321.30, -860.60, -89.00, 687.80, -768.00, 110.90}},
		{!"Richman",                      {321.30, -768.00, -89.00, 700.70, -674.80, 110.90}},
		{!"Robada Intersection",          {-1119.00, 1178.90, -89.00, -862.00, 1351.40, 110.90}},
		{!"Roca Escalante",               {2237.40, 2202.70, -89.00, 2536.40, 2542.50, 110.90}},
		{!"Roca Escalante",               {2536.40, 2202.70, -89.00, 2625.10, 2442.50, 110.90}},
		{!"Rockshore East",               {2537.30, 676.50, -89.00, 2902.30, 943.20, 110.90}},
		{!"Rockshore West",               {1997.20, 596.30, -89.00, 2377.30, 823.20, 110.90}},
		{!"Rockshore West",               {2377.30, 596.30, -89.00, 2537.30, 788.80, 110.90}},
		{!"Rodeo",                        {72.60, -1684.60, -89.00, 225.10, -1544.10, 110.90}},
		{!"Rodeo",                        {72.60, -1544.10, -89.00, 225.10, -1404.90, 110.90}},
		{!"Rodeo",                        {225.10, -1684.60, -89.00, 312.80, -1501.90, 110.90}},
		{!"Rodeo",                        {225.10, -1501.90, -89.00, 334.50, -1369.60, 110.90}},
		{!"Rodeo",                        {334.50, -1501.90, -89.00, 422.60, -1406.00, 110.90}},
		{!"Rodeo",                        {312.80, -1684.60, -89.00, 422.60, -1501.90, 110.90}},
		{!"Rodeo",                        {422.60, -1684.60, -89.00, 558.00, -1570.20, 110.90}},
		{!"Rodeo",                        {558.00, -1684.60, -89.00, 647.50, -1384.90, 110.90}},
		{!"Rodeo",                        {466.20, -1570.20, -89.00, 558.00, -1385.00, 110.90}},
		{!"Rodeo",                        {422.60, -1570.20, -89.00, 466.20, -1406.00, 110.90}},
		{!"Rodeo",                        {466.20, -1385.00, -89.00, 647.50, -1235.00, 110.90}},
		{!"Rodeo",                        {334.50, -1406.00, -89.00, 466.20, -1292.00, 110.90}},
		{!"Royal Casino",                 {2087.30, 1383.20, -89.00, 2437.30, 1543.20, 110.90}},
		{!"San Andreas Sound",            {2450.30, 385.50, -100.00, 2759.20, 562.30, 200.00}},
		{!"Santa Flora",                  {-2741.00, 458.40, -7.60, -2533.00, 793.40, 200.00}},
		{!"Santa Maria Beach",            {342.60, -2173.20, -89.00, 647.70, -1684.60, 110.90}},
		{!"Santa Maria Beach",            {72.60, -2173.20, -89.00, 342.60, -1684.60, 110.90}},
		{!"Shady Cabin",                  {-1632.80, -2263.40, -3.00, -1601.30, -2231.70, 200.00}},
		{!"Shady Creeks",                 {-1820.60, -2643.60, -8.00, -1226.70, -1771.60, 200.00}},
		{!"Shady Creeks",                 {-2030.10, -2174.80, -6.10, -1820.60, -1771.60, 200.00}},
		{!"Sobell Rail Yards",            {2749.90, 1548.90, -89.00, 2923.30, 1937.20, 110.90}},
		{!"Spinybed",                     {2121.40, 2663.10, -89.00, 2498.20, 2861.50, 110.90}},
		{!"Starfish Casino",              {2437.30, 1783.20, -89.00, 2685.10, 2012.10, 110.90}},
		{!"Starfish Casino",              {2437.30, 1858.10, -39.00, 2495.00, 1970.80, 60.90}},
		{!"Starfish Casino",              {2162.30, 1883.20, -89.00, 2437.30, 2012.10, 110.90}},
		{!"Temple",                       {1252.30, -1130.80, -89.00, 1378.30, -1026.30, 110.90}},
		{!"Temple",                       {1252.30, -1026.30, -89.00, 1391.00, -926.90, 110.90}},
		{!"Temple",                       {1252.30, -926.90, -89.00, 1357.00, -910.10, 110.90}},
		{!"Temple",                       {952.60, -1130.80, -89.00, 1096.40, -937.10, 110.90}},
		{!"Temple",                       {1096.40, -1130.80, -89.00, 1252.30, -1026.30, 110.90}},
		{!"Temple",                       {1096.40, -1026.30, -89.00, 1252.30, -910.10, 110.90}},
		{!"The Camel's Toe",              {2087.30, 1203.20, -89.00, 2640.40, 1383.20, 110.90}},
		{!"The Clown's Pocket",           {2162.30, 1783.20, -89.00, 2437.30, 1883.20, 110.90}},
		{!"The Emerald Isle",             {2011.90, 2202.70, -89.00, 2237.40, 2508.20, 110.90}},
		{!"The Farm",                     {-1209.60, -1317.10, 114.90, -908.10, -787.30, 251.90}},
		{!"The Four Dragons Casino",      {1817.30, 863.20, -89.00, 2027.30, 1083.20, 110.90}},
		{!"The High Roller",              {1817.30, 1283.20, -89.00, 2027.30, 1469.20, 110.90}},
		{!"The Mako Span",                {1664.60, 401.70, 0.00, 1785.10, 567.20, 200.00}},
		{!"The Panopticon",               {-947.90, -304.30, -1.10, -319.60, 327.00, 200.00}},
		{!"The Pink Swan",                {1817.30, 1083.20, -89.00, 2027.30, 1283.20, 110.90}},
		{!"The Sherman Dam",              {-968.70, 1929.40, -3.00, -481.10, 2155.20, 200.00}},
		{!"The Strip",                    {2027.40, 863.20, -89.00, 2087.30, 1703.20, 110.90}},
		{!"The Strip",                    {2106.70, 1863.20, -89.00, 2162.30, 2202.70, 110.90}},
		{!"The Strip",                    {2027.40, 1783.20, -89.00, 2162.30, 1863.20, 110.90}},
		{!"The Strip",                    {2027.40, 1703.20, -89.00, 2137.40, 1783.20, 110.90}},
		{!"The Visage",                   {1817.30, 1863.20, -89.00, 2106.70, 2011.80, 110.90}},
		{!"The Visage",                   {1817.30, 1703.20, -89.00, 2027.40, 1863.20, 110.90}},
		{!"Unity Station",                {1692.60, -1971.80, -20.40, 1812.60, -1932.80, 79.50}},
		{!"Valle Ocultado",               {-936.60, 2611.40, 2.00, -715.90, 2847.90, 200.00}},
		{!"Verdant Bluffs",               {930.20, -2488.40, -89.00, 1249.60, -2006.70, 110.90}},
		{!"Verdant Bluffs",               {1073.20, -2006.70, -89.00, 1249.60, -1842.20, 110.90}},
		{!"Verdant Bluffs",               {1249.60, -2179.20, -89.00, 1692.60, -1842.20, 110.90}},
		{!"Verdant Meadows",              {37.00, 2337.10, -3.00, 435.90, 2677.90, 200.00}},
		{!"Verona Beach",                 {647.70, -2173.20, -89.00, 930.20, -1804.20, 110.90}},
		{!"Verona Beach",                 {930.20, -2006.70, -89.00, 1073.20, -1804.20, 110.90}},
		{!"Verona Beach",                 {851.40, -1804.20, -89.00, 1046.10, -1577.50, 110.90}},
		{!"Verona Beach",                 {1161.50, -1722.20, -89.00, 1323.90, -1577.50, 110.90}},
		{!"Verona Beach",                 {1046.10, -1722.20, -89.00, 1161.50, -1577.50, 110.90}},
		{!"Vinewood",                     {787.40, -1310.20, -89.00, 952.60, -1130.80, 110.90}},
		{!"Vinewood",                     {787.40, -1130.80, -89.00, 952.60, -954.60, 110.90}},
		{!"Vinewood",                     {647.50, -1227.20, -89.00, 787.40, -1118.20, 110.90}},
		{!"Vinewood",                     {647.70, -1416.20, -89.00, 787.40, -1227.20, 110.90}},
		{!"Whitewood Estates",            {883.30, 1726.20, -89.00, 1098.30, 2507.20, 110.90}},
		{!"Whitewood Estates",            {1098.30, 1726.20, -89.00, 1197.30, 2243.20, 110.90}},
		{!"Willowfield",                  {1970.60, -2179.20, -89.00, 2089.00, -1852.80, 110.90}},
		{!"Willowfield",                  {2089.00, -2235.80, -89.00, 2201.80, -1989.90, 110.90}},
		{!"Willowfield",                  {2089.00, -1989.90, -89.00, 2324.00, -1852.80, 110.90}},
		{!"Willowfield",                  {2201.80, -2095.00, -89.00, 2324.00, -1989.90, 110.90}},
		{!"Willowfield",                  {2541.70, -1941.40, -89.00, 2703.50, -1852.80, 110.90}},
		{!"Willowfield",                  {2324.00, -2059.20, -89.00, 2541.70, -1852.80, 110.90}},
		{!"Willowfield",                  {2541.70, -2059.20, -89.00, 2703.50, -1941.40, 110.90}},
		{!"Yellow Bell Station",          {1377.40, 2600.40, -21.90, 1492.40, 2687.30, 78.00}},
		{!"Los Santos",                   {44.60, -2892.90, -242.90, 2997.00, -768.00, 900.00}},
		{!"Las Venturas",                 {869.40, 596.30, -242.90, 2997.00, 2993.80, 900.00}},
		{!"Bone County",                  {-480.50, 596.30, -242.90, 869.40, 2993.80, 900.00}},
		{!"Tierra Robada",                {-2997.40, 1659.60, -242.90, -480.50, 2993.80, 900.00}},
		{!"Tierra Robada",                {-1213.90, 596.30, -242.90, -480.50, 1659.60, 900.00}},
		{!"San Fierro",                   {-2997.40, -1115.50, -242.90, -1213.90, 1659.60, 900.00}},
		{!"Red County",                   {-1213.90, -768.00, -242.90, 2997.00, 596.30, 900.00}},
		{!"Flint County",                 {-1213.90, -2892.90, -242.90, 44.60, -768.00, 900.00}},
		{!"Whetstone",                    {-2997.40, -2892.90, -242.90, -1213.90, -1115.50, 900.00}}
};
new ColorList[ ][121] =
{
    "{000000}000 {F5F5F5}001 {2A77A1}002 {840410}003 {263739}004 {86446E}005 {D78E10}006 {4C75B7}007 {BDBEC6}008 {5E7072}009\n",
    "{46597A}010 {656A79}011 {5D7E8D}012 {58595A}013 {D6DAD6}014 {9CA1A3}015 {335F3F}016 {730E1A}017 {7B0A2A}018 {9F9D94}019\n",
    "{3B4E78}020 {732E3E}021 {691E3B}022 {96918C}023 {515459}024 {3F3E45}025 {A5A9A7}026 {635C5A}027 {3D4A68}028 {979592}029\n",
    "{421F21}030 {5F272B}031 {8494AB}032 {767B7C}033 {646464}034 {5A5752}035 {252527}036 {2D3A35}037 {93A396}038 {6D7A88}039\n",
    "{221918}040 {6F675F}041 {7C1C2A}042 {5F0A15}043 {193826}044 {5D1B20}045 {9D9872}046 {7A7560}047 {989586}048 {ADB0B0}049\n",
    "{848988}050 {304F45}051 {4D6268}052 {162248}053 {272F4B}054 {7D6256}055 {9EA4AB}056 {9C8D71}057 {6D1822}058 {4E6881}059\n",
    "{9C9C98}060 {917347}061 {661C26}062 {949D9F}063 {A4A7A5}064 {8E8C46}065 {341A1E}066 {6A7A8C}067 {AAAD8E}068 {AB988F}069\n",
    "{851F2E}070 {6F8297}071 {585853}072 {9AA790}073 {601A23}074 {20202C}075 {A4A096}076 {AA9D84}077 {78222B}078 {0E316D}079\n",
    "{722A3F}080 {7B715E}081 {741D28}082 {1E2E32}083 {4D322F}084 {7C1B44}085 {2E5B20}086 {395A83}087 {6D2837}088 {A7A28F}089\n",
    "{AFB1B1}090 {364155}091 {6D6C6E}092 {0F6A89}093 {204B6B}094 {2B3E57}095 {9B9F9D}096 {6C8495}097 {4D8495}098 {AE9B7F}099\n",
    "{406C8F}100 {1F253B}101 {AB9276}102 {134573}103 {96816C}104 {64686A}105 {105082}106 {A19983}107 {385694}108 {525661}109\n",
    "{7F6956}110 {8C929A}111 {596E87}112 {473532}113 {44624F}114 {730A27}115 {223457}116 {640D1B}117 {A3ADC6}118 {695853}119\n",
    "{9B8B80}120 {620B1C}121 {5B5D5E}122 {624428}123 {731827}124 {1B376D}125 {EC6AAE}126 {000000}127 {177517}128 {210606}129\n",
    "{125478}130 {452A0D}131 {571E1E}132 {010701}133 {25225A}134 {2C89AA}135 {8A4DBD}136 {35963A}137 {B7B7B7}138 {464C8D}139\n",
    "{84888C}140 {817867}141 {817A26}142 {6A506F}143 {583E6F}144 {8CB972}145 {824F78}146 {6D276A}147 {1E1D13}148 {1E1306}149\n",
    "{1F2518}150 {2C4531}151 {1E4C99}152 {2E5F43}153 {1E9948}154 {1E9999}155 {999976}156 {7C8499}157 {992E1E}158 {2C1E08}159\n",
    "{142407}160 {993E4D}161 {1E4C99}162 {198181}163 {1A292A}164 {16616F}165 {1B6687}166 {6C3F99}167 {481A0E}168 {7A7399}169\n",
    "{746D99}170 {53387E}171 {222407}172 {3E190C}173 {46210E}174 {991E1E}175 {8D4C8D}176 {805B80}177 {7B3E7E}178 {3C1737}179\n",
    "{733517}180 {781818}181 {83341A}182 {8E2F1C}183 {7E3E53}184 {7C6D7C}185 {020C02}186 {072407}187 {163012}188 {16301B}189\n",
    "{642B4F}190 {368452}191 {999590}192 {818D96}193 {99991E}194 {7F994C}195 {839292}196 {788222}197 {2B3C99}198 {3A3A0B}199\n",
    "{8A794E}200 {0E1F49}201 {15371C}202 {15273A}203 {375775}204 {060820}205 {071326}206 {20394B}207 {2C5089}208 {15426C}209\n",
    "{103250}210 {241663}211 {692015}212 {8C8D94}213 {516013}214 {090F02}215 {8C573A}216 {52888E}217 {995C52}218 {99581E}219\n",
    "{993A63}220 {998F4E}221 {99311E}222 {0D1842}223 {521E1E}224 {42420D}225 {4C991E}226 {082A1D}227 {96821D}228 {197F19}229\n",
    "{3B141F}230 {745217}231 {893F8D}232 {7E1A6C}233 {0B370B}234 {27450D}235 {071F24}236 {784573}237 {8A653A}238 {732617}239\n",
    "{319490}240 {56941D}241 {59163D}242 {1B8A2F}243 {38160B}244 {041804}245 {355D8E}246 {2E3F5B}247 {561A28}248 {4E0E27}249\n",
    "{706C67}250 {3B3E42}251 {2E2D33}252 {7B7E7D}253 {4A4442}254 {28344E}255\n"
};
new VehicleNames[212][] = {
{"Landstalker"},{"Bravura"},{"Buffalo"},{"Linerunner"},{"Perrenial"},{"Sentinel"},{"Dumper"},
{"Firetruck"},{"Trashmaster"},{"Stretch"},{"Manana"},{"Infernus"},{"Voodoo"},{"Pony"},{"Mule"},
{"Cheetah"},{"Ambulance"},{"Leviathan"},{"Moonbeam"},{"Esperanto"},{"Taxi"},{"Washington"},
{"Bobcat"},{"Mr Whoopee"},{"BF Injection"},{"Hunter"},{"Premier"},{"Enforcer"},{"Securicar"},
{"Banshee"},{"Predator"},{"Bus"},{"Rhino"},{"Barracks"},{"Hotknife"},{"Trailer 1"},{"Previon"},
{"Coach"},{"Cabbie"},{"Stallion"},{"Rumpo"},{"RC Bandit"},{"Romero"},{"Packer"},{"Monster"},
{"Admiral"},{"Squalo"},{"Seasparrow"},{"Pizzaboy"},{"Tram"},{"Trailer 2"},{"Turismo"},
{"Speeder"},{"Reefer"},{"Tropic"},{"Flatbed"},{"Yankee"},{"Caddy"},{"Solair"},{"Berkley's RC Van"},
{"Skimmer"},{"PCJ-600"},{"Faggio"},{"Freeway"},{"RC Baron"},{"RC Raider"},{"Glendale"},{"Oceanic"},
{"Sanchez"},{"Sparrow"},{"Patriot"},{"Quad"},{"Coastguard"},{"Dinghy"},{"Hermes"},{"Sabre"},
{"Rustler"},{"ZR-350"},{"Walton"},{"Regina"},{"Comet"},{"BMX"},{"Burrito"},{"Camper"},{"Marquis"},
{"Baggage"},{"Dozer"},{"Maverick"},{"News Chopper"},{"Rancher"},{"FBI Rancher"},{"Virgo"},{"Greenwood"},
{"Jetmax"},{"Hotring"},{"Sandking"},{"Blista Compact"},{"Police Maverick"},{"Boxville"},{"Benson"},
{"Mesa"},{"RC Goblin"},{"Hotring Racer A"},{"Hotring Racer B"},{"Bloodring Banger"},{"Rancher"},
{"Super GT"},{"Elegant"},{"Journey"},{"Bike"},{"Mountain Bike"},{"Beagle"},{"Cropdust"},{"Stunt"},
{"Tanker"}, {"Roadtrain"},{"Nebula"},{"Majestic"},{"Buccaneer"},{"Shamal"},{"Hydra"},{"FCR-900"},
{"NRG-500"},{"HPV1000"},{"Cement Truck"},{"Tow Truck"},{"Fortune"},{"Cadrona"},{"FBI Truck"},
{"Willard"},{"Forklift"},{"Tractor"},{"Combine"},{"Feltzer"},{"Remington"},{"Slamvan"},
{"Blade"},{"Freight"},{"Streak"},{"Vortex"},{"Vincent"},{"Bullet"},{"Clover"},{"Sadler"},
{"Firetruck LA"},{"Hustler"},{"Intruder"},{"Primo"},{"Cargobob"},{"Tampa"},{"Sunrise"},{"Merit"},
{"Utility"},{"Nevada"},{"Yosemite"},{"Windsor"},{"Monster A"},{"Monster B"},{"Uranus"},{"Jester"},
{"Sultan"},{"Stratum"},{"Elegy"},{"Raindance"},{"RC Tiger"},{"Flash"},{"Tahoma"},{"Savanna"},
{"Bandito"},{"Freight Flat"},{"Streak Carriage"},{"Kart"},{"Mower"},{"Duneride"},{"Sweeper"},
{"Broadway"},{"Tornado"},{"AT-400"},{"DFT-30"},{"Huntley"},{"Stafford"},{"BF-400"},{"Newsvan"},
{"Tug"},{"Trailer 3"},{"Emperor"},{"Wayfarer"},{"Euros"},{"Hotdog"},{"Club"},{"Freight Carriage"},
{"Trailer 3"},{"Andromada"},{"Dodo"},{"RC Cam"},{"Launch"},{"Police Car (LSPD)"},{"Police Car (SFPD)"},
{"Police Car (LVPD)"},{"Police Ranger"},{"Picador"},{"S.W.A.T. Van"},{"Alpha"},{"Phoenix"},{"Glendale"},
{"Sadler"},{"Luggage Trailer A"},{"Luggage Trailer B"},{"Stair Trailer"},{"Boxville"},{"Farm Plow"},
{"Utility Trailer"}};

new const Float:BalikciPoslar[][] = {
	{2918.1304,-1954.0665,11.0894,357.4933},
	{2922.3821,-1953.4929,11.0894,357.4933},
	{2926.4783,-1953.4897,11.0894,358.4333},
	{2930.5903,-1953.4897,11.0894,358.4333},
	{2934.7012,-1953.4902,11.0894,358.4333},
	{2938.7314,-1953.4905,11.0894,358.4333},
	{2942.9719,-1953.4897,11.0894,359.0600},
	{2947.1284,-1953.4902,11.0894,1.2534},
	{2949.3718,-1957.1115,11.0894,261.9258},
	{2949.3755,-1965.3428,11.0894,268.1927},
	{2949.3750,-1969.5227,11.0894,268.1927},
	{2945.6936,-1972.4021,11.0894,178.2651},
	{2940.8147,-1972.4023,11.0894,184.2185},
	{2936.6873,-1972.4030,11.0894,176.6984},
	{2932.5271,-1972.4026,11.0894,176.6984},
	{2928.4158,-1972.4030,11.0894,176.0717},
	{2924.3413,-1972.4027,11.0894,184.5318},
	{2918.1196,-1972.4026,11.0894,181.7118},
	{2949.3752,-1961.3004,11.0894,265.3491},
	{2943.1360,-1972.4025,11.0894,175.2083}
};
enum    e_pump
{
	Float: pumpX,
	Float: pumpY,
	Float: pumpZ,
	pumpUser,
	Text3D: pumpLabel
}

new
	Float: PumpData[MAX_GAS_PUMPS][e_pump] = {
		{-85.2422, -1165.0312, 2.6328},
		{-90.1406, -1176.6250, 2.6328},
		{-92.1016, -1161.7891, 2.9609},
		{-97.0703, -1173.7500, 3.0312},
		{1941.6562, -1767.2891, 14.1406},
		{1941.6562, -1771.3438, 14.1406},
		{1941.6562, -1774.3125, 14.1406},
		{1941.6562, -1778.4531, 14.1406},
		{-1327.0312, 2685.5938, 49.4531},
		{-1327.7969, 2680.1250, 49.4531},
		{-1328.5859, 2674.7109, 49.4531},
		{-1329.2031, 2669.2812, 49.4531},
		{-1464.9375, 1860.5625, 31.8203},
		{-1465.4766, 1868.2734, 31.8203},
		{-1477.6562, 1859.7344, 31.8203},
		{-1477.8516, 1867.3125, 31.8203},
		{-1600.6719, -2707.8047, 47.9297},
		{-1603.9922, -2712.2031, 47.9297},
		{-1607.3047, -2716.6016, 47.9297},
		{-1610.6172, -2721.0000, 47.9297},
		{-1665.5234, 416.9141, 6.3828},
		{-1669.9062, 412.5312, 6.3828},
		{-1672.1328, 423.5000, 6.3828},
		{-1675.2188, 407.1953, 6.3828},
		{-1676.5156, 419.1172, 6.3828},
		{-1679.3594, 403.0547, 6.3828},
		{-1681.8281, 413.7812, 6.3828},
		{-1685.9688, 409.6406, 6.3828},
		{-2241.7188, -2562.2891, 31.0625},
		{-2246.7031, -2559.7109, 31.0625},
		{-2410.8047, 970.8516, 44.4844},
		{-2410.8047, 976.1875, 44.4844},
		{-2410.8047, 981.5234, 44.4844},
		{1378.9609, 461.0391, 19.3281},
		{1380.6328, 460.2734, 19.3281},
		{1383.3984, 459.0703, 19.3281},
		{1385.0781, 458.2969, 19.3281},
		{603.4844, 1707.2344, 6.1797},
		{606.8984, 1702.2188, 6.1797},
		{610.2500, 1697.2656, 6.1797},
		{613.7188, 1692.2656, 6.1797},
		{617.1250, 1687.4531, 6.1797},
		{620.5312, 1682.4609, 6.1797},
		{624.0469, 1677.6016, 6.1797},
		{655.6641, -558.9297, 15.3594},
		{655.6641, -560.5469, 15.3594},
		{655.6641, -569.6016, 15.3594},
		{655.6641, -571.2109, 15.3594},
		{1590.3516, 2193.7109, 11.3125},
		{1590.3516, 2204.5000, 11.3125},
		{1596.1328, 2193.7109, 11.3125},
		{1596.1328, 2204.5000, 11.3125},
		{1602.0000, 2193.7109, 11.3125},
		{1602.0000, 2204.5000, 11.3125},
		{2109.0469, 914.7188, 11.2578},
		{2109.0469, 925.5078, 11.2578},
		{2114.9062, 914.7188, 11.2578},
		{2114.9062, 925.5078, 11.2578},
		{2120.8203, 914.7188, 11.2578},
		{2120.8203, 925.5078, 11.2578},
		{2141.6719, 2742.5234, 11.2734},
		{2141.6719, 2753.3203, 11.2734},
		{2147.5312, 2742.5234, 11.2734},
		{2147.5312, 2753.3203, 11.2734},
		{2153.3125, 2742.5234, 11.2734},
		{2153.3125, 2753.3203, 11.2734},
		{2196.8984, 2470.2500, 11.3125},
		{2196.8984, 2474.6875, 11.3125},
		{2196.8984, 2480.3281, 11.3125},
		{2207.6953, 2470.2500, 11.3125},
		{2207.6953, 2474.6875, 11.3125},
		{2207.6953, 2480.3281, 11.3125},
		{2634.6406, 1100.9453, 11.2500},
		{2634.6406, 1111.7500, 11.2500},
		{2639.8750, 1100.9609, 11.2500},
		{2639.8750, 1111.7500, 11.2500},
		{2645.2500, 1100.9609, 11.2500},
		{2645.2500, 1111.7500, 11.2500}
	};
enum EvData
{
	evID,
	evExists,
	evSahip,
	evFiyat,
	evIsim[30],
	Float:evPos[3],
	evInterior,
	evVergi,
	evVergiSure,
	evKilit,
	evCash,
	evMaksMobilya,
	evSatilik,
	evKiralik,
	evKiraUcret,
	evKiralayan,
	evKiyafetler[5],
	evUyusturucu,
	MobilyaYetki,
	evKendiFiyati,
	evSilahlar[10],
	evMermiler[10],
	evPickup,
	Text3D:houseText
}
new house_info[MAX_EV][EvData];
enum    e_interior
{
	IntName[30],
	Float: intX,
	Float: intY,
	Float: intZ,
	intID,
};

enum furnitureData {
	furnitureID,
	furnitureModel,
	furnitureName[32],
	furnitureMateryalDesen[5],
	Float:furniturePos[3],
	Float:furnitureRot[3],
	furniturePrice,
	furnitureObject
};
new FurnitureData[MAX_EV][MAX_FURNITURE][furnitureData];
enum BirlikData
{
	birlikID,
	birlikExists,
	birlikAd[32],
	birlikColor,
	birlikTip,
	birlikRutbeler,
	birlikOnaylar[5],
	birlikYetkilendirme[8],
	birlikDuyuru[128],
	birlikKasaPara,
	OOCDurum,
	yayinDurum,
	yayinTipi,
	ReklamAlimi,
	ReklamUcreti,
	ReklamSayisi,
	bool:CekilisBasladi,
	cekilisOdul,
	Text3D:reklamLabel,
	reklamPickup,
	Float:reklamPos[3]

};
/*enum 	e_businesses
{
	BusinessID,
	BusinessPrice,
	BusinessOwnerSQLID,
	BusinessName[128],
	BusinessMOTD[128],
	BusinessPickup,

	BusinessType,
	BusinessRestaurantType,
	BusinessLevel,

	Float: EnterPos[4],
	EnterInterior,
	EnterWorld,

	Float: ExitPos[4],
	ExitInterior,
	ExitWorld,

	BankPickup,
	Float: BankPos[3],
	BankInterior,
	BankWorld,

	BusinessFee,
	BusinessCashbox,
	bool: BusinessLocked,

	bool: BusinessHasXMR,
	bool: BusinessXMROn,
	BusinessXMRUrl[128],

	BusinessTime,
	bool: BusinessLights,

	BusinessRake,

	BusinessProduct,
	BusinessWantedProduct,
	BusinessProductPrice,

	BusinessFood[3],
	BusinessFoodPrice[3],

	BusinessAreaID[2]
}

new BusinessData[MAX_BUSINESS][e_businesses];
new Iterator:Businesses<MAX_BUSINESS>;*/

enum IsyeriData
{
	isyeriID,
	isyeriExists,
	isyeriName[32],
	isyeriMesaj[100],
	isyeriSahip,
	isyeriTip,
	isyeriFiyat,
	isyeriKendiFiyati,
	isyeriSatilik,
	isyeriVergi,
	isyeriVergiSure,
	isyeriGirisUcret,
	isyeriMuzik[256],
	Float:isyeriPos[4],
	Float:isyeriInt[4],
	Float:isyeriSpawn[4],
	isyeriInterior,
	isyeriKilit,
	isyeriKasa,
	isyeriUrunSayisi[20],
	isyeriPickup,
	isyeriFiyatlar[20],
	Text3D:bizText3D
};
new Isyeri[MAX_ISYERI][IsyeriData];
new Birlikler[MAX_BIRLIK][BirlikData];
new BirlikRutbe[MAX_BIRLIK][15][32];
new BirlikDivizyon[MAX_BIRLIK][5][20];
new Float:AksesuarData[MAX_PLAYERS][10][10];
enum E_BUYFURNITURES
{
	oSlot,
	oModelID,
	oStr[100],
	oPrice
};
enum    e_baliklar
{
	TurAdi[32],
	MinAgirlik,
	MaxAgirlik,
	Float: GramFiyat
};
new
 BalikTurleri[][e_baliklar] = {
	// tür adý - min. aðýrlýk - max. aðýrlýk - gram fiyati
 		{"Zargana", 130, 300, 0.3},
        {"Alabalýk", 200, 300, 0.2},
        {"Levrek", 400, 600, 0.2},
        {"Sazan", 133, 350, 0.3},
        {"Sudak", 400, 500, 0.3},
        {"Somon", 166, 300, 0.2},
        {"Gümüþ", 200, 400, 0.2},
        {"Ýskorpit", 200, 300, 0.3},
        {"Çupra", 200, 450, 0.2},
        {"Eþkina", 200, 300, 0.1},
        {"Gelincik", 200, 400, 0.3},
        {"Ýnci Balýðý", 300, 500, 0.2},
        {"Ýskavrit", 200, 500, 0.2},
        {"Hamsi",250,650,0.2},
        {"Kolyoz",300,500,0.2},
        {"Mezgit",100,400,0.2},
        {"Çaça",200,600,0.3}
	};

/*#define D_TEXT "Araç Bakým & Onarým\nPaintjob\nRenkler\nEgzoz\nÖn Tampon\nArka Tampon\nÇatý\nRüzgarlýk\nYan Etekler\nJantlar\nHidrolik\nNitro\n{2ECC71}» {FFFFFF}Modifiye Bitir"
enum ComponentsInfo {
        cID,
        cName[ 40 ],
        cPrice,
        cPriceEx,
        cType
};
#define MAX_COMPONENTS  194
static const
        cInfo[ MAX_COMPONENTS ][ ComponentsInfo ] = {
        { 1000, "Pro Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1001, "Win Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1002, "Drag Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1003, "Alpha Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1004, "Champ Scoop Hood", 100, 50,CARMODTYPE_HOOD },
        { 1005, "Fury Scoop Hood", 100, 50,CARMODTYPE_HOOD },
        { 1006, "Roof Scoop Roof", 1400, 550, CARMODTYPE_ROOF },
        { 1007, "Right Sideskirt", 600, 300,CARMODTYPE_SIDESKIRT },
        { 1008, "5x Nitrous", 5000, 2500,CARMODTYPE_NITRO },
        { 1009, "2x Nitrous", 8000, 4000,CARMODTYPE_NITRO },
        { 1010, "10x Nitrous", 10000, 5000,CARMODTYPE_NITRO },
        { 1011, "Race Scoop Hood", 100, 50,CARMODTYPE_HOOD },
        { 1012, "Worx Scoop Hood", 100, 50,CARMODTYPE_HOOD },
        { 1013, "Round Fog Lamp", 100, 50,CARMODTYPE_LAMPS },
        { 1014, "Champ Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1015, "Race Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1016, "Worx Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1017, "Left Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1018, "Upswept Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1019, "Twin Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1020, "Large Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1021, "Medium Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1022, "Small Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1023, "Fury Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1024, "Square Fog Lamp", 100, CARMODTYPE_LAMPS },
        { 1025, "Offroad Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1026, "Right Alien Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1027, "Left Alien Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1028, "Alien Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1029, "X-Flow Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1030, "Left X-Flow Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1031, "Right X-Flow Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1032, "Alien Roof Vent", 1400, 550, CARMODTYPE_ROOF },
        { 1033, "X-Flow Roof Vent", 1400, 550, CARMODTYPE_ROOF },
        { 1034, "Alien Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1035, "X-Flow Roof Vent", 1400, 550, CARMODTYPE_ROOF },
        { 1036, "Right Alien Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1037, "X-Flow Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1038, "Alien Roof Vent", 1400, 550, CARMODTYPE_ROOF },
        { 1039, "Left X-Flow Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1040, "Left Alien Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1041, "Right X-Flow Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1042, "Right Chrome Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1043, "Slamin Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1044, "Chrome Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1045, "X-Flow Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1046, "Alien Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1047, "Right Alien Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1048, "Right X-Flow Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1049, "Alien Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1050, "X-Flow Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1051, "Left Alien Sideskirt", 1000, 500, CARMODTYPE_SPOILER },
        { 1052, "Left X-Flow Sideskirt", 1000, 500, CARMODTYPE_SPOILER },
        { 1053, "X-Flow Roof", 1400, 550, CARMODTYPE_ROOF },
        { 1054, "Alien Roof", 1400, 550, CARMODTYPE_ROOF },
        { 1055, "Alien Roof", 1400, 550, CARMODTYPE_ROOF },
        { 1056, "Right Alien Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1057, "Right X-Flow Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1058, "Alien Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1059, "X-Flow Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1060, "X-Flow Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1061, "X-Flow Roof", 1400, 550, CARMODTYPE_ROOF },
        { 1062, "Left Alien Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1063, "Left X-Flow Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1064, "Alien Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1065, "Alien Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1066, "X-Flow Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1067, "Alien Roof", 1400, 550, CARMODTYPE_ROOF },
        { 1068, "X-Flow Roof", 1400, 550, CARMODTYPE_ROOF },
        { 1069, "Right Alien Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1070, "Right X-Flow Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1071, "Left Alien Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1072, "Left X-Flow Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1073, "Shadow Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1074, "Mega Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1075, "Rimshine Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1076, "Wires Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1077, "Classic Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1078, "Twist Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1079, "Cutter Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1080, "Switch Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1081, "Grove Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1082, "Import Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1083, "Dollar Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1084, "Trance Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1085, "Atomic Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1086, "Stereo Wheels", 500, 250, CARMODTYPE_STEREO },
        { 1087, "Hydraulics", 3250, 1250, CARMODTYPE_HYDRAULICS },
        { 1088, "Alien Roof", 1400, 550, CARMODTYPE_ROOF },
        { 1089, "X-Flow Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1090, "Right Alien Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1091, "X-Flow Roof", 1400, 550, CARMODTYPE_ROOF },
        { 1092, "Alien Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1093, "Right X-Flow Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1094, "Left Alien Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1095, "Right X-Flow Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1096, "Ahab Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1097, "Virtual Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1098, "Access Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1099, "Left Chrome Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1100, "Chrome Grill", 500, 250, -1 }, // Bullbar
        { 1101, "Left `Chrome Flames` Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1102, "Left `Chrome Strip` Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1103, "Covertible Roof", 1400, 550, CARMODTYPE_ROOF },
        { 1104, "Chrome Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1105, "Slamin Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1106, "Right `Chrome Arches`", 600, CARMODTYPE_SIDESKIRT },
        { 1107, "Left `Chrome Strip` Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1108, "Right `Chrome Strip` Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1109, "Chrome", 500, 250, -1 }, // Bullbar
        { 1110, "Slamin", 500, 250, -1 }, // Bullbar
        { 1111, "Little Sign?", 500, 250, -1 }, // sig
        { 1112, "Little Sign?", 500, 250, -1 }, // sig
        { 1113, "Chrome Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1114, "Slamin Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1115, "Chrome", 500, 250, -1 }, // Bullbar
        { 1116, "Slamin", 500, 250, -1 }, // Bullbar
        { 1117, "Chrome Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1118, "Right `Chrome Trim` Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1119, "Right `Wheelcovers` Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1120, "Left `Chrome Trim` Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1121, "Left `Wheelcovers` Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1122, "Right `Chrome Flames` Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1123, "Bullbar Chrome Bars", 500, 250, -1 }, // Bullbar
        { 1124, "Left `Chrome Arches` Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1125, "Bullbar Chrome Lights", 500, 250, -1 }, // Bullbar
        { 1126, "Chrome Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1127, "Slamin Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1128, "Vinyl Hardtop", 1400, 550, CARMODTYPE_ROOF },
        { 1129, "Chrome Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1130, "Hardtop Roof", 1400, 550, CARMODTYPE_ROOF },
        { 1131, "Softtop Roof", 1400, 550, CARMODTYPE_ROOF },
        { 1132, "Slamin Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1133, "Right `Chrome Strip` Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1134, "Right `Chrome Strip` Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1135, "Slamin Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1136, "Chrome Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1137, "Left `Chrome Strip` Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1138, "Alien Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1139, "X-Flow Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1140, "X-Flow Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1141, "Alien Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1142, "Left Oval Vents", 1000, 500, CARMODTYPE_VENT_LEFT },
        { 1143, "Right Oval Vents", 1000, 500,CARMODTYPE_VENT_RIGHT },
        { 1144, "Left Square Vents", 1000, 500, CARMODTYPE_VENT_LEFT },
        { 1145, "Right Square Vents", 1000, 500,CARMODTYPE_VENT_RIGHT },
        { 1146, "X-Flow Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1147, "Alien Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1148, "X-Flow Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1149, "Alien Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1150, "Alien Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1151, "X-Flow Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1152, "X-Flow Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1153, "Alien Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1154, "Alien Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1155, "Alien Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1156, "X-Flow Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1157, "X-Flow Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1158, "X-Flow Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1159, "Alien Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1160, "Alien Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1161, "X-Flow Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1162, "Alien Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1163, "X-Flow Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1164, "Alien Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1165, "X-Flow Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1166, "Alien Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1167, "X-Flow Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1168, "Alien Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1169, "Alien Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1170, "X-Flow Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1171, "Alien Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1172, "X-Flow Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1173, "X-Flow Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1174, "Chrome Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1175, "Slamin Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1176, "Chrome Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1177, "Slamin Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1178, "Slamin Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1179, "Chrome Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1180, "Chrome Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1181, "Slamin Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1182, "Chrome Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1183, "Slamin Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1184, "Chrome Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1185, "Slamin Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1186, "Slamin Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1187, "Chrome Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1188, "Slamin Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1189, "Chrome Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1190, "Slamin Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1191, "Chrome Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1192, "Chrome Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1193, "Slamin Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER }
};

enum PaintjobInfi {
        vehID,
        pNumber,
        pPrice,
        pPriceEx,
        pName[ 12 ]
};
#define NUMBER_TYPE_PAINTJOB    36
static const
pjInfo[ NUMBER_TYPE_PAINTJOB ][ PaintjobInfi ] = {
        { 483, 0, 120, 1750, "Paintjob 1" },
        { 534, 0, 120, 1750, "Paintjob 1" },
        { 534, 1, 120, 1750, "Paintjob 2" },
        { 534, 2, 120, 1750, "Paintjob 3" },
        { 535, 0, 120, 1750, "Paintjob 1" },
        { 535, 1, 120, 1750, "Paintjob 2" },
        { 535, 2, 120, 1750, "Paintjob 3" },
        { 536, 0, 120, 1750, "Paintjob 1" },
        { 536, 1, 120, 1750, "Paintjob 2" },
        { 536, 2, 120, 1750, "Paintjob 3" },
        { 558, 0, 120, 1750, "Paintjob 1" },
        { 558, 1, 120, 1750, "Paintjob 2" },
        { 558, 2, 120, 1750, "Paintjob 3" },
        { 559, 0, 120, 1750, "Paintjob 1" },
        { 559, 1, 120, 1750, "Paintjob 2" },
        { 559, 2, 120, 1750, "Paintjob 3" },
        { 560, 0, 120, 1750, "Paintjob 1" },
        { 560, 1, 120, 1750, "Paintjob 2" },
        { 560, 2, 120, 1750, "Paintjob 3" },
        { 561, 0, 120, 1750, "Paintjob 1" },
        { 561, 1, 120, 1750, "Paintjob 2" },
        { 561, 2, 120, 1750, "Paintjob 3" },
        { 562, 0, 120, 1750, "Paintjob 1" },
        { 562, 1, 120, 1750, "Paintjob 2" },
        { 562, 2, 120, 1750, "Paintjob 3" },
        { 565, 0, 120, 1750, "Paintjob 1" },
        { 565, 1, 120, 1750, "Paintjob 2" },
        { 565, 2, 120, 1750, "Paintjob 3" },
        { 567, 0, 120, 1750, "Paintjob 1" },
        { 567, 1, 120, 1750, "Paintjob 2" },
        { 567, 2, 120, 1750, "Paintjob 3" },
        { 575, 0, 120, 1750, "Paintjob 1" },
        { 575, 1, 120, 1750, "Paintjob 2" },
        { 576, 0, 120, 1750, "Paintjob 1" },
        { 576, 1, 120, 1750, "Paintjob 2" },
        { 576, 2, 120, 1750, "Paintjob 3" }
};*/
enum s_fiyatlar
{
	silahAdi[20],
	silahFiyat,
	silahID,
	silahMermi
};
new
	SilahFiyatlar[][s_fiyatlar] = {
	{"Colt 45", 24500, 22, 17},
	{"Deagle", 35000, 24, 7},
	{"Shotgun", 40000, 25, 10},
	{"Mac-10",35000, 28, 30},
	{"MP5",30000, 29, 30},
	{"AK-47", 48000, 30, 30},
	{"Cuntgun", 38000, 33, 10}
};
enum z_tarifeler
{
	TarifeAdi[20],
	TarifeFiyat,
	TarifeNet,
	TarifeDakika,
	TarifeSMS
};
new Tarifeler[][z_tarifeler] = {

	{"Genç Tarife", 15, 500, 10, 50},
	{"Çilek Tarife", 25, 750, 15, 70},
	{"Platinum Tarife", 40, 1000, 30, 100},
	{"Altýn Tarife", 60, 1500, 50, 150}
};
new
    HouseInteriors[][e_interior] = {
    // int name, x, y, z, intid
    {"Interior 0", 1412.639892,-1.787510,1000.924377, 2},
    {"Interior 1", 243.7173,304.9824,999.1484, 1},
    {"Interior 2", 2233.4402,-1115.2444,1050.8828, 5},
    {"Interior 3", 2496.1533,-1692.3638,1014.7422, 3},
    {"Interior 4", 2259.5000,-1135.9023,1050.6328, 10},
    {"Interior 5", 2283.1660,-1140.2847,1050.8984, 11},
    {"Interior 6", 2807.6658,-1174.7454,1025.5703, 8},
    {"Interior 7", 2237.2913,-1081.6389,1049.0234, 2},
    {"Interior 8", 318.7826,1114.4797,1083.8828, 5},
    {"Interior 9", 422.5729,2536.5952,10.0000, 10},
    {"Interior 10", 2270.2322,-1210.7551,1047.5625, 10},
    {"Interior 11", 2196.8503,-1204.4314,1049.0234, 6},
    {"Interior 12", 2365.2947,-1135.5913,1050.8826, 8},
    {"Interior 13", 2324.4143,-1149.2606,1050.7101, 12},
    {"Interior 14", 2318.1616, -1026.3762, 1050.2109, 9}
    };

enum g_interior
{
	IntName[25],
	Float:intX,
	Float:intY,
	Float:intZ,
	Float:intA,
	intID
};

new
	GarageInteriors[][g_interior] = {
	{"Lüks Garaj 1", 1374.2854,-41.0466,1001.0511,333.0062, 0},
	{"Otopark |", 1919.3907,-1853.0615,670.3015,186.5063, 0},
	{"2. El", 323.4755,-1618.6658,665.6019,178.5214, 0},
	{"LSPD Garaj", 1589.5187,-1645.8944,11.4319,198.3019, 0}
	};
enum desen_enum
{
	model_id,
	txdname[50],
	texturename[50]
};
enum rBilgi
{
	radyoAd[24],
	radyoLink[128]
}
new Radyolar[][rBilgi] = {
	{"Test", "Test"}


};
new Desenler[][desen_enum] = {
	{18202, "w_towncs_t", "hatwall256hi"},
	{18202, "w_towncs_t", "wall256hi"},
	{18202, "w_towncs_t", "pax256hi"},
	{18202, "w_towncs_t", "Upt_Fence_Mesh"},
	{18202, "w_towncs_t", "wall256hi"},
	{10789, "xenon_sfse", "Alumox64"},
	{10789, "xenon_sfse", "dt_ceiling1"},
	{10789, "xenon_sfse", "hospunder_law"},
	{10789, "xenon_sfse", "newgrnd1brn_128"},
	{10789, "xenon_sfse", "newindow4"},
	{10789, "xenon_sfse", "slab64"},
	{10789, "xenon_sfse", "ws_white_wall1"},
	{3673, "xrf_refineryla", "meetwalv2"},
	{3673, "xrf_refineryla", "Metal1_128"},
	{3673, "xrf_refineryla", "Metal3_128"},
	{3673, "xrf_refineryla", "sanpedocka1"},
	{3673, "xrf_refineryla", "sl_rustyrailing"},
	{3673, "xrf_refineryla", "steel256128"},
	{18265, "w_town3cs_t", "corugwall_sandy"},
	{18265, "w_town3cs_t", "des_ntwnwin5"},
	{18265, "w_town3cs_t", "hilcouwall2"},
	{18265,	"w_town3cs_t", "pierwall06_law"},
	{18265, "w_town3cs_t", "roof04L256"},
	{18265,	"w_town3cs_t",	"sjmscruffhut2"},
	{18265, "w_town3cs_t",	"sw_barnwoodblu"},
	{18265, "w_town3cs_t", "woodroof01_128"},
	{18265, "w_town3cs_t", "ws_boxhouse_wins5"}
};
new const DogumYeri[][] = {
	{"Amerika"},
	{"Almanya"},
	{"Avusturalya"},
	{"Brezilya"},
	{"Cin"},
	{"Meksika"},
	{"Ukrayna"},
	{"Fransa"},
	{"Rusya"},
	{"Gurcistan"},
	{"Ingiltere"},
	{"Ispanya"},
	{"Portekiz"},
	{"Italya"},
	{"Japonya"},
	{"Kanada"},
	{"Norvec"}
};
new const g_aFurnitureTypes[][] = {
	{"Duvarlar"},
	{"Masalar"},
	{"Sandalyeler"},
	{"Yataklar"},
	{"Kanepeler"},
	{"Dekorasyonlar"},
	{"Elektronik"},
	{"Vario"},
	{"Mutfak"},
	{"Banyo"},
	{"Þiþeler, bardaklar ve kaplar"},
	{"Portreler"},
	{"Vazolar"},
	{"Posterler ve Grafiti"},
	{"Çöp bidonlarý"},
	{"Giysiler"},
	{"Silindirler ve variller"},
	{"Deniz Nesneleri"},
	{"Tablolar"},
	{"Kutular"},
	{"Sütünlar"},
	{"Gýdalar"},
	{"Araçlar"},
	{"Mekanik"},
	{"Özel"},
	{"Beyaz Tahtalar"}

};
static const BuyableFurnitures[][E_BUYFURNITURES] =
{
//Mura
	{0, 9131, "Muretto beige", 100},
	{0, 8175, "Muro biancastro", 200},
	{0, 19426, "Parete piccola 1", 110},
	{0, 19427, "Parete piccola 2", 110},
	{0, 19428, "Parete piccola 3", 110},
	{0, 19429, "Parete piccola 4", 110},
	{0, 19430, "Parete piccola 5", 110},
	{0, 19431, "Parete piccola 6", 110},
	{0, 19432, "Parete piccola 7", 110},
	{0, 19433, "Parete piccola 8", 110},
	{0, 19434, "Parete piccola 9", 110},
	{0, 19435, "Parete piccola 10", 110},
	{0, 19436, "Parete piccola 11", 110},
	{0, 19437, "Parete piccola 12", 110},
	{0, 19438, "Parete piccola 13", 110},
	{0, 19439, "Parete piccola 14", 110},
	{0, 19440, "Parete piccola 15", 110},
	{0, 19441, "Parete piccola 16", 110},
	{0, 19442, "Parete piccola 17", 110},
	{0, 19443, "Parete piccola 18", 110},
	{0, 19444, "Parete piccola 19", 110},
	{0, 19353, "Parete media 1", 155},
	{0, 19354, "Parete media 2", 155},
	{0, 19355, "Parete media 3", 155},
	{0, 19356, "Parete media 4", 155},
	{0, 19357, "Parete media 5", 155},
	{0, 19358, "Parete media 6", 155},
	{0, 19359, "Parete media 7", 155},
	{0, 19360, "Parete media 8", 155},
	{0, 19361, "Parete media 9", 155},
	{0, 19362, "Parete media 10", 155},
	{0, 19363, "Parete media 11", 155},
	{0, 19364, "Parete media 12", 155},
	{0, 19365, "Parete media 13", 155},
	{0, 19366, "Parete media 14", 155},
	{0, 19367, "Parete media 15", 155},
	{0, 19368, "Parete media 16", 155},
	{0, 19369, "Parete media 17", 155},
	{0, 19379, "Parete media 18", 155},
	{0, 19371, "Parete media 19", 155},
	{0, 19372, "Parete media 20", 155},
	{0, 19373, "Parete media 21", 155},
	{0, 19445, "Parete grande 1", 202},
	{0, 19446, "Parete grande 2", 202},
	{0, 19447, "Parete grande 3", 202},
	{0, 19448, "Parete grande 4", 202},
	{0, 19449, "Parete grande 5", 202},
	{0, 19450, "Parete grande 6", 202},
	{0, 19451, "Parete grande 7", 202},
	{0, 19452, "Parete grande 8", 202},
	{0, 19453, "Parete grande 9", 202},
	{0, 19454, "Parete grande 10", 202},
	{0, 19455, "Parete grande 11", 202},
	{0, 19456, "Parete grande 12", 202},
	{0, 19457, "Parete grande 13", 202},
	{0, 19458, "Parete grande 14", 202},
	{0, 19459, "Parete grande 15", 202},
	{0, 19460, "Parete grande 16", 202},
	{0, 19461, "Parete grande 17", 202},
	{0, 19462, "Parete grande 18", 202},
	{0, 19463, "Parete grande 19", 202},
	{0, 19383, "Parete ingresso 1", 120},
	{0, 19384, "Parete ingresso 2", 120},
	{0, 19385, "Parete ingresso 3", 120},
	{0, 19386, "Parete ingresso 4", 120},
	{0, 19387, "Parete ingresso 5", 120},
	{0, 19388, "Parete ingresso 6", 120},
	{0, 19389, "Parete ingresso 7", 120},
	{0, 19390, "Parete ingresso 8", 120},
	{0, 19391, "Parete ingresso 9", 120},
	{0, 19392, "Parete ingresso 10", 120},
	{0, 19393, "Parete ingresso 11", 120},
	{0, 19394, "Parete ingresso 12", 120},
	{0, 19395, "Parete ingresso 13", 120},
	{0, 19396, "Parete ingresso 14", 120},
	{0, 19397, "Parete ingresso 15", 120},
	{0, 19398, "Parete ingresso 16", 120},
	{0, 19399, "Parete con finestra 1", 155},
	{0, 19400, "Parete con finestra 2", 155},
	{0, 19401, "Parete con finestra 3", 155},
	{0, 19402, "Parete con finestra 4", 155},
	{0, 19403, "Parete con finestra 5", 155},
	{0, 19404, "Parete con finestra 6", 155},
	{0, 19405, "Parete con finestra 7", 155},
	{0, 19406, "Parete con finestra 8", 155},
	{0, 19407, "Parete con finestra 9", 155},
	{0, 19408, "Parete con finestra 10", 155},
	{0, 19409, "Parete con finestra 11", 155},
	{0, 19410, "Parete con finestra 12", 155},
	{0, 19411, "Parete con finestra 13", 155},
	{0, 19412, "Parete con finestra 14", 155},
	{0, 19413, "Parete con finestra 15", 155},
	{0, 19414, "Parete con finestra 16", 155},
	{0, 19415, "Parete con finestra 17", 155},
	{0, 19416, "Parete con finestra 18", 155},
	//Tavoli
    {1, 2024, "Tavolo in vetro", 500},
	{1, 1281, "Tavolo con ombrello", 100},
	{1, 1432, "Tavolo con sedie", 120},
	{1, 1594, "Tavolo a scacchi", 200},
	{1, 1827, "Tavolo elegante", 180},
	{1, 1433, "Tavolo da stanza", 150},
	{1, 1516, "Tavolo da stanza 2", 150},
	{1, 2126, "Tavolo da salone", 225},
	{1, 2334, "Tavolo per cucina 1", 150},
	{1, 2335, "Tavolo per cucina 2", 150},
	{1, 2336, "Tavolo per cucina 3", 150},
	{1, 2338, "Tavolo per cucina 4", 120},
	{1, 2311, "Tavolo per TV", 350},
	{1, 2314, "Tavolo per TV 2", 350},
	{1, 2313, "Tavolo per TV 3", 400},
	{1, 2315, "Tavolo per TV 4", 350},
	{1, 2319, "Tavolo Usual", 300},
	{1, 2321, "Tavolo Usual 2", 350},
	{1, 2323, "Banco Tavolo grande", 250},
	{1, 2328, "Banco Tavolo piccolo", 120},
	{1, 2424, "Banco cucina 2", 150},
	{1, 2423, "Banco cucina Angolo 2", 120},
	{1, 2441, "Banco cucina 3", 150},
	{1, 2442, "Banco cucina Angolo 3", 120},
	{1, 2455, "Cucina 4", 150},
	{1, 2454, "Cucina Angolo 4", 120},
	{1, 2130, "Cucina rosso", 150},
	{1, 2128, "Cucina rosso 2", 120},
	{1, 2136, "Cucina in legno", 150},
	{1, 2139, "Cucina in legno 2", 120},
	{1, 2140, "Cucina in legno 3", 120},
	{1, 2346, "Tavolo Hi Fi", 350},
	{1, 2357, "Tavolo Lungo", 400},
	{1, 2368, "Bancone TV", 500},
	{1, 2370, "Tavolo Semplice", 250},
	{1, 2635, "Tavolo Pizza piccolo", 10},
	{1, 2637, "Tavolo Pizza grande", 150},
	{1, 2762, "Tavolo rosso", 150},
	{1, 2799, "Tavolo nero con sedie", 300},
	{1, 1968, "Tavoli bianchi con sedie rosse", 200},
	{1, 1969, "Tavolo bianco con sedia rossea", 200},
	{1, 936, "Superficie argentata, bordi legno", 100},
	{1, 937, "Tre ripiani. Superficie argentata, bordi legno", 100},
	{1, 941, "Tavolo fabbrica del crack", 100},
	{1, 19929, "Scrivania grigia", 100},
	{1, 3393, "Scrivania da laboratorio", 500},
	{1, 3391, "Scrivania da laboratorio 2", 250},
	{1, 1963, "Scrivania bianca (no collision)", 100},
	{1, 2112, "Tavolo quadrato", 200},
	{1, 2117, "Tavolo legno medio", 300},
	//Sedie
	{2, 1663, "Sedia da ufficio", 120},
	{2, 1715, "Sedia da ufficio (nero sbiadito)", 350},
	{2, 1704, "Poltrona legno con cuscini neri", 250},
	{2, 1705, "Poltrona legno con cuscini violacei", 250},
	{2, 1708, "Poltrona nera", 250},
	{2, 1711, "Poltrona beige (crack house)", 100},
	{2, 1810, "Sedia grigiastra arrugginita", 50},
	{2, 2121, "Sedia rossa", 65},
	{2, 1735, "Poltrona usurata e antica", 170},
	{2, 1714, "Poltrona elegante", 350},
	{2, 1811, "Sedia legno", 35},
	{2, 1716, "Sgabello nero", 40},
	{2, 2125, "Sgabello rosso", 40},
	{2, 2723, "Sgabello legno con cuscino nero", 120},
	{2, 1720, "Sedia legno con cuscino bianco", 220},
	{2, 1721, "Sedia grigia con cuscini neri(da sala d'attesa)", 25},
	{2, 1739, "Sedia legno (da cucina elegante)", 250},
	{2, 1806, "Sedia blu con rotelline(da ufficio 3)", 85},
	{2, 2120, "Segna legno, cuscini scuri (da cucina)", 90},
	{2, 2079, "Sedia da cucina ", 100},
	{2, 2120, "Sedia da cucina media", 120},
	{2, 2123, "Sedia con cuscini bianchi e legno scuro", 200},
	{2, 2124, "Segna legno chiaro, cuscini rossi", 150},
	{2, 1369, "Sedia a rotelle", 60},
	{2, 2343, "Sedia barbiere", 120},
	{2, 1825, "Sedia tavolo eleganti", 350},
	//Letti
	{3, 1700, "Letto matrimoniale", 255},
	{3, 1701, "Letto matrimoniale 2", 275},
	{3, 1745, "Letto matrimoniale 3", 270},
	{3, 1793, "Materasso",  100},
	{3, 1794, "Letto singolo",  120},
	{3, 1796, "Letto matrimoniale", 150},
	{3, 1797, "Letto usual", 210},
	{3, 1798, "Letto usual 2", 230},
	{3, 1799, "Letto medio", 225},
	{3, 1802, "Letto medio 2", 220},
	{3, 1803, "Letto a castello",  230},
	{3, 1800, "Brandina",  80},
	{3, 2299, "Letto elegante", 270},
	{3, 2563, "Letto con kit", 995},
	//Divani
	{4, 11717, "Divano moderno", 150},
	{4, 1726, "Divano nero elegante", 700},
	{4, 1727, "Poltrona elegante nera", 500},
	{4, 1702, "Divano legno con cuscini bianchi", 270},
	{4, 1703, "Divano legno con cuscini neri", 270},
	{4, 1706, "Divano legno con cuscini violacei", 230},
	{4, 1709, "Divano beige allungato - crack house", 150},
	{4, 1710, "Divano beige a quattro posti - crack house", 130},
	{4, 1712, "Divano beige a due posti - crack house", 100},
	{4, 1712, "Divano classico 4", 175},
	{4, 1713, "Divano nero, semplice", 200},
	{4, 1707, "Divano grigio con cuscini rossi", 450},
	{4, 1753, "Divano in pelle", 520},
	{4, 1756, "Divano usato", 170},
	{4, 1757, "Divano usato 2", 180},
	{4, 1760, "Divano medio", 160},
	{4, 1761, "Divano medio 2", 170},
	{4, 1768, "Divano medio 3", 185},
	{4, 1763, "Divano rosa e legno di bassa qualità", 125},
	{4, 1764, "Divano giallastro", 170},
	{4, 1766, "Divano bassa qualità", 160},
	{4, 1768, "Divano legno con cuscini azzurri", 130},
	{4, 1704, "Poltroncina", 50},
	{4, 11717, "Divano rosso elegante", 350},
	{4, 2638, "Divani pizzastack", 300},
 	//Decorazioni
 	{5, 1580, "Pacco droga rosso", 100},
	{5, 1576, "Pacco droga arancione", 100},
	{5, 1577, "Pacco droga giallo", 100},
	{5, 1578, "Pacco droga verde", 100},
 	{5, 14781, "Ring box", 5000},
 	{5, 1808, "Distributore acqua", 200},
	{5, 1667, "Bicchiere 3", 10},
	{5, 1510, "Posa cenere", 20},
	{5, 19896, "Pacchetto di sigarette rosso", 2},
	{5, 19897, "Pacchetto di sigarette blu", 2},
	{5, 2814, "Wellstacked scatola singola vuota", 3},
	{5, 2768, "Confezione cluck bell vuota 2", 5},
	{5, 2837, "Cluckin' Bell, 2 confezioni d'hamburger e 2 panini", 3},
	{5, 2838, "Wellstacked scatole vuote", 3},
	{5, 2840, "Confezioni di panini e bibite vuote del Burgershot", 3},
	{5, 2866, "Confezioni vuote 1", 5},
	{5, 2821, "Confezione vuote di cibo cinese", 3},
	{5, 2858, "Pacchetto di patatine finite", 3},
	{5, 2821, "Confezione di cereali", 3},
	{5, 2805, "Busta marroncina contenente della carne", 10},
	{5, 2803, "Busta contenente della carne", 20},
	{5, 2745, "Statua", 1000},
	{5, 2809, "Busto in granito di una statua", 500},
	{5, 19611, "Asta del microfono", 100},
	{5, 19617, "Disco d'oro", 300},
	{5, 1665, "Posacenere", 30},
	{5, 19466, "Vetro semitrasparente", 200},
	{5, 1649, "Vetro con bordi neri", 200},
	{5, 2828, "Fotografie", 5},
	{5, 2827, "Pila di giornaletti", 5},
	{5, 2826, "Pila di giornaletti", 5},
	{5, 2825, "Vari libri sovrapposti tra loro", 5},
	{5, 2894, "Libro", 10},
	{5, 2725, "Spray di qualcosa", 5},
	{5, 2751, "Confezione di qualcosa", 5},
	{5, 2767, "Vassoio vuoto", 10},
	{5, 2221, "Vassoio ciambelle", 15},
	{5, 2222, "Vassoio ciambelle", 15},
	{5, 2223, "Vassoio ciambelle", 15},
	{5, 2212, "Vassoio", 15},
	{5, 2213, "Vassoio burgershot ", 15},
	{5, 2214, "Vassoio burgershot", 15},
	{5, 2218, "Vassoio pizzeria", 15},
	{5, 2219, "Vassoio pizzeria", 15},
	{5, 2220, "Vassoio pizzeria - scatola chiusa", 15},
	{5, 19473, "Piantina di Cannabis", 100},
	{5, 19636, "Cassa mele rosse", 20},
	{5, 19637, "Cassa mele verdi", 20},
	{5, 19638, "Cassa mele arancioni", 20},
	{5, 19639, "Cassa legno vuota", 10},
	{5, 2773, "Divisore con corda rossa", 50},
	{5, 1485, "Sigaro", 50},
	{5, 1550, "Borsone contenente banconote", 50},
	{5, 19471, "Cartellone in vendita", 50},
	{5, 2558, "Tenda blu", 40},
	{5, 11245, "Bandiera USA", 30},
	{5, 967, "Guardiola", 200},
	{5, 19632, "Legno che brucia", 120},
	{5, 2435, "Bancone frontale", 120},
	{5, 2434, "Bancone laterale", 120},
	{5, 2188, "Tavolo blackjack", 200},
	{5, 625, "Pianta 1", 5},
	{5, 630, "Pianta 2", 5},
	{5, 644, "Pianta 3", 5},
	{5, 1361, "Pianta con vascone", 50},
	{5, 2001, "Pianta con vaso 1", 5},
	{5, 2241, "Pianta con vaso 2", 5},
	{5, 2245, "Pianta con vaso 3", 5},
	{5, 2811, "Pianta con vaso 4", 5},
	{5, 2670, "Rifiuti per terra 1", 20},
	{5, 2671, "Rifiuti per terra 2", 20},
	{5, 2672, "Rifiuti per terra 3", 20},
	{5, 2673, "Rifiuti per terra 4", 20},
	{5, 2674, "Rifiuti per terra 5", 20},
	{5, 2675, "Rifiuti per terra 6", 20},
	{5, 2676, "Rifiuti per terra 7", 20},
	{5, 2677, "Rifiuti per terra 8", 20},
	{5, 2342, "Rifiuti per terra 9", 20},
	{5, 11686,  "Bancone da bar", 1400},
	{5, 2784, "Bancone con Arco d'oro", 2000},
	{5, 11725,  "Camino 1", 500},
	{5, 11724, "Camino 2", 500},
	{5, 997, "Sbarre", 500},
	{5, 3850, "Divisore in vetro", 250},
	{5, 19624, "Valigia", 30},
	{5, 1738, "Termosifone", 100},
	{5, 2146, "Barella", 50},
	{5, 2609, "Cassetti", 50},
	{5, 2919, "Borsone", 10},
	{5, 1665, "Posacenere e sigarette", 5},
	{5, 2891, "Pacco", 20},
	{5, 19273, "Pannello ", 150},
	{5, 2663, "Busta", 5},
	{5, 2222, "Vassoio colazione", 10},
	{5, 19054, "Pacco regalo 1", 5},
	{5, 19055, "Pacco regalo 2", 5},
	{5, 19056, "Pacco regalo 3", 5},
	{5, 19057, "Pacco regalo 4", 5},
	{5, 19058, "Pacco regalo 5", 5},
	{5, 19619, "Cassaforte aperta", 1500},
	{5, 2645, "Menu da muro - pizzastack", 200},
	{5, 2453, "Pizza da esposizione - pizzastack", 100},
	{5, 2439, "Bancone pizzastack", 500},
	{5, 2451, "Grill Pizzastack", 500},
	{5, 19054, "Pacco rosso", 10},
	{5, 19055, "Pacco 2", 10},
	{5, 19056, "Pacco 3", 10},
	{5, 19057, "Pacco 4", 10},
	{5, 19058, "Pacco 5", 10},
	{5, 19059, "Palla Natalizia 1", 10},
	{5, 19060, "Palla Natalizia 2", 10},
	{5, 19061, "Palla Natalizia 3", 10},
	{5, 19062, "Palla Natalizia 4", 10},
	{5, 19063, "Palla Natalizia 5", 10},
	{5, 14467, "Statua gigante Carter", 1500},
	{5, 1513, "Porta oggetti parete", 140},
	{5, 1481, "Barbecue 2", 300},
	//Elettronica
	{6, 2412, "Metal Detector", 500},
	{6, 18872, "Cellulare blu", 600},
	{6, 18867, "Cellulare rosso", 600},
	{6, 2344, "Telecomando bianco", 200},
	{6, 14391, "Postazione grande deejay", 800},
	{6, 957, "Lampada chic", 200},
	{6, 2026, "Lampadario", 100},
	{6, 2074, "Lampadario", 100},
	{6, 921, "Luce Industriale", 150},
	{6, 1429, "TV Normale", 220},
	{6, 1518, "TV Normale 2", 225},
	{6, 2297, "TV Usual", 450},
	{6, 1750, "TV Bassa qualità", 210},
	{6, 1752, "TV Bassa qualità 2", 210},
	{6, 2224, "TV Sferica", 650},
	{6, 1786, "TV Grande", 435},
	{6, 2606, "4 televisori affiancati", 900},
	{6, 2921, "Telecamera", 2405},
	{6, 1622, "Telecamera con Altoparlante", 2900},
	{6, 2332, "Cassaforte", 225},
	{6, 1719, "Console", 200},
	{6, 1782, "Lettore DVD", 150},
	{6, 1783, "Lettore DVD 2", 150},
	{6, 2229, "Stereo", 300},
	{6, 2231, "Stereo 2", 350},
	{6, 2232, "Stereo 3", 550},
	{6, 2202, "Fotocopiatrice",300},
	{6, 1208, "Lavatrice 1", 200},
	{6, 2337, "Lavatrice 2", 220},
	{6, 2425, "Macchinetta Sprunk", 200},
	{6, 2131, "Frigo bianco", 450},
	{6, 2452, "Frigo per drinks doppio", 1500},
	{6, 2531, "Frigo per drinks singolo", 750},
	{6, 2426, "Forno pizzastack", 1000},
	{6, 2417, "2 forno Pizzastack", 1000},
	{6, 2132, "Lavabo cucina", 240},
	{6, 2170, "Fornello cucina", 230},
	{6, 19915, "Fornello cucina arruginito", 100},
	{6, 2340, "Banco per cucinare", 250},
	{6, 2421, "Microonde", 345},
	{6, 2627, "Tapis Roulant", 345},
	{6, 2069, "Lampada", 215},
	{6, 2108, "Lampada 2", 220},
	{6, 2239, "Lampada 3", 225},
	{6, 16780, "Lampada con ventilatore", 200},
	{6, 1731, "Lampadina", 135},
	{6, 2074, "Lampadina 2", 135},
	{6, 1734, "Lampione", 140},
	{6, 1893, "Lampione 2", 145},
	{6, 1515, "Slot Machine",1200},
	{6, 2226, "Stereo rosso e nero", 200},
	{6, 19807, "Telefono", 110},
	{6, 19808, "Tastiera nera computer", 110},
	{6, 2750, "Cellulare", 20},
	{6, 19614, "Amplificatore chitarra", 250},
	{6, 19612, "Amplificatore chitarra piccolo", 150},
	{6, 19613, "Amplificatore chitarra nero", 250},
	{6, 19610, "Microfono", 50},
	{6, 19609, "Batteria", 250},
	{6, 2192, "Ventilatore", 100},
	{6, 2196, "Abat-jour", 100},
	{6, 2131, "Doppio frigo bianco", 200},
	{6, 19893, "Laptop aperto", 190},
	{6, 19894, "Laptop chiuso", 170},
	{6, 19814, "Presa elettrica", 100},
	{6, 19813, "Presa elettrica 2", 100},
	{6, 19826, "Interruttore 1", 100},
	{6, 19827, "Interruttore 2", 100},
	{6, 19828, "Interruttore 3", 100},
	{6, 19829, "Interruttore 4", 100},
	{6, 18647, "Neon rosso", 100},
	{6, 18648, "Neon blu", 100},
	{6, 18649, "Neon verde", 100},
	{6, 18650, "Neon giallo", 100},
	{6, 18651, "Neon viola", 100},
	{6, 18652, "Neon bianco", 100},
	{6, 14820, "Set Deejay", 300},
	{6, 3804, "Condizionatore", 200},
	{6, 1958, "Mixer Deejay", 300},
	{6, 927, "Impianto elettrico", 500},
	{6, 1697, "Impianto fotovoltaico", 500},
	{6, 19121, "Paletto con luce bianca", 250},
	{6, 19122, "Paletto con luce blu", 250},
	{6, 19123, "Paletto con luce verde", 250},
	{6, 19124, "Paletto con luce rossa", 250},
	{6, 19125, "Paletto con luce gialla", 250},
	{6, 19126, "Paletto con luce azzurra", 250},
	{6, 19127, "Paletto con luce viola", 250},
	{6, 19317, "Chitarra elettrica 1", 250},
	{6, 19318, "Chitarra elettrica 2", 250},
	{6, 19319, "Chitarra elettrica 3", 250},
	{6, 19129, "Pista da ballo grande", 500},
	{6, 19128, "Pista da ballo piccola", 250},
	{6, 18655, "Faretto da discoteca (bianco)", 200},
	{6, 18656, "Faretto da discoteca (verde)", 200},
	{6, 18657, "Faretto da discoteca (rosso)", 200},
	{6, 18646, "Sirena polizia", 500},
	{6, 11728, "Citofono", 200},
	{6, 2421, "Forno a micro onde", 40},
	{6, 2962, "Allarme anti incendio", 40},
	{6, 19279, "Luce potente", 100},
	{6, 2196, "Lampada", 30},
	{6, 11743, "Macchina del caffè", 80},
	{6, 2149, "Microonde", 80},
	{6, 19786, "TV grande", 500},
	{6, 2202, "Stampante", 30},
	{6, 1661, "Lampadario 7", 150},
	{6, 19806, "Lampadario 5", 100},
	{6, 11726, "Lampadario 6", 100},
	{6, 19830, "Frullatore", 50},
	{6, 2415, "Friggitrice pizzastack", 1300},
	{6, 2771, "Registratore di cassa 1", 700},
	{6, 1514, "Registratore di cassa 2", 700},
	{6, 1959, "Registatore di cassa 3", 700},
	{6, 955, "Distributore automatico sprunk", 500},
	{6, 956, "Distributore automatico merendine", 500},
	{6, 1209, "Soda Machine", 500},
	{6, 2238, "Lava Lamp", 500},
	{6, 2002, "Distributore Automatico Acqua", 150},
	{6, 14807, "2 paletti con luci", 150},
	{6, 2076, "Lampadario Tondeggiante", 150},
	{6, 1954, "Mixer Deejay 2", 300},
	{6, 2176, "Luce Casinò", 350},
	{6, 2103, "Low HiFi", 300},
	{6, 2105, "Lampada", 100},
	{6, 19806, "Lampadario luxury", 100},
	{6, 1718, "Macchinetta soldi", 45},
	//Vario
	{7, 3120, "Palla da basket", 50},
	{7, 2330, "Armadio", 140},
	{7, 1417, "Armadio semi-aperto", 140},
	{7, 2708, "Ripiano esposizione", 140},
	{7, 2573, "Armadio e Scrivania", 500},
	{7, 2087, "Comò legno", 250},
	{7, 2020, "Comò 2", 200},
	{7, 1743, "Comò 3", 200},
	{7, 2385, "Scaffale Trofei",230},
	{7, 3497, "Canestro",340},
	{7, 2629, "Panca piana",190},
	{7, 2630, "Ciclette",240},
	{7, 2964, "Tavolo da biliardo", 680},
	{7, 14651, "Tavolo da biliardo con lampadario", 800},
	{7, 1689, "Tavolo da bar", 390},
	{7, 2027, "Tavolo da bar 2", 390},
	{7, 2614, "Bandiera Americana",135},
	{7, 2204, "Scaffale con Armadietto",535},
	{7, 1742, "Libreria 1",260},
	{7, 2161, "Libreria  2",250},
	{7, 2167, "Armadietto ufficio",235},
	{7, 2169, "Scrivania",320},
	{7, 2173, "Scrivania 2",335},
	{7, 2205, "Scrivania 3",330},
	{7, 2197, "Cassettiera ufficio",160},
	{7, 1736, "Renna",385},
	{7, 2833, "Tappeto 1",210},
	{7, 2834, "Tappeto 2",180},
	{7, 2835, "Tappeto 3",180},
	{7, 2836, "Tappeto 4",180},
	{7, 2841, "Tappeto 5",180},
	{7, 2510, "Aeroplanino",250},
	{7, 19816, "Bombola d'ossigeno", 200},
	{7, 1549, "Cestino grigio", 100},
	{7, 19831, "Barbue", 100},
	{7, 11729, "Armadietto verde chiuso", 120},
	{7, 11730, "Armadietto verde aperto", 120},
	{7, 11712, "Crocifisso", 50},
	{7, 19623, "Macchina fotografica", 100},
	{7, 19339, "Bara legno", 200},
	{7, 1428, "Scala portatile", 100},
	{7, 1212, "Banconote", 10},
	{7, 1073, "Ruota", 40},
	{7, 19320, "Zucca halloween", 10},
	{7, 19076, "Albero di Natale", 50},
	{7, 14882, "Tubature", 150},
	{7, 19088, "Corda 3", 20},
	{7, 19087, "Corda 2", 20},
	{7, 19089, "Corda 1", 20},
	{7, 1572, "Carrello Aeroporto", 20},
	{7, 1349, "Carrello", 20},
	{7, 1369, "Sedia a rotelle arruginita", 20},
	{7, 334, "Manganello", 500},
	{7, 2060, "Sacco Contenente Sabbia", 150},
	{7, 19468, "Secchio", 50},
	{7, 19092, "Pompom Verde", 50},
	{7, 3470, "Impianto di ventilazione", 2500},
	{7, 1579, "Confezione Blu",  400},
	{7, 2057, "Taniche arruginite", 20},
	{7, 2057, "Scatola in ferro", 100},
	{7, 1650, "Tanica Rossa", 100},
	//Cucina
	{8, 2822, "Pila di piatti e piattini", 5},
	{8, 2829, "Piatto 1", 7},
	{8, 2830, "Piatto 2", 7},
	{8, 2831, "2 piatti", 8},
	{8, 2832, "3 piatti", 10},
	{8, 19851, "Padella", 50},
	{8, 19582, "Pezzo di carne", 20},
	{8, 19583, "Coltello", 15},
	{8, 19584, "Pentola 1", 30},
	{8, 19585, "Pentola 2", 35},
	{8, 19586, "Spatola", 20},
	{8, 11718, "Pentola 3", 20},
	{8, 11719, "Pentola 4", 20},
	{8, 2013, "Cucina 1 - lavandino", 100},
	{8, 2014, "Cucina 1 - ripiano centrale 1", 100},
	{8, 2015, "Cucina 1 - ripiano centrale 2", 100},
	{8, 2016, "Cucina 1 - ripiano laterale sinistro", 100},
	{8, 2017, "Cucina 1 - fornelli", 120},
	{8, 2018, "Cucina 1 - lavatrice", 120},
	{8, 2019, "Cucina 1 - ripiano laterale destro", 100},
	{8, 2127, "Cucina 2 - doppio frigo", 230},
	{8, 2128, "Cucina 2 - tre cassetti", 230},
	{8, 2129, "Cucina 2 - ripiano", 230},
	{8, 2130, "Cucina 2 - lavandino e superficie", 230},
	{8, 2141, "Cucina 3 - frigo", 250},
	{8, 2131, "Cucina 3 - doppio frigo", 320},
	{8, 2132, "Cucina 3 - lavandino e superficie", 300},
	{8, 2133, "Cucina 3 - quattro cassetti", 300},
	{8, 2134, "Cucina 3 - ripiano con cassetto e sportello", 300},
	{8, 2135, "Cucina 4 - fornello", 450},
	{8, 2136, "Cucina 4 - lavandino", 450},
	{8, 2137, "Cucina 4 - tre cassetti", 450},
	{8, 2138, "Cucina 4 - sportello inferiore", 450},
	{8, 2139, "Cucina 4 - ripiano in granito", 450},
	{8, 2142, "Cucina 5 - ripiano", 120},
	{8, 2143, "Cucina 5 - fornello e sportello", 150},
	{8, 2148, "Cucina 5 - ripiano vuoto", 250},
	{8, 2144, "Fornello grigio", 120},
	{8, 2145, "Cucina 6 - 3 ripiani, uno sopra l'altro", 130},
	{8, 2147, "Frigorifero grigio", 120},
	{8, 2150, "Lavandino grigio", 120},
	{8, 2151, "Cucina 7 - ripiano con sportello e 2 cassetti", 360},
	{8, 2152, "Cucina 7 - doppio ripiano", 320},
	{8, 2154, "Cucina 7 - lavandino", 330},
	{8, 2155, "Cucina 7 - ripiano piccolo", 310},
	{8, 2153, "Frigorifero bianco e grigio", 200},
	{8, 2156, "Cucina 8 - doppio ripiano", 110},
	{8, 2158, "Cucina 8 - frigorifero", 130},
	{8, 2159, "Cucina 8 - 3 cassetti e ripiano vuoto", 115},
	{8, 2160, "Cucina 8 - lavandino", 120},
	{8, 2445, "Ripiano in granito", 700},
	{8, 2303, "Ripiano in granito 2", 600},
	{8, 2305, "Cucina - ripiano ad angolo", 500},
	//Bagno
	{9, 2514, "WC 1", 200},
	{9, 2528, "WC 2", 150},
	{9, 2521, "WC 3", 200},
	{9, 2515, "Lavandino 1", 150},
	{9, 2516, "Vasca da bagno 1", 250},
	{9, 2526, "Vasca da bagno 2", 250},
	{9, 2520, "Doccia 1", 250},
	{9, 2527, "Doccia 2", 300},
	{9, 2517, "Doccia 3", 200},
	{9, 2518, "Lavandino 2", 100},
	{9, 2523, "Lavandino 3", 100},
	{9, 2524, "Lavandino 4", 100},
	{9, 2602, "Urinatorio Prigione", 100},
	{9, 19873, "Carta igienica", 20},
	{9, 19874, "Sapone", 20},
	{9, 2741, "Contenitore sapone liquido", 20},
	{9, 2742, "Asciugamani elettronico", 20},
	//Bottiglie, bicchieri e tazze
	{10, 1509, "Bottiglia verdastra con fondo rotondo", 100},
	{10, 1512, "Bottiglia verdastra ", 100},
	{10, 1520, "Bottiglia marrone di whisky", 100},
	{10, 1543, "Bottiglia di birra", 100},
	{10, 1544, "Bottiglia giallastra", 100},
	{10, 1546, "Bicchiere cartonificato di sprunk", 50},
	{10, 1551, "Bottiglia verdastra 1", 100},
	{10, 16668, "Bottiglia bianca", 100},
	{10, 16669, "Bottiglia verdastra", 100},
	{10, 19818, "Bicchiere", 100},
	{10, 19819, "Bicchiere da cocktail", 100},
	{10, 19835, "CoffeeCup", 20},
	{10, 19820, "Bottiglia alcolica 1", 20},
	{10, 19821, "Bottiglia alcolica 2", 20},
	{10, 19822, "Bottiglia alcolica 3", 20},
	{10, 19823, "Bottiglia alcolica 4", 20},
	{10, 19824, "Bottiglia alcolica 5", 20},
	//Porte
	{11, 2875, "Porta Zip", 200},
	{11, 2876, "Porta Sport", 230},
	{11, 2879, "Porta Ds", 210},
	{11, 2878, "Porta Victim", 220},
	{11, 1502, "Porta legno", 75},
	{11, 1491, "Porta legno scuro", 75},
	{11, 3089, "Porta legno con vetro",75},
	{11, 1492, "Porta verde", 75},
	{11, 1494, "Porta bluastra", 75},
	{11, 1493, "Porta rossa con reticola", 80},
	{11, 1495, "Porta blu con reticola", 75},
	{11, 1498, "Porta bianca arruginita", 75},
	{11, 1499, "Porta grigia arruginita", 80},
	{11, 1535, "Porta rosa", 75},
	{11, 1537, "Porta grigia (alhambra)", 175},
	{11, 1536, "Porta villa Maddogg", 175},
	{11, 1557, "Porta di lusso", 175},
	{11, 1504, "Porta rossa", 100},
	{11, 1507, "Porta gialla", 100},
	{11, 1567, "Porta guardaroba", 100},
	{11, 1555, "Porta blu (stanza motel)", 100},
	{11, 2963, "Porta cella frigorifera", 520},
	{11, 1569, "Porta con vetro", 80},
	{11, 19302, "Sbarra prigione 1", 700},
	{11, 19303, "Sbarra prigione 2", 700},
	{11, 19304, "Sbarre prigione 3", 900},
	{11, 2930, "Sbarre", 100},
	{11, 3055, "Porta garage 1", 300},
	{11, 17951, "Porta garage 2", 300},
	{11, 19862, "Porta garage 3", 300},
	{11, 19861, "Porta garage 4", 300},
	{11, 9093, "Porta garage 5", 300},
	{11, 10149, "Porta garage 6", 300},
	{11, 11313, "Porta garage 7", 300},
	//Vasi
	{12, 741, "Vaso piccolo (rosastro)", 50},
	{12, 742, "Vaso (rosastro)", 50},
	{12, 743, "Vaso (rossiccio)", 50},
	{12, 741, "Vaso piccolo (rosastro)", 50},
	{12, 14705, "Vaso", 30},
	//Poster e graffiti
	{13, 18659, "Graffito Groove", 10},
	{13, 18660, "Graffito Seville Families", 10},
	{13, 18661, "Graffito varrio Aztecas", 10},
	{13, 18662, "Graffito Kilo Tray Ballas", 10},
	{13, 18663, "Graffito San Fierro Rifa", 10},
	{13, 18664, "Graffito Temple Drive Ballas", 10},
	{13, 18665, "Graffito Vagos", 10},
	{13, 18666, "Graffito Front Yard Ballas", 10},
	{13, 18667, "Graffito Rollin Heights Ballas", 10},
	{13, 1529, "Graffito Ballas-Groove", 10},
	{13, 1530, "Graffito Aztecas-Groove", 10},
	{13, 1531, "Graffito Aztecas-Groove", 10},
	{13, 2695, "Poster con rapper", 40},
	{13, 2696, "Poster con un cane", 40},
	{13, 2691, "Poster con vari rapper", 40},
	{13, 2685, "Cartello verde (lavarsi le mani)", 10},
	{13, 2687, "Cartello igiene", 10},
	{13, 2684, "Attestato", 10},
	{13, 2662, "Poster bobo", 10},
	{13, 2615, "Poster raffigurate varie armi", 60},
	{13, 2580, "Poster XXX 1", 50},
	{13, 2587, "Poster XXX 2", 50},
	{13, 2588, "Poster XXX 3", 50},
	{13, 2667, "Menu The Buster", 30},
	{13, 2668, "Menu The Full Rack", 30},
	{13, 2666, "Menu Doubled Luxe", 30},
	{13, 2665, "Menu completo", 30},
	{13, 2599, "Sex Shop Double Poster", 30},
	//Contenitori rifiuti
	{14, 3035, "Cassonetto nero", 100},
	{14, 1415, "Cassonetto verde aperto", 100},
	{14, 1439, "Cassonetto verde chiuso", 100},
	{14, 1329, "Cassonetto verde aperto", 100},
	{14, 1330, "Cassonetto verde chiuso", 100},
	{14, 1345, "Cassonetto nero chiuso", 100},
	{14, 1333, "Cassonetto rosso chiuso", 100},
	{14, 1334, "Cassonetto blu chiuso", 100},
	{14, 1344, "Cassonetto verde e nero chiuso", 100},
	{14, 1331, "Contenitore blu", 100},
	{14, 1332, "Cestino nero", 100},
	{14, 1409, "Contenitore blu", 100},
	{14, 1328, "Cestino nero", 100},
	{14, 2613, "Cestino bianco", 100},
	{14, 1337, "Contenitore blu scuro con rotelle", 100},
	{14, 1339, "Contenitore blu con rotelle", 100},
	{14, 1328, "Cestino in metallo", 30},
	{14, 1330, "Cestino 1", 30},
	{14, 1329, "Cestino 2", 30},
	//Vestiti
	{15, 19825, "Orologio", 20},
	{15, 2391, "Pantaloni beige", 50},
	{15, 2819, "Vestiti beige", 50},
	{15, 2843, "Vestiti blu e gialli", 50},
	{15, 2844, "Vestiti grigi, bianchi e rossi", 50},
	{15, 2845, "Vestiti blu e gialli", 50},
	{15, 2846, "Vestiti bianchi e grigi", 50},
	{15, 2869, "Felpa grigia", 50},
	{15, 2704, "Felpa arancione e nera", 50},
	{15, 2705, "Canottiera bianca con numero 7", 90},
	{15, 2706, "Canottiera rossa col numero 69", 90},
	{15, 2374, "Camice blu", 50},
	{15, 2377, "Jeans scuri", 50},
	{15, 2378, "Jeans blu", 50},
	{15, 2383, "Maglie gialle", 50},
	{15, 2384, "Pila di jeans beige", 50},
    {15, 371, "Zaino", 50},
    {15, 2391, "Vestiti 1", 200},
    {15, 2396, "Vestiti 2", 200},
    {15, 2399, "Vestiti 3", 200},
    {15, 11735, "Stivale", 50},
    {15, 18094, "Pila di vestiti", 150},
	{15, 2386, "Pila di jeans blu", 50},
	{15, 2411, "Busto manichino (legno)", 120},
	{15, 2407, "Busto manichino (in plastica nera)", 120},
	{15, 2408, "2 gambe di manichino (in plastica bianca)", 100},
	{15, 19064, "Cappello di natale 1", 20},
	{15, 19065, "Cappello di natale 2", 20},
	{15, 19066, "Cappello di natale 3", 20},
	{15, 19472, "Maschera Anti-Gas", 500},
	//Bombole e barili
	{16, 918, "Bombola blu", 100},
	{16, 925, "Gabbia con vari barili", 200},
	{16, 930, "6 bombole rosse e nere", 150},
	{16, 1217, "Barile azzurro arruginito", 100},
	{16, 1218, "Barile giallo", 300},
	{16, 1222, "Barile rossiccio", 100},
	{16, 1225, "Barile rosso", 300},
	{16, 3632, "Barile rosso 2", 250},
	{16, 3633, "4 barili rossi", 600},
	{16, 931, "Gabbia a due ripiani", 100},
	{16, 1370, "Bombola del gas", 40},
	{16, 1348, "8 bombole nere e rosse", 80},
	//Oggetti per il mare
	{17, 1639, "Rete da tennis", 250},
	{17, 1640, "Telo da mare bianco e verde", 50},
	{17, 1641, "Telo da mare azzurrino", 50},
	{17, 1642, "Telo da mare rosso", 50},
	{17, 1644, "Crema abbronzante", 20},
	{17, 1645, "Sdraio", 50},
	{17, 1646, "Sdraio con telo bianco e verde", 50},
	{17, 1647, "Lettino", 50},
	{17, 2404, "Tavoletta Surf 1", 125},
	{17, 2405, "Tavoletta Surf 2", 125},
	{17, 2406, "Tavoletta Surf 3", 125},
	//Quadri
	{18, 2255, "Quadro ragazza nuda di spalle", 100},
	{18, 2256, "Quadro palme", 120},
	{18, 2257, "Quadro vari colori", 200},
	{18, 2258, "Quadro grattacieli", 300},
	{18, 2259, "Quadro blu", 100},
	{18, 2260, "Quadro grigio", 100},
	{18, 2261, "Quadro grigio di un ponte", 100},
	{18, 2262, "Quadro grigio", 100},
	{18, 2263, "Quadro varie luci", 100},
	{18, 2264, "Quadro Santa Maria Beach", 100},
	{18, 2265, "Quadro deserto Las Venturas", 100},
	{18, 2266, "Quadro palazzi di Los Santos", 100},
	{18, 2267, "Quadro legno nave", 100},
	{18, 2268, "Quadro legno gatto nero", 100},
	{18, 2269, "Quadro legno lago", 210},
	{18, 2270, "Quadro  tre foglie", 100},
	{18, 2271, "Quadro bianco", 110},
	{18, 2272, "Quadro legno paese", 200},
	{18, 2273, "Quadro delle rose", 100},
	{18, 2274, "Quadro delle rose", 106},
	{18, 2275, "Quadro dei frutti", 111},
	{18, 2276, "Quadro  il ponte di San Fierro", 100},
	{18, 2277, "Quadro legno gatto bianco", 106},
	{18, 2278, "Quadro legno nave", 130},
	{18, 2279, "Quadro il chilliad", 120},
	{18, 2280, "Quadro legno spiaggia", 110},
	{18, 2281, "Quadro legno ponte. (Cielo arancione)", 100},
	{18, 2282, "Quadro legno paesaggio", 100},
	{18, 2283, "Quadro vari colori", 110},
	{18, 2284, "Quadro vari palazzi", 300},
	{18, 2285, "Quadro con varie tonalità chiare di colori", 700},
	{18, 2286, "Quadro legno nave", 110},
	{18, 2287, "Quadro due barche a vela", 400},
	{18, 2288, "Quadro legno nave", 100},
	{18, 2289, "Quadro il chilliad", 100},
	//Scatole
	{19, 3630, "12 scatoloni sovrapposti in due file", 400},
	{19, 2972, "Scatola blu", 100},
	{19, 2973, "Casse coperte da reti rosse", 150},
	{19, 2795, "Casse azzurrine", 150},
	{19, 1428, "Scale medie dimensioni", 100},
	{19, 1437, "Scale di grosse dimensioni", 200},
	{19, 964,  "Box argentato, singolo", 100},
	{19, 1264, "Sacco spazzatura", 20},
	{19, 1271, "Scatola legno chiusa", 30},
	{19, 2040, "Scatola piccola", 30},
	{19, 2328, "Scatola piccola 2", 30},
	{19, 2654,  "Scatole eris", 30},
	{19, 2969, "Scatola in legno", 30},
	{19, 1558, "Scatola in cartone chiusa", 30},
	{19, 1685, "Varie scatole", 30},
	{19, 2065, "Archivio verdastro, 3 cassetti", 50},
	{19, 2066, "Archivio marrone e beige, 3 cassetti", 50},
	{19, 2067, "Archivio azzurro e beige, 3 cassetti", 50},
	{19, 939, "Scatoloni in vari ripiani", 120},
	{19, 942, "Scatoloni in vari ripiani 2", 120},
	{19, 1230, "Scatola rotta 1", 20},
	{19, 926, "Scatola rotta 2", 20},
	{19, 928, "Scatola rotta 3", 20},
	{19, 1220, "Scatolone 1", 20},
	{19, 1221, "Scatolone 2", 20},
	{19, 3761, "Scaffale con scatole", 100},
	{19, 2063, "Scaffale senza scatole", 80},
	{19, 2583, "Scaffale 1 Sex Shop", 500},
	{19, 2581, "Scaffale 2 Sex Shop", 500},
	//Colonne
	{20, 3440, "Colonna arrotondata di medie dimensioni", 150},
	{20, 3494, "Colonna in marmo beige", 600},
	{20, 3529, "Colonna in mattoni e ferro", 250},
	{20, 3530, "Colonna in mattoni e ferro 2", 450},
	{20, 19943, "Colonna caligulas", 600},
	{20, 2774, "Colonna grande", 200},
	{20, 3675, "Tubo Ventilazione", 3000},
	//Cibo
	{21, 1582, "Cartone della pizza 1", 10},
	{21, 19571, "Cartone della pizza 2", 10},
	{21, 19525, "Torta nuziale", 120},
	{21, 19563, "Succo all'arancia", 10},
	{21, 19564, "Succo alla mela", 10},
	{21, 19572, "Cassa di bibite", 20},
	{21, 19574, "Arancia", 10},
	{21, 19575, "Mela rossa", 10},
	{21, 19576, "Mela verde", 10},
	{21, 19577, "Pomodoro", 10},
	{21, 19578, "Banana", 10},
	{21, 19579, "Pane in cassetta", 10},
	{21, 19561, "Scatola di cereali 1", 10},
	{21, 19562, "Scatola di cereali 2", 10},
	{21, 19569, "Cartone di latte", 10},
	{21, 19570, "Bottiglia di latte", 10},
	{21, 19565, "Cibo surgelato 1", 10},
	{21, 19566, "Cibo surgelato 2", 10},
	{21, 11722, "Contenitore Ketchup", 10},
	{21, 11723, "Contenitore senape", 10},
	//Utensili
    {22, 2332, "Cassaforte", 3500},
	{22, 18635, "Martello", 10},
	{22, 19631, "Martello grosso", 50},
	{22, 18644, "Cacciavite", 10},
	{22, 18633, "Chiave inglese", 10},
	{22, 19627, "Chiave inglese", 10},
	{22, 19622, "Scopa", 20},
	{22, 19804, "Lucchetto", 5},
	{22, 2680, "Lucchetto con catena", 20},
	{22, 11746, "Chiave", 20},
	{22, 19904, "Giubbotto arancione catarifrangente", 20},
	{22, 19621, "Contenitore olio", 30},
	//Meccanica
	{23, 19872, "Elevatore giallo", 1500},
	{23, 19899, "Contenitore utensili", 200},
	{23, 19903, "Computer controllo pressione", 500},
	{23, 19815, "Ripiano a parete", 100},
	{23, 1000,  "Spoiler", 200},
	{23, 1001,  "Spoiler 2", 200},
	{23, 1002,  "Spoiler 3", 200},
	{23, 1003,  "Spoiler 4", 200},
	{23, 1008,  "1x bombole NOS", 200},
	{23, 1009,  "5x bombole NOS", 500},
	{23, 1010, "10x bombole NOS", 1000},
	{23, 1013, "Fari", 200},
	{23, 1018, "Marmitta 1", 100},
	{23, 1019, "Marmitta 2", 100},
	{23, 1020, "Marmitta 3", 100},
	{23, 929, "Macchinario 1", 250},
	{23, 934, "Macchinario 2", 250},
	{23, 14584 , "Macchinario 3", 400},
	{23, 920, "Macchinario 4", 250},
	{23, 1353, "Macchinario 5", 200},
	{23, 1635, "Macchinario 6", 210},
	//Speciali
	{24, 19474, "Tavolo da poker", 5000},
	{24, 9831, "Acqua 1", 1000},
	{24, 6964, "Acqua 2", 1000},
	{24, 16088, "Pali costruzione", 50},
	{24, 14434, "Luci", 20},
	{24, 18688, "Fuoco 1", 200},
    {24, 18689, "Fuoco 2", 200},
    {24, 18690, "Fuoco 3", 200},
    {24, 18691, "Fuoco 4", 200},
    {24, 18692, "Fuoco 5", 200},
    {24, 18694, "Fuoco 6", 200},
    {24, 18695, "Sparo 1", 200},
    {24, 18696, "Sparo 2", 200},
    {24, 18697, "Sparo 3", 200},
    {24, 18698, "Insetti", 200},
    {24, 18699, "Jetpack gas 1", 200},
    {24, 18700, "Jetpack gas 2", 200},
    {24, 18701, "Molotov fiamma", 200},
    {24, 18702, "Jetpack gas 3", 200},
    {24, 18703, "Fumo bianco auto", 200},
    {24, 18704, "Fumo bianco auto 2", 200},
    {24, 18705, "Liquido a zampilli", 200},
    {24, 18672, "Cemento betoniera", 200},
    {24, 18668, "Schizzi di sangue", 200},
    {24, 18682, "Esplosione 1", 200},
    {24, 18683, "Esplosione 2", 200},
    {24, 18684, "Esplosione 3", 200},
    {24, 18685, "Esplosione 4", 200},
    {24, 18686, "Esplosione 5", 200},
    {24, 18725, "Fumo bianco 2", 200},
    {24, 18726, "Fumo nero 2", 200},
    {24, 18727, "Fumo grigio 1", 200},
    {24, 18728, "Fumo rosso (flag)", 200},
    {24, 18729, "Spraycan", 200},
    {24, 18725, "Fumo", 200},
    {24, 18715, "Sabbia 1", 200},
    {24, 18716, "Sabbia 2", 200},
    {24, 18693, "Fiamma 1", 200},
    {24, 18723, "Fumo nero", 200},
	{24, 3865, "Tubo cantiere 1", 100},
	{24, 3502, "Tubo cantiere 2", 100},
	{24, 3066, "Casse coperte da telo verde", 50},
	{24, 3502, "Tubo cantiere 2", 100},
	{24, 2960, "Trave acciaio", 300},
	{24, 19912, "Cancello elettrico", 200},
	{24, 998, "Cancello elettrico 2", 200},
	{24, 989, "Cancello elettrico 3", 200},
	{24, 5463, "Cantiere grande", 200},
	{24, 11495, "Banchine porto", 200},
	{24, 11693, "Erba grande", 500},
	{24, 18863, "Erba grande 2", 500},
	{24, 19003, "Suolo grande", 400},
	{24, 19531, "Suolo grande 3", 400},
	{24, 19530, "Sabbia grande", 700},
	{24, 19593, "Palazzo gigante", 1000},
	{24, 3584, "Palazzine Harmony Oaks", 50},
	{24, 7017, "Recinzioni muratori rom", 50},
	{24, 3887, "Edificio rotto con cerotto", 50},
	{24, 3270, "Aereo rotto", 3000},
	{24, 10757, "Aereo", 10000},
	{24, 9618, "Impalcature", 500},
	{24, 1521, "Impalcature blu", 200},
	{24, 7089, "Impalcature per edifici", 2000},
	{24, 18720, "Spruzzo Acqua 1", 100},
	{24, 18739, "Spruzzo Acqua 2", 100},
	{24, 18742, "Spruzzo Acqua 3", 100},
	{24, 18743, "Spruzzo Acqua 4", 100},
	{24, 355, "AK-47", 100},
	{24, 356, "M4", 100},
	{24, 348, "Desert Eagle", 100},
	{24, 352, "UZI", 100},
	{24, 349, "Chromegun", 100},
	{24, 344, "Molotov", 100},
	{24, 2710, "Pacco Orologio", 100},
	{24, 3082, "Capsula", 100},
	{24, 1583, "Bersaglio 1", 100},
	{24, 1584, "Bersaglio 2", 100},
	{24, 1585, "Bersaglio 3", 100},
	{24, 1586, "Bersaglio 4", 100},
	{24, 3496, "Canestro 2", 500},
	{24, 2905, "Gamba Umana", 100},
	{24, 2906, "Braccio Umano", 100},
	{24, 2907, "Torso Umano", 100},
	{24, 2908, "Testa Umana", 100},
	//Lavagne
	{25, 19787, "Lavagna nera", 40},
	{25, 2737, "Lavagna - sfondo blu", 100},
	{25, 3077, "Lavagna integrale", 300},
	{25, 19805, "Board bianca", 100}
};
enum AttachmentEnum
    {
        attachmodel,
        attachname[24]
    }

    new AttachmentObjects[][AttachmentEnum] = {
    {18632, "FishingRod"},
    {18633, "GTASAWrench1"},
    {18634, "GTASACrowbar1"},
    {18635, "GTASAHammer1"},
    {18638, "HardHat1"},
    {18639, "BlackHat1"},
    {18640, "Hair1"},
    {18975, "Hair2"},
    {19136, "Hair4"},
    {19274, "Hair5"},
    {18644, "Screwdriver1"},
    {18645, "MotorcycleHelmet1"},
    {18865, "MobilePhone1"},
    {18866, "MobilePhone2"},
    {18867, "MobilePhone3"},
    {18868, "MobilePhone4"},
    {18869, "MobilePhone5"},
    {18870, "MobilePhone6"},
    {18871, "MobilePhone7"},
    {18872, "MobilePhone8"},
    {18873, "MobilePhone9"},
    {18874, "MobilePhone10"},
    {18875, "Pager1"},
    {18890, "Rake1"},
    {18891, "Bandana1"},
    {18892, "Bandana2"},
    {18893, "Bandana3"},
    {18894, "Bandana4"},
    {18895, "Bandana5"},
    {18896, "Bandana6"},
    {18897, "Bandana7"},
    {18898, "Bandana8"},
    {18899, "Bandana9"},
    {18900, "Bandana10"},
    {18901, "Bandana11"},
    {18902, "Bandana12"},
    {18903, "Bandana13"},
    {18904, "Bandana14"},
    {18905, "Bandana15"},
    {18906, "Bandana16"},
    {18907, "Bandana17"},
    {18908, "Bandana18"},
    {18909, "Bandana19"},
    {18910, "Bandana20"},
    {18911, "Mask1"},
    {18912, "Mask2"},
    {18913, "Mask3"},
    {18914, "Mask4"},
    {18915, "Mask5"},
    {18916, "Mask6"},
    {18917, "Mask7"},
    {18918, "Mask8"},
    {18919, "Mask9"},
    {18920, "Mask10"},
    {18921, "Beret1"},
    {18922, "Beret2"},
    {18923, "Beret3"},
    {18924, "Beret4"},
    {18925, "Beret5"},
    {18926, "Hat1"},
    {18927, "Hat2"},
    {18928, "Hat3"},
    {18929, "Hat4"},
    {18930, "Hat5"},
    {18931, "Hat6"},
    {18932, "Hat7"},
    {18933, "Hat8"},
    {18934, "Hat9"},
    {18935, "Hat10"},
    {18936, "Helmet1"},
    {18937, "Helmet2"},
    {18938, "Helmet3"},
    {18939, "CapBack1"},
    {18940, "CapBack2"},
    {18941, "CapBack3"},
    {18942, "CapBack4"},
    {18943, "CapBack5"},
    {18944, "HatBoater1"},
    {18945, "HatBoater2"},
    {18946, "HatBoater3"},
    {18947, "HatBowler1"},
    {18948, "HatBowler2"},
    {18949, "HatBowler3"},
    {18950, "HatBowler4"},
    {18951, "HatBowler5"},
    {18952, "BoxingHelmet1"},
    {18953, "CapKnit1"},
    {18954, "CapKnit2"},
    {18955, "CapOverEye1"},
    {18956, "CapOverEye2"},
    {18957, "CapOverEye3"},
    {18958, "CapOverEye4"},
    {18959, "CapOverEye5"},
    {18960, "CapRimUp1"},
    {18961, "CapTrucker1"},
    {18962, "CowboyHat2"},
   // {18963, "CJElvisHead"},
    {18964, "SkullyCap1"},
    {18965, "SkullyCap2"},
    {18966, "SkullyCap3"},
    {18967, "HatMan1"},
    {18968, "HatMan2"},
    {18969, "HatMan3"},
    {18970, "HatTiger1"},
    {18971, "HatCool1"},
    {18972, "HatCool2"},
    {18973, "HatCool3"},
    {18974, "MaskZorro1"},
    {18976, "MotorcycleHelmet2"},
    {18977, "MotorcycleHelmet3"},
    {18978, "MotorcycleHelmet4"},
    {18979, "MotorcycleHelmet5"},
    {19006, "GlassesType1"},
    {19007, "GlassesType2"},
    {19008, "GlassesType3"},
    {19009, "GlassesType4"},
    {19010, "GlassesType5"},
    {19011, "GlassesType6"},
    {19012, "GlassesType7"},
    {19013, "GlassesType8"},
    {19014, "GlassesType9"},
    {19015, "GlassesType10"},
    {19016, "GlassesType11"},
    {19017, "GlassesType12"},
    {19018, "GlassesType13"},
    {19019, "GlassesType14"},
    {19020, "GlassesType15"},
    {19021, "GlassesType16"},
    {19022, "GlassesType17"},
    {19023, "GlassesType18"},
    {19024, "GlassesType19"},
    {19025, "GlassesType20"},
    {19026, "GlassesType21"},
    {19027, "GlassesType22"},
    {19028, "GlassesType23"},
    {19029, "GlassesType24"},
    {19030, "GlassesType25"},
    {19031, "GlassesType26"},
    {19032, "GlassesType27"},
    {19033, "GlassesType28"},
    {19034, "GlassesType29"},
    {19035, "GlassesType30"},
    {19036, "HockeyMask1"},
    {19037, "HockeyMask2"},
    {19038, "HockeyMask3"},
    {19039, "WatchType1"},
    {19040, "WatchType2"},
    {19041, "WatchType3"},
    {19042, "WatchType4"},
    {19043, "WatchType5"},
    {19044, "WatchType6"},
    {19045, "WatchType7"},
    {19046, "WatchType8"},
    {19047, "WatchType9"},
    {19048, "WatchType10"},
    {19049, "WatchType11"},
    {19050, "WatchType12"},
    {19051, "WatchType13"},
    {19052, "WatchType14"},
    {19053, "WatchType15"},
    {19085, "EyePatch1"},
    {19090, "PomPomBlue"},
    {19091, "PomPomRed"},
    {19092, "PomPomGreen"},
    {19093, "HardHat2"},
    {19094, "BurgerShotHat1"},
    {19095, "CowboyHat1"},
    {19096, "CowboyHat3"},
    {19097, "CowboyHat4"},
    {19098, "CowboyHat5"},
    {19113, "SillyHelmet1"},
    {19114, "SillyHelmet2"},
    {19115, "SillyHelmet3"},
    {19116, "PlainHelmet1"},
    {19117, "PlainHelmet2"},
    {19118, "PlainHelmet3"},
    {19119, "PlainHelmet4"},
    {19120, "PlainHelmet5"},
    {19137, "CluckinBellHat1"},
    {19160, "HardHat3"},
    {19163, "GimpMask1"},
    {19317, "bassguitar01"},
    {19318, "flyingv01"},
    {19319, "warlock01"},
    {19330, "fire_hat01"},
    {19331, "fire_hat02"},
    {19348, "cane01"},
    {19349, "monocle01"},
    {19350, "moustache01"},
    {19351, "moustache02"},
    {19352, "tophat01"},
    {19487, "tophat02"},
    {19488, "HatBowler6"},
    {19513, "Beyaz Telefon"},
    {3044, "Cigar"},
    {1210, "Briefcase"},
    {19559, "Dag â¬antasi"},
    {19904, "Insaat Yelegi"},
    {19517, "Sari Saâ¡"},
    {19077, "Siyah Saâ¡"},
    {18641, "El Feneri"},
    {19317, "Gitar 1"},
    {19318, "Gitar 2"},
    {19319, "Gitar 3"},
    {19553, "Kovboy Sapkasi"},
    {19554, "Siyah Bere"},
    {19623, "Kamera"},
    {19610, "Mikrofon"},
    {19624, "Bavul"},
    {11745, "Bavul 2"},
	{19625, "Sigara"}
    };

    enum a_CopEnum
    {
        olusumamodel,
        olusumaname[24]
    }

    new AttachCops[][a_CopEnum] = {
	{19141, "SWAT Kaský1"},
	{19142, "SWAT Zýrhý1"},
	{18636, "Polis Kepi1"},
	{19099, "Polis Kepi2"},
	{19100, "Polis Kepi3"},
	{18637, "Polis Kalkaný1"},
	{19161, "Polis Þapkasý1"},
	{19162, "Polis Þapkasý2"},
	{19200, "Polis Kaský1"},
	{19138, "Polis Gözlüðü1"},
	{19139, "Polis Gözlüðü2"},
	{19140, "Polis Gözlüðü3"},
	{19347, "Rozet"},
	{19472, "Gaz Maskesi"},
	{19773, "Kýlýf"},
	{19785, "Senior Arma"},
	{19521, ""},
	{19520, ""}
	};
	new const Float:PayNSpray[][] = {

	    {1965.7402,2164.0481,10.8203, 1974.1588,2162.5869,11.0703}, // San Fierro Payn Spray
	    {719.0256,-465.6606,16.3437, 720.0746,-457.2697,16.3359},
	    {-100.2473,1108.6840,19.7422, -100.1864,1118.5155,19.7417},
	    {-1420.3824,2593.6228,55.7639, -1420.4440,2585.1724,55.8433},
	    {-1904.5065,274.8516,41.0469, -1904.5740,283.6991,41.0469},
	    {2074.2119,-1831.1642,13.5469, 2065.7490,-1831.3564,13.5469},
	    {488.8989,-1732.5446,11.2097, 487.3951,-1740.2903,11.1326},
	    {-2424.6831,1030.7452,50.3906, -2425.6694,1021.4473,50.3977},
	    {1024.6234,-1032.0376,31.9386, 1024.9955,-1024.1750,32.1016}
	};
	new AttachmentBones[][24] = {
    {"Omurga"},
    {"Kafa"},
    {"Sol Üst Kol"},
    {"Sað Üst Kol"},
    {"Sol El"},
    {"Sað El"},
    {"Sol Uyluk"},
    {"Sað Uyluk"},
    {"Sol Ayak"},
    {"Sað Ayak"},
    {"Sað Baldýr"},
    {"Sol Baldýr"},
    {"Sol Önkol"},
    {"Sað Önkol"},
    {"Sol Köprücük"},
    {"Sað Köprücük"},
    {"Boyun"},
    {"Çene"}
    };
	enum e_InteriorData {
    e_InteriorName[32],
    e_InteriorID,
    Float:e_InteriorX,
    Float:e_InteriorY,
    Float:e_InteriorZ
};
	new const g_arrInteriorData[][e_InteriorData] = {
    {"24/7 1", 17, -25.884498, -185.868988, 1003.546875},
    {"24/7 2", 10, 6.091179, -29.271898, 1003.549438},
    {"24/7 3", 18, -30.946699, -89.609596, 1003.546875},
    {"24/7 4", 16, -25.132598, -139.066986, 1003.546875},
    {"24/7 5", 4, -27.312299, -29.277599, 1003.557250},
    {"24/7 6", 6, -26.691598, -55.714897, 1003.546875},
    {"Airport Ticket", 14, -1827.147338, 7.207417, 1061.143554},
    {"Airport Baggage", 14, -1861.936889, 54.908092, 1061.143554},
    {"Shamal", 1, 1.808619, 32.384357, 1199.593750},
    {"Andromada", 9, 315.745086, 984.969299, 1958.919067},
    {"Ammunation 1", 1, 286.148986, -40.644397, 1001.515625},
    {"Ammunation 2", 4, 286.800994, -82.547599, 1001.515625},
    {"Ammunation 3", 6, 296.919982, -108.071998, 1001.515625},
    {"Ammunation 4", 7, 314.820983, -141.431991, 999.601562},
    {"Ammunation 5", 6, 316.524993, -167.706985, 999.593750},
    {"Ammunation Booths", 7, 302.292877, -143.139099, 1004.062500},
    {"Ammunation Range", 7, 298.507934, -141.647048, 1004.054748},
    {"Blastin Fools Hallway", 3, 1038.531372, 0.111030, 1001.284484},
    {"Budget Inn Motel Room", 12, 444.646911, 508.239044, 1001.419494},
    {"Jefferson Motel", 15, 2215.454833, -1147.475585, 1025.796875},
    {"Off Track Betting Shop", 3, 833.269775, 10.588416, 1004.179687},
    {"Sex Shop", 3, -103.559165, -24.225606, 1000.718750},
    {"Meat Factory", 1, 963.418762, 2108.292480, 1011.030273},
    {"Zero's RC shop", 6, -2240.468505, 137.060440, 1035.414062},
    {"Dillimore Gas", 0, 663.836242, -575.605407, 16.343263},
    {"Catigula's Basement", 1, 2169.461181, 1618.798339, 999.976562},
    {"FC Janitor Room", 10, 1889.953369, 1017.438293, 31.882812},
    {"Woozie's Office", 1, -2159.122802, 641.517517, 1052.381713},
    {"Binco", 15, 207.737991, -109.019996, 1005.132812},
    {"Didier Sachs", 14, 204.332992, -166.694992, 1000.523437},
    {"Prolaps", 3, 207.054992, -138.804992, 1003.507812},
    {"Suburban", 1, 203.777999, -48.492397, 1001.804687},
    {"Victim", 5, 226.293991, -7.431529, 1002.210937},
    {"Zip", 18, 161.391006, -93.159156, 1001.804687},
    {"Club", 17, 493.390991, -22.722799, 1000.679687},
    {"Bar", 11, 501.980987, -69.150199, 998.757812},
    {"Lil' Probe Inn", 18, -227.027999, 1401.229980, 27.765625},
    {"Jay's Diner", 4, 457.304748, -88.428497, 999.554687},
    {"Gant Bridge Diner", 5, 454.973937, -110.104995, 1000.077209},
    {"Secret Valley Diner", 6, 435.271331, -80.958938, 999.554687},
    {"World of Coq", 1, 452.489990, -18.179698, 1001.132812},
    {"Welcome Pump", 1, 681.557861, -455.680053, -25.609874},
    {"Burger Shot", 10, 375.962463, -65.816848, 1001.507812},
    {"Cluckin' Bell", 9, 369.579528, -4.487294, 1001.858886},
    {"Well Stacked Pizza", 5, 373.825653, -117.270904, 1001.499511},
    {"Rusty Browns Donuts", 17, 381.169189, -188.803024, 1000.632812},
    {"Denise's Room", 1, 244.411987, 305.032989, 999.148437},
    {"Katie's Room", 2, 271.884979, 306.631988, 999.148437},
    {"Helena's Room", 3, 291.282989, 310.031982, 999.148437},
    {"Michelle's Room", 4, 302.180999, 300.722991, 999.148437},
    {"Barbara's Room", 5, 322.197998, 302.497985, 999.148437},
    {"Millie's Room", 6, 346.870025, 309.259033, 999.155700},
    {"Sherman Dam", 17, -959.564392, 1848.576782, 9.000000},
    {"Planning Dept", 3, 384.808624, 173.804992, 1008.382812},
    {"Area 51", 0, 223.431976, 1872.400268, 13.734375},
    {"LS Gym", 5, 772.111999, -3.898649, 1000.728820},
    {"SF Gym", 6, 774.213989, -48.924297, 1000.585937},
    {"LV Gym", 7, 773.579956, -77.096694, 1000.655029},
    {"B-Dup's House", 3, 1527.229980, -11.574499, 1002.097106},
    {"B-Dup's Crack Pad", 2, 1523.509887, -47.821197, 1002.130981},
    {"CJ's House", 3, 2496.049804, -1695.238159, 1014.742187},
    {"Madd Doggs Mansion", 5, 1267.663208, -781.323242, 1091.906250},
    {"OG Loc's House", 3, 513.882507, -11.269994, 1001.565307},
    {"Ryders House", 2, 2454.717041, -1700.871582, 1013.515197},
    {"Sweet's House", 1, 2527.654052, -1679.388305, 1015.498596},
    {"Crack Factory", 2, 2543.462646, -1308.379882, 1026.728393},
    {"Big Spread Ranch", 3, 1212.019897, -28.663099, 1000.953125},
    {"Fanny batters", 6, 761.412963, 1440.191650, 1102.703125},
    {"Strip Club", 2, 1204.809936, -11.586799, 1000.921875},
    {"Strip Club (Private Room)", 2, 1204.809936, 13.897239, 1000.921875},
    {"Unnamed Brothel", 3, 942.171997, -16.542755, 1000.929687},
    {"Tiger Skin Brothel", 3, 964.106994, -53.205497, 1001.124572},
    {"Pleasure Domes", 3, -2640.762939, 1406.682006, 906.460937},
    {"Liberty City Outside", 1, -729.276000, 503.086944, 1371.971801},
    {"Liberty City Inside", 1, -794.806396, 497.738037, 1376.195312},
    {"Gang House", 5, 2350.339843, -1181.649902, 1027.976562},
    {"Colonel Furhberger's", 8, 2807.619873, -1171.899902, 1025.570312},
    {"Crack Den", 5, 318.564971, 1118.209960, 1083.882812},
    {"Warehouse 1", 1, 1412.639892, -1.787510, 1000.924377},
    {"Warehouse 2", 18, 1302.519897, -1.787510, 1001.028259},
    {"Sweet's Garage", 0, 2522.000000, -1673.383911, 14.866223},
    {"Lil' Probe Inn Toilet", 18, -221.059051, 1408.984008, 27.773437},
    {"Unused Safe House", 12, 2324.419921, -1145.568359, 1050.710083},
    {"RC Battlefield", 10, -975.975708, 1060.983032, 1345.671875},
    {"Barber 1", 2, 411.625976, -21.433298, 1001.804687},
    {"Barber 2", 3, 418.652984, -82.639793, 1001.804687},
    {"Barber 3", 12, 412.021972, -52.649898, 1001.898437},
    {"Tatoo Parlor 1", 16, -204.439987, -26.453998, 1002.273437},
    {"Tatoo Parlor 2", 17, -204.439987, -8.469599, 1002.273437},
    {"Tatoo Parlor 3", 3, -204.439987, -43.652496, 1002.273437},
    {"LS Police HQ", 6, 246.783996, 63.900199, 1003.640625},
    {"SF Police HQ", 10, 246.375991, 109.245994, 1003.218750},
    {"LV Police HQ", 3, 288.745971, 169.350997, 1007.171875},
    {"3 School", 3, -2029.798339, -106.675910, 1035.171875},
    {"8-Track", 7, -1398.065307, -217.028900, 1051.115844},
    {"Bloodbowl", 15, -1398.103515, 937.631164, 1036.479125},
    {"Dirt Track", 4, -1444.645507, -664.526000, 1053.572998},
    {"Kickstart", 14, -1465.268676, 1557.868286, 1052.531250},
    {"Vice Stadium", 1, -1401.829956, 107.051300, 1032.273437},
    {"SF Garage", 0, -1790.378295, 1436.949829, 7.187500},
    {"LS Garage", 0, 1643.839843, -1514.819580, 13.566620},
    {"SF Bomb Shop", 0, -1685.636474, 1035.476196, 45.210937},
    {"Blueberry Warehouse", 0, 76.632553, -301.156829, 1.578125},
    {"LV Warehouse 1", 0, 1059.895996, 2081.685791, 10.820312},
    {"LV Warehouse 2 (hidden part)", 0, 1059.180175, 2148.938720, 10.820312},
    {"Caligula's Hidden Room", 1, 2131.507812, 1600.818481, 1008.359375},
    {"Bank", 0, 2315.952880, -1.618174, 26.742187},
    {"Bank (Behind Desk)", 0, 2319.714843, -14.838361, 26.749565},
    {"LS Atrium", 18, 1710.433715, -1669.379272, 20.225049}
};
new Float:CarLastPos[MAX_VEHICLES][3];
new Float:TaxiLastPos[MAX_VEHICLES][3];
new Float:DeathPos[MAX_PLAYERS][4];
new Text3D:vehicle3Dtext[MAX_VEHICLES];
new vehicletext[MAX_VEHICLES][24];
new vehiclecallsign[MAX_VEHICLES];
new DeathInterior[MAX_PLAYERS];
new DeathWorld[MAX_PLAYERS];
new BirlikAdi[MAX_PLAYERS][32];
new BalikTimer[MAX_PLAYERS];
new bool:SigaraDurum[MAX_PLAYERS];
new MobilyaListeleme[MAX_PLAYERS][200];
new OzelModelListeleme[MAX_PLAYERS][20];
new RehberListeleme[MAX_PLAYERS][50];
new ModifiyeListeleme[MAX_PLAYERS][30];
new CezaListele[MAX_PLAYERS][MAX_PLAYER_TICKETS];
new KeyListeleme[MAX_PLAYERS][MAX_HOUSE_KEYS+1];
new KeyListelemeTip[MAX_PLAYERS][MAX_HOUSE_KEYS+1];
new AjansListeleme[MAX_PLAYERS][16];
new ParkedilenAraclar[MAX_PLAYERS][60];
new AracCekiyor[MAX_PLAYERS];
new Float:VehicleLastCoords[MAX_VEHICLES][3];
new PlayerText:TDEditor_TD[MAX_PLAYERS][9];
new PlayerText:AracTD[MAX_PLAYERS][5];
new TemizlikciDistance[MAX_PLAYERS] = {0, ...};
new Float: TemizlikciLastPos[MAX_VEHICLES][3];
new Iterator:CCTVIter<MAX_CCTV>;
new Iterator:CekilisKatilimcilar[MAX_BIRLIK]<300>;
new Text:carMDC[MAX_VEHICLES][5];
new timerMDC[MAX_VEHICLES];
new bool:vehRadar[MAX_VEHICLES];
new vehRadarLimit[MAX_VEHICLES];
new EMSKabul[MAX_PLAYERS];
new PlayerText:HapisTD[MAX_PLAYERS];
new vergitime = 0;
new walktime[MAX_PLAYERS];
new Float:specPos[MAX_PLAYERS][3];
new
	UsingPumpID[MAX_PLAYERS] = {-1, ...},
	RefuelTimer[MAX_PLAYERS] = {-1, ...},
	Float:FuelBought[MAX_PLAYERS];

new AracYuk[MAX_VEHICLES];
new AracCP[MAX_VEHICLES];
new Text3D:NameTag[MAX_PLAYERS];
new AracRespawnTimer[MAX_VEHICLES];
new Harfler[][] ={"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};

new const Float:KamyoncuCheckpoint[][] = {
	{2227.2620,-2628.3069,13.4202},
	{2227.8765,-2537.8633,13.3900},
	{2185.5791,-2493.1411,13.3750},
	{2185.5791,-2493.1411,13.3750},
	{2157.1108,-2570.6165,13.3750},
	{2081.0842,-2665.6060,13.3821},
	{1981.5726,-2667.7334,8.8020},
	{1878.4816,-2667.7114,5.8672},
	{1745.4098,-2667.8367,5.8935},
	{1653.8069,-2667.7598,5.8672},
	{1575.9755,-2667.7349,5.9616},
	{1444.7954,-2666.9658,13.3750},
	{1352.0410,-2591.0320,13.3750},
	{1360.2626,-2509.7998,13.3750},
	{1310.7264,-2446.4629,7.6563},
	{1190.6963,-2419.0872,10.0818},
	{1107.0795,-2353.6199,12.0776},
	{1075.1427,-2309.7473,12.8984},
	{1034.7507,-2172.7314,12.9652},
	{1056.4332,-2048.7920,12.9520},
	{1065.1136,-1900.1233,13.1341},
	{1004.3782,-1787.7056,14.0413},
	{907.2210,-1769.8105,13.3828},
	{763.1840,-1763.6705,12.8348},
	{604.5229,-1723.5443,13.7790},
	{547.5953,-1715.4917,13.0011},
	{447.7251,-1702.9133,10.5222},
	{274.6288,-1683.1151,8.0458},
	{164.5369,-1569.2578,12.2116},
	{35.8075,-1520.1766,5.2471},
	{-118.1803,-1467.7985,2.6953},
	{-145.2025,-1307.5267,2.6953},
	{-103.0018,-1148.6520,1.5662},
	{-85.9576,-1034.2852,23.9012},
	{-159.3242,-955.0198,29.8653},
	{-231.2661,-904.4538,42.3990},
	{-288.3400,-855.7759,46.1144},
	{-348.4653,-777.4860,29.9568},
	{-389.9077,-681.7562,18.3338},
	{-454.1988,-633.3929,14.9659},
	{-491.8373,-546.3722,25.5234}
};
new stock g_arrVehicleNames[][] = {
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel", "Dumper", "Firetruck", "Trashmaster",
    "Stretch", "Manana", "Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer",
    "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach",
    "Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow",
    "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair",
    "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic",
    "Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton",
    "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher",
    "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick",
    "Boxville", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher",
    "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt", "Tanker", "Roadtrain",
    "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck",
    "Fortune", "Cadrona", "SWAT Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan",
    "Blade", "Streak", "Freight", "Vortex", "Vincent", "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder",
    "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster", "Monster",
    "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30",
    "Huntley", "Stafford", "BF-400", "News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
    "Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "LSPD Car", "SFPD Car", "LVPD Car",
    "Police Rancher", "Picador", "S.W.A.T", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs",
    "Boxville", "Tiller", "Utility Trailer"
};
new g_aMaleSkins[185] = {
	2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60,
	61, 62, 66, 68, 72, 73, 78, 79, 80, 81, 82, 83, 84, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 142, 143, 144, 146,
	147, 153, 154, 155, 156, 158, 159, 160, 161, 162, 167, 168, 170, 171, 173, 174, 175, 176,
	177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 200, 202, 203, 204, 206,
	208, 209, 210, 212, 213, 217, 220, 221, 222, 223, 228, 229, 230, 234, 235, 236, 239, 240,
	241, 242, 247, 248, 249, 250, 253, 254, 255, 258, 259, 260, 261, 262, 268, 272, 273, 289,
	290, 291, 292, 293, 294, 295, 296, 297, 299
};

new g_aFemaleSkins[77] = {
    9, 10, 11, 12, 13, 31, 38, 39, 40, 41, 53, 54, 55, 56, 63, 64, 65, 69,
    75, 76, 77, 85, 88, 89, 90, 91, 92, 93, 129, 130, 131, 138, 140, 141,
    145, 148, 150, 151, 152, 157, 169, 178, 190, 191, 192, 193, 194, 195,
    196, 197, 198, 199, 201, 205, 207, 211, 214, 215, 216, 219, 224, 225,
    226, 231, 232, 233, 237, 238, 243, 244, 245, 246, 251, 256, 257, 263,
    298
};
new OzelErkekKiyafetler[1] = {
	299
};
new OzelBayanKiyafetler[1] = {
	12
};
new PolisSkinler[14] = {
	280, 281, 282, 283, 284, 285, 286, 288, 300, 301, 302, 306, 307, 311
};
new DoktorSkinler[10] = {

	276, 275, 274, 308, 277, 278, 279, 70
};
new ModName[][64] = {
{"Pro Spoiler"},                                    //1000
{"Win Spoiler"},                                    //1001
{"Drag Spoiler"},                                   //1002
{"Alpha Spoiler"},                                  //1003
{"Champ Scoop Hood"},                               //1004
{"Fury Scoop Hood"},                                //1005
{"Roof Scoop"},                                     //1006
{"Right Sideskirt"},                                //1007
{"5x Nitro"},                                       //1008
{"2x Nitro"},                                       //1009
{"10x Nitro"},                                      //1010
{"Race Scoop Hood"},                                //1011
{"Worx Scoop Hood"},                                //1012
{"Round Fog Lamps"},                                //1013
{"Champ Spoiler"},                                  //1014
{"Race Spoiler"},                                   //1015
{"Worx Spoiler"},                                   //1016
{"Left Sideskirt"},                                 //1017
{"Upswept Exhaust"},                                //1018
{"Twin Exhaust"},                                   //1019
{"Large Exhaust"},                                  //1020
{"Medium Exhaust"},                                 //1021
{"Small Exhaust"},                                  //1022
{"Fury Spoiler"},                                   //1023
{"Square Fog Lamps"},                               //1024
{"Offroad Wheels"},                                 //1025
{"Right Alien Sideskirt 'Sultan'"},                 //1026
{"Left Alien Sideskirt 'Sultan'"},                  //1027
{"Alien Exhaust 'Sultan'"},                         //1028
{"X-Flow Exhaust 'Sultan'"},                        //1029
{"Left X-Flow Sideskirt 'Sultan'"},                 //1030
{"Right X-Flow Sideskirt 'Sultan'"},                //1031
{"Alien Roof Vent 'Sultan'"},                       //1032
{"X-Flow Roof Vent 'Sultan'"},                      //1033
{"Alien Exhaust 'Elegy'"},                          //1034
{"X-Flow Roof Vent 'Elegy'"},                       //1035
{"Right Alien Sideskirt 'Elegy'"},                  //1036
{"X-Flow Exhaust 'Elegy'"},                         //1037
{"Alien Roof Vent 'Elegy'"},                        //1038
{"Right X-Flow Sideskirt 'Elegy'"},                 //1039
{"Left Alien Sideskirt 'Elegy'"},                   //1040
{"Right X-Flow Sideskirt 'Elegy'"},                 //1041
{"Right Chrome Sideskirt 'Broadway'"},              //1042
{"Slamin Exhaust 'Broadway'"},                      //1043
{"Chrome Exhaust 'Broadway'"},                      //1044
{"X-Flow Exhaust 'Flash'"},                         //1045
{"Alien Exhaust 'Flash'"},                          //1046
{"Right Alien Sideskirt 'Flash'"},                  //1047
{"Right X-Flow Sideskirt 'Flash'"},                 //1048
{"Alien Spoiler 'Flash'"},                          //1049
{"X-Flow Spoiler 'Flash'"},                         //1050
{"Left Alien Sideskirt 'Flash'"},                   //1051
{"Left X-Flow Sideskirt 'Flash'"},                  //1052
{"X-Flow Roof 'Flash'"},                            //1053
{"Alien Roof 'Flash'"},                             //1054
{"Alien Roof 'Stratum'"},                           //1055
{"Right Alien Sideskirt 'Stratum'"},                //1056
{"Right X-Flow Sideskirt 'Stratum'"},               //1057
{"Alien Spoiler 'Stratum'"},                        //1058
{"X-Flow Exhaust 'Stratum'"},                       //1059
{"X-Flow Spoiler 'Stratum'"},                       //1060
{"X-Flow Roof 'Stratum'"},                          //1061
{"Left Alien Sideskirt 'Stratum'"},                 //1062
{"Left X-Flow Sideskirt 'Stratum'"},                //1063
{"Alien Exhaust 'Stratum'"},                        //1064
{"Alien Exhaust 'Jester'"},
{"X-Flow Exhaust 'Jester'"},
{"Alien Roof 'Jester'"},
{"X-Flow Roof 'Jester'"},
{"Right Alien Sideskirt 'Jester'"},
{"Right X-Flow Sideskirt 'Jester'"},                //1070
{"Left Alien Sideskirt 'Jester'"},
{"Left X-Flow Sideskirt 'Jester'"},
{"Shadow Wheels"},
{"Mega Wheels"},
{"Rimshine Wheels"},
{"Wires Wheels"},
{"Classic Wheels"},
{"Twist Wheels"},
{"Cutter Wheels"},
{"Switch Wheels"},                                  //1080
{"Grove Wheels"},
{"Import Wheels"},
{"Dollar Wheels"},
{"Trance Wheels"},
{"Atomic Wheels"},
{"Stereo Sound"},
{"Hydraulics"},
{"Alien Roof 'Uranus'"},
{"X-Flow Exhaust 'Uranus'"},
{"Right Alien Sideskirt 'Uranus'"},                 //1090
{"X-Flow Roof 'Uranus'"},
{"Alien Exhaust 'Uranus'"},
{"Right X-Flow Sideskirt 'Uranus'"},
{"Left Alien Sideskirt 'Uranus'"},
{"Right X-Flow Sideskirt 'Uranus'"},
{"Ahab Wheels"},
{"Virtual Wheels"},
{"Access Wheels"},
{"Left Chrome Sideskirt 'Broadway'"},
{"Chrome Grill Bullbar 'Remington'"},               //1100
{"Left 'Chrome Flames' Sideskirt 'Remington'"},
{"Left 'Chrome Strip' Sideskirt 'Savanna'"},
{"Corvetible Roof 'Blade'"},
{"Chrome Exhaust 'Blade'"},
{"Slamin Exhaust 'Blade'"},
{"Right 'Chrome Arches' Sideskirt 'Remington'"},
{"Left 'Chrome Strip' Sideskirt 'Blade'"},
{"Right 'Chrome Strip' Sideskirt 'Blade'"},
{"Chrome Rear Bullbars 'Slamvan'"},
{"Slamin Rear Bullbars 'Slamvan'"},                 //1110
{"Little Front Sign? 'Slamvan'"},
{"Little Front Sign? 'Slamvan'"},
{"Chrome Exhaust 'Slamvan'"},
{"Slamin Exhaust 'Slamvan'"},
{"Chrome Front Bullbars 'Slamvan'"},
{"Slamin Front Bullbars 'Slamvan'"},
{"Chrome Front Bumper 'Slamvan'"},
{"Right 'Chrome Trim' Sideskirt 'Slamvan'"},
{"Right 'Wheelcovers' Sideskirt 'Slamvan'"},
{"Left 'Chrome Trim' Sideskirt 'Slamvan'"},         //1120
{"Left 'Wheelcovers' Sideskirt 'Slamvan'"},
{"Right 'Chrome Flames' Sideskirt 'Remington'"},
{"Bullbar Chrome Bars 'Remington'"},
{"Left 'Chrome Arches' Sideskirt 'Remington'"},
{"Bullbar Chrome Lights 'Remongton'"},
{"Chrome Exhaust 'Remington'"},
{"Slamin Exhaust 'Remington'"},
{"Vinyl Hardtop 'Blade'"},
{"Chrome Exhaust 'Savanna'"},
{"Hardtop Roof 'Savanna'"},                         //1130
{"Softtop Roof 'Savanna'"},
{"Slamin Exhaust 'Savanna'"},
{"Right 'Chrome Strip' Sideskirt 'Savanna'"},
{"Right 'Chrome Strip' Sideskirt 'Tornado'"},
{"Slamin Exhaust 'Tornado'"},
{"Chrome Exhaust 'Tornado'"},
{"Left 'Chrome Strip' Sideskirt 'Tornado'"},
{"Alien Spoiler 'Sultan'"},
{"X-Flow Spoiler 'Sultan'"},
{"X-Flow Rear Bumper 'Sultan'"},                    //1140
{"Alien Rear Bumper 'Sultan'"},
{"Left Oval Vents"},
{"Right Oval Vents"},
{"Left Square Vents"},
{"Right Square Vents"},
{"X-Flow Spoiler 'Elegy'"},
{"Alien Spoiler 'Elegy'"},
{"X-Flow Rear Bumper 'Elegy'"},
{"Alien Rear Bumper 'Elegy'"},
{"Alien Rear Bumper 'Flash'"},                      //1150
{"X-Flow Rear Bumper 'Flash'"},
{"X-Flow Front Bumper 'Flash'"},
{"Alien Front Bumper 'Flash'"},
{"Alien Rear Bumper 'Stratum'"},
{"Alien Front Bumper 'Stratum'"},
{"X-Flow Rear Bumper 'Stratum'"},
{"X-Flow Front Bumper 'Stratum'"},
{"X-Flow Spoiler 'Jester'"},
{"Alien Rear Bumper 'Jester'"},
{"Alien Front Bumper 'Jester'"},                    //1160
{"X-Flow Rear Bumper 'Jester'"},
{"Alien Spoiler 'Jester'"},
{"X-Flow Spoiler 'Uranus'"},
{"Alien Spoiler 'Uranus'"},
{"X-Flow Front Bumper 'Uranus'"},
{"Alien Front Bumper 'Uranus'"},
{"X-Flow Rear Bumper 'Uranus'"},
{"Alien Rear Bumper 'Uranus'"},
{"Alien Front Bumper 'Sultan'"},
{"X-Flow Front Bumper 'Sultan'"},                   //1170
{"Alien Front Bumper 'Elegy'"},
{"X-Flow Front Bumper 'Elegy'"},
{"X-Flow Front Bumper 'Jester'"},
{"Chrome Front Bumper 'Broadway'"},
{"Slamin Front Bumper 'Broadway'"},
{"Chrome Rear Bumper 'Broadway'"},
{"Slamin Rear Bumper 'Broadway'"},
{"Slamin Rear Bumper 'Remington'"},
{"Chrome Front Bumper 'Remington'"},
{"Chrome Rear Bumper 'Remington'"},                 //1180
{"Slamin Front Bumper 'Blade'"},
{"Chrome Front Bumper 'Blade'"},
{"Slamin Rear Bumper 'Blade'"},
{"Chrome Rear Bumper 'Blade'"},
{"Slamin Front Bumper 'Remington'"},
{"Slamin Rear Bumper 'Savanna'"},
{"Chrome Rear Bumper 'Savanna'"},
{"Slamin Front Bumper 'Savanna'"},
{"Chrome Front Bumper 'Savanna'"},
{"Slamin Front Bumper 'Tornado'"},                  //1190
{"Chrome Front Bumper 'Tornado'"},
{"Chrome Rear Bumper 'Tornado'"},
{"Slamin Rear Bumper 'Tornado'"}
};
// -----------------------------------------------------------------------------------
#define COLOR_FADE1 		(0xFFFFFFFF)
#define COLOR_FADE2 		(0xC8C8C8C8)
#define COLOR_FADE3 		(0xAAAAAAAA)
#define COLOR_FADE4 		(0x8C8C8C8C)
#define COLOR_FADE5 		(0x6E6E6E6E)
#define COLOR_GREY 			(0xAFAFAFAA)
#define COLOR_GREEN 		(0x33AA33AA)
#define COLOR_LIGHTGREEN  	(0x9ACD32FF)
#define COLOR_RED 			(0xAA3333AA)
#define COLOR_YELLOW 		(0xFFFF00AA)
#define COLOR_WHITE 		(0xFFFFFFAA)
#define COLOR_BLUE 			(0x0000BBAA)
#define COLOR_LIGHTBLUE 	(0x33CCFFAA)
#define COLOR_ORANGE 		(0xFF9900AA)
#define COLOR_RED 			(0xAA3333AA)
#define COLOR_LIME 			(0x10F441AA)
#define COLOR_MAGENTA 		(0xFF00FFFF)
#define COLOR_NAVY 			(0x000080AA)
#define COLOR_AQUA 			(0xF0F8FFAA)
#define COLOR_CRIMSON 		(0xDC143CAA)
#define COLOR_RADIO       	(0x8D8DFFFF)
#define COLOR_PURPLE      	(0xD0AEEBFF)
#define COLOR_FLBLUE 		(0x6495EDAA)
#define COLOR_BISQUE 		(0xFFE4C4AA)
#define COLOR_BLACK 		(0x000000AA)
#define COLOR_CHARTREUSE 	(0x7FFF00AA)
#define COLOR_BROWN 		(0XA52A2AAA)
#define COLOR_CORAL 		(0xFF7F50AA)
#define COLOR_GOLD 			(0xB8860BAA)
#define COLOR_GREENYELLOW 	(0xADFF2FAA)
#define COLOR_INDIGO 		(0x4B00B0AA)
#define COLOR_IVORY 		(0xFFFF82AA)
#define COLOR_LAWNGREEN 	(0x7CFC00AA)
#define COLOR_LIMEGREEN 	(0x32CD32AA)
#define COLOR_MIDNIGHTBLUE 	(0X191970AA)
#define COLOR_MAROON 		(0x800000AA)
#define COLOR_OLIVE 		(0x808000AA)
#define COLOR_ORANGERED 	(0xFF4500AA)
#define COLOR_PINK 			(0xFFC0CBAA)
#define COLOR_SEAGREEN 		(0x2E8B57AA)
#define COLOR_SPRINGGREEN 	(0x00FF7FAA)
#define COLOR_LIGHTRED    	(0xE74C3CFF)
#define COLOR_CLIENT      	(0xAAC4E5FF)
#define COLOR_CYAN        	(0xC2A2DAAA)
#define COLOR_ADMINCHAT   	(0x33EE33FF)
#define COLOR_DEPARTMENT  	(0xF0CC00FF)
#define COLOR_DARKBLUE    	(0x1394BFFF)


// ------------------------------------------------------------------------------
main()
{
	print("\n--------------------------------------");
	print(" Sunucu yüklenmiþtir. Developer: Sawyer ");
	print("--------------------------------------\n");
}


public OnTextdrawAnimationFinish(playerid, PlayerText:textdraw)
{
	return 1;
}

public OnGameModeInit()
{
    AntiDeAMX();
    WasteDeAMXersTime();
    DisableInteriorEnterExits();
    EnableStuntBonusForAll(0);
    ShowNameTags(0);
    SetNameTagDrawDistance(45.0);
    ShowPlayerMarkers(PLAYER_MARKERS_MODE_OFF);
    ManualVehicleEngineAndLights();
    AddPlayerClass(0, 1958.33, 1343.12, 15.36, 269.15, 26, 36, 28, 150, 0, 0); // CJ
    AddPlayerClass(1, 1958.33, 1343.12, 15.36, 269.15, 26, 36, 28, 150, 0, 0); // The Truth
    SetVehiclePassengerDamage(true);
		SetVehicleUnoccupiedDamage(true);
    //UsePlayerPedAnims();
	SetGameModeText("vBeta-1 Turkish");
	baglanti = mysql_connect(MYSQL_HOST,MYSQL_USER,MYSQL_PASS,MYSQL_BASE);
	BlockGarages(true, GARAGE_TYPE_PAINT, "");
	SetVehiclePassengerDamage(true);
    SetDisableSyncBugs(true);
    SetDamageFeed(false);
    SetDamageSounds(0, 0);
    SetCustomArmourRules(true, true);
    SetWeaponArmourRule(22, true, true);
    SetWeaponArmourRule(24, true, true);
    SetWeaponArmourRule(25, true, true);
    SetWeaponArmourRule(27, true, true);
    SetWeaponArmourRule(28, true, true);
    SetWeaponArmourRule(29, true, true);
    SetWeaponArmourRule(30, true, true);
    SetWeaponArmourRule(31, true, true);
    SetWeaponArmourRule(32, true, true);
    SetWeaponArmourRule(34, true, true);
    KomutYukle();
	for (new i = 0; i < MAX_PLAYERS; i++) {
		if (IsPlayerConnected(i)) {
			GenerateInterface(i);
		}
	}
	if(mysql_errno(baglanti) == 0)
	{
	    print("» MySQL baðlantýsý baþarýlý.");
	    mysql_set_charset("latin5");
	    mysql_set_charset("latin5");
	    mysql_set_charset("latin5");
	    mysql_log(ERROR);
	    mysql_tquery(baglanti,	"CREATE TABLE IF NOT EXISTS `kuponlar` (`kod` varchar(20) NOT NULL, `para` int(11) NOT NULL)");
	    SetTimer("MinuteUpdate",60000,true);
	    SetTimer("SecondUpdate",900,true);
	    SetTimer("ConsumeFuel", 500, true);
	    SetTimer("NameTagUpdate", 500, true);
	    SetTimer("PetUpdate", 500, true);
	    SetTimer("YatUpdate", 1000, true);
	}
	else
	{
	    print("» MySQL ile baðlantý baþarýsýz. (Baðlantýlarý kontrol et lütfen) Sunucu Kapatýlýyor...");
	    SendRconCommand("exit");
	}
    for(new i; i<MAX_TOHUM; i++)
    {
        Tohumlar[i][tohumArsa] = -1;
        Tohumlar[i][tohumTip] = 0;
        Tohumlar[i][tohumBuyume] = 0;
        Tohumlar[i][tohumSayi] = 0;
    }
	// ------------------------ TEXTDRAWLAR -----------------------------------

	Karanlik = TextDrawCreate(644.000000, 0.000000, "                                                                                                                             ");
	TextDrawBackgroundColor(Karanlik,255);
	TextDrawFont(Karanlik,1);
	TextDrawLetterSize(Karanlik, 0.500000, 1.000000);
	TextDrawColor(Karanlik, -1);
	TextDrawSetOutline(Karanlik,0);
	TextDrawSetProportional(Karanlik,1);
	TextDrawSetShadow(Karanlik,1);
	TextDrawUseBox(Karanlik,1);
	TextDrawBoxColor(Karanlik,255);
	TextDrawTextSize(Karanlik, -11.000000, 0.000000);

	GirisTD = TextDrawCreate(0.000000, 0.000000, "mdl-2001:tronhud");
	TextDrawLetterSize(GirisTD, 0.600000, 2.000000);
	TextDrawTextSize(GirisTD, 640.500000, 448.500000);
	TextDrawAlignment(GirisTD, 1);
	TextDrawColor(GirisTD, -1);
	TextDrawSetShadow(GirisTD, 0);
	TextDrawSetOutline(GirisTD, 0);
	TextDrawBackgroundColor(GirisTD, 255);
	TextDrawFont(GirisTD, 4);
	TextDrawSetProportional(GirisTD, 0);
	TextDrawSetShadow(GirisTD, 0);

	Logo[1] = TextDrawCreate(537.000000, 338.000000, "mdl-2006:tronlogo");
	TextDrawLetterSize(Logo[1], 0.600000, 2.000000);
	TextDrawTextSize(Logo[1], 80.000000, 87.500000);
	TextDrawAlignment(Logo[1], 1);
	TextDrawColor(Logo[1], -1);
	TextDrawSetShadow(Logo[1], 0);
	TextDrawSetOutline(Logo[1], 0);
	TextDrawBackgroundColor(Logo[1], 255);
	TextDrawFont(Logo[1], 4);
	TextDrawSetProportional(Logo[1], 0);
	TextDrawSetShadow(Logo[1], 0);

	Logo[2] = TextDrawCreate(537.000000, 338.000000, "mdl-2007:tronlogo25");
	TextDrawLetterSize(Logo[2], 0.600000, 2.000000);
	TextDrawTextSize(Logo[2], 80.000000, 87.500000);
	TextDrawAlignment(Logo[2], 1);
	TextDrawColor(Logo[2], -1);
	TextDrawSetShadow(Logo[2], 0);
	TextDrawSetOutline(Logo[2], 0);
	TextDrawBackgroundColor(Logo[2], 255);
	TextDrawFont(Logo[2], 4);
	TextDrawSetProportional(Logo[2], 0);
	TextDrawSetShadow(Logo[2], 0);

	Logo[3] = TextDrawCreate(537.000000, 338.000000, "mdl-2008:tronlogo50");
	TextDrawLetterSize(Logo[3], 0.600000, 2.000000);
	TextDrawTextSize(Logo[3], 80.000000, 87.500000);
	TextDrawAlignment(Logo[3], 1);
	TextDrawColor(Logo[3], -1);
	TextDrawSetShadow(Logo[3], 0);
	TextDrawSetOutline(Logo[3], 0);
	TextDrawBackgroundColor(Logo[3], 255);
	TextDrawFont(Logo[3], 4);
	TextDrawSetProportional(Logo[3], 0);
	TextDrawSetShadow(Logo[3], 0);

	Logo[4] = TextDrawCreate(537.000000, 338.000000, "mdl-2009:tronlogo75");
	TextDrawLetterSize(Logo[4], 0.600000, 2.000000);
	TextDrawTextSize(Logo[4], 80.000000, 87.500000);
	TextDrawAlignment(Logo[4], 1);
	TextDrawColor(Logo[4], -1);
	TextDrawSetShadow(Logo[4], 0);
	TextDrawSetOutline(Logo[4], 0);
	TextDrawBackgroundColor(Logo[4], 255);
	TextDrawFont(Logo[4], 4);
	TextDrawSetProportional(Logo[4], 0);
	TextDrawSetShadow(Logo[4], 0);

	Logo[5] = TextDrawCreate(537.000000, 338.000000, "mdl-2010:tronlogo100");
	TextDrawLetterSize(Logo[5], 0.600000, 2.000000);
	TextDrawTextSize(Logo[5], 80.000000, 87.500000);
	TextDrawAlignment(Logo[5], 1);
	TextDrawColor(Logo[5], -1);
	TextDrawSetShadow(Logo[5], 0);
	TextDrawSetOutline(Logo[5], 0);
	TextDrawBackgroundColor(Logo[5], 255);
	TextDrawFont(Logo[5], 4);
	TextDrawSetProportional(Logo[5], 0);
	TextDrawSetShadow(Logo[5], 0);

	Logo[6] = TextDrawCreate(537.000000, 338.000000, "mdl-2011:tronlogo125");
	TextDrawLetterSize(Logo[6], 0.600000, 2.000000);
	TextDrawTextSize(Logo[6], 80.000000, 87.500000);
	TextDrawAlignment(Logo[6], 1);
	TextDrawColor(Logo[6], -1);
	TextDrawSetShadow(Logo[6], 0);
	TextDrawSetOutline(Logo[6], 0);
	TextDrawBackgroundColor(Logo[6], 255);
	TextDrawFont(Logo[6], 4);
	TextDrawSetProportional(Logo[6], 0);
	TextDrawSetShadow(Logo[6], 0);

	Logo[7] = TextDrawCreate(537.000000, 338.000000, "mdl-2012:tronlogo150");
	TextDrawLetterSize(Logo[7], 0.600000, 2.000000);
	TextDrawTextSize(Logo[7], 80.000000, 87.500000);
	TextDrawAlignment(Logo[7], 1);
	TextDrawColor(Logo[7], -1);
	TextDrawSetShadow(Logo[7], 0);
	TextDrawSetOutline(Logo[7], 0);
	TextDrawBackgroundColor(Logo[7], 255);
	TextDrawFont(Logo[7], 4);
	TextDrawSetProportional(Logo[7], 0);
	TextDrawSetShadow(Logo[7], 0);

  Logo[8] = TextDrawCreate(537.000000, 338.000000, "mdl-2013:tronlogo175");
  TextDrawLetterSize(Logo[8], 0.600000, 2.000000);
  TextDrawTextSize(Logo[8], 80.000000, 87.500000);
  TextDrawAlignment(Logo[8], 1);
  TextDrawColor(Logo[8], -1);
  TextDrawSetShadow(Logo[8], 0);
  TextDrawSetOutline(Logo[8], 0);
  TextDrawBackgroundColor(Logo[8], 255);
  TextDrawFont(Logo[8], 4);
  TextDrawSetProportional(Logo[8], 0);
  TextDrawSetShadow(Logo[8], 0);


	// ------------------------------------------------------------------------

	for(new i; i < sizeof(GuvenliBolge); ++i)
	{
	    GuvenliBolge[i][Rectangle] = CreateDynamicRectangle(GuvenliBolge[i][minX], GuvenliBolge[i][minY], GuvenliBolge[i][maxX], GuvenliBolge[i][maxY], 0, 0);
	    GuvenliBolge[i][Zone] = GangZoneCreate(GuvenliBolge[i][minX], GuvenliBolge[i][minY], GuvenliBolge[i][maxX], GuvenliBolge[i][maxY]);
	}
    for(new i; i < MAX_PLANTS; i++)
	{
		PlantData[i][plantObj] = PlantData[i][plantTimer] = -1;
		PlantData[i][plantLabel] = Text3D: -1;
	}
	for(new i; i < MAX_DEALERS; i++)
	{
	    DealerData[i][dealerActorID] = -1;
	    DealerData[i][dealerLabel] = Text3D: -1;
	}
	ArsaDB = db_open("arsa.db");
	db_query(ArsaDB, "CREATE TABLE IF NOT EXISTS arsalar (id INTEGER, sahip INTEGER, arsaX FLOAT, arsaY FLOAT, arsaZ FLOAT, tip INTEGER, fiyat INTEGER, KiraSure INTEGER, Metrekare INTEGER, MaxTohum INTEGER)");

	LoadArsa = db_prepare(ArsaDB, "SELECT * FROM arsalar");
	AddArsa = db_prepare(ArsaDB, "INSERT INTO arsalar (id, sahip, arsaX, arsaY, arsaZ, tip, fiyat, KiraSure, Metrekare, MaxTohum) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
	UpdateArsa = db_prepare(ArsaDB, "UPDATE arsalar SET sahip=?, arsaX=?, arsaY=?, arsaZ=?, tip=?, fiyat=?, KiraSure=?, Metrekare=?, MaxTohum=? WHERE id=?");
	RemoveArsa = db_prepare(ArsaDB, "DELETE FROM arsalar WHERE id=?");
	new arsaid, arsasahip, Float:arsapos[3], arsatip, arsametrekare, arsatohum, fiyat, kirasure;
	stmt_bind_result_field(LoadArsa, 0, DB::TYPE_INTEGER, arsaid);
	stmt_bind_result_field(LoadArsa, 1, DB::TYPE_INTEGER, arsasahip);
	stmt_bind_result_field(LoadArsa, 2, DB::TYPE_FLOAT, arsapos[0]);
	stmt_bind_result_field(LoadArsa, 3, DB::TYPE_FLOAT, arsapos[1]);
	stmt_bind_result_field(LoadArsa, 4, DB::TYPE_FLOAT, arsapos[2]);
	stmt_bind_result_field(LoadArsa, 5, DB::TYPE_INTEGER, arsatip);
	stmt_bind_result_field(LoadArsa, 6, DB::TYPE_INTEGER, fiyat);
	stmt_bind_result_field(LoadArsa, 7, DB::TYPE_INTEGER, kirasure);
	stmt_bind_result_field(LoadArsa, 8, DB::TYPE_INTEGER, arsametrekare);
	stmt_bind_result_field(LoadArsa, 9, DB::TYPE_INTEGER, arsatohum);

	if(stmt_execute(LoadArsa))
	{
	    while(stmt_fetch_row(LoadArsa))
	    {
	        ArsaBilgi[arsaid][arsaExists] = 1;
	        ArsaBilgi[arsaid][arsaSahip] = arsasahip;
	        ArsaBilgi[arsaid][arsaTip] = arsatip;
	        ArsaBilgi[arsaid][arsaFiyat] = fiyat;
	        ArsaBilgi[arsaid][arsaPos][0] = arsapos[0];
	        ArsaBilgi[arsaid][arsaPos][1] = arsapos[1];
	        ArsaBilgi[arsaid][arsaPos][2] = arsapos[2];
	        ArsaBilgi[arsaid][KiraSure] = kirasure;
	        ArsaBilgi[arsaid][Metrekare] = arsametrekare;
	        ArsaBilgi[arsaid][arsaMaxTohum] = arsatohum;

	        ArsaUpdate(arsaid);

	    }
	}

	DrugDB = db_open("drugs.db");
	db_query(DrugDB, "CREATE TABLE IF NOT EXISTS playerdrugs (Sqlid INTEGER, Drugs INTEGER, Seeds INTEGER, TotalUsed INTEGER, TotalPlanted INTEGER, TotalHarvestedPlants INTEGER, TotalHarvestedGrams INTEGER, TotalGiven INTEGER, TotalReceived INTEGER, TotalBought INTEGER, TotalBoughtPrice INTEGER, TotalSold INTEGER, TotalSoldPrice INTEGER)");
	db_query(DrugDB, "CREATE TABLE IF NOT EXISTS dealers (ID INTEGER, Skin INTEGER, PosX FLOAT, PosY FLOAT, PosZ FLOAT, PosA FLOAT)");

	// prepare player queries
	LoadPlayer = db_prepare(DrugDB, "SELECT Drugs, Seeds, TotalUsed, TotalPlanted, TotalHarvestedPlants, TotalHarvestedGrams, TotalGiven, TotalReceived, TotalBought, TotalBoughtPrice, TotalSold, TotalSoldPrice FROM playerdrugs WHERE Sqlid=?");
	InsertPlayer = db_prepare(DrugDB, "INSERT INTO playerdrugs (Sqlid) VALUES (?)");
	SavePlayer = db_prepare(DrugDB, "UPDATE playerdrugs SET Drugs=?, Seeds=?, TotalUsed=?, TotalPlanted=?, TotalHarvestedPlants=?, TotalHarvestedGrams=?, TotalGiven=?, TotalReceived=?, TotalBought=?, TotalBoughtPrice=?, TotalSold=?, TotalSoldPrice=? WHERE Sqlid=?");

	// prepare dealer queries
	LoadDealers = db_prepare(DrugDB, "SELECT * FROM dealers");
	AddDealer = db_prepare(DrugDB, "INSERT INTO dealers (ID, Skin, Drugs, PosX, PosY, PosZ, PosA, Virtual) VALUES (?, ?, ?, ?, ?, ?, ?, ?)");
    UpdateDealer = db_prepare(DrugDB, "UPDATE dealers SET Skin=?, Drugs=?, PosX=?, PosY=?, PosZ=?, PosA=?, Virtual=? WHERE ID=?");
	RemoveDealer = db_prepare(DrugDB, "DELETE FROM dealers WHERE ID=?");
    UpdateDealerDrugs = db_prepare(DrugDB, "UPDATE dealers SET Drugs=? WHERE ID=?");
	// initialize connected players
	foreach(new i : Player)
	{
	    if(GetPVarInt(i, "Logged") == 1) Player_Init(i);
	}

	// load dealers
	new id, drugs, skin, Float: pos[4], dealervw;
	stmt_bind_result_field(LoadDealers, 0, DB::TYPE_INTEGER, id);
	stmt_bind_result_field(LoadDealers, 1, DB::TYPE_INTEGER, skin);
	stmt_bind_result_field(LoadDealers, 2, DB::TYPE_INTEGER, drugs);
	stmt_bind_result_field(LoadDealers, 3, DB::TYPE_FLOAT, pos[0]);
	stmt_bind_result_field(LoadDealers, 4, DB::TYPE_FLOAT, pos[1]);
	stmt_bind_result_field(LoadDealers, 5, DB::TYPE_FLOAT, pos[2]);
	stmt_bind_result_field(LoadDealers, 6, DB::TYPE_FLOAT, pos[3]);
	stmt_bind_result_field(LoadDealers, 7, DB::TYPE_INTEGER, dealervw);

	if(stmt_execute(LoadDealers))
	{
	    new label[300];
	    while(stmt_fetch_row(LoadDealers))
	    {
            DealerData[id][dealerSkin] = skin;
            DealerData[id][dealerDrugs] = drugs;
		 	DealerData[id][dealerX] = pos[0];
		  	DealerData[id][dealerY] = pos[1];
	        DealerData[id][dealerZ] = pos[2];
		 	DealerData[id][dealerA] = pos[3];
			DealerData[id][dealerVw] = dealervw;

		    DealerData[id][dealerActorID] = CreateActor(DealerData[id][dealerSkin], DealerData[id][dealerX], DealerData[id][dealerY], DealerData[id][dealerZ], DealerData[id][dealerA]);
            SetActorInvulnerable(DealerData[id][dealerActorID], 1);
            SetActorVirtualWorld(DealerData[id][dealerActorID], dealervw);

			format(label, sizeof(label), "Uyuþturucu Satýcýsý (%d)\n\n{FFFFFF}{F1C40F}ALT {FFFFFF}tuþuna basarak etkileþime geçebilirsiniz.", id);
			DealerData[id][dealerLabel] = CreateDynamic3DTextLabel(label, 0xF1C40FFF, DealerData[id][dealerX], DealerData[id][dealerY], DealerData[id][dealerZ] + 0.25, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);

			Iter_Add(Dealers, id);
		}
	}
	RoadblockList = LoadModelSelectionMenu("roadblocks.txt");
	SignList = LoadModelSelectionMenu("signs.txt");

	ObjectDB = db_open("cop_objects.db");
    db_query(ObjectDB, "CREATE TABLE IF NOT EXISTS objects (id INTEGER, owner INTEGER, type INTEGER, data INTEGER, model INTEGER, posx FLOAT, posy FLOAT, posz FLOAT, rotx FLOAT, roty FLOAT, rotz FLOAT, interior INTEGER, virtualworld INTEGER)");

    LoadObjects = db_prepare(ObjectDB, "SELECT * FROM objects");
    AddObject = db_prepare(ObjectDB, "INSERT INTO objects (id, owner, type, data, model, posx, posy, posz, rotx, roty, rotz, interior, virtualworld) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    UpdateObject = db_prepare(ObjectDB, "UPDATE objects SET posx=?, posy=?, posz=?, rotx=?, roty=?, rotz=? WHERE id=?");
	RemoveObject = db_prepare(ObjectDB, "DELETE FROM objects WHERE id=?");

	new objid, type, data, model, owner, Float: poss[3], Float: rot[3], interior, vworld;
	stmt_bind_result_field(LoadObjects, 0, DB::TYPE_INTEGER, objid);
	stmt_bind_result_field(LoadObjects, 1, DB::TYPE_INTEGER, owner);
	stmt_bind_result_field(LoadObjects, 2, DB::TYPE_INTEGER, type);
	stmt_bind_result_field(LoadObjects, 3, DB::TYPE_INTEGER, data);
	stmt_bind_result_field(LoadObjects, 4, DB::TYPE_INTEGER, model);
	stmt_bind_result_field(LoadObjects, 5, DB::TYPE_FLOAT, poss[0]);
	stmt_bind_result_field(LoadObjects, 6, DB::TYPE_FLOAT, poss[1]);
	stmt_bind_result_field(LoadObjects, 7, DB::TYPE_FLOAT, poss[2]);
	stmt_bind_result_field(LoadObjects, 8, DB::TYPE_FLOAT, rot[0]);
	stmt_bind_result_field(LoadObjects, 9, DB::TYPE_FLOAT, rot[1]);
	stmt_bind_result_field(LoadObjects, 10, DB::TYPE_FLOAT, rot[2]);
	stmt_bind_result_field(LoadObjects, 11, DB::TYPE_INTEGER, interior);
	stmt_bind_result_field(LoadObjects, 12, DB::TYPE_INTEGER, vworld);

	if(stmt_execute(LoadObjects))
	{
	    new label[150];
	    while(stmt_fetch_row(LoadObjects))
	    {
            CopObjectData[objid][ObjCreated] = true;
            CopObjectData[objid][Owner] = owner;
		    CopObjectData[objid][Type] = type;
		    CopObjectData[objid][ObjData] = data;
		    CopObjectData[objid][ObjModel] = model;
		    CopObjectData[objid][ObjInterior] = interior;
		    CopObjectData[objid][ObjVirtualWorld] = vworld;
			CopObjectData[objid][ObjX] = poss[0];
			CopObjectData[objid][ObjY] = poss[1];
			CopObjectData[objid][ObjZ] = poss[2];
			CopObjectData[objid][ObjRX] = rot[0];
			CopObjectData[objid][ObjRY] = rot[1];
			CopObjectData[objid][ObjRZ] = rot[2];
			CopObjectData[objid][ObjID] = CreateDynamicObject(model, poss[0], poss[1], poss[2], rot[0], rot[1], rot[2], vworld, interior);
			CopObjectData[objid][ObjArea] = -1;

			switch(type)
			{
			    case OBJECT_TYPE_ROADBLOCK: format(label, sizeof(label), "Barikat (ID: %d)\n{FFFFFF}Yerleþtiren: %s", objid, SQLName(CopObjectData[objid][Owner]));
			    case OBJECT_TYPE_SIGN: format(label, sizeof(label), "Tabela (ID: %d)\n{FFFFFF}Yerleþtiren: %s", objid, SQLName(CopObjectData[objid][Owner]));
			    case OBJECT_TYPE_POLICELINE: format(label, sizeof(label), "Olay Yeri Þeridi (ID: %d)\n{FFFFFF}Yerleþtiren: %s", objid, SQLName(CopObjectData[objid][Owner]));
			    case OBJECT_TYPE_SPIKE:
				{
					format(label, sizeof(label), "Çivi (ID: %d)\n{FFFFFF}Yerleþtiren: %s", objid, SQLName(CopObjectData[objid][Owner]));
					CopObjectData[objid][ObjArea] = CreateDynamicSphere(poss[0], poss[1], poss[2], 2.5, vworld, interior);
				}

				case OBJECT_TYPE_SPEEDCAM:
				{
					format(label, sizeof(label), "Hýz Kamerasý (ID: %d)\n{FFFFFF}Hýz Limiti: {E74C3C}%d\n{FFFFFF}Yerleþtiren: %s", objid, data, SQLName(CopObjectData[objid][Owner]));
					CopObjectData[objid][ObjArea] = CreateDynamicSphere(poss[0], poss[1], poss[2], SPEEDCAM_RANGE, vworld, interior);
				}
			}

			CopObjectData[objid][ObjLabel] = CreateDynamic3DTextLabel(label, 0x3498DBFF, poss[0], poss[1], poss[2] + zOffsets[type], streamDistances[type], INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, vworld, interior);
		}
	}
	for(new i; i < MAX_BANKERS; i++)
    {
        BankerData[i][bankerActorID] = -1;

        #if defined BANKER_USE_MAPICON
        BankerData[i][bankerIconID] = -1;
        #endif

        BankerData[i][bankerLabel] = Text3D: -1;
    }

    for(new i; i < MAX_ATMS; i++)
    {
        ATMData[i][atmObjID] = -1;

        #if defined ATM_USE_MAPICON
        ATMData[i][atmIconID] = -1;
        #endif

        #if defined ROBBABLE_ATMS
        ATMData[i][atmTimer] = ATMData[i][atmPickup] = -1;
        ATMData[i][atmHealth] = ATM_HEALTH;
        #endif

        ATMData[i][atmLabel] = Text3D: -1;
    }
    mysql_tquery(baglanti, "CREATE TABLE IF NOT EXISTS `bankers` (\
	  `ID` int(11) NOT NULL,\
	  `Skin` smallint(3) NOT NULL,\
	  `PosX` float NOT NULL,\
	  `PosY` float NOT NULL,\
	  `PosZ` float NOT NULL,\
	  `PosA` float NOT NULL\
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;");

    mysql_tquery(baglanti, "CREATE TABLE IF NOT EXISTS `bank_atms` (\
	  `ID` int(11) NOT NULL,\
	  `PosX` float NOT NULL,\
	  `PosY` float NOT NULL,\
	  `PosZ` float NOT NULL,\
	  `RotX` float NOT NULL,\
	  `RotY` float NOT NULL,\
	  `RotZ` float NOT NULL\
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;");

	mysql_tquery(baglanti, "CREATE TABLE IF NOT EXISTS `bank_accounts` (\
	  `ID` int(11) NOT NULL auto_increment,\
	  `Owner` int(12) NOT NULL,\
	  `Password` varchar(32) NOT NULL,\
	  `Balance` int(11) NOT NULL,\
	  `CreatedOn` int(11) NOT NULL,\
	  `LastAccess` int(11) NOT NULL,\
	  `Disabled` smallint(1) NOT NULL,\
	  PRIMARY KEY  (`ID`)\
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;");

	new query[512];
	mysql_format(baglanti, query, sizeof(query), "CREATE TABLE IF NOT EXISTS `bank_logs` (\
	  	`ID` int(11) NOT NULL auto_increment,\
	  	`AccountID` int(11) NOT NULL,\
	  	`ToAccountID` int(11) NOT NULL default '-1',\
	  	`Type` smallint(1) NOT NULL,\
	  	`Player` varchar(24) NOT NULL,\
	  	`Amount` int(11) NOT NULL,\
	  	`Date` int(11) NOT NULL,");

	mysql_format(baglanti, query, sizeof(query), "%s\
 		PRIMARY KEY  (`ID`),\
 		KEY `bank_logs_ibfk_1` (`AccountID`),\
 		CONSTRAINT `bank_logs_ibfk_1` FOREIGN KEY (`AccountID`) REFERENCES `bank_accounts` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE\
		) ENGINE=InnoDB DEFAULT CHARSET=utf8;", query);

	mysql_tquery(baglanti, query);

	mysql_tquery(baglanti, "SELECT * FROM bankers", "LoadBankers");
	mysql_tquery(baglanti, "SELECT * FROM bank_atms", "LoadATMs");

	new label[180];
	for(new i; i < sizeof(TrashData); i++)
	{
	    format(label, sizeof(label), "%s\n{FFFFFF}\n/cop ile alabilirsiniz.", (TrashData[i][TrashType] == TYPE_BIN) ? ("Çöp Kutusu") : ("Çöp Bidonu"));
		TrashData[i][TrashLabel] = CreateDynamic3DTextLabel(label, 0x2ECC71FF, TrashData[i][TrashX], TrashData[i][TrashY], TrashData[i][TrashZ]+1.25, 15.0, .testlos = 1);
		TrashData[i][TrashLevel] = (TrashData[i][TrashType] == TYPE_BIN) ? 1 : 2;
	}

	for(new i; i < sizeof(FactoryData); i++)
	{
	    format(label, sizeof(label), "Geridönüþüm Fabrikasý - %s\n\n{FFFFFF}Mevcut Çöp Torbalarý: {F39C12}0\n{FFFFFF}Çöpleri geridönüþüm fabrikalarýna teslim ederek para kazanbilirsiniz!", FactoryData[i][FactoryName]);
		FactoryData[i][FactoryLabel] = CreateDynamic3DTextLabel(label, 0x2ECC71FF, FactoryData[i][FactoryX], FactoryData[i][FactoryY], FactoryData[i][FactoryZ] + 0.5, 15.0, .testlos = 1);
		FactoryData[i][FactoryCP] = CreateDynamicCP(FactoryData[i][FactoryX], FactoryData[i][FactoryY], FactoryData[i][FactoryZ], 6.0);
	}
	for(new i, m = GetPlayerPoolSize(); i <= m; i++)
	{
	    if(!IsPlayerConnected(i)) continue;
		Trash_InitPlayer(i);
	}
	// assign default values to variables
	for(new i; i < MAX_TREES; i++)
	{
		TreeData[i][treeObjID] = TreeData[i][treeTimer] = -1;
		TreeData[i][treeLabel] = Text3D: -1;
	}

	for(new i; i < MAX_BUYERS; i++)
	{
	    BuyerData[i][buyerActorID] = -1;
	    BuyerData[i][buyerLabel] = Text3D: -1;
	}

	foreach(new i : Player) Player_Init(i);

	// open database & create tables
	ScriptDBHandle = db_open("lumberjack.db");
	db_query(ScriptDBHandle, "CREATE TABLE IF NOT EXISTS trees (ID INTEGER, PosX FLOAT, PosY FLOAT, PosZ FLOAT, RotX FLOAT, RotY FLOAT, RotZ FLOAT)");
	db_query(ScriptDBHandle, "CREATE TABLE IF NOT EXISTS buyers (ID INTEGER, Skin INTEGER, PosX FLOAT, PosY FLOAT, PosZ FLOAT, PosA FLOAT)");

	// prepare tree queries
	LoadTrees = db_prepare(ScriptDBHandle, "SELECT * FROM trees");
	AddTree = db_prepare(ScriptDBHandle, "INSERT INTO trees (ID, PosX, PosY, PosZ, RotX, RotY, RotZ) VALUES (?, ?, ?, ?, ?, ?, ?)");
    UpdateTree = db_prepare(ScriptDBHandle, "UPDATE trees SET PosX=?, PosY=?, PosZ=?, RotX=?, RotY=?, RotZ=? WHERE ID=?");
	RemoveTree = db_prepare(ScriptDBHandle, "DELETE FROM trees WHERE ID=?");

	// prepare buyer queries
	LoadBuyers = db_prepare(ScriptDBHandle, "SELECT * FROM buyers");
	AddBuyer = db_prepare(ScriptDBHandle, "INSERT INTO buyers (ID, Skin, PosX, PosY, PosZ, PosA) VALUES (?, ?, ?, ?, ?, ?)");
    UpdateBuyer = db_prepare(ScriptDBHandle, "UPDATE buyers SET Skin=?, PosX=?, PosY=?, PosZ=?, PosA=? WHERE ID=?");
	RemoveBuyer = db_prepare(ScriptDBHandle, "DELETE FROM buyers WHERE ID=?");

	// load trees
	new tid;
	stmt_bind_result_field(LoadTrees, 0, DB::TYPE_INTEGER, tid);
	stmt_bind_result_field(LoadTrees, 1, DB::TYPE_FLOAT, pos[0]);
	stmt_bind_result_field(LoadTrees, 2, DB::TYPE_FLOAT, pos[1]);
	stmt_bind_result_field(LoadTrees, 3, DB::TYPE_FLOAT, pos[2]);
	stmt_bind_result_field(LoadTrees, 4, DB::TYPE_FLOAT, rot[0]);
	stmt_bind_result_field(LoadTrees, 5, DB::TYPE_FLOAT, rot[1]);
	stmt_bind_result_field(LoadTrees, 6, DB::TYPE_FLOAT, rot[2]);

	if(stmt_execute(LoadTrees))
	{
	    new treelabel[96];
	    while(stmt_fetch_row(LoadTrees))
	    {
            TreeData[tid][treeX] = pos[0];
		 	TreeData[tid][treeY] = pos[1];
		  	TreeData[tid][treeZ] = pos[2];
	        TreeData[tid][treeRX] = rot[0];
		 	TreeData[tid][treeRY] = rot[1];
		  	TreeData[tid][treeRZ] = rot[2];

		    TreeData[tid][treeObjID] = CreateDynamicObject(657, TreeData[tid][treeX], TreeData[tid][treeY], TreeData[tid][treeZ], TreeData[tid][treeRX], TreeData[tid][treeRY], TreeData[tid][treeRZ]);

			format(treelabel, sizeof(treelabel), "Aðaç (%d)\n\n{F1C40F}~k~~CONVERSATION_NO~ {FFFFFF}ile kesebilirsin.", tid);
			TreeData[tid][treeLabel] = CreateDynamic3DTextLabel(treelabel, 0x2ECC71FF, TreeData[tid][treeX], TreeData[tid][treeY], TreeData[tid][treeZ] + 1.5, 5.0);

			Iter_Add(Trees, tid);
		}

		printf("» Toplam %d Aðaç yüklenmiþtir.", Iter_Count(Trees));
	}

	// load buyers
	new skinbuyer, Float: bpos[4];
	stmt_bind_result_field(LoadBuyers, 0, DB::TYPE_INTEGER, id);
	stmt_bind_result_field(LoadBuyers, 1, DB::TYPE_INTEGER, skinbuyer);
	stmt_bind_result_field(LoadBuyers, 2, DB::TYPE_FLOAT, bpos[0]);
	stmt_bind_result_field(LoadBuyers, 3, DB::TYPE_FLOAT, bpos[1]);
	stmt_bind_result_field(LoadBuyers, 4, DB::TYPE_FLOAT, bpos[2]);
	stmt_bind_result_field(LoadBuyers, 5, DB::TYPE_FLOAT, bpos[3]);

	if(stmt_execute(LoadBuyers))
	{
	    while(stmt_fetch_row(LoadBuyers))
	    {
            BuyerData[id][buyerSkin] = skinbuyer;
		 	BuyerData[id][buyerX] = bpos[0];
		  	BuyerData[id][buyerY] = bpos[1];
	        BuyerData[id][buyerZ] = bpos[2];
		 	BuyerData[id][buyerA] = bpos[3];

		    BuyerData[id][buyerActorID] = CreateActor(BuyerData[id][buyerSkin], BuyerData[id][buyerX], BuyerData[id][buyerY], BuyerData[id][buyerZ], BuyerData[id][buyerA]);
            SetActorInvulnerable(BuyerData[id][buyerActorID], 1);

			format(label, sizeof(label), "Oduncu (%d)\n\n{FFFFFF}Testere almak için {F1C40F}/testere {FFFFFF}kullanabilirsiniz. {2ECC71}(%s)\n{FFFFFF}Odun satmak için {F1C40F}/odun sat {FFFFFF}kullanabilirsin. {2ECC71}(%s).", id, FormatNumber(CSAW_PRICE), FormatNumber(LOG_PRICE));
			BuyerData[id][buyerLabel] = CreateDynamic3DTextLabel(label, 0xF1C40FFF, BuyerData[id][buyerX], BuyerData[id][buyerY], BuyerData[id][buyerZ] + 0.25, 5.0, .testlos = 1);

			Iter_Add(Buyers, id);
		}

		printf("» Toplam %d odun satýcýsý yüklenmiþtir.", Iter_Count(Buyers));
	}

	Vein_Generate();
	SetTimer("Vein_Generate", REGEN_TIME * 60000, true);

	for(new i; i < sizeof(DropPoints); i++)
	{
	    format(label, sizeof(label), "Cevher Teslim Noktasý - %s\n\n{FFFFFF}Teslim et ve paraný al!", DropPoints[i][Location]);
		DropPoints[i][PointLabel] = CreateDynamic3DTextLabel(label, 0xF1C40FFF, DropPoints[i][PointX], DropPoints[i][PointY], DropPoints[i][PointZ] + 0.5, 15.0, .testlos = 1);
		DropPoints[i][PointCP] = CreateDynamicCP(DropPoints[i][PointX], DropPoints[i][PointY], DropPoints[i][PointZ], 6.0);
	}

	for(new i; i<sizeof(PayNSpray); i++)
	{
	    CreateDynamicPickup(1239, 23, PayNSpray[i][0], PayNSpray[i][1], PayNSpray[i][2], 0);
	    CreateDynamic3DTextLabel("{AFAFAF}Tamir Noktasý (N tuþu)\n{FFFFFF}/azirhlat\n{FFFFFF}/taksiplaka", -1, PayNSpray[i][0], PayNSpray[i][1], PayNSpray[i][2], 10.0);
	}

	// -------------- ACTORS ------------------------------
	CreateActor(161, -1100.6758,-1621.0950,76.3672,267.5893);
	CreateDynamic3DTextLabel("{E74C3C}[Çiftçi]\n{E74C3C}ALT {FFFFFF}tuþu ile etkileþime geçebilirsiniz.", -1, -1100.6758,-1621.0950,76.3672+1.5, 10.0);
	actors[0] = CreateActor(6, 1404.3395,-1301.0625,13.5454, 265.1700);
	CreateDynamic3DTextLabel("{33CCFF}[Silah/Mermi Tüccarý]\n{AFAFAF}ALT {FFFFFF}tuþu ile etkileþime geçebilirsiniz.", -1, 1404.3395,-1301.0625,13.5454, 10.0);

	actors[1] = CreateActor(76, 1457.8317,-1777.6063,1815.9910,274.8192);
	SetActorVirtualWorld(actors[1], 100);

	CreateDynamic3DTextLabel("{33CCFF}[Halkla Ýliþkiler]\n{AFAFAF}ALT {FFFFFF}tuþu ile etkileþime geçebilirsiniz.", -1, 1457.8317,-1777.6063,1815.9910, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 100);
	actors[2] = CreateActor(280, 1462.8433,-1682.5958,-70.0371,182.1615);
	SetActorVirtualWorld(actors[2], 101);
	CreateDynamic3DTextLabel("{8D8DFF}[Halkla Ýliþkiler]\n{AFAFAF}ALT {FFFFFF}tuþu ile etkileþime geçebilirsiniz.", -1, 1462.8433,-1682.5958,-70.0371+0.5, 10.0, .testlos = 1);

	CreateActor(20012, 1240.0562,5301.6147,50.3004,273.6643);
	CreateDynamic3DTextLabel("{FF0000}[Gardiyan]\n{808080}ALT {FFFFFF}tuþu ile etkileþime geçebilirsiniz.", -1, 1240.0562,5301.6147,50.3004+1, 20.0);

  CreateActor(20012, 1358.4274,5212.8857,50.3004,358.8918);
  CreateDynamic3DTextLabel("{FF0000}[Labirent Bitiþ]\n{808080}ALT {FFFFFF}tuþu ile etkileþime geçebilirsiniz.", -1, 1358.4274,5212.8857,50.3004+1, 20.0);
	// -------------------------------------------------------
	//CreateDynamicPickup(1239, 23, 822.0085,2.9543,1004.1797, -1, 3); // Vergi Dairesi Pickup

	CreateDynamicPickup(1239,23,1490.4556,-1703.0160,-70.0371,-1,0);
	CreateDynamic3DTextLabel("{1394BF}LSPD Dolap\n{1394BF}/dolap ile açabilirsiniz.",-1,1490.4556,-1703.0160,-70.0371,5.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1,0);

	CreateDynamicPickup(19921, 2, 90.4013, -303.7245, 1.5781, 0);
	CreateDynamic3DTextLabel("{F01934}[Mekanik]\n{ffffff}/mekanik", -1, 90.4013, -303.7245, 1.5781, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 0);

	CreateDynamic3DTextLabel("{1394BF}Araç Baðlama\n{1394BF}/aracibagla ile aracý baðlayabilirsiniz.",-1,1601.3522,-1608.1353,13.6452,10.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, 0);

	CreateDynamic3DTextLabel("{1394BF}/cctv", -1,1488.1561,-1691.2668,-70.0371, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, 0);

	//CreateDynamic3DTextLabel("{FF9900}Vergi iþlemleri için {FF0000}Y {FF9900}tuþuna basýn.",-1,822.0085,2.9543,1004.1797,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,-1,3);

	CreateDynamicPickup(1239, 23, 1142.4302,-1330.7209,13.5374, 0);
	CreateDynamic3DTextLabel("Yaralý Teslim Noktasý\n/yteslim ile yaralýyý teslim edebilirsiniz.", 0xFF8282AA, 1142.4302,-1330.7209,13.5374, 10.0, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 0, 0);

	CreateDynamic3DTextLabel("LSMD Dolap\n/dolap ile açabilirsiniz.", 0xFF8282AA, 1163.4614,-1303.3339,-72.4000, 10.0, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1, 0);

	CreateDynamicPickup(1239, 23, 1131.8615,-1321.4219,-77.5419, 103);
	CreateDynamic3DTextLabel("/lsmdlobi", 0xFF8282AA, 1131.8615,-1321.4219,-77.5419, 10.0, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1, 0);

	CreateDynamicPickup(1239, 23, 2205.7734,-2663.9316,13.5469, 0);
	CreateDynamic3DTextLabel("{FFFFFF}Yük Alým Noktasý\n{FF9900}/yukal", -1, 2205.7734,-2663.9316,13.5469, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 0);
	CreateDynamic3DTextLabel("{ff3d3d}[Paintball]\n{ff3d3d}/paintball", -1, 1170.9122,-1489.6418,22.7551, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 0);

	CreateDynamicPickup(1314, 23,  -2027.0787,1122.2255,53.9859);
    CreateDynamic3DTextLabel("[Evlilik]\n{FFFFFF}Evlenmek için /evlen [ID] yazýn.", COLOR_DARKBLUE, -2027.0787,1122.2255,53.9859, 10.0);
	for(new i; i < MAX_GAS_PUMPS; i++)
	{
	    PumpData[i][pumpUser] = INVALID_PLAYER_ID;
	    PumpData[i][pumpLabel] = CreateDynamic3DTextLabel("Gaz Pompasý", 0xF1C40FFF, PumpData[i][pumpX], PumpData[i][pumpY], PumpData[i][pumpZ] + 0.75, 7.5);
	    Pump_Update(i);
	}
	// ------------------------------------ TEXTDRAWS ----------------------------
	  LabelleriYukle();
    GateleriYukle();
    EvleriYukle();
    BirlikleriYukle();
    IsyerleriYukle();
    Arrest_Load();
    CCTV_Yukle();
    Lokasyon_Yukle();
    BinalariYukle();
    GiseleriYukle();
    AraclariYukle();
    GarajlariYukle();
    DroppedWeapons_Load();
    PetleriYukle();
    HoodlariYukle();
    GraffitiYukle();
    SorulariYukle();
    NPCYukle();
	Iter_Init(CekilisKatilimcilar);
	Iter_Init(Mobilyalar);
	for(new i; i<MAX_BIRLIK; i++)
	{
 		Iter_Clear(CekilisKatilimcilar[i]);
 	}
	return 1;
}
public OnGameModeExit()
{
	for (new i = 0; i < MAX_PLAYERS; i++) {
		if (IsPlayerConnected(i)) {
			GenerateInterface(i, false);
		}
	}
    TextDrawHideForAll(Karanlik);
	TextDrawDestroy(Karanlik);
    for (new i = 0; i != MAX_ARAC; i ++)
    {
        if(AracInfo[i][aracExists])
        {
            Arac_Kaydet(i);
        }
    }
    foreach(new i : Player)
	{
	    Oyuncu_Kaydet(i, 0);
	    Player_SaveDrugs(i);
	    Player_ResetCutting(i);
	    Player_RemoveLog(i);
	    Trash_ResetPlayer(i, 1);
	    Player_CleanUp(i, 1);
	    if(IsValidPlayerProgressBar(i, MiningBar[i])) DestroyPlayerProgressBar(i, MiningBar[i]);
	    DestroyPlayerProgressBar(i, CuttingBar[i]);
	    OnPlayerDisconnect(i, 1);
	}
	foreach(new i : Dealers) DestroyActor(DealerData[i][dealerActorID]);
	foreach(new i : Bankers)
	{
	    if(IsValidActor(BankerData[i][bankerActorID])) DestroyActor(BankerData[i][bankerActorID]);
	}

	foreach(new i : Buyers) DestroyActor(BuyerData[i][buyerActorID]);
	db_close(ScriptDBHandle);
	db_close(DrugDB);
	db_close(ObjectDB);
    mysql_close();
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if(GetPVarInt(playerid, "Logged") == 0) EkranTemizle(playerid);
	if(GetPVarInt(playerid, "Logged") == 1) SpawnPlayer(playerid);
  TogglePlayerSpectating(playerid, true);
  SetPlayerColor(playerid, COLOR_BLACK);
	return 0;
}
public FCNPC_OnDeath(npcid, killerid, reason)
{
	foreach(new i:Petler) if(PetBilgi[i][NPCID] == npcid)
	{
	    PetBilgi[i][petYarali] = 1;
	    SetTimerEx("PetDelete", 1000, false, "i", i);
	}
	return 1;
}
/*public OnPlayerRequestDownload(playerid, type, crc)
{
	if(!IsPlayerConnected(playerid))
        return 0;

	if(IsPlayerNPC(playerid))
        return 0;

    new filename[64], filefound, final_url[256], str[148], turu[24];

    new INDIRME_ADRESI[4];

    if(type == DOWNLOAD_REQUEST_TEXTURE_FILE)
    {
        filefound = FindTextureFileNameFromCRC(crc, filename, sizeof(filename));
        format(turu, sizeof(turu), "texture dosyasý");
    }
    else if(type == DOWNLOAD_REQUEST_MODEL_FILE)
    {
        filefound = FindModelFileNameFromCRC(crc, filename, sizeof(filename));
        format(turu, sizeof(turu), "model dosyasý");
    }

    if(filefound)
    {
        new server = RandomEx(1, 2);

		if(server == 1) format(INDIRME_ADRESI[playerid], 42, "http://52.57.132.248/fastsv1");
        if(server == 2) format(INDIRME_ADRESI[playerid], 42, "http://52.57.132.248/fastsv2");
        format(final_url, sizeof(final_url), "%s/%s", INDIRME_ADRESI[playerid], filename);
        RedirectDownload(playerid, final_url);
        new sayisi = RandomEx(1000000, 9999999);
        new numarasi[12];
        format(numarasi, sizeof(numarasi), "%d", sayisi);
        format(str, sizeof(str), "{2ECC71}Fast Download: {E74C3C}-%s {FFFFFF}indirilirken {2ECC71}Fast Download Server #%d {FFFFFF}tercih edildi.", numarasi, server);
        SendClientMessage(playerid, -1, str);
    }
    return 1;
}*/
public OnPlayerFinishedDownloading(playerid, virtualworld)
{
    if(Download[playerid] == 0)
    {
        Download[playerid] = 1;
        if(GetServerBilgi("bakimModu") == 1)
		{
			Dialog_Show(playerid, BakimModu, DIALOG_STYLE_INPUT, "Bakým", "Sunucumuz bakým modundadýr, giriþ yapmak için bakým þifresini girin:", "Gir", "Kapat");
		}
		else
		{
		    TextDrawShowForPlayer(playerid, GirisTD);
			SetTimerEx("LogoTimer",500,false,"i",playerid);
			MesajGonder(playerid,"Hesabýnýz veritabanýnda aranýyor...");
			SetTimerEx("Giris_Yap",2500,false,"i",playerid);
		}
    }
    return 1;
}

forward LogoTimer(playerid);
public LogoTimer(playerid)
{
	TextDrawHideForPlayer(playerid, Logo[8]);
	TextDrawShowForPlayer(playerid, Logo[1]);
	SetTimerEx("LogoTimer2",500,false,"i",playerid);
	return 1;
}

forward LogoTimer2(playerid);
public LogoTimer2(playerid)
{
	TextDrawHideForPlayer(playerid, Logo[1]);
	TextDrawShowForPlayer(playerid, Logo[2]);
	SetTimerEx("LogoTimer3",500,false,"i",playerid);
	return 1;
}

forward LogoTimer3(playerid);
public LogoTimer3(playerid)
{
	TextDrawHideForPlayer(playerid, Logo[2]);
	TextDrawShowForPlayer(playerid, Logo[3]);
	SetTimerEx("LogoTimer4",500,false,"i",playerid);
	return 1;
}

forward LogoTimer4(playerid);
public LogoTimer4(playerid)
{
	TextDrawHideForPlayer(playerid, Logo[3]);
	TextDrawShowForPlayer(playerid, Logo[4]);
	SetTimerEx("LogoTimer5",500,false,"i",playerid);
	return 1;
}

forward LogoTimer5(playerid);
public LogoTimer5(playerid)
{
	TextDrawHideForPlayer(playerid, Logo[4]);
	TextDrawShowForPlayer(playerid, Logo[5]);
	SetTimerEx("LogoTimer6",500,false,"i",playerid);
	return 1;
}

forward LogoTimer6(playerid);
public LogoTimer6(playerid)
{
	TextDrawHideForPlayer(playerid, Logo[5]);
	TextDrawShowForPlayer(playerid, Logo[6]);
	SetTimerEx("LogoTimer7",500,false,"i",playerid);
	return 1;
}

forward LogoTimer7(playerid);
public LogoTimer7(playerid)
{
	TextDrawHideForPlayer(playerid, Logo[6]);
	TextDrawShowForPlayer(playerid, Logo[7]);
	SetTimerEx("LogoTimer8",500,false,"i",playerid);
	return 1;
}

forward LogoTimer8(playerid);
public LogoTimer8(playerid)
{
	TextDrawHideForPlayer(playerid, Logo[7]);
	TextDrawShowForPlayer(playerid, Logo[8]);
	SetTimerEx("LogoTimer",500,false,"i",playerid);
	return 1;
}

forward LogoDur(playerid);
public LogoDur(playerid)
{
	TextDrawDestroy(Logo[1]);
	TextDrawDestroy(Logo[2]);
	TextDrawDestroy(Logo[3]);
	TextDrawDestroy(Logo[4]);
	TextDrawDestroy(Logo[5]);
	TextDrawDestroy(Logo[6]);
	TextDrawDestroy(Logo[7]);
	TextDrawDestroy(Logo[8]);
	return 1;
}


public OnPlayerConnect(playerid)
{
  for (new i = 0; i < MAX_VEHICLES; i++)
	{
	    g_fSpeedCap[ playerid ][ i ] = 0.0;
	}
	if(IsPlayerNPC(playerid)) return 0;
    if(!IsValidRoleplayName(ReturnName(playerid)))
    {
        HataMesajGonder(playerid,"Ýsminiz Ad_Soyad formatýnda olmalýdýr. Ýsminizi deðiþtirip tekrar giriþ yapýnýz.");
        Kick(playerid);
        return 1;
	}
	pDrunkLevelLast[playerid] = 0;
	GenerateInterface(playerid);
    pFPS[playerid] = 0;
    Download[playerid] = 0;
	/*if(!ClientKontrol(playerid) && strcmp(GetIP(playerid), "127.0.0.1") != 0)
	{
	    HataMesajGonder(playerid, "Sunucumuza giriþ yapmak için client kullanmalýsýnýz. Forum sitemizden clienti indirebilirsiniz.");
	    Kick(playerid);
	    return 1;
	}*/

	PlayerDrugData[playerid][DrugsOfferedBy] = INVALID_PLAYER_ID;
	BilgiTemizle(playerid);
	Trash_InitPlayer(playerid);
	Oduncu_InitPlayer(playerid);
	Madenci_InitPlayer(playerid);
	EkranTemizle(playerid);
	RemoveBuildings(playerid);
	NameTag[playerid] = CreateDynamic3DTextLabel("NameTag yükleniyor...", 0xFFFFFFFF, 0.0, 0.0, 0.1, 10.0, playerid, INVALID_VEHICLE_ID, 1);
	SetPlayerColor(playerid,COLOR_GREY);

  ParaBilgilendirme[0][playerid] = CreatePlayerTextDraw(playerid, 637.405517, 1.000027, "_");
  PlayerTextDrawLetterSize(playerid, ParaBilgilendirme[0][playerid], 0.279835, 1.034166);
  PlayerTextDrawAlignment(playerid, ParaBilgilendirme[0][playerid], 3);
  PlayerTextDrawColor(playerid, ParaBilgilendirme[0][playerid], 1098134015);
  PlayerTextDrawSetShadow(playerid, ParaBilgilendirme[0][playerid], 0);
  PlayerTextDrawSetOutline(playerid, ParaBilgilendirme[0][playerid], 1);
  PlayerTextDrawBackgroundColor(playerid, ParaBilgilendirme[0][playerid], 255);
  PlayerTextDrawFont(playerid, ParaBilgilendirme[0][playerid], 3);
  PlayerTextDrawSetProportional(playerid, ParaBilgilendirme[0][playerid], 1);
  PlayerTextDrawSetShadow(playerid, ParaBilgilendirme[0][playerid], 0);

  ParaBilgilendirme[1][playerid] = CreatePlayerTextDraw(playerid, 636.905517, 11.700028, "_");
  PlayerTextDrawLetterSize(playerid, ParaBilgilendirme[1][playerid], 0.279835, 1.034166);
  PlayerTextDrawAlignment(playerid, ParaBilgilendirme[1][playerid], 3);
  PlayerTextDrawColor(playerid, ParaBilgilendirme[1][playerid], -801227009);
  PlayerTextDrawSetShadow(playerid, ParaBilgilendirme[1][playerid], 0);
  PlayerTextDrawSetOutline(playerid, ParaBilgilendirme[1][playerid], 1);
  PlayerTextDrawBackgroundColor(playerid, ParaBilgilendirme[1][playerid], 255);
  PlayerTextDrawFont(playerid, ParaBilgilendirme[1][playerid], 3);
  PlayerTextDrawSetProportional(playerid, ParaBilgilendirme[1][playerid], 1);
  PlayerTextDrawSetShadow(playerid, ParaBilgilendirme[1][playerid], 0);

	HapisTD[playerid] = CreatePlayerTextDraw(playerid, 499.000000, 101.000000, "~g~Kalan Sure:~w~ 00:00:00");
	PlayerTextDrawBackgroundColor(playerid, HapisTD[playerid], 255);
	PlayerTextDrawFont(playerid, HapisTD[playerid], 1);
	PlayerTextDrawLetterSize(playerid, HapisTD[playerid], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, HapisTD[playerid], -1);
	PlayerTextDrawSetOutline(playerid, HapisTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, HapisTD[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, HapisTD[playerid], 0);

	MesafeTD[playerid] = CreatePlayerTextDraw(playerid, 13.000000, 431.000000, "~g~Mesafe:~w~ Calculating...");
	PlayerTextDrawBackgroundColor(playerid, MesafeTD[playerid], 255);
	PlayerTextDrawFont(playerid, MesafeTD[playerid], 1);
	PlayerTextDrawLetterSize(playerid, MesafeTD[playerid], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, MesafeTD[playerid], -1);
	PlayerTextDrawSetOutline(playerid, MesafeTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, MesafeTD[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MesafeTD[playerid], 0);

	OnayliHoodGirisTD[playerid][0] = CreatePlayerTextDraw(playerid, 16.222177, 253.715576, "Bu_bolge_xxxxx adli_birlige_aittir. Korku_rolu_yapmaktan kacinmayiniz.");
	PlayerTextDrawLetterSize(playerid, OnayliHoodGirisTD[playerid][0], 0.168444, 1.152000);
	PlayerTextDrawAlignment(playerid, OnayliHoodGirisTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, OnayliHoodGirisTD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, OnayliHoodGirisTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, OnayliHoodGirisTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, OnayliHoodGirisTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, OnayliHoodGirisTD[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, OnayliHoodGirisTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, OnayliHoodGirisTD[playerid][0], 0);

	OnayliHoodGirisTD[playerid][1] = CreatePlayerTextDraw(playerid, 58.888862, 238.284408, "ONAYLI_HOOD");
	PlayerTextDrawLetterSize(playerid, OnayliHoodGirisTD[playerid][1], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, OnayliHoodGirisTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, OnayliHoodGirisTD[playerid][1], -1523963137);
	PlayerTextDrawSetShadow(playerid, OnayliHoodGirisTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, OnayliHoodGirisTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, OnayliHoodGirisTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, OnayliHoodGirisTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, OnayliHoodGirisTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, OnayliHoodGirisTD[playerid][1], 0);

	OnayliHoodGirisTD[playerid][2] = CreatePlayerTextDraw(playerid, 45.444435, 204.279983, "hud:arrow");
	PlayerTextDrawLetterSize(playerid, OnayliHoodGirisTD[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, OnayliHoodGirisTD[playerid][2], 35.000000, 36.000000);
	PlayerTextDrawAlignment(playerid, OnayliHoodGirisTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, OnayliHoodGirisTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, OnayliHoodGirisTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, OnayliHoodGirisTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, OnayliHoodGirisTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, OnayliHoodGirisTD[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, OnayliHoodGirisTD[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, OnayliHoodGirisTD[playerid][2], 0);

  TDEditor_TD[playerid][0] = CreatePlayerTextDraw(playerid, 555.000000, 435.000000, "90");//Can
	PlayerTextDrawFont(playerid, TDEditor_TD[playerid][0], 2);
	PlayerTextDrawLetterSize(playerid, TDEditor_TD[playerid][0], 0.141666, 0.900000);
	PlayerTextDrawTextSize(playerid, TDEditor_TD[playerid][0], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, TDEditor_TD[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, TDEditor_TD[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, TDEditor_TD[playerid][0], 2);
	PlayerTextDrawColor(playerid, TDEditor_TD[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_TD[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, TDEditor_TD[playerid][0], 50);
	PlayerTextDrawUseBox(playerid, TDEditor_TD[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, TDEditor_TD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, TDEditor_TD[playerid][0], 0);

	TDEditor_TD[playerid][1] = CreatePlayerTextDraw(playerid, 7.000000, 10.000000, "mdl-2004:playerhud");//Arkapilan
	PlayerTextDrawFont(playerid, TDEditor_TD[playerid][1], 4);
	PlayerTextDrawLetterSize(playerid, TDEditor_TD[playerid][1], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, TDEditor_TD[playerid][1], 633.500000, 438.500000);
	PlayerTextDrawSetOutline(playerid, TDEditor_TD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, TDEditor_TD[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, TDEditor_TD[playerid][1], 1);
	PlayerTextDrawColor(playerid, TDEditor_TD[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_TD[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, TDEditor_TD[playerid][1], 50);
	PlayerTextDrawUseBox(playerid, TDEditor_TD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, TDEditor_TD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, TDEditor_TD[playerid][1], 0);

  TDEditor_TD[playerid][2] = CreatePlayerTextDraw(playerid, 581.000000, 435.000000, "100");
  PlayerTextDrawFont(playerid, TDEditor_TD[playerid][2], 2);
  PlayerTextDrawLetterSize(playerid, TDEditor_TD[playerid][2], 0.141666, 0.900000);
  PlayerTextDrawTextSize(playerid, TDEditor_TD[playerid][2], 400.000000, 17.000000);
  PlayerTextDrawSetOutline(playerid, TDEditor_TD[playerid][2], 0);
  PlayerTextDrawSetShadow(playerid, TDEditor_TD[playerid][2], 0);
  PlayerTextDrawAlignment(playerid, TDEditor_TD[playerid][2], 2);
  PlayerTextDrawColor(playerid, TDEditor_TD[playerid][2], -1);
  PlayerTextDrawBackgroundColor(playerid, TDEditor_TD[playerid][2], 255);
  PlayerTextDrawBoxColor(playerid, TDEditor_TD[playerid][2], 50);
  PlayerTextDrawUseBox(playerid, TDEditor_TD[playerid][2], 0);
  PlayerTextDrawSetProportional(playerid, TDEditor_TD[playerid][2], 1);
  PlayerTextDrawSetSelectable(playerid, TDEditor_TD[playerid][2], 0);

	TDEditor_TD[playerid][3] = CreatePlayerTextDraw(playerid, 605.000000, 435.000000, "60/60");
  PlayerTextDrawFont(playerid, TDEditor_TD[playerid][3], 2);
  PlayerTextDrawLetterSize(playerid, TDEditor_TD[playerid][3], 0.141666, 0.900000);
  PlayerTextDrawTextSize(playerid, TDEditor_TD[playerid][3], 400.000000, 17.000000);
  PlayerTextDrawSetOutline(playerid, TDEditor_TD[playerid][3], 0);
  PlayerTextDrawSetShadow(playerid, TDEditor_TD[playerid][3], 0);
  PlayerTextDrawAlignment(playerid, TDEditor_TD[playerid][3], 2);
  PlayerTextDrawColor(playerid, TDEditor_TD[playerid][3], -1);
  PlayerTextDrawBackgroundColor(playerid, TDEditor_TD[playerid][3], 255);
  PlayerTextDrawBoxColor(playerid, TDEditor_TD[playerid][3], 50);
  PlayerTextDrawUseBox(playerid, TDEditor_TD[playerid][3], 0);
  PlayerTextDrawSetProportional(playerid, TDEditor_TD[playerid][3], 1);
  PlayerTextDrawSetSelectable(playerid, TDEditor_TD[playerid][3], 0);

  TDEditor_TD[playerid][4] = CreatePlayerTextDraw(playerid, 631.000000, 435.000000, "1000");
  PlayerTextDrawFont(playerid, TDEditor_TD[playerid][4], 2);
  PlayerTextDrawLetterSize(playerid, TDEditor_TD[playerid][4], 0.141666, 0.900000);
  PlayerTextDrawTextSize(playerid, TDEditor_TD[playerid][4], 400.000000, 17.000000);
  PlayerTextDrawSetOutline(playerid, TDEditor_TD[playerid][4], 0);
  PlayerTextDrawSetShadow(playerid, TDEditor_TD[playerid][4], 0);
  PlayerTextDrawAlignment(playerid, TDEditor_TD[playerid][4], 2);
  PlayerTextDrawColor(playerid, TDEditor_TD[playerid][4], -1);
  PlayerTextDrawBackgroundColor(playerid, TDEditor_TD[playerid][4], 255);
  PlayerTextDrawBoxColor(playerid, TDEditor_TD[playerid][4], 50);
  PlayerTextDrawUseBox(playerid, TDEditor_TD[playerid][4], 0);
  PlayerTextDrawSetProportional(playerid, TDEditor_TD[playerid][4], 1);
  PlayerTextDrawSetSelectable(playerid, TDEditor_TD[playerid][4], 0);

  TDEditor_TD[playerid][5] = CreatePlayerTextDraw(playerid, 604.000000, 403.000000, "Sawyer_Ford ID:999");
  PlayerTextDrawFont(playerid, TDEditor_TD[playerid][5], 2);
  PlayerTextDrawLetterSize(playerid, TDEditor_TD[playerid][5], 0.079166, 0.700000);
  PlayerTextDrawTextSize(playerid, TDEditor_TD[playerid][5], 400.000000, 17.000000);
  PlayerTextDrawSetOutline(playerid, TDEditor_TD[playerid][5], 0);
  PlayerTextDrawSetShadow(playerid, TDEditor_TD[playerid][5], 0);
  PlayerTextDrawAlignment(playerid, TDEditor_TD[playerid][5], 2);
  PlayerTextDrawColor(playerid, TDEditor_TD[playerid][5], -1);
  PlayerTextDrawBackgroundColor(playerid, TDEditor_TD[playerid][5], 255);
  PlayerTextDrawBoxColor(playerid, TDEditor_TD[playerid][5], 50);
  PlayerTextDrawUseBox(playerid, TDEditor_TD[playerid][5], 0);
  PlayerTextDrawSetProportional(playerid, TDEditor_TD[playerid][5], 1);
  PlayerTextDrawSetSelectable(playerid, TDEditor_TD[playerid][5], 0);

  TDEditor_TD[playerid][6] = CreatePlayerTextDraw(playerid, 612.000000, 389.000000, "00/00/0000");
  PlayerTextDrawFont(playerid, TDEditor_TD[playerid][6], 2);
  PlayerTextDrawLetterSize(playerid, TDEditor_TD[playerid][6], 0.091666, 0.850000);
  PlayerTextDrawTextSize(playerid, TDEditor_TD[playerid][6], 400.000000, 17.000000);
  PlayerTextDrawSetOutline(playerid, TDEditor_TD[playerid][6], 0);
  PlayerTextDrawSetShadow(playerid, TDEditor_TD[playerid][6], 0);
  PlayerTextDrawAlignment(playerid, TDEditor_TD[playerid][6], 2);
  PlayerTextDrawColor(playerid, TDEditor_TD[playerid][6], -1);
  PlayerTextDrawBackgroundColor(playerid, TDEditor_TD[playerid][6], 255);
  PlayerTextDrawBoxColor(playerid, TDEditor_TD[playerid][6], 50);
  PlayerTextDrawUseBox(playerid, TDEditor_TD[playerid][6], 0);
  PlayerTextDrawSetProportional(playerid, TDEditor_TD[playerid][6], 1);
  PlayerTextDrawSetSelectable(playerid, TDEditor_TD[playerid][6], 0);

  TDEditor_TD[playerid][7] = CreatePlayerTextDraw(playerid, 632.000000, 389.000000, "00:00");
  PlayerTextDrawFont(playerid, TDEditor_TD[playerid][7], 2);
  PlayerTextDrawLetterSize(playerid, TDEditor_TD[playerid][7], 0.091666, 0.850000);
  PlayerTextDrawTextSize(playerid, TDEditor_TD[playerid][7], 400.000000, 17.000000);
  PlayerTextDrawSetOutline(playerid, TDEditor_TD[playerid][7], 0);
  PlayerTextDrawSetShadow(playerid, TDEditor_TD[playerid][7], 0);
  PlayerTextDrawAlignment(playerid, TDEditor_TD[playerid][7], 2);
  PlayerTextDrawColor(playerid, TDEditor_TD[playerid][7], -1);
  PlayerTextDrawBackgroundColor(playerid, TDEditor_TD[playerid][7], 255);
  PlayerTextDrawBoxColor(playerid, TDEditor_TD[playerid][7], 50);
  PlayerTextDrawUseBox(playerid, TDEditor_TD[playerid][7], 0);
  PlayerTextDrawSetProportional(playerid, TDEditor_TD[playerid][7], 1);
  PlayerTextDrawSetSelectable(playerid, TDEditor_TD[playerid][7], 0);

	TaxiTD[playerid][0] = CreatePlayerTextDraw(playerid, 0.799992, 199.360031, "Taksimetre:");
	PlayerTextDrawLetterSize(playerid, TaxiTD[playerid][0], 0.214000, 1.114665);
	PlayerTextDrawAlignment(playerid, TaxiTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, TaxiTD[playerid][0], -1061109505);
	PlayerTextDrawSetShadow(playerid, TaxiTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, TaxiTD[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, TaxiTD[playerid][0], 51);
	PlayerTextDrawFont(playerid, TaxiTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, TaxiTD[playerid][0], 1);

	TaxiTD[playerid][1] = CreatePlayerTextDraw(playerid, 45.799987, 200.360031, "$1000 ($30/km)");
	PlayerTextDrawLetterSize(playerid, TaxiTD[playerid][1], 0.214000, 1.114665);
	PlayerTextDrawAlignment(playerid, TaxiTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, TaxiTD[playerid][1], 16711935);
	PlayerTextDrawSetShadow(playerid, TaxiTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, TaxiTD[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, TaxiTD[playerid][1], 51);
	PlayerTextDrawFont(playerid, TaxiTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, TaxiTD[playerid][1], 1);

	AracTD[playerid][0] = CreatePlayerTextDraw(playerid, 7.000000, 10.000000, "mdl-2002:carhud");
	PlayerTextDrawFont(playerid, AracTD[playerid][0], 4);
	PlayerTextDrawLetterSize(playerid, AracTD[playerid][0], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, AracTD[playerid][0], 634.000000, 438.500000);
	PlayerTextDrawSetOutline(playerid, AracTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, AracTD[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, AracTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, AracTD[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, AracTD[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, AracTD[playerid][0], 50);
	PlayerTextDrawUseBox(playerid, AracTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, AracTD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, AracTD[playerid][0], 0);

	AracTD[playerid][1] = CreatePlayerTextDraw(playerid, 470.000000, 431.000000, "120");
	PlayerTextDrawFont(playerid, AracTD[playerid][1], 2);
	PlayerTextDrawLetterSize(playerid, AracTD[playerid][1], 0.141666, 0.900000);
	PlayerTextDrawTextSize(playerid, AracTD[playerid][1], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, AracTD[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, AracTD[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, AracTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, AracTD[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, AracTD[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, AracTD[playerid][1], 50);
	PlayerTextDrawUseBox(playerid, AracTD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, AracTD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, AracTD[playerid][1], 0);

  AracTD[playerid][2] = CreatePlayerTextDraw(playerid, 408.000000, 431.000000, "100%");
  PlayerTextDrawFont(playerid, AracTD[playerid][2], 2);
  PlayerTextDrawLetterSize(playerid, AracTD[playerid][2], 0.141666, 0.900000);
  PlayerTextDrawTextSize(playerid, AracTD[playerid][2], 400.000000, 17.000000);
  PlayerTextDrawSetOutline(playerid, AracTD[playerid][2], 0);
  PlayerTextDrawSetShadow(playerid, AracTD[playerid][2], 0);
  PlayerTextDrawAlignment(playerid, AracTD[playerid][2], 2);
  PlayerTextDrawColor(playerid, AracTD[playerid][2], -1);
  PlayerTextDrawBackgroundColor(playerid, AracTD[playerid][2], 255);
  PlayerTextDrawBoxColor(playerid, AracTD[playerid][2], 50);
  PlayerTextDrawUseBox(playerid, AracTD[playerid][2], 0);
  PlayerTextDrawSetProportional(playerid, AracTD[playerid][2], 1);
  PlayerTextDrawSetSelectable(playerid, AracTD[playerid][2], 0);

	AracTD[playerid][3] = CreatePlayerTextDraw(playerid, 429.000000, 431.000000, "50%");
	PlayerTextDrawFont(playerid, AracTD[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid, AracTD[playerid][3], 0.141666, 0.900000);
	PlayerTextDrawTextSize(playerid, AracTD[playerid][3], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, AracTD[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, AracTD[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, AracTD[playerid][3], 2);
	PlayerTextDrawColor(playerid, AracTD[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, AracTD[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, AracTD[playerid][3], 50);
	PlayerTextDrawUseBox(playerid, AracTD[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, AracTD[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, AracTD[playerid][3], 0);

	AracTD[playerid][4] = CreatePlayerTextDraw(playerid, 449.000000, 431.000000, "130000");
  PlayerTextDrawFont(playerid, AracTD[playerid][4], 2);
  PlayerTextDrawLetterSize(playerid, AracTD[playerid][4], 0.141666, 0.900000);
  PlayerTextDrawTextSize(playerid, AracTD[playerid][4], 400.000000, 17.000000);
  PlayerTextDrawSetOutline(playerid, AracTD[playerid][4], 0);
  PlayerTextDrawSetShadow(playerid, AracTD[playerid][4], 0);
  PlayerTextDrawAlignment(playerid, AracTD[playerid][4], 2);
  PlayerTextDrawColor(playerid, AracTD[playerid][4], -1);
  PlayerTextDrawBackgroundColor(playerid, AracTD[playerid][4], 255);
  PlayerTextDrawBoxColor(playerid, AracTD[playerid][4], 50);
  PlayerTextDrawUseBox(playerid, AracTD[playerid][4], 0);
  PlayerTextDrawSetProportional(playerid, AracTD[playerid][4], 1);
  PlayerTextDrawSetSelectable(playerid, AracTD[playerid][4], 0);

	TDYukle(playerid);

	Fuel_InitPlayer(playerid);

    SetPVarInt(playerid, "GiseGate", -1);
    SetPVarInt(playerid, "GiseKapali", -1);
    SetPVarInt(playerid, "GiseAcik", -1);

	new query[300], oyuncuip[20];
	GetPlayerIp(playerid, oyuncuip, sizeof(oyuncuip));
    format(query, sizeof(query), "SELECT * FROM `bans` WHERE `Ad` = '%s' OR `IP` = '%s'", Player_GetName(playerid), oyuncuip);
    mysql_tquery(baglanti, query, "BanKontrol", "ds", playerid, oyuncuip);

    gPlayerAnimLibsPreloaded[playerid] = 0;
    if(!gPlayerAnimLibsPreloaded[playerid])
    {
    PreloadAnimLib(playerid,"AIRPORT");
    PreloadAnimLib(playerid,"Attractors");
    PreloadAnimLib(playerid,"BAR");
    PreloadAnimLib(playerid,"BASEBALL");
    PreloadAnimLib(playerid,"BD_FIRE");
    PreloadAnimLib(playerid,"benchpress");
    PreloadAnimLib(playerid,"BF_injection");
    PreloadAnimLib(playerid,"BIKED");
    PreloadAnimLib(playerid,"BIKEH");
    PreloadAnimLib(playerid,"BIKELEAP");
    PreloadAnimLib(playerid,"BIKES");
    PreloadAnimLib(playerid,"BIKEV");
    PreloadAnimLib(playerid,"BIKE_DBZ");
    PreloadAnimLib(playerid,"BMX");
    PreloadAnimLib(playerid,"BOX");
    PreloadAnimLib(playerid,"BSKTBALL");
    PreloadAnimLib(playerid,"BUDDY");
    PreloadAnimLib(playerid,"BUS");
    PreloadAnimLib(playerid,"CAMERA");
    PreloadAnimLib(playerid,"CAR");
    PreloadAnimLib(playerid,"CAR_CHAT");
    PreloadAnimLib(playerid,"CASINO");
    PreloadAnimLib(playerid,"CHAINSAW");
    PreloadAnimLib(playerid,"CHOPPA");
    PreloadAnimLib(playerid,"CLOTHES");
    PreloadAnimLib(playerid,"COACH");
    PreloadAnimLib(playerid,"COLT45");
    PreloadAnimLib(playerid,"COP_DVBYZ");
    PreloadAnimLib(playerid,"CRIB");
    PreloadAnimLib(playerid,"DAM_JUMP");
    PreloadAnimLib(playerid,"DANCING");
    PreloadAnimLib(playerid,"DILDO");
    PreloadAnimLib(playerid,"DODGE");
    PreloadAnimLib(playerid,"DOZER");
    PreloadAnimLib(playerid,"DRIVEBYS");
    PreloadAnimLib(playerid,"FAT");
    PreloadAnimLib(playerid,"FIGHT_B");
    PreloadAnimLib(playerid,"FIGHT_C");
    PreloadAnimLib(playerid,"FIGHT_D");
    PreloadAnimLib(playerid,"FIGHT_E");
    PreloadAnimLib(playerid,"FINALE");
    PreloadAnimLib(playerid,"FINALE2");
    PreloadAnimLib(playerid,"Flowers");
    PreloadAnimLib(playerid,"FOOD");
    PreloadAnimLib(playerid,"Freeweights");
    PreloadAnimLib(playerid,"GANGS");
    PreloadAnimLib(playerid,"GHANDS");
    PreloadAnimLib(playerid,"GHETTO_DB");
    PreloadAnimLib(playerid,"goggles");
    PreloadAnimLib(playerid,"GRAFFITI");
    PreloadAnimLib(playerid,"GRAVEYARD");
    PreloadAnimLib(playerid,"GRENADE");
    PreloadAnimLib(playerid,"GYMNASIUM");
    PreloadAnimLib(playerid,"HAIRCUTS");
    PreloadAnimLib(playerid,"HEIST9");
    PreloadAnimLib(playerid,"INT_HOUSE");
    PreloadAnimLib(playerid,"INT_OFFICE");
    PreloadAnimLib(playerid,"INT_SHOP");
    PreloadAnimLib(playerid,"JST_BUISNESS");
    PreloadAnimLib(playerid,"KART");
    PreloadAnimLib(playerid,"KISSING");
    PreloadAnimLib(playerid,"KNIFE");
    PreloadAnimLib(playerid,"LAPDAN1");
    PreloadAnimLib(playerid,"LAPDAN2");
    PreloadAnimLib(playerid,"LAPDAN3");
    PreloadAnimLib(playerid,"LOWRIDER");
    PreloadAnimLib(playerid,"MD_CHASE");
    PreloadAnimLib(playerid,"MEDIC");
    PreloadAnimLib(playerid,"MD_END");
    PreloadAnimLib(playerid,"MISC");
    PreloadAnimLib(playerid,"MTB");
    PreloadAnimLib(playerid,"MUSCULAR");
    PreloadAnimLib(playerid,"NEVADA");
    PreloadAnimLib(playerid,"ON_LOOKERS");
    PreloadAnimLib(playerid,"OTB");
    PreloadAnimLib(playerid,"PARACHUTE");
    PreloadAnimLib(playerid,"PARK");
    PreloadAnimLib(playerid,"PAULNMAC");
    PreloadAnimLib(playerid,"PED");
    PreloadAnimLib(playerid,"PLAYER_DVBYS");
    PreloadAnimLib(playerid,"PLAYIDLES");
    PreloadAnimLib(playerid,"POLICE");
    PreloadAnimLib(playerid,"POOL");
    PreloadAnimLib(playerid,"POOR");
    PreloadAnimLib(playerid,"PYTHON");
    PreloadAnimLib(playerid,"QUAD");
    PreloadAnimLib(playerid,"QUAD_DBZ");
    PreloadAnimLib(playerid,"RIFLE");
    PreloadAnimLib(playerid,"RIOT");
    PreloadAnimLib(playerid,"ROB_BANK");
    PreloadAnimLib(playerid,"ROCKET");
    PreloadAnimLib(playerid,"RUSTLER");
    PreloadAnimLib(playerid,"RYDER");
    PreloadAnimLib(playerid,"SCRATCHING");
    PreloadAnimLib(playerid,"SHAMAL");
    PreloadAnimLib(playerid,"SHOTGUN");
    PreloadAnimLib(playerid,"SILENCED");
    PreloadAnimLib(playerid,"SKATE");
    PreloadAnimLib(playerid,"SPRAYCAN");
    PreloadAnimLib(playerid,"STRIP");
    PreloadAnimLib(playerid,"SUNBATHE");
    PreloadAnimLib(playerid,"SWAT");
    PreloadAnimLib(playerid,"SWEET");
    PreloadAnimLib(playerid,"SWIM");
    PreloadAnimLib(playerid,"SWORD");
    PreloadAnimLib(playerid,"TANK");
    PreloadAnimLib(playerid,"TATTOOS");
    PreloadAnimLib(playerid,"TEC");
    PreloadAnimLib(playerid,"TRAIN");
    PreloadAnimLib(playerid,"TRUCK");
    PreloadAnimLib(playerid,"UZI");
    PreloadAnimLib(playerid,"VAN");
    PreloadAnimLib(playerid,"VENDING");
    PreloadAnimLib(playerid,"VORTEX");
    PreloadAnimLib(playerid,"WAYFARER");
    PreloadAnimLib(playerid,"WEAPONS");
    PreloadAnimLib(playerid,"WUZI");
    PreloadAnimLib(playerid,"SNM");
    PreloadAnimLib(playerid,"BLOWJOBZ");
    PreloadAnimLib(playerid,"SEX");
    PreloadAnimLib(playerid,"BOMBER");
    PreloadAnimLib(playerid,"RAPPING");
    PreloadAnimLib(playerid,"SHOP");
    PreloadAnimLib(playerid,"BEACH");
    PreloadAnimLib(playerid,"SMOKING");
    PreloadAnimLib(playerid,"FOOD");
    PreloadAnimLib(playerid,"ON_LOOKERS");
    PreloadAnimLib(playerid,"DEALER");
    PreloadAnimLib(playerid,"CRACK");
    PreloadAnimLib(playerid,"CARRY");
    PreloadAnimLib(playerid,"COP_AMBIENT");
    PreloadAnimLib(playerid,"PARK");
    PreloadAnimLib(playerid,"INT_HOUSE");
    PreloadAnimLib(playerid,"FOOD");
    gPlayerAnimLibsPreloaded[playerid] = 1;
    }
    for(new i; i < sizeof(GuvenliBolge); ++i)
	{
    	GangZoneShowForPlayer(playerid, GuvenliBolge[i][Zone], 0x54ff0060);
    }
	return 1;
}
/*stock ModifiyeBitir(playerid)
{
    new id = Car_GetID(PlayerData[playerid][pModifiye]);
    if(id != -1)
    {
   		for(new i; i<14; i++)
   		{
	    	if(CarComponents[PlayerData[playerid][pModifiye]][i] != 0)
			{
   				RemoveVehicleComponent(PlayerData[playerid][pModifiye], CarComponents[PlayerData[playerid][pModifiye]][i]);
			    if(AracInfo[id][aracMods][i] > 0) AddVehicleComponent(PlayerData[playerid][pModifiye], AracInfo[id][aracMods][i]);
			    CarComponents[PlayerData[playerid][pModifiye]][i] = 0;
			}
    	}
    	ChangeVehicleColor(PlayerData[playerid][pModifiye], AracInfo[id][aracRenkler][0], AracInfo[id][aracRenkler][1]);
    	if(CarComponents[PlayerData[playerid][pModifiye]][16] != -1)
    	{
	    	CarComponents[PlayerData[playerid][pModifiye]][16] = -1;
      		if(AracInfo[id][aracPaintjob] != -1) ChangeVehiclePaintjob(PlayerData[playerid][pModifiye], AracInfo[id][aracPaintjob]);
        	else ChangeVehiclePaintjob(PlayerData[playerid][pModifiye], 3);

		}
 		Arac_Kaydet(id);
	}
	Dialog_Close(playerid);
	AracModifiye[PlayerData[playerid][pModifiye]] = 0;
	PlayerData[playerid][pModifiye] = -1;
	PlayerData[playerid][pModifiyeUcret] = 0;
	return 1;
}*/
public OnPlayerDisconnect(playerid, reason)
{
	//destek botu sistemi
	new payload[30];
    format(payload,sizeof(payload),"localhost:5000/delete/%d",playerid);
    HTTP(playerid, HTTP_GET, payload,"", "");
    //
    if(HasTrash[playerid]) Trash_ResetPlayer(playerid);
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 574)
    {
        SetVehicleToRespawn(GetPlayerVehicleID(playerid));
        //SendClientMessageEx(playerid, 0x2ECC71FF, "TEMÝZLÝKÇÝ: {FFFFFF}Temizlikçi mesleði bitirildi, kazanýlan; {FFBF00}%s", FormatNumber(GetPVarInt(playerid,"TemizlikciKazanilan")));
        TemizlikciDistance[playerid] = 0;
        DeletePVar(playerid,"TemizlikciKazanilan");
        SetPlayerPos(playerid,2091.1765,-2026.0604,13.5469);
       	SetPlayerInterior(playerid,0);
       	SetPlayerVirtualWorld(playerid,0);
        GetVehiclePos(GetPlayerVehicleID(playerid),TemizlikciLastPos[GetPlayerVehicleID(playerid)][0],TemizlikciLastPos[GetPlayerVehicleID(playerid)][1],TemizlikciLastPos[GetPlayerVehicleID(playerid)][2]);
    }
	GenerateInterface(playerid, false);
    SetPVarInt(playerid, "GiseGate", -1);
    SetPVarInt(playerid, "GiseKapali", -1);
    SetPVarInt(playerid, "GiseAcik", -1);
	//timer lar
	KillTimer(MekanikTimer[playerid]);

    if(IsPlayerInsideTaxi(playerid))
    {
        LeaveTaxi(playerid, GetVehicleDriver(GetPlayerVehicleID(playerid)));
    }
    if(GetPVarInt(playerid, "pnsID") != -1)
    {
        new vid = GetPlayerVehicleID(playerid);
        if(IsValidVehicle(vid))
        {
            SetVehiclePos(vid, PayNSpray[GetPVarInt(playerid, "pnsID")][0], PayNSpray[GetPVarInt(playerid, "pnsID")][1], PayNSpray[GetPVarInt(playerid, "pnsID")][2]);
        }
	}
	if(PetKontrol[playerid] != -1) callcmd::pet(playerid);
	foreach(new i:Petler) if(PetBilgi[i][petSahip] == PlayerData[playerid][pID] && PetBilgi[i][petDurum] == true)
	{
	    PetBilgi[i][petSaglik] = FCNPC_GetHealth(PetBilgi[i][NPCID]);
     	FCNPC_Destroy(PetBilgi[i][NPCID]);
      	PetBilgi[i][petTakip] = -1;
       	PetBilgi[i][NPCID] = -1;
        PetBilgi[i][petDurum] = false;
        DestroyDynamic3DTextLabel(PetBilgi[i][petText]);
        Pet_Kaydet(i);
	}
	if(PlayerData[playerid][pStand] == true)
	{
	    PlayerData[playerid][pStand] = false;
	    DestroyDynamicObject(PlayerData[playerid][pStandObject]);
	    DestroyDynamic3DTextLabel(PlayerData[playerid][pStandText]);
	}
	if(PlayerData[playerid][pIyilestiriyor] != -1)
	{
	    SetPVarInt(PlayerData[playerid][pIyilestiriyor], "Iyilestiriliyor", 0);
	}
	new odaid = OdasiVarmi(playerid);
	if(odaid != -1)
	{
	    Paintball[odaid][odaExists] = false;
	    format(Paintball[odaid][odaIsim], 30, "");
	    format(Paintball[odaid][odaSifre], 30, "");
	    Paintball[odaid][odaSahip] = -1;
	    format(Paintball[odaid][odaTakim1Ad], 20, "");
	    format(Paintball[odaid][odaTakim2Ad], 20, "");
	    Paintball[odaid][odaZirh] = 0;
	    Paintball[odaid][odaSure] = 0;
	    Paintball[odaid][odaOyunTuru] = 1;
	    Paintball[odaid][odaArena] = 1;
	    Paintball[odaid][odaPuan][0] = 0;
	    Paintball[odaid][odaPuan][1] = 0;
	    Paintball[odaid][odaSayac] = 0;
	    foreach(new i:Player)
	    {
	        if(pbOda[i] == odaid && i != playerid)
	        {
	            BilgiMesajGonder(i, "Oda sahibi oyundan çýktýðý için oda silindi.");
	            OdadanAt(i, 3);
	        }
	    }
	}
	if(pbOda[playerid] != -1)
	{
	    SetPVarInt(playerid, "inPaintball", 1);
	    OdadanAt(playerid, 0);
	}
    Player_ResetCutting(playerid);
	Player_RemoveLog(playerid);
    Player_CleanUp(playerid, 1);
	EditingTreeID[playerid] = -1;
    if(RegenTimer[playerid] != -1)
	{
	    KillTimer(RegenTimer[playerid]);
	    RegenTimer[playerid] = -1;
	}
    if(IsValidDynamic3DTextLabel(NameTag[playerid])) DestroyDynamic3DTextLabel(NameTag[playerid]);
	foreach(new i : Player)
	{
	    if(PlayerDrugData[i][DrugsOfferedBy] == playerid)
	    {
	        PlayerDrugData[i][DrugsOfferedBy] = INVALID_PLAYER_ID;
	        ShowPlayerDialog(i, -1, DIALOG_STYLE_MSGBOX, "Title", "Content", "Button1", "Button2");

            BilgiMesajGonder(i, "Uyuþturucu satmaya çalýþtýðýnýz kiþi oyundan çýktý.");
	    }
	    if(PlayerData[i][pTaksiKabul] == playerid)
	    {
	        MesajGonder(i, "Müþteri oyundan çýkýþ yaptý.");
	        PlayerData[i][pTaksiKabul] = -1;
	        DisablePlayerCheckpoint(i);
	    }
	}
	foreach(new i:Player) if(PlayerData[i][pAdmin] >= 1 && PlayerData[i][pSpecID] == playerid)
	{
	    IzlemeBitir(i);
	    ShowTextDrawMessage(i, "~r~Oyundan Cikti", TEXTDRAW_TYPE_MSG, 1000);
	}
	RemoveEffects(playerid);
	Player_SaveDrugs(playerid);
    new cadirid = CadirID(playerid);
   	if(cadirid != -1)
   	{
   	    foreach(new i:Player) if(PlayerData[i][pCadir] == cadirid)
        {
            SetPlayerPos(i, CadirData[cadirid][cadirPos][0], CadirData[cadirid][cadirPos][1], CadirData[cadirid][cadirPos][2]);
            SetPlayerInterior(i, 0);
            SetPlayerVirtualWorld(i, 0);
            PlayerData[i][pCadir] = -1;
        }
        Cadir_Sil(playerid);
  	}
  	for(new i; i<MAX_TALEP; i++) if(Talep[i][tExists] == true && Talep[i][tGonderen] == playerid)
  	{
  	    Talep[i][tExists] = false;
  	    format(Talep[i][tIcerik], 128, "");
  	    Talep[i][tGonderen] = -1;
  	    Talep[i][tIlgilenen] = -1;
  	}
    KumarReset(playerid, 1);
    KumarReset(GetPVarInt(playerid, "kumar_id"), 1);

	Oyuncu_Kaydet(playerid, 0);
	if(BalikTimer[playerid] != -1)
	{
	    KillTimer(BalikTimer[playerid]);
	    BalikTimer[playerid] = -1;
     	RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "OltaSlot"));
 		SetPVarInt(playerid, "OltaSlot", -1);
   		ClearAnimations(playerid);
   	}
   	if(PlayerData[playerid][pDestek] > 0)
   	{
   	    PlayerData[playerid][pDestek] = 0;
   	    DestekKapat(playerid, 1);
   	}
   	if(PlayerData[playerid][pBaygin] == 1)
   	{
   	    foreach(new i:Player)
	    {
	        if(EMSKabul[i] == playerid)
	        {
				EMSKabul[i] = INVALID_PLAYER_ID;
				DisablePlayerCheckpoint(i);
				BilgiMesajGonder(playerid, "Kabul ettiðiniz yaralý oyundan çýktý.");
	        }
	    }
   	}
   	if(PlayerData[playerid][pMangalKuruldu] == true)
   	{
   	    PlayerData[playerid][pMangalKuruldu] = false;
		DestroyDynamicObject(PlayerData[playerid][pMangalObject][0]);
		DestroyDynamicObject(PlayerData[playerid][pMangalObject][1]);
		DestroyDynamic3DTextLabel(PlayerData[playerid][MangalText]);
		PlayerData[playerid][pYemekPisiriliyor] = 0;
		PlayerData[playerid][pPisirilenYemek] = 0;

   	}
   	if(PlayerData[playerid][pKampAtesi] == true)
   	{
   	    PlayerData[playerid][pKampAtesi] = false;
        DestroyDynamicObject(PlayerData[playerid][pKampAtesiObject]);
        //MesajGonder(playerid, "Kamp Ateþi kaldýrýldý.");
  	}
   	foreach(new i:Player)
   	{
   	    if(PlayerData[i][yayinKonuk] == playerid)
   	    {
   	        PlayerData[i][yayinKonuk] = -1;
   	        BilgiMesajGonder(i, "Sizi yayýna konuk eden kiþi oyundan çýktýðý için yayýndan otomatik olarak çýkarýldýnýz.");
   	    }
   	}
   	if(PlayerData[playerid][pAramada] != 0)
   	{
   		if(PlayerData[playerid][pAramada] == ARAMA_ARANIYOR)
   		{
   			BilgiMesajGonder(PlayerData[playerid][pCallLine], "Gelen çaðrý reddedildi ((Oyundan çýktý))");
   			DeletePVar(playerid, "Arayan");
   			DeletePVar(PlayerData[playerid][pCallLine], "Arayan");
   			PlayerData[playerid][pAramada] = 0;
   			PlayerData[PlayerData[playerid][pCallLine]][pAramada] = 0;
   			PlayerData[PlayerData[playerid][pCallLine]][pCallLine] = 0;
   			PlayerData[playerid][pCallLine] = 0;
   		}
   		else if(PlayerData[playerid][pAramada] == ARAMA_ARIYOR)
   		{
   		    DeletePVar(playerid, "Arayan");
   			DeletePVar(PlayerData[playerid][pCallLine], "Arayan");
   			PlayerData[playerid][pAramada] = 0;
   			PlayerData[PlayerData[playerid][pCallLine]][pAramada] = 0;
   			PlayerData[PlayerData[playerid][pCallLine]][pCallLine] = 0;
   			PlayerData[playerid][pCallLine] = 0;
   		}
   		else if(PlayerData[playerid][pAramada] == ARAMA_KONUSUYOR)
   		{
   			BilgiMesajGonder(PlayerData[playerid][pCallLine], "Konuþtuðunuz kiþi telefonu kapattý. (( Oyundan çýktý ))");
   			DeletePVar(playerid, "Arayan");
   			DeletePVar(PlayerData[playerid][pCallLine], "Arayan");
   			PlayerData[playerid][pAramada] = 0;
   			PlayerData[PlayerData[playerid][pCallLine]][pAramada] = 0;
   			PlayerData[PlayerData[playerid][pCallLine]][pCallLine] = 0;
   			PlayerData[playerid][pCallLine] = 0;
   		}
   	}
   	if(!IsPlayerNPC(playerid))
   	{
	   	new sebep[30];
	   	switch(reason)
	   	{
			case 0: sebep = "baðlantýsý koptu";
			case 1: sebep = "kendi isteðiyle";
			case 2: sebep = "kick/ban";
			default: sebep = "Bilinmiyor";
	   	}
	   	SendNearbyMessage(playerid, 10.0, 0xAFAFAFFF, "%s sunucudan ayrýldý. (%s)", ReturnName(playerid, 0), sebep);
   	}
   	if (BoomboxData[playerid][boomboxPlaced])
		Boombox_Destroy(playerid);
	Fuel_ResetPlayer(playerid);
	return 1;
}

public OnPlayerSpawn(playerid)
{
	new string[100];
  TogglePlayerSpectating(playerid, false);
	if(GetPVarInt(playerid, "Kayit") == 1)
	{
	    SetPVarInt(playerid, "Kayit", 0);
	    SetPVarInt(playerid, "Logged",1);
		SetPlayerColor(playerid,COLOR_WHITE);
		if(PlayerData[playerid][pCinsiyet] == 1 && PlayerData[playerid][pTen] == 1)
		{
	 		//SetPlayerSkin(playerid,101);
	   		PlayerData[playerid][pSkin] = 101;
		}
		if(PlayerData[playerid][pCinsiyet] == 1 && PlayerData[playerid][pTen] == 2)
		{
			//SetPlayerSkin(playerid,184);
			PlayerData[playerid][pSkin] = 184;
		}
		if(PlayerData[playerid][pCinsiyet] == 2 && PlayerData[playerid][pTen] == 1)
		{
	 		//SetPlayerSkin(playerid,211);
	   		PlayerData[playerid][pSkin] = 211;
		}
		if(PlayerData[playerid][pCinsiyet] == 2 && PlayerData[playerid][pTen] == 2)
		{
	 		//SetPlayerSkin(playerid,12);
	   		PlayerData[playerid][pSkin] = 12;
		}
		SetPlayerInterior(playerid,0);
		SetPlayerPos(playerid, 2096.6858,-1807.7062,13.5528);
		SetPlayerFacingAngle(playerid, 267.9025);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pLevel] = 1;
		SetPlayerScore(playerid, PlayerData[playerid][pLevel]);
		MesajGonder(playerid,"Karakteriniz oluþturuldu, yardýma ihtiyacýnýz olduðunda (/destek) komutunu kullanabilirsiniz.");
		MesajGonder(playerid, "Ýyi roller dileriz.");
		for(new i; i<9; i++)
		{
			PlayerTextDrawShow(playerid,TDEditor_TD[playerid][i]);
		}
		PlayerData[playerid][pHealth] = 100.0;
		PlayerData[playerid][pArmour] = 0.0;
		SetPlayerHealth(playerid,100.0);
		SetPlayerArmour(playerid,0.0);
	}
	if(GetPVarInt(playerid,"GirisYapti") == 1)
	{
	    DeletePVar(playerid,"GirisYapti");
	    SetPVarInt(playerid,"Logged",1);
	    Player_Init(playerid);
	    if(PlayerData[playerid][pBaygin] == 1)
	    {
	        DeathPos[playerid][0] = PlayerData[playerid][pCikisPos][0];
	        DeathPos[playerid][1] = PlayerData[playerid][pCikisPos][1];
	        DeathPos[playerid][2] = PlayerData[playerid][pCikisPos][2];
	        DeathInterior[playerid] = PlayerData[playerid][pCikisInt];
	        DeathWorld[playerid] = PlayerData[playerid][pCikisVw];

	    }
	    if(PlayerData[playerid][pHapisSure] > 0)
	    {
	        if(PlayerData[playerid][pHapis] == 1)
	        {
	            SetPlayerInPrison(playerid);
	            ObjelerYukleniyor(playerid);
	            SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
	            SetPlayerHealth(playerid,PlayerData[playerid][pHealth]);
	    		SetPlayerArmour(playerid,PlayerData[playerid][pArmour]);
	    		SetPlayerFightingStyle(playerid, PlayerData[playerid][pDovusStili]);
	    		PlayerTextDrawShow(playerid, HapisTD[playerid]);
	    		format(string,sizeof(string),"~w~Hosgeldin ~r~%s",ReturnName(playerid,0));
			    ShowTextDrawMessage(playerid, string, TEXTDRAW_TYPE_MSG, 1500);
	    		BilgiMesajGonder(playerid, "Bitmemiþ hapis cezanýz var, tekrar hapise gönderildiniz.");
	    		ResetWeapons(playerid);
	    		if(Bildirim_OkunmamisBildirimler(PlayerData[playerid][pID]) > 0)
	    		{
	        		BilgiMesajGonder(playerid," %d yeni bildiriminiz var, görüntülemek için /bildirimler komutunu kullanýn.",Bildirim_OkunmamisBildirimler(PlayerData[playerid][pID]));
	    		}
	    		return 1;
	        }
	        else
	        {
	            SetPlayerPos(playerid, 197.6346, 175.3765, 1003.0234);
    			SetPlayerInterior(playerid, 3);

    			SetPlayerVirtualWorld(playerid, (playerid + 100));
    			SetPlayerFacingAngle(playerid, 0.0);

    			SetCameraBehindPlayer(playerid);
    			ObjelerYukleniyor(playerid);
    			SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
	            SetPlayerHealth(playerid,PlayerData[playerid][pHealth]);
	    		SetPlayerArmour(playerid,PlayerData[playerid][pArmour]);
	    		SetPlayerFightingStyle(playerid, PlayerData[playerid][pDovusStili]);
	    		PlayerTextDrawShow(playerid, HapisTD[playerid]);
	    		format(string,sizeof(string),"~w~Hosgeldin ~r~%s",ReturnName(playerid,0));
			    ShowTextDrawMessage(playerid, string, TEXTDRAW_TYPE_MSG, 1500);
	    		BilgiMesajGonder(playerid, "Bitmemiþ hapis cezanýz var, tekrar hapise gönderildiniz. (Sebep: %s, Admin: %s)", PlayerData[playerid][pHapisSebep], PlayerData[playerid][pHapiseAtan]);
	    		if(Bildirim_OkunmamisBildirimler(PlayerData[playerid][pID]) > 0)
	    		{
	        		BilgiMesajGonder(playerid,"Size ait %d yeni bildirim var, görüntülemek için /bildirimler komutunu kullanýn.",Bildirim_OkunmamisBildirimler(PlayerData[playerid][pID]));
	    		}
	    		return 1;
	        }
	    }
	    SetPlayerInterior(playerid,PlayerData[playerid][pCikisInt]);
	    SetPlayerPos(playerid,PlayerData[playerid][pCikisPos][0],PlayerData[playerid][pCikisPos][1],PlayerData[playerid][pCikisPos][2]);
	    SetPlayerVirtualWorld(playerid,PlayerData[playerid][pCikisVw]);
	    ObjelerYukleniyor(playerid);
	    SetPlayerFightingStyle(playerid, PlayerData[playerid][pDovusStili]);
	    if(PlayerData[playerid][pOnDuty] == 1 && PlayerData[playerid][pOnDutySkin] > 0 && PlayerData[playerid][pFaction] != -1)
	    {
	        SetFactionColor(playerid);
	        SetPlayerSkin(playerid,PlayerData[playerid][pOnDutySkin]);
	    }
	    else
	    {
	        SetPlayerSkin(playerid,PlayerData[playerid][pSkin]);
	    }
	    SetPlayerHealth(playerid,PlayerData[playerid][pHealth]);
	    SetPlayerArmour(playerid,PlayerData[playerid][pArmour]);
	    SetWeapons(playerid);
	    format(string,sizeof(string),"~w~Hosgeldin ~r~%s",ReturnName(playerid,0));
	    ShowTextDrawMessage(playerid, string, TEXTDRAW_TYPE_MSG, 1500);
	    AksesuarAyarla(playerid);
	    if(GetServerBilgi("2xpayday") == 1) SendClientMessage(playerid, COLOR_YELLOW, "2x PayDay (iki katý EXP ve Maaþ) aktif.");
	    if(PlayerData[playerid][pFaction] != -1 && strlen(Birlikler[PlayerData[playerid][pFaction]][birlikDuyuru]) > 0)
	    {
	        SendClientMessageEx(playerid,-1,"{C2A2DA}[BÝRLÝK DUYURUSU]: {FFFFFF}%s",Birlikler[PlayerData[playerid][pFaction]][birlikDuyuru]);
		}
		SetPlayerWantedLevel(playerid, PlayerData[playerid][pAranma]);
	    if(Bildirim_OkunmamisBildirimler(PlayerData[playerid][pID]) > 0)
	    {
	        BilgiMesajGonder(playerid," %d yeni bildiriminiz var, görüntülemek için /bildirimler komutunu kullanýn.",Bildirim_OkunmamisBildirimler(PlayerData[playerid][pID]));
	    }
	}
	if(PetKontrol[playerid] != -1)
	{
 		SetPlayerSkin(playerid, GetPVarInt(playerid, "LastSkin"));
 		SetPlayerPos(playerid, LastPos[playerid][0], LastPos[playerid][1], LastPos[playerid][2]);
 		SetPlayerInterior(playerid, GetPVarInt(playerid, "LastInterior"));
	    SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "LastVw"));
	    SetPlayerHealth(playerid, GetPVarFloat(playerid, "LastHealth"));
	    SetPlayerArmour(playerid, GetPVarFloat(playerid, "LastArmour"));
	    DeletePVar(playerid, "LastSkin");
	    LastPos[playerid][0] = 0.0;
	    LastPos[playerid][1] = 0.0;
	    LastPos[playerid][2] = 0.0;
	    DeletePVar(playerid, "LastInterior");
	    DeletePVar(playerid, "LastVw");
	    DeletePVar(playerid, "LastHealth");
	    DeletePVar(playerid, "LastArmour");
        PetKontrol[playerid] = -1;
	}
	if(PlayerData[playerid][pHapisSure] > 0)
 	{
	        if(PlayerData[playerid][pHapis] == 1)
	        {
	            SetPlayerInPrison(playerid);
	            ObjelerYukleniyor(playerid);
	            SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
	            CanAyarla(playerid, 100);
	    		SetPlayerArmour(playerid, 0);
	    		SetPlayerFightingStyle(playerid, PlayerData[playerid][pDovusStili]);
	    		PlayerTextDrawShow(playerid, HapisTD[playerid]);
	    		return 1;
	        }
	        else
	        {
	            SetPlayerPos(playerid, 197.6346, 175.3765, 1003.0234);
    			SetPlayerInterior(playerid, 3);

    			SetPlayerVirtualWorld(playerid, (playerid + 100));
    			SetPlayerFacingAngle(playerid, 0.0);

    			SetCameraBehindPlayer(playerid);
    			ObjelerYukleniyor(playerid);
    			SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
	            SetPlayerHealth(playerid, 100);
	    		SetPlayerArmour(playerid, 0);
	    		SetPlayerFightingStyle(playerid, PlayerData[playerid][pDovusStili]);
	    		PlayerTextDrawShow(playerid, HapisTD[playerid]);
	    		return 1;
	        }
	}
	if(pbOda[playerid] != -1 && pbTakim[playerid] != 0)
	{
	    PaintballSpawn(playerid);
	}
	if(PlayerData[playerid][pBaygin] == 2 && GetPVarInt(playerid, "Logged") == 1)
	{
	    PlayerData[playerid][pBaygin] = 0;
	    PlayerData[playerid][pBayginSure] = 0;
	    SetPlayerPos(playerid, 1173.6667,-1322.4286,15.1954);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerFacingAngle(playerid, 267.3835);
	    ObjelerYukleniyor(playerid);
	    CanAyarla(playerid, 100);
	    ClearAnimations(playerid);
	    StopLoopingAnim(playerid);
	    ResetPlayerDamages(playerid);
		if(GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_LSMD || GetFactionType(playerid) == BIRLIK_FBI)
		{
		    ResetPlayerWeapons(playerid);
		    SetWeapons(playerid);
		    SendClientMessage(playerid, 0xFF8282AA, "Hastane masraflarý devlet tarafýndan ödendi, iyi günler.");
		    if(PlayerData[playerid][pAranma] > 0)
		    {
		        SendBirlikMessageEx(BIRLIK_LSPD, COLOR_RADIO, "** (Telsiz) All Saints Hastanesi %s adlý kiþiyi aranan olarak bildirdi.",ReturnName(playerid,0));
		        SendBirlikMessageEx(BIRLIK_FBI, COLOR_RADIO, "** (Telsiz) All Saints Hastanesi %s adlý kiþiyi aranan olarak bildirdi.",ReturnName(playerid,0));
		    }
		}
		else
		{
		    ParaVer(playerid, -250);
		    new sayi;
		    for(new i; i<13; i++)
		    {
		        if(PlayerData[playerid][pSilahlar][i] > 0)
		        {
		            sayi++;
		            if(sayi == 1) BilgiMesajGonder(playerid, "Aðýr yaralandýnýz, saðlýk ekipleri gelip sizi hastaneye kaldýrdý. Hastane polisi þu silahlarýnýza el koydu:");
		            SendClientMessageEx(playerid, 0xAFAFAFFF, "%s", ReturnWeaponName(PlayerData[playerid][pSilahlar][i]));
		        }
		    }
		    if(sayi == 0) BilgiMesajGonder(playerid, "Aðýr yaralandýnýz, saðlýk ekipleri gelip sizi hastaneye kaldýrdý. $250 hastane masraflarýný ödediniz.");
		    ResetWeapons(playerid);
		    if(PlayerData[playerid][pAranma] > 0)
		    {
		        SendBirlikMessageEx(BIRLIK_LSPD, COLOR_RADIO, "** (Telsiz) All Saints Hastanesi %s adlý kiþiyi aranan olarak bildirdi.",ReturnName(playerid,0));
		        SendBirlikMessageEx(BIRLIK_FBI, COLOR_RADIO, "** (Telsiz) All Saints Hastanesi %s adlý kiþiyi aranan olarak bildirdi.",ReturnName(playerid,0));
		    }
		}
	}
	return 1;
}
public OnPlayerPrepareDeath(playerid, animlib[32], animname[32], &anim_lock, &respawn_time)
{
    if(IsPlayerNPC(playerid)) return 0;
    if(PetKontrol[playerid] != -1)
	{
	    PetBilgi[PetKontrol[playerid]][petYarali] = 1;
	    FCNPC_Destroy(PetBilgi[PetKontrol[playerid]][NPCID]);
      	PetBilgi[PetKontrol[playerid]][petTakip] = -1;
       	PetBilgi[PetKontrol[playerid]][NPCID] = -1;
        PetBilgi[PetKontrol[playerid]][petDurum] = false;
        DestroyDynamic3DTextLabel(PetBilgi[PetKontrol[playerid]][petText]);
        return 1;
	}
	Player_ResetCutting(playerid);
    //Player_DropLog(playerid, 1);
    PlayerDrugData[playerid][DrugsCooldown] = 0;
    SetPVarInt(playerid, "GiseGate", -1);
    SetPVarInt(playerid, "GiseKapali", -1);
    SetPVarInt(playerid, "GiseAcik", -1);
	//Timerler
	KillTimer(MekanikTimer[playerid]);

    if(RegenTimer[playerid] != -1)
	{
	    KillTimer(RegenTimer[playerid]);
	    RegenTimer[playerid] = -1;
	}
	if(EffectTimer[playerid] != -1)
	{
	    KillTimer(EffectTimer[playerid]);
	    EffectTimer[playerid] = -1;
	}
	foreach(new i : Player)
	{
	    if(PlayerDrugData[i][DrugsOfferedBy] == playerid)
	    {
	        PlayerDrugData[i][DrugsOfferedBy] = INVALID_PLAYER_ID;
	        ShowPlayerDialog(i, -1, DIALOG_STYLE_MSGBOX, "Title", "Content", "Button1", "Button2");

            BilgiMesajGonder(i,"Uyuþturucu satmak istediðiniz oyuncu öldü.");
	    }
	}
	DisablePlayerCheckpoint(playerid);
	if(GetPVarInt(playerid, "IpBaglandi") == 1)
	{
	    SetPVarInt(playerid, "IpBaglandi", 0);
	    TogglePlayerControllable(playerid, true);
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if(GetPVarInt(playerid, "GozBaglandi") == 1)
	{
	    SetPVarInt(playerid, "GozBaglandi", 0);
	    TextDrawHideForPlayer(playerid, Karanlik);
	}
	if(PlayerData[playerid][pDragged])
	{
	    PlayerData[playerid][pDragged] = 0;
	    PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	    KillTimer(PlayerData[playerid][pDragTimer]);
	}
	foreach(new i: Player)
	{
	    if(PlayerData[i][pDragged] ==1 && PlayerData[i][pDraggedBy] == playerid)
	    {
	        PlayerData[i][pDragged] = 0;
	        PlayerData[i][pDraggedBy] = INVALID_PLAYER_ID;
	        KillTimer(PlayerData[i][pDragTimer]);
	    }
	}
	new killerid = PlayerData[playerid][pLastShot];
	if(pbOda[playerid] == -1)
	{
	    if(killerid != INVALID_PLAYER_ID) PlayerData[killerid][pOldurme]++;
	    PlayerData[playerid][pOlme]++;
	}
	if(killerid != INVALID_PLAYER_ID && pbOda[playerid] != -1 && pbOda[playerid] == pbOda[killerid])
	{
	    pbOldurme[killerid]++;
	    pbOlme[playerid]++;
	    if(Paintball[pbOda[playerid]][odaOyunTuru] == 1)
	    {
	        switch(pbTakim[killerid])
	        {
	            case 1: Paintball[pbOda[killerid]][odaPuan][0]++;
	            case 2: Paintball[pbOda[killerid]][odaPuan][1]++;
	        }
	    }
	}
	if(IsPlayerInAnyVehicle(playerid)) AractanIndir(playerid);
	if(PlayerData[playerid][pBaygin] == 1)
	{
	    animlib = "";
	    respawn_time = 100;
	    SaveWeapons(playerid);
	    PlayerData[playerid][pBaygin] = 2;
		return 1;
	}
	if(PlayerData[playerid][pHapisSure] < 1 && PlayerData[playerid][pBaygin] == 0 && pbOda[playerid] == -1)
	{
	    if(PlayerData[playerid][pAramada] != 0) CagriKapat(playerid);
	    SaveWeapons(playerid);
	    if(PlayerData[playerid][pDuzkontak] != -1) MesajGonder(playerid, "Düzkontak yaparken yaralýya düþtüðünüz için düzkontak iþlemi iptal edildi."), PlayerData[playerid][pDuzkontak] = -1, KillTimer(MekanikTimer[playerid]);
	    if(PlayerData[playerid][pKilitkir] != -1) MesajGonder(playerid, "Kilit kýrarken yaralýya düþtüðünüz için kilit kýrma iþlemi iptal edildi."), PlayerData[playerid][pKilitkir] = -1, KillTimer(MekanikTimer[playerid]);
	    PlayerData[playerid][pBaygin] = 1;
	    if(killerid != INVALID_PLAYER_ID) BilgiMesajGonder(playerid, "%s adlý kiþi sizi yere düþürdü.", ReturnName(killerid, 0));
	    new id = GetNearestCCTV(playerid);
	    new Float:pos[3];
	    GetPlayerPosEx(playerid, pos[0], pos[1], pos[2]);
		if(id != -1)
		{
			SendBirlikMessageEx(BIRLIK_LSMD, 0xFF8282AA, "%s adlý kiþinin %s bölgesinde yaralý olduðu tespit edildi. (/yaralilar)", ReturnName(playerid, 0), GetLocation(pos[0], pos[1], pos[2]));
		}
	}
	if(PlayerData[playerid][pShootedBody] != -1)
	{
		switch(PlayerData[playerid][pShootedBody])
		{
		    case 4, 3:
		    {
		        if(killerid != INVALID_PLAYER_ID)
		        {
			        animlib = "PED";
			    	animname = "KO_shot_stom";
		    	}
		    }
		    case 9:
		    {
		        animlib = "PED";
		    	animname = "KO_shot_face";
		    }
		    default:
		    {
		        animlib = "PED";
	    		animname = "KO_skid_back";
		    }
		}
	}
	else
	{
	    animlib = "PED";
	    animname = "KO_skid_back";
	}
	PlayerData[playerid][pShootedBody] = -1;
	PlayerData[playerid][pLastShot] = INVALID_PLAYER_ID;
	return 1;
}
public OnPlayerDeathFinished(playerid, bool:cancelable)
{
	if(PlayerData[playerid][pBaygin] != 2 && PetKontrol[playerid] == -1 && pbOda[playerid] == -1 && PlayerData[playerid][pHapisSure] < 1 && cancelable) return 0;
	return 1;
}
/*public OnPlayerDeath(playerid, killerid, reason)
{
    if(IsPlayerNPC(playerid)) return 1;
    if(PetKontrol[playerid] != -1)
	{
	    PetBilgi[PetKontrol[playerid]][petYarali] = 1;
	    FCNPC_Destroy(PetBilgi[PetKontrol[playerid]][NPCID]);
      	PetBilgi[PetKontrol[playerid]][petTakip] = -1;
       	PetBilgi[PetKontrol[playerid]][NPCID] = -1;
        PetBilgi[PetKontrol[playerid]][petDurum] = false;
        DestroyDynamic3DTextLabel(PetBilgi[PetKontrol[playerid]][petText]);
        return 1;
	}
    Player_ResetCutting(playerid);
    //Player_DropLog(playerid, 1);
    PlayerDrugData[playerid][DrugsCooldown] = 0;

    if(RegenTimer[playerid] != -1)
	{
	    KillTimer(RegenTimer[playerid]);
	    RegenTimer[playerid] = -1;
	}

	if(EffectTimer[playerid] != -1)
	{
	    KillTimer(EffectTimer[playerid]);
	    EffectTimer[playerid] = -1;
	}

	foreach(new i : Player)
	{
	    if(PlayerDrugData[i][DrugsOfferedBy] == playerid)
	    {
	        PlayerDrugData[i][DrugsOfferedBy] = INVALID_PLAYER_ID;
	        ShowPlayerDialog(i, -1, DIALOG_STYLE_MSGBOX, "Title", "Content", "Button1", "Button2");

            BilgiMesajGonder(i,"Uyuþturucu satmak istediðiniz oyuncu öldü.");
	    }
	}
	DisablePlayerCheckpoint(playerid);
	if(GetPVarInt(playerid, "IpBaglandi") == 1)
	{
	    SetPVarInt(playerid, "IpBaglandi", 0);
	    TogglePlayerControllable(playerid, true);
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if(PlayerData[playerid][pDragged])
	{
	    PlayerData[playerid][pDragged] = 0;
	    PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	    KillTimer(PlayerData[playerid][pDragTimer]);
	}
	foreach(new i: Player)
	{
	    if(PlayerData[i][pDragged] ==1 && PlayerData[i][pDraggedBy] == playerid)
	    {
	        PlayerData[i][pDragged] = 0;
	        PlayerData[i][pDraggedBy] = INVALID_PLAYER_ID;
	        KillTimer(PlayerData[i][pDragTimer]);
	    }
	}
	if(killerid != INVALID_PLAYER_ID && pbOda[playerid] != -1 && pbOda[killerid] != -1 && pbOda[playerid] == pbOda[killerid] && Paintball[pbOda[playerid]][odaDurum] == ODA_BASLADI)
	{
	    pbOldurme[killerid]++;
	    pbOlme[playerid]++;
	    if(Paintball[pbOda[playerid]][odaOyunTuru] == 1)
	    {
	        switch(pbTakim[killerid])
	        {
	            case 1: Paintball[pbOda[killerid]][odaPuan][0]++;
	            case 2: Paintball[pbOda[killerid]][odaPuan][1]++;
	        }
	    }
	}
	if(PlayerData[playerid][pBaygin] == 1)
	{
	    foreach(new i:Player)
	    {
	        if(EMSKabul[i] == playerid)
	        {
				EMSKabul[i] = INVALID_PLAYER_ID;
				DisablePlayerCheckpoint(i);
				BilgiMesajGonder(playerid, "Kabul ettiðiniz hasta öldü.");
	        }
	    }
	    DeletePVar(playerid, "AracaBindi");
	    PlayerData[playerid][pBaygin] = 2;
	    PlayerData[playerid][pBayginSure] = 0;
	    ClearAnimations(playerid);
	    StopLoopingAnim(playerid);
		return 1;
	}
	if(PlayerData[playerid][pHapisSure] < 1 && PlayerData[playerid][pBaygin] == 0 && pbOda[playerid] == -1 && Paintball[pbOda[playerid]][odaDurum] == ODA_BASLADI)
	{
	    if(PlayerData[playerid][pAramada] != 0) CagriKapat(playerid);
	    PlayerData[playerid][pBaygin] = 1;
	    SetPVarInt(playerid, "DeathSkin", GetPlayerSkinEx(playerid));
	    GetPlayerPos(playerid, DeathPos[playerid][0], DeathPos[playerid][1], DeathPos[playerid][2]);
	    GetPlayerFacingAngle(playerid, DeathPos[playerid][3]);
	    DeathInterior[playerid] = GetPlayerInterior(playerid);
	    DeathWorld[playerid] = GetPlayerVirtualWorld(playerid);
	    SetSpawnInfo(playerid, NO_TEAM, GetPlayerSkinEx(playerid), DeathPos[playerid][0], DeathPos[playerid][1], DeathPos[playerid][2], DeathPos[playerid][3], 0, 0, 0, 0, 0, 0);
	}

	return 1;
}*/
public OnVehicleSpawn(vehicleid)
{
	for(new i; i<5; i++)
	{
	    if(IsValidDynamicObject(AracTohumObjeler[vehicleid][i])) DestroyDynamicObject(AracTohumObjeler[vehicleid][i]);
	}
	AracTohumlar[vehicleid][0] = 0;
	AracTohumlar[vehicleid][1] = 0;
	AracTohumlar[vehicleid][2] = 0;
    CarUpdate[vehicleid] = 0;
	Flasher[vehicleid] = 0;
    FlasherState[vehicleid] = 0;
    Vehicle_CleanUp(vehicleid);
	DestroyDynamic3DTextLabel(vehicle3Dtext[vehicleid]);
	AracYuk[vehicleid] = 0;
	AracCP[vehicleid] = -1;
	KillTimer(AracRespawnTimer[vehicleid]);
 	vehiclecallsign[vehicleid] = 0;
  	format(vehicletext[vehicleid], 24, "");
  	LoadedTrash[vehicleid] = 0;
	return 1;
}
public OnVehicleDeath(vehicleid, killerid)
{
    Arac_Spawn(vehicleid);
    if(IsPlayerConnected(killerid))
    {
    	OnPlayerExitVehicle(killerid, vehicleid);
    }
	return 1;
}
public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	if(GetPVarInt(playerid, "pnsID") != -1)
	{
	    new id = Car_GetID(vehicleid);
	    ChangeVehicleColor(vehicleid, AracInfo[id][aracRenkler][0],  AracInfo[id][aracRenkler][1]);
	}
    return 1;
}
public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(GetPlayerInterior(playerid) == 0)
	{
	    return Ban(playerid);
	}

    new
        id = Car_GetID(vehicleid);

    if (id != -1)
    {
        ParaVer(playerid, -GetComponentPrice2(componentid));
        AracInfo[id][aracMods][GetVehicleComponentType(componentid)] = componentid;
        Arac_Kaydet(id);
    }
    return 1;
}
public OnActorStreamIn(actorid, forplayerid)
{
	if(actorid == actors[1])
	{
	    SetActorPos(actorid, 1457.8317,-1777.6063,1815.9910);
	}
	if(actorid == actors[2])
	{
	    SetActorPos(actorid, 1462.8433,-1682.5958,-70.0371);
	}
	for(new i; i<10; i++)
	{
	    if(i < 2)
	    {
		    if(actorid == DealerData[i][dealerActorID])
		    {
		        SetActorPos(actorid, DealerData[i][dealerX], DealerData[i][dealerY], DealerData[i][dealerZ]);
		    }
	    }
	    if(actorid == BankerData[i][bankerActorID])
	    {
	        SetActorPos(actorid, BankerData[i][bankerX], BankerData[i][bankerY], BankerData[i][bankerZ]);
	    }
	}
	return 1;
}
public OnPlayerText(playerid, text[])
{
	if(!OyundaDegil(playerid))
	{
	    HataMesajGonder(playerid,"Þu an konuþamazsýn.");
	    return 0;
	}
	if(!strcmp(text, ":D", true))
	{
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s kahkaha atar.", ReturnName(playerid, 0));
		return 0;
	}
	if(!strcmp(text, ":P", true))
	{
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s dil çýkarýr.", ReturnName(playerid, 0));
		return 0;
	}
	if(!strcmp(text, ":)", true))
	{
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s gülümser.", ReturnName(playerid, 0));
		return 0;
	}
	if(!strcmp(text, ":S", true))
	{
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s yüzünü buruþturur.", ReturnName(playerid, 0));
		return 0;
	}
	if(!strcmp(text, ":(", true))
	{
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s yüzünü üzgün bir ifade yapar.", ReturnName(playerid, 0));
		return 0;
	}
	if(PlayerData[playerid][yayinKonuk] != -1 && GetFactionType(PlayerData[playerid][yayinKonuk]) == BIRLIK_HABER && IsPlayerInAnyVehicle(playerid) && IsNewsVehicle(GetPlayerVehicleID(playerid)))
	{
	    foreach(new i: Player) if((PlayerData[i][pDinle] == PlayerData[PlayerData[playerid][yayinKonuk]][pFaction] || i == playerid) && PlayerData[i][pAyarlar][2] == 0)
	    {
	        if(strlen(text) > 64)
	        {
	            SendClientMessageEx(i, 0x42f445FF, "[%s] Konuk %s: %.64s", Birlikler[PlayerData[PlayerData[playerid][yayinKonuk]][pFaction]][birlikAd], ReturnName(playerid, 0), text);
	            SendClientMessageEx(i, 0x42f445FF, "...%s", text[64]);
	        }
	        else
	        {
	            SendClientMessageEx(i, 0x42f445FF, "[%s] Konuk %s: %s", Birlikler[PlayerData[PlayerData[playerid][yayinKonuk]][pFaction]][birlikAd], ReturnName(playerid, 0), text);
	        }
	    }
	    return 0;
	}
	new str[128];
	format(str, sizeof(str), "%s: %s", ReturnName(playerid, 0), text);
	if(IsPlayerInAnyVehicle(playerid))
	{
        if(PlayerData[playerid][pAramada] == ARAMA_KONUSUYOR && OyundaDegil(PlayerData[playerid][pCallLine]))
        {
            if(!AracInfo[Car_GetID(GetPlayerVehicleID(playerid))][aracCamlar])
            {
                SendVehicleMessage(-1, GetPlayerVehicleID(playerid), COLOR_WHITE, "(Telefon) %s: %s", ReturnName(playerid, 0), text);
                if(PlayerData[PlayerData[playerid][pCallLine]][pTelefonAyar][2] == 1)
				{
					if(IsPlayerInAnyVehicle(PlayerData[playerid][pCallLine]) && !AracInfo[Car_GetID(GetPlayerVehicleID(PlayerData[playerid][pCallLine]))][aracCamlar]) SendVehicleMessage(PlayerData[playerid][pCallLine], GetPlayerVehicleID(PlayerData[playerid][pCallLine]), COLOR_YELLOW, "(Telefon Höparlörü) %s", text);
					SendClientMessageEx(PlayerData[playerid][pCallLine], COLOR_YELLOW, "(Telefon) %s: %s", TelNo(PlayerData[playerid][pCallLine], playerid), text);
				}
				else
				{
				    SendClientMessageEx(PlayerData[playerid][pCallLine], COLOR_YELLOW, "(Telefon) %s: %s", TelNo(PlayerData[playerid][pCallLine], playerid), text);

				}
            }
            else
            {
                SendNearbyMessage(playerid, 11.0, COLOR_WHITE, "(Telefon) %s: %s", ReturnName(playerid, 0), text);
                if(IsPlayerInAnyVehicle(PlayerData[playerid][pCallLine]) && !AracInfo[Car_GetID(GetPlayerVehicleID(PlayerData[playerid][pCallLine]))][aracCamlar] && PlayerData[PlayerData[playerid][pCallLine]][pTelefonAyar][2] == 1) SendVehicleMessage(PlayerData[playerid][pCallLine], GetPlayerVehicleID(PlayerData[playerid][pCallLine]), COLOR_YELLOW, "(Telefon Höparlörü) %s", text);
				SendClientMessageEx(PlayerData[playerid][pCallLine], COLOR_YELLOW, "(Telefon) %s: %s", TelNo(PlayerData[playerid][pCallLine], playerid), text);
			}
		}
		else
		{
		    if(IsWindowedVehicle(GetPlayerVehicleID(playerid)) && !AracInfo[Car_GetID(GetPlayerVehicleID(playerid))][aracCamlar]) SendVehicleMessage(-1, GetPlayerVehicleID(playerid), 0xBBFFEEFF, "[Cam Kapalý] %s: %s", ReturnName(playerid, 0), text);
		    else
		    {
		        ProxDetector2(30.0, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		    }
		}
	}
	else
	{
		if(PlayerData[playerid][pAramada] == ARAMA_KONUSUYOR && OyundaDegil(PlayerData[playerid][pCallLine]))
		{
			if(PlayerData[PlayerData[playerid][pCallLine]][pTelefonAyar][2] == 1)
			{
				if(IsPlayerInAnyVehicle(PlayerData[playerid][pCallLine]) && !AracInfo[Car_GetID(GetPlayerVehicleID(PlayerData[playerid][pCallLine]))][aracCamlar]) SendVehicleMessage(PlayerData[playerid][pCallLine], GetPlayerVehicleID(PlayerData[playerid][pCallLine]), COLOR_YELLOW, "(Telefon Höparlörü) %s", text);
				else SendNearbyMessage2(PlayerData[playerid][pCallLine], 11.0, COLOR_YELLOW, "(Telefon Höparlörü) %s", text);
				SendClientMessageEx(PlayerData[playerid][pCallLine], COLOR_YELLOW, "(Telefon) %s: %s", TelNo(PlayerData[playerid][pCallLine], playerid), text);

			}
			else
			{
				SendClientMessageEx(PlayerData[playerid][pCallLine], COLOR_YELLOW, "(Telefon) %s: %s", TelNo(PlayerData[playerid][pCallLine], playerid), text);
			}
		}
		if(PlayerData[playerid][pAramada] == 0) ProxDetector2(30.0, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		else
		{
				SendNearbyMessage(playerid, 11.0, COLOR_WHITE, "(Telefon) %s: %s", ReturnName(playerid, 0), text);
		}
	}
	if(!IsPlayerInAnyVehicle(playerid) && PlayerData[playerid][pAramada] == 0 && PlayerData[playerid][pBaygin] == 0 && PlayerData[playerid][pKelepce] == 0 && PlayerData[playerid][pSoklandi] == 0 && PlayerData[playerid][pYereYatirildi] == 0 && PlayerData[playerid][pAyarlar][4] == 0 && PetKontrol[playerid] == -1)
	{
	    ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,1,1,0,strlen(text)*80);
	    ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,1,1,0,strlen(text)*80);
	}
	new id = PetYakin(playerid, 15.0);
	if(id != -1 && PetBilgi[id][petDurum] == true && PetBilgi[id][petSahip] == PlayerData[playerid][pID] && PetBilgi[id][petAclik] > 5)
	{
	    if(strfind(text, PetBilgi[id][petAdi], true) != -1)
	    {
	        if(strfind(text, "Gel", true) != -1)
			{
			    FCNPC_ClearAnimations(PetBilgi[id][NPCID]);
			    PetBilgi[id][petTakip] = -1;
			    PetBilgi[id][petSaldir] = -1;
			    FCNPC_GoToPlayer(PetBilgi[id][NPCID], playerid);
			}
	        if(strfind(text, "Takip", true) != -1)
	        {
	            FCNPC_ClearAnimations(PetBilgi[id][NPCID]);
	            FCNPC_StopAttack(PetBilgi[id][NPCID]);
                PetBilgi[id][petTakip] = playerid;
		    	PetBilgi[id][petSaldir] = -1;
	        }
	        if(strfind(text, "Dur", true) != -1)
	        {
	            FCNPC_ClearAnimations(PetBilgi[id][NPCID]);
	            PetBilgi[id][petTakip] = -1;
	            PetBilgi[id][petSaldir] = -1;
	            FCNPC_Stop(PetBilgi[id][NPCID]);
	            FCNPC_StopAttack(PetBilgi[id][NPCID]);
	        }
	        if(strfind(text, "Otur", true) != -1)
	        {
	            PetBilgi[id][petTakip] = -1;
	            PetBilgi[id][petSaldir] = -1;
	            FCNPC_Stop(PetBilgi[id][NPCID]);
	            FCNPC_StopAttack(PetBilgi[id][NPCID]);
	            FCNPC_ApplyAnimation(PetBilgi[id][NPCID], "PED", "SEAT_idle", 4.0, 1, 0, 0, 0, 0);
             	FCNPC_ApplyAnimation(PetBilgi[id][NPCID], "PED", "SEAT_idle", 4.0, 1, 0, 0, 0, 0);
	        }
	        if(strfind(text, "Kalk", true) != -1)
	        {
	            FCNPC_ClearAnimations(PetBilgi[id][NPCID]);
	        }
	        if(strfind(text, "Bana bak", true) != -1)
	        {
				FCNPC_SetAngleToPlayer(PetBilgi[id][NPCID], playerid);
	        }
		}
	}
	Log_Write("logs/chat.log","%s: %s",ReturnName(playerid, 0), trcar(text));
	return 0;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(PlayerData[playerid][pKelepce] == 1) AractanIndir(playerid);
	if(!ispassenger && GetVehicleDriver(vehicleid) != INVALID_PLAYER_ID)
	{
	    ClearAnimations(playerid);
	    HataMesajGonder(playerid, "Car Jack yasaktýr.");
	    return 1;
	}
    if(PetKontrol[playerid] != -1) return ClearAnimations(playerid);
	PlayerData[playerid][pLastCar] = vehicleid;
	new id = Car_GetID(vehicleid);
	if(id != -1 && AracInfo[id][aracKilit] && ispassenger)
	{
	    ClearAnimations(playerid);
	    HataMesajGonder(playerid, "Araç kilitli.");
	}
	if(AracInfo[id][aracTip] == 1 && AracInfo[id][aracFactionType] != GetFactionType(playerid) && !ispassenger)
	{
	    ClearAnimations(playerid);
	    HataMesajGonder(playerid, "Bu aracýn anahtarýna sahip deðilsin.");
	}
	if(PlayerData[playerid][pBaygin] == 1)
	{
	    ClearAnimations(playerid);
	    ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.1, 1, 0, 0, 0, 0, 1);
	    ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(PlayerData[playerid][pTaxiDuty] == true)
	{
        foreach (new i : Player) if (PlayerData[i][pTaxiPlayer] == playerid && IsPlayerInVehicle(i, GetPlayerVehicleID(playerid))) {
	        LeaveTaxi(i, playerid);
	    }
	    new id = Car_GetID(vehicleid);
        PlayerData[playerid][pTaxiDuty] = false;
        AracInfo[id][OturumKazanci] = 0;
        AracInfo[id][Taksimetre] = 30;
        BilgiMesajGonder(playerid, "Araçtan indiðin için iþbaþýndan çýktýn.");
	}
	return 1;
}
stock GenerateInterface(playerid, bool:create = true)
{
	if (create) {

		Textdraw1[playerid] = CreatePlayerTextDraw(playerid,320.000000, 330.000000, "");
		PlayerTextDrawAlignment(playerid,Textdraw1[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid,Textdraw1[playerid], 255);
		PlayerTextDrawFont(playerid,Textdraw1[playerid], 2);
		PlayerTextDrawLetterSize(playerid,Textdraw1[playerid], 0.260000, 1.000000);
		PlayerTextDrawColor(playerid,Textdraw1[playerid], -1);
		PlayerTextDrawSetOutline(playerid,Textdraw1[playerid], 1);
		PlayerTextDrawSetProportional(playerid,Textdraw1[playerid], 1);
		PlayerTextDrawSetSelectable(playerid,Textdraw1[playerid], 0);
	} else {
		PlayerTextDrawDestroy(playerid, Textdraw1[playerid]);
	}
	return 1;
}
stock LeaveTaxi(playerid, driverid)
{
    if (driverid != INVALID_PLAYER_ID && IsPlayerConnected(driverid))
    {
        ParaVer(playerid, -floatround(PlayerData[playerid][pTaksiUcret]));
        ParaVer(driverid, floatround(PlayerData[playerid][pTaksiUcret]));
		AracInfo[Car_GetID(GetPlayerVehicleID(driverid))][OturumKazanci] += floatround(PlayerData[playerid][pTaksiUcret]);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s taksi þöförüne $%d verir.", ReturnName(playerid, 0), floatround(PlayerData[playerid][pTaksiUcret]));

        PlayerData[playerid][pTaksiUcret] = 0;
        PlayerData[playerid][pTaxiPlayer] = -1;
        PlayerData[playerid][pTaksiKabul] = -1;
        DisablePlayerCheckpoint(playerid);
        DisablePlayerCheckpoint(driverid);
        PlayerTextDrawHide(playerid, TaxiTD[playerid][0]);
        PlayerTextDrawHide(playerid, TaxiTD[playerid][1]);
        PlayerTextDrawHide(driverid, TaxiTD[driverid][0]);
        PlayerTextDrawHide(driverid, TaxiTD[driverid][1]);
    }
    return 1;
}
public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(newstate == PLAYER_STATE_DRIVER)
	{
	    foreach(new i: Player) if(PlayerData[i][pAdmin] >= 1 && PlayerData[i][pSpecID] == playerid)
	    {
	        PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
	    }
	    new vehicleid = GetPlayerVehicleID(playerid);
	    new id = Car_GetID(vehicleid);
	    PlayerData[playerid][pLastCar] = vehicleid;
		if(id != -1)
		{
		    KillTimer(AracRespawnTimer[vehicleid]);
		    new zirh[20];
      		if(AracInfo[id][aracZirh] > 0) zirh = "{2ECC71}Evet";
        	else zirh = "{E74C3C}Hayýr";
        	if(strlen(RadyoLink[GetPlayerVehicleID(playerid)]) > 3) PlayAudioStreamForPlayer(playerid, RadyoLink[GetPlayerVehicleID(playerid)]);
			if (AracInfo[id][aracSahip] >= 0 && AracInfo[id][aracSahip] != PlayerData[playerid][pID] && AracInfo[id][aracFiyat] > 0 && AracInfo[id][aracSatilik] == 1 && AracInfo[id][aracModel] != 509)
		    {
		    	SetPVarInt(playerid, "OnayKOD", RandomEx(111111, 999999));
		        Dialog_Show(playerid, AracAlimOnay, DIALOG_STYLE_INPUT, "Araç Alým", "{FFFFFF}Bulunduðunuz araç {C2A2DA}%s {FFFFFF}tarafýndan {C2A2DA}%s'a {FFFFFF}satýlýktýr, aracý satýn almak istiyor musunuz?\n\nPiyasa deðeri : %s\nAraç Modeli : %s\nAraç KM : %.1f\nVergi : %s/%s\nZýrh : %s\n{ffffff}Taksi Plakasý : %s\nGüvenlik seviyesi : %d\n\n\nBu aracý satýn almak için {00FF00}%d {ffffff}kodunu aþaðýya girin.", "Satýn al", "Ýptal",
				SQLName(AracInfo[id][aracSahip], 0), FormatNumber(AracInfo[id][aracFiyat]), FormatNumber(GetGaleriFiyat(AracInfo[id][aracModel])), ReturnVehicleModelName(GetVehicleModel(vehicleid)), AracInfo[id][aracKM],FormatNumber(AracInfo[id][aracVergi]), FormatNumber(GetAracMaksVergi(GetVehicleModel(vehicleid))), zirh, (AracInfo[id][TaksiPlaka] == 1) ? ("{2ECC71}Evet{FFFFFF}") : ("{E74C3C}Hayýr{FFFFFF}"), AracInfo[id][aracSeviye], GetPVarInt(playerid, "OnayKOD"));
		    }
		    else if (AracInfo[id][aracSahip] == -1 && AracInfo[id][aracFiyat] > 0 && AracInfo[id][aracSatilik] == 1 && AracInfo[id][aracModel] != 509)
		    {
		        SetPVarInt(playerid, "OnayKOD", RandomEx(111111, 999999));
		        Dialog_Show(playerid, AracAlimOnay, DIALOG_STYLE_INPUT, "Araç Alým", "{FFFFFF}Bulunduðunuz araç {C2A2DA}%s'a {FFFFFF}satýlýktýr, aracý satýn almak istiyor musunuz?\n\nPiyasa deðeri : %s\nAraç Modeli : %s\nAraç KM : %.1f\nVergi : %s/%s\nZýrh : %s\n{ffffff}Taksi Plakasý : %s\nGüvenlik seviyesi : %d\n\n\nBu aracý satýn almak için {00FF00}%d {ffffff}kodunu aþaðýya girin.", "Satýn al", "Ýptal",
				FormatNumber(AracInfo[id][aracFiyat]), FormatNumber(GetGaleriFiyat(AracInfo[id][aracModel])), ReturnVehicleModelName(GetVehicleModel(vehicleid)), AracInfo[id][aracKM],FormatNumber(AracInfo[id][aracVergi]), FormatNumber(GetAracMaksVergi(GetVehicleModel(vehicleid))), zirh, (AracInfo[id][TaksiPlaka] == 1) ? ("{2ECC71}Evet{FFFFFF}") : ("{E74C3C}Hayýr{FFFFFF}"), AracInfo[id][aracSeviye], GetPVarInt(playerid, "OnayKOD"));
		    }
		    if(AracInfo[id][aracFaction] >= 1 && AracInfo[id][aracSahip] > 0 && AracInfo[id][aracTip] != 2 && AracInfo[id][aracModel] != 509)
		    {
		        SendClientMessageEx(playerid,-1,"{BBFFEE}Sahip: {FFFFFF}%s - {BBFFEE}Birlik: {FFFFFF}%s",SQLName(AracInfo[id][aracSahip], 0), Birlikler[GetFactionByID(AracInfo[id][aracFaction])][birlikAd]);
		        SendClientMessageEx(playerid,-1,"{BBFFEE}Plaka: {FFFFFF}%s - {BBFFEE}Vergi: {FFFFFF}%s/%s", AracInfo[id][aracPlaka], FormatNumber(AracInfo[id][aracVergi]), FormatNumber(GetAracMaksVergi(GetVehicleModel(vehicleid))));
		        SendClientMessageEx(playerid,-1,"{BBFFEE}Saatlik Vergi: {FFFFFF}%s - {BBFFEE}Ceza: {FFFFFF}%s - {ffffff}Sigorta: {cccccc}%s", FormatNumber(GetAracVergi(GetVehicleModel(vehicleid))), FormatNumber(AracInfo[id][aracTicket]), (AracInfo[id][aracSigorta] == 1) ? ("Mevcut") : ("Sigortanýzý yaptýrýn"));
		    }
		    else if(AracInfo[id][aracFaction] >= 1 && AracInfo[id][aracModel] != 509)
		    {
		        SendClientMessageEx(playerid,-1,"{BBFFEE}Birlik: {FFFFFF}%s - {BBFFEE}Plaka: {FFFFFF}%s",Birlikler[GetFactionByID(AracInfo[id][aracFaction])][birlikAd], AracInfo[id][aracPlaka]);
		    }
		    else if(AracInfo[id][aracTip] == 5)
		    {
		        if(PlayerData[playerid][pVip] < 1)
		        {
		            HataMesajGonder(playerid, "Bu araç viplere özeldir. (/oocmarket)");
		            return RemovePlayerFromVehicle(playerid);
		        }
		    }
			if(GetVehicleModel(vehicleid) == 408 && AracInfo[id][aracTip] == 2)
	    	{
			    if(LoadedTrash[vehicleid] > 0) {
					MesajGonder(playerid, "Bu araçta {F39C12}%d {FFFFFF}çöp torbasý bulunuyor. Deðeri:{2ECC71}%s.", LoadedTrash[vehicleid], FormatNumber(LoadedTrash[vehicleid] * TRASH_BAG_VALUE));
					MesajGonder(playerid, "Çöpleri geridönüþüm fabrikalarýnda satarak paranýzý alabilirsiniz.");

					for(new i; i < sizeof(FactoryData); i++)
					{
					    FactoryIcons[playerid][i] = CreateDynamicMapIcon(FactoryData[i][FactoryX], FactoryData[i][FactoryY], FactoryData[i][FactoryZ], 51, 0, _, _, playerid, 8000.0, MAPICON_GLOBAL);
						TogglePlayerDynamicCP(playerid, FactoryData[i][FactoryCP], 1);
					}
			    }else{
			        MesajGonder(playerid, "Çöpleri toplayýp geridönüþüm fabrikalarýnda satarak paranýzý alabilirsiniz.");
			        MesajGonder(playerid, "Çöp kutusu bulmak için (/copbul) komutunu kullanabilirsiniz.");
			    }

				Trash_ShowCapacity(playerid);
			}
			if(GetVehicleModel(vehicleid) == 574 && AracInfo[id][aracTip] == 2)
			{
			    GetVehiclePos(vehicleid,TemizlikciLastPos[vehicleid][0],TemizlikciLastPos[vehicleid][1],TemizlikciLastPos[vehicleid][2]);
	    		MesajGonder(playerid, "Þehirde dolaþmaya baþlayarak para kazanabilirsiniz. Araçtan indiðinizde paranýz otomatik verilecektir.");
			}
			if(Vehicle_LoadedOres(vehicleid) > 0)
	    	{
				MesajGonder(playerid, "Bu araçta {F39C12}%d {FFFFFF}maden bulunmaktadýr. Deðeri; {2ECC71}$%d.", Vehicle_LoadedOres(vehicleid), Vehicle_GetOreValue(vehicleid));
				BilgiMesajGonder(playerid, "Yüklü cevherleri bir kamyon iþaretli düþen noktalara satabilirsiniz.");
				BilgiMesajGonder(playerid, "Daha fazla bilgi için /acevher komutunu kullanabilirsiniz.");
				for(new i; i < sizeof(DropPoints); i++)
				{
				    PointIcons[playerid][i] = CreateDynamicMapIcon(DropPoints[i][PointX], DropPoints[i][PointY], DropPoints[i][PointZ], 51, 0, _, _, playerid, 8000.0, MAPICON_GLOBAL);
					TogglePlayerDynamicCP(playerid, DropPoints[i][PointCP], 1);
				}
	    	}
	      	if(AracYuk[vehicleid] == 1) SetPlayerCheckpoint(playerid,KamyoncuCheckpoint[AracCP[vehicleid]][0],KamyoncuCheckpoint[AracCP[vehicleid]][1],KamyoncuCheckpoint[AracCP[vehicleid]][2],5.0);
	    	if(GetVehicleModel(vehicleid) == 414 && AracInfo[id][aracTip] == 2)
	    	{
	    	    KillTimer(AracRespawnTimer[vehicleid]);
	    	    if(AracYuk[vehicleid] == 0) BilgiMesajGonder(playerid, "Taþýmacýlýk mesleðine baþlamak için yük almalýsýnýz. (/yukal)");
	    	}
		 	if(AracInfo[id][aracExists] && AracInfo[id][aracKira] > 0)
			{
			    if(AracInfo[id][aracKiralayan] == -1)
			    {
			        MesajGonder(playerid,"Bu araç kiralýktýr, 1 saatliðine kiralamak için %s ödemelisiniz. {FF0000}(/arackirala)",FormatNumber(AracInfo[id][aracKira]));
			    }
			    else
			    {
			        BilgiMesajGonder(playerid,"Bu araç %s tarafýndan kiralanmýþ. %d dakika sonra kira bitecek.",SQLName(AracInfo[id][aracKiralayan],0),AracInfo[id][aracKiraZaman]);
			    }
			}
			if(AracInfo[id][aracExists] && AracInfo[id][aracFaction] == -1 && AracInfo[id][aracKira] < 1 && AracInfo[id][aracTip] == 4 && AracInfo[id][aracModel] != 509)
			{
			    SendClientMessageEx(playerid,-1,"{BBFFEE}Sahip: {FFFFFF}%s - {BBFFEE}Plaka: {FFFFFF}%s",SQLName(AracInfo[id][aracSahip], 0), AracInfo[id][aracPlaka]);
			    SendClientMessageEx(playerid,-1,"{BBFFEE}Vergi: {FFFFFF}%s/%s -  {BBFFEE}Saatlik Vergi: {FFFFFF}%s - {ffffff}Sigorta: {cccccc}%s",FormatNumber(AracInfo[id][aracVergi]), FormatNumber(GetAracMaksVergi(GetVehicleModel(vehicleid))), FormatNumber(GetAracVergi(GetVehicleModel(vehicleid))), (AracInfo[id][aracSigorta] == 1) ? ("Mevcut") : ("Sigortanýzý yaptýrýn"));
		        SendClientMessageEx(playerid,-1,"{BBFFEE}KM: {FFFFFF}%.1f - {BBFFEE}Ceza: {FFFFFF}%s", AracInfo[id][aracKM], FormatNumber(AracInfo[id][aracTicket]));
			}
			if(AracInfo[id][aracModel] == 509)
			{
			    if(AracInfo[id][aracSahip] != PlayerData[playerid][pID]) return RemovePlayerFromVehicle(playerid);
			    SetEngineStatus(vehicleid, true);
			}
			if(GetVehicleModel(vehicleid) == 481)
			{
			    if(AracInfo[id][aracKiralayan] == PlayerData[playerid][pID]) SetEngineStatus(vehicleid, true);
			    else SetEngineStatus(vehicleid, false);
			}
		}
		if(IsSpeedoVehicle(vehicleid))
		{
		    for (new i = 0; i < 5; i ++)
		    {
		        PlayerTextDrawShow(playerid,AracTD[playerid][i]);
		    }
		}
		GetVehiclePos(GetPlayerVehicleID(playerid), VehicleLastCoords[vehicleid][0], VehicleLastCoords[vehicleid][1], VehicleLastCoords[vehicleid][2]);
	}
	if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
	    foreach(new i: Player) if(PlayerData[i][pAdmin] >= 1 && PlayerData[i][pSpecID] == playerid)
	    {
	        SetPlayerInterior(i, GetPlayerInterior(playerid));
         	SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(playerid));
	        PlayerSpectatePlayer(i, playerid);
	    }
	    for (new i = 0; i < 5; i ++)
	    {
	        TextDrawHideForPlayer(playerid, carMDC[PlayerData[playerid][pLastCar]][i]);
	        PlayerTextDrawHide(playerid,AracTD[playerid][i]);
	    }
	    if(strlen(RadyoLink[GetPlayerVehicleID(playerid)]) > 3) StopAudioStreamForPlayer(playerid);
	}
	if(oldstate == PLAYER_STATE_DRIVER && newstate == PLAYER_STATE_ONFOOT)
	{
	    new id = Car_GetID(PlayerData[playerid][pLastCar]);
		for(new i; i < sizeof(FactoryData); i++)
		{
		    if(IsValidDynamicMapIcon(FactoryIcons[playerid][i]))
		    {
		        DestroyDynamicMapIcon(FactoryIcons[playerid][i]);
		        FactoryIcons[playerid][i] = -1;
		    }

			TogglePlayerDynamicCP(playerid, FactoryData[i][FactoryCP], 0);
		}
        for(new i; i < sizeof(DropPoints); i++)
		{
		    if(IsValidDynamicMapIcon(PointIcons[playerid][i]))
		    {
		        DestroyDynamicMapIcon(PointIcons[playerid][i]);
		        PointIcons[playerid][i] = -1;
		    }

			TogglePlayerDynamicCP(playerid, DropPoints[i][PointCP], 0);
		}
		if(AracInfo[id][aracTip] == 2 && GetVehicleModel(PlayerData[playerid][pLastCar]) == 574)
	    {
	        SetVehicleToRespawn(PlayerData[playerid][pLastCar]);
	        BilgiMesajGonder(playerid, "Temizlikçi mesleði bitirildi, kazanýlan; {FFBF00}%s", FormatNumber(GetPVarInt(playerid,"TemizlikciKazanilan")));
	        TemizlikciDistance[playerid] = 0;
	        DeletePVar(playerid,"TemizlikciKazanilan");
	        SetPlayerPos(playerid,2091.1765,-2026.0604,13.5469);
        	SetPlayerInterior(playerid,0);
        	SetPlayerVirtualWorld(playerid,0);
	        GetVehiclePos(PlayerData[playerid][pLastCar],TemizlikciLastPos[PlayerData[playerid][pLastCar]][0],TemizlikciLastPos[PlayerData[playerid][pLastCar]][1],TemizlikciLastPos[PlayerData[playerid][pLastCar]][2]);
	    }
	    if(GetVehicleModel(PlayerData[playerid][pLastCar]) == 408 && AracInfo[id][aracTip] == 2)
		{
		    DisablePlayerCheckpoint(playerid);
	        AracRespawnTimer[PlayerData[playerid][pLastCar]] = SetTimerEx("AracRespawn", 60000, false, "i", PlayerData[playerid][pLastCar]);
	        BilgiMesajGonder(playerid, "Çöpçülük aracýndan ayrýldýnýz, 60 saniye içerisinde araca tekrar binmezseniz spawnlanacaktýr.");
		}
	    if(GetVehicleModel(PlayerData[playerid][pLastCar]) == 414 && AracInfo[id][aracTip] == 2)
	    {
	        DisablePlayerCheckpoint(playerid);
	        AracRespawnTimer[PlayerData[playerid][pLastCar]] = SetTimerEx("AracRespawn", 30000, false, "i", PlayerData[playerid][pLastCar]);
	        BilgiMesajGonder(playerid, "Taþýmacýlýk aracýndan ayrýldýnýz, 30 saniye içerisinde araca tekrar binmezseniz spawnlanacaktýr.");
	    }
		PlayerTextDrawHide(playerid, CapacityText[playerid]);
		HidePlayerProgressBar(playerid, CapacityBar[playerid]);
	    Fuel_ResetPlayer(playerid);
	}
	if (newstate == PLAYER_STATE_PASSENGER)
    {
        if(strlen(RadyoLink[GetPlayerVehicleID(playerid)]) > 3) PlayAudioStreamForPlayer(playerid, RadyoLink[GetPlayerVehicleID(playerid)]);
		if(IsPlayerInsideTaxi(playerid))
		{
	        new driverid = GetVehicleDriver(GetPlayerVehicleID(playerid));
	        new vehicleid = GetPlayerVehicleID(playerid);
	        GetVehiclePos(vehicleid, TaxiLastPos[vehicleid][0], TaxiLastPos[vehicleid][1], TaxiLastPos[vehicleid][2]);
	        PlayerData[playerid][pTaksiUcret] = 0;
	        PlayerData[playerid][pTaxiPlayer] = driverid;
	        PlayerData[driverid][pTaksiKabul] = -1;
	        DisablePlayerCheckpoint(driverid);
	        MesajGonder(driverid, "%s taksiye yolcu olarak bindi.", ReturnName(playerid, 0));
	        MesajGonder(playerid, "%s'nin taksisine bindin, gitmek istediðin noktayý haritadan iþaretle. Ýþaretlediðin nokta þoförde de görünecektir.", ReturnName(driverid, 0));
	        PlayerTextDrawShow(playerid, TaxiTD[playerid][0]);
	        PlayerTextDrawShow(playerid, TaxiTD[playerid][1]);
	        PlayerTextDrawShow(driverid, TaxiTD[driverid][0]);
	        PlayerTextDrawShow(driverid, TaxiTD[driverid][1]);
	        PlayerTextDrawSetString(playerid, TaxiTD[playerid][1], "0");
	        PlayerTextDrawSetString(driverid, TaxiTD[driverid][1], "0");
        }
        if(GetWeapon(playerid) != 31 && GetWeapon(playerid) != 30 && GetWeapon(playerid) != 29 && GetWeapon(playerid) != 28)
        {
            SetPlayerArmedWeapon(playerid, 0);
        }
    }
    if (oldstate == PLAYER_STATE_PASSENGER && PlayerData[playerid][pTaxiPlayer] != -1)
    {
        LeaveTaxi(playerid, PlayerData[playerid][pTaxiPlayer]);
    }
	Player_CleanUp(playerid, 1);
	return 1;
}
IsPlayerInsideTaxi(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	new id = Car_GetID(vehicleid);
	if(id == -1) return 0;
	new bool:musterivar, bool:taksicivar;
	if (GetVehicleModel(vehicleid) == 420 || AracInfo[id][TaksiPlaka] == 1)
	{
     	foreach (new i : Player)
		{
		    if(i != playerid && PlayerData[i][pTaxiDuty] == false && GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) != 0) musterivar = true;
			if ((i != playerid) && (PlayerData[i][pTaxiDuty] == true && GetPlayerState(i) == PLAYER_STATE_DRIVER) && GetPlayerVehicleID(i) == vehicleid) taksicivar = true;
		}
	}
	if(musterivar == false && taksicivar == true) return 1;
	else return 0;
}
public OnPlayerEnterCheckpoint(playerid)
{
	if(PlayerData[playerid][pTaksiKabul] != -1)
	{
	    PlayerData[playerid][pTaksiKabul] = -1;
	    DisablePlayerCheckpoint(playerid);
	    return 1;
	}
	if(PlayerData[playerid][pGPS] != -1 || GetPVarInt(playerid, "EvBuluyor") != -1 || GetPVarInt(playerid, "IsyeriBuluyor") != -1 || GetPVarInt(playerid, "BinaBuluyor") != -1)
	{
	    SetPVarInt(playerid, "EvBuluyor", -1);
	    SetPVarInt(playerid, "IsyeriBuluyor", -1);
	    SetPVarInt(playerid, "BinaBuluyor", -1);
	    PlayerData[playerid][pGPS] = -1;
	    DisablePlayerCheckpoint(playerid);
	    PlayerTextDrawHide(playerid, MesafeTD[playerid]);
	    return 1;
	}
	if(EMSKabul[playerid] != INVALID_PLAYER_ID)
	{
	    DisablePlayerCheckpoint(playerid);
	    SetPlayerHealth(EMSKabul[playerid], 100);
	    MesajGonder(playerid, "Hedefe ulaþtýnýz, gerekli rolleri yaptýktan sonra /yaracaat ile ambulans aracýna atýnýz.");
	    return 1;
	}
	if(GetPVarInt(playerid, "AracSakliyor") >= 0 && IsPlayerInVehicle(playerid, AracInfo[GetPVarInt(playerid, "AracSakliyor")][aracVehicle]))
	{
	    new carid = GetPVarInt(playerid, "AracSakliyor");
	    AracInfo[carid][aracDisplay] = false;
	    SetVehicleVirtualWorld(AracInfo[carid][aracVehicle], 1000);
	    SetEngineStatus(AracInfo[carid][aracVehicle], false);
	    AracInfo[carid][aracKilit] = true;
		Arac_Kaydet(carid);
		static
	        engine,
	        lights,
	        alarm,
	        doors,
	        bonnet,
	        boot,
	        objective;

	    GetVehicleParamsEx(AracInfo[carid][aracVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(AracInfo[carid][aracVehicle], engine, lights, alarm, 1, bonnet, boot, objective);
	    MesajGonder(playerid, "Araç saklandý.");
	    DisablePlayerCheckpoint(playerid);
	    SetPVarInt(playerid, "AracSakliyor", -1);
	    return 1;
	}
	if(GetPVarInt(playerid,"AraciniBuluyor") == 1)
	{
	    DisablePlayerCheckpoint(playerid);
	    DeletePVar(playerid,"AraciniBuluyor");
	    return 1;
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 414 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 455) && AracYuk[GetPlayerVehicleID(playerid)] == 1)
	{
	    AracCP[GetPlayerVehicleID(playerid)]++;
	    if(AracCP[GetPlayerVehicleID(playerid)] < sizeof(KamyoncuCheckpoint))
	    {
	        SetPlayerCheckpoint(playerid,KamyoncuCheckpoint[AracCP[GetPlayerVehicleID(playerid)]][0],KamyoncuCheckpoint[AracCP[GetPlayerVehicleID(playerid)]][1],KamyoncuCheckpoint[AracCP[GetPlayerVehicleID(playerid)]][2],5.0);
	    }
	    else
	    {
	        new gerekensefer, para;
	        switch(PlayerData[playerid][pTasimacilikSeviye])
	        {
	            case 0: gerekensefer = 30, para = 500;
	            case 1: gerekensefer = 50, para = 560;
	            case 2: gerekensefer = 70, para = 680;
	            case 3: gerekensefer = 90, para = 750;
	            case 4: gerekensefer = 110, para = 830;
	            case 5: gerekensefer = 150, para = 1000;
	        }
	        DisablePlayerCheckpoint(playerid);
	        AracYuk[GetPlayerVehicleID(playerid)] = 0;
	        AracCP[GetPlayerVehicleID(playerid)] = -1;
	        ParaVer(playerid, para);
	        MesajGonder(playerid, "Yük teslim edildi, {2ECC71}%s {FFFFFF}aldýnýz.", FormatNumber(para));
	        PlayerData[playerid][pTasimacilikSefer]++;
	        if(PlayerData[playerid][pTasimacilikSeviye] < 5 && PlayerData[playerid][pTasimacilikSefer] >= gerekensefer)
	        {
	            PlayerData[playerid][pTasimacilikSeviye]++;
	            PlayerData[playerid][pTasimacilikSefer] = 0;
	            MesajGonder(playerid, "Taþýmacýlýk seviyeniz %d oldu, artýk daha fazla para kazanacaksýnýz!", PlayerData[playerid][pTasimacilikSeviye]);
	        }

	        if(PlayerData[playerid][pTasimacilikSeviye] < 5 && PlayerData[playerid][pTasimacilikSefer] < gerekensefer && PlayerData[playerid][pTasimacilikSefer] > 0) MesajGonder(playerid, "Taþýmacýlýk seviyenizin %d olabilmesi için %d sefer daha yapmalýsýnýz.", PlayerData[playerid][pTasimacilikSeviye]+1, gerekensefer - PlayerData[playerid][pTasimacilikSefer]);
	    }
	}
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	if(GetPVarInt(playerid,"Logged") == 0)
	{
	    HataMesajGonder(playerid,"Þu an bunu yapamazsýn.");
	    return 0;
	}
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	new id = Car_GetID(vehicleid);
	if(id != -1)
	{
	    ParaVer(playerid, -150);
	    AracInfo[id][aracPaintjob] = paintjobid;
	    ChangeVehiclePaintjob(vehicleid, paintjobid);
	    Arac_Kaydet(id);
	}
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
    foreach(new i : Player)
    {
        if(PlayerData[i][pAdmin] >= 1 && PlayerData[i][pSpecID] == playerid)
        {
            SetPlayerInterior(i, GetPlayerInterior(playerid));
            SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(playerid));
            PlayerSpectatePlayer(i, playerid);
        }
    }
	return 1;
}
public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(response)
	{
		if(fScaleX < 0.1) fScaleX = 0.1;
		if(fScaleX > 1.5) fScaleX = 1.5;
		if(fScaleY < 0.1) fScaleY = 0.1;
		if(fScaleY > 1.5) fScaleY = 1.5;
		if(fScaleZ < 0.1) fScaleZ = 0.1;
		if(fScaleZ > 1.5) fScaleZ = 1.5;
		if(fOffsetX < -100) fOffsetX = 0;
		if(fOffsetX > 100) fOffsetX = 100;
		if(fOffsetY < -100) fOffsetY = 0;
		if(fOffsetY > 100) fOffsetY = 100;
		if(fOffsetZ < -100) fOffsetZ = 0;
		if(fOffsetZ > 100) fOffsetZ = 100;
	    AksesuarData[playerid][index][0] = fOffsetX;
	    AksesuarData[playerid][index][1] = fOffsetY;
	    AksesuarData[playerid][index][2] = fOffsetZ;
	   	AksesuarData[playerid][index][3] = fRotX;
	   	AksesuarData[playerid][index][4] = fRotY;
	    AksesuarData[playerid][index][5] = fRotZ;
	    AksesuarData[playerid][index][6] = (fScaleX > 3.0) ? (3.0) : (fScaleX);
	    AksesuarData[playerid][index][7] = (fScaleY > 3.0) ? (3.0) : (fScaleY);
		AksesuarData[playerid][index][8] = (fScaleZ > 3.0) ? (3.0) : (fScaleZ);
		AksesuarData[playerid][index][9] = boneid;
		PlayerData[playerid][pTSlot][index] = true;
		PlayerData[playerid][pASlot][index] = modelid;
        PlayerData[playerid][pABone][index] = boneid;
		AksesuarTak(playerid, index);
	    BilgiMesajGonder(playerid, "Aksesuar düzenlendi.");
	    SQL_AksesuarKaydet(playerid);
	}
	return 1;
}
stock AksesuarTak(playerid, index)
{
	if(PlayerData[playerid][pARenk][index] == 0) return SetPlayerAttachedObject(playerid,index,PlayerData[playerid][pASlot][index],PlayerData[playerid][pABone][index],AksesuarData[playerid][index][0],AksesuarData[playerid][index][1],AksesuarData[playerid][index][2],AksesuarData[playerid][index][3],AksesuarData[playerid][index][4],AksesuarData[playerid][index][5],AksesuarData[playerid][index][6],AksesuarData[playerid][index][7],AksesuarData[playerid][index][8]);
	switch(PlayerData[playerid][pARenk][index])
	{
	    case 1: SetPlayerAttachedObject(playerid,index,PlayerData[playerid][pASlot][index],PlayerData[playerid][pABone][index],AksesuarData[playerid][index][0],AksesuarData[playerid][index][1],AksesuarData[playerid][index][2],AksesuarData[playerid][index][3],AksesuarData[playerid][index][4],AksesuarData[playerid][index][5],AksesuarData[playerid][index][6],AksesuarData[playerid][index][7],AksesuarData[playerid][index][8], RGBAToARGB(0x000000FF), RGBAToARGB(0x000000FF));
	    case 2: SetPlayerAttachedObject(playerid,index,PlayerData[playerid][pASlot][index],PlayerData[playerid][pABone][index],AksesuarData[playerid][index][0],AksesuarData[playerid][index][1],AksesuarData[playerid][index][2],AksesuarData[playerid][index][3],AksesuarData[playerid][index][4],AksesuarData[playerid][index][5],AksesuarData[playerid][index][6],AksesuarData[playerid][index][7],AksesuarData[playerid][index][8], RGBAToARGB(0xFF0000FF), RGBAToARGB(0xFF0000FF));
	    case 3: SetPlayerAttachedObject(playerid,index,PlayerData[playerid][pASlot][index],PlayerData[playerid][pABone][index],AksesuarData[playerid][index][0],AksesuarData[playerid][index][1],AksesuarData[playerid][index][2],AksesuarData[playerid][index][3],AksesuarData[playerid][index][4],AksesuarData[playerid][index][5],AksesuarData[playerid][index][6],AksesuarData[playerid][index][7],AksesuarData[playerid][index][8], RGBAToARGB(0x0000BBFF), RGBAToARGB(0x0000BBFF));
	    case 4: SetPlayerAttachedObject(playerid,index,PlayerData[playerid][pASlot][index],PlayerData[playerid][pABone][index],AksesuarData[playerid][index][0],AksesuarData[playerid][index][1],AksesuarData[playerid][index][2],AksesuarData[playerid][index][3],AksesuarData[playerid][index][4],AksesuarData[playerid][index][5],AksesuarData[playerid][index][6],AksesuarData[playerid][index][7],AksesuarData[playerid][index][8], RGBAToARGB(0xFF9900FF), RGBAToARGB(0xFF9900FF));
	    case 5: SetPlayerAttachedObject(playerid,index,PlayerData[playerid][pASlot][index],PlayerData[playerid][pABone][index],AksesuarData[playerid][index][0],AksesuarData[playerid][index][1],AksesuarData[playerid][index][2],AksesuarData[playerid][index][3],AksesuarData[playerid][index][4],AksesuarData[playerid][index][5],AksesuarData[playerid][index][6],AksesuarData[playerid][index][7],AksesuarData[playerid][index][8], RGBAToARGB(0xa126edFF), RGBAToARGB(0xa126edFF));
	    case 6: SetPlayerAttachedObject(playerid,index,PlayerData[playerid][pASlot][index],PlayerData[playerid][pABone][index],AksesuarData[playerid][index][0],AksesuarData[playerid][index][1],AksesuarData[playerid][index][2],AksesuarData[playerid][index][3],AksesuarData[playerid][index][4],AksesuarData[playerid][index][5],AksesuarData[playerid][index][6],AksesuarData[playerid][index][7],AksesuarData[playerid][index][8], RGBAToARGB(0xffff00FF), RGBAToARGB(0xffff00FF));
	    case 7: SetPlayerAttachedObject(playerid,index,PlayerData[playerid][pASlot][index],PlayerData[playerid][pABone][index],AksesuarData[playerid][index][0],AksesuarData[playerid][index][1],AksesuarData[playerid][index][2],AksesuarData[playerid][index][3],AksesuarData[playerid][index][4],AksesuarData[playerid][index][5],AksesuarData[playerid][index][6],AksesuarData[playerid][index][7],AksesuarData[playerid][index][8], RGBAToARGB(0x33AA33FF), RGBAToARGB(0x33AA33FF));
	}
	return 1;
}
stock SetVehicleSpeed(vehicleid, Float:speed)
{
	new Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2, Float:a;
	GetVehicleVelocity(vehicleid, x1, y1, z1);
	GetVehiclePos(vehicleid, x2, y2, z2);
	GetVehicleZAngle(vehicleid, a); a = 360 - a;
	x1 = (floatsin(a, degrees) * (speed/100) + floatcos(a, degrees) * 0 + x2) - x2;
	y1 = (floatcos(a, degrees) * (speed/100) + floatsin(a, degrees) * 0 + y2) - y2;
	SetVehicleVelocity(vehicleid, x1, y1, z1);
}
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
     if((newkeys & KEY_FIRE) && (oldkeys & KEY_CROUCH) && !((oldkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) || (oldkeys & KEY_FIRE) && (newkeys & KEY_CROUCH) && !((newkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) )
	 {
        switch(GetPlayerWeapon(playerid))
		{
  			case 23..25, 27, 29..34, 41:
   			{
   				if(Ammo[playerid][GetPlayerWeapon(playerid)] > GetPlayerAmmo(playerid))
				{
					OnPlayerCBug(playerid);
  				}
				return 1;
 				}
     		}
        }
     if(CheckCrouch[playerid] == 1) {
		    switch(WeaponID[playerid]) {
                    case 23..25, 27, 29..34, 41: {
                        if((newkeys & KEY_CROUCH) && !((newkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK ) {
                                if(Ammo[playerid][GetPlayerWeapon(playerid)] > GetPlayerAmmo(playerid)) {
                                OnPlayerCBug(playerid);
                    		}
                        }
      				}
   				}
       }

        //if(newkeys & KEY_CROUCH || (oldkeys & KEY_CROUCH)) return 1;

        else if(((newkeys & KEY_FIRE) && (newkeys & KEY_HANDBRAKE) && !((newkeys & KEY_SPRINT) || (newkeys & KEY_JUMP))) ||
        (newkeys & KEY_FIRE) && !((newkeys & KEY_SPRINT) || (newkeys & KEY_JUMP)) ||
        (NotMoving[playerid] && (newkeys & KEY_FIRE) && (newkeys & KEY_HANDBRAKE)) ||
        (NotMoving[playerid] && (newkeys & KEY_FIRE)) ||
        (newkeys & KEY_FIRE) && (oldkeys & KEY_CROUCH) && !((oldkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) ||
        (oldkeys & KEY_FIRE) && (newkeys & KEY_CROUCH) && !((newkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) ) {
        SetTimerEx("CrouchCheck", 3000, 0, "d", playerid);
        CheckCrouch[playerid] = 1;
        WeaponID[playerid] = GetPlayerWeapon(playerid);
        Ammo[playerid][GetPlayerWeapon(playerid)] = GetPlayerAmmo(playerid);
        return 1;
        }
		static id = -1;
   		if (((newkeys & KEY_WALK && newkeys & KEY_UP) || (newkeys & KEY_WALK && newkeys & KEY_DOWN) || (newkeys & KEY_WALK && newkeys & KEY_LEFT) || (newkeys & KEY_WALK && newkeys & KEY_RIGHT))
		|| ((oldkeys & KEY_WALK && newkeys & KEY_UP) || (oldkeys & KEY_WALK && newkeys & KEY_DOWN) || (oldkeys & KEY_WALK && newkeys & KEY_LEFT) || (oldkeys & KEY_WALK && newkeys & KEY_RIGHT))
		|| ((newkeys & KEY_WALK && oldkeys & KEY_UP) || (newkeys & KEY_WALK && oldkeys & KEY_DOWN) || (newkeys & KEY_WALK && oldkeys & KEY_LEFT) || (newkeys & KEY_WALK && oldkeys & KEY_RIGHT))
		&& GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerData[playerid][pBaygin] == 0 && PlayerData[playerid][pKelepce] == 0 && PlayerData[playerid][pSoklandi] == 0 && PlayerData[playerid][pYereYatirildi] == 0 && PlayerData[playerid][pAyarlar][9] > 0 && PlayerData[playerid][pAyarlar][9] < 14 && !IsPlayerAiming(playerid))
  		walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);

	if(newkeys & KEY_YES)
	{
  		new sid = Gise_Kontrol(playerid);

		if (sid != -1)
		{
			if (PlayerData[playerid][pCash] >= GetServerBilgi("GiseUcreti"))
			{
				if (AcilDurum != 1)
				{
					if (Gise[sid][gs_Durum] == GISE_KAPALI)
					{
						Gise[sid][gs_Durum] = GISE_ACIK;

						MesajGonder(playerid, "Giþe açýldýktan sonra 3 saniye içinde kapanacaktýr.");

						ParaVer(playerid, -GetServerBilgi("GiseUcreti"));
						MoveDynamicObject(Gise[sid][gs_Obje], Gise[sid][gs_Acik][0], Gise[sid][gs_Acik][1], Gise[sid][gs_Acik][2], 5.0,  Gise[sid][gs_Acik][3], Gise[sid][gs_Acik][4], Gise[sid][gs_Acik][5]);
						return 1;
					}
				}
			}
		}
	    if ((id = Entrance_Nearest(playerid)) != -1)
        {
            if(PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Yaralý olduðunuz için binaya giremezsiniz!");
            if (EntranceData[id][entranceLocked]) return HataMesajGonder(playerid, "Bu bina kilitli.");
			if(strfind(EntranceData[id][entranceName], "VIP", true) != -1 && PlayerData[playerid][pVip] < 1) return HataMesajGonder(playerid, "Buraya girmek için vip olmalýsýnýz. (/oocmarket)");
			if(!strlen(EntranceData[id][entrancePass]))
			{
				SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kapýyý açar ve '%s' adlý binaya girer.", ReturnName(playerid, 0), EntranceData[id][entranceName]);
	   			SetPlayerPos(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
				SetPlayerFacingAngle(playerid, EntranceData[id][entranceInt][3]);
				if(EntranceData[id][entranceInteriorVw] != -1) SetPlayerVirtualWorld(playerid, EntranceData[id][entranceInteriorVw]);
	            else SetPlayerVirtualWorld(playerid, id+100);
				if(EntranceData[id][entranceBaglanti] != -1)
				{
				    SetPlayerVirtualWorld(playerid, EntranceData[id][entranceBaglanti]+23);
				    SetPlayerInterior(playerid, 0);
				    PlayerData[playerid][pGarage] = EntranceData[id][entranceBaglanti];
				}
				else
				{
					SetPlayerInterior(playerid, EntranceData[id][entranceInterior]);
				}
				SetCameraBehindPlayer(playerid);
				ObjelerYukleniyor(playerid);
			}
			else
			{
			    SetPVarInt(playerid, "binaid", id);
			    ShowPlayerDialog(playerid, 22, DIALOG_STYLE_INPUT, "Bina Þifre", "Bu bina için þifre belirlenmiþ, lütfen þifreyi girin:", "Devam", "Kapat");
			}
			return 1;
		}
		if ((id = Entrance_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]))
		{
		    if(PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Yaralý olduðunuz için binadan çýkamazsýnýz.");
		    if(EntranceData[id][entranceLocked]) return HataMesajGonder(playerid, "Bu bina kilitli.");
		    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kapýyý açar ve '%s' adlý binadan çýkar.", ReturnName(playerid, 0), EntranceData[id][entranceName]);
		    SetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
		    SetPlayerFacingAngle(playerid, EntranceData[id][entrancePos][3]);
			PlayerData[playerid][pGarage] = -1;
            SetPlayerInterior(playerid, EntranceData[id][entranceExterior]);
            SetPlayerVirtualWorld(playerid, EntranceData[id][entranceExteriorVW]);
			ObjelerYukleniyor(playerid);
            SetCameraBehindPlayer(playerid);
            return 1;
		}
    	if ((id = House_Nearest(playerid)) != -1)
     	{
     	    if(PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Yaralý olduðunuz için eve giremezsiniz.");
      		if(house_info[id][evKilit] == 1) return HataMesajGonder(playerid,"Bu ev kilitlenmiþ.");
      		if(house_info[id][evSahip] > 0) SendClientMessageEx(playerid, -1, "{2ECC71}Ev: {FFFFFF}Bu evin sahibi {AFAFAF}%s.", SQLName(house_info[id][evSahip], 0));
      		SendClientMessageEx(playerid, -1, "{2ECC71}Ev: {FFFFFF}Sistemsel Fiyat: {AFAFAF}%s {FFFFFF}Vergi: {AFAFAF}%s/%s {FFFFFF}Saatlik Vergi: {AFAFAF}%s", FormatNumber(house_info[id][evKendiFiyati]), FormatNumber(house_info[id][evVergi]), FormatNumber(Ev_MaksVergi(id)), FormatNumber(GetHouseVergi(id)));
        	SetPlayerInterior(playerid, HouseInteriors[ house_info[id][evInterior] ][intID]);
  			SetPlayerPos(playerid, HouseInteriors[house_info[id][evInterior] ][intX], HouseInteriors[ house_info[id][evInterior] ][intY], HouseInteriors[ house_info[id][evInterior] ][intZ]);
          	SetPlayerVirtualWorld(playerid,house_info[id][evID]+1);
           	ObjelerYukleniyor(playerid);
            SetCameraBehindPlayer(playerid);
            PlayerData[playerid][pHouse] = house_info[id][evID];
            return 1;
      	}
       	if ((id = House_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, HouseInteriors[house_info[id][evInterior] ][intX], HouseInteriors[house_info[id][evInterior] ][intY], HouseInteriors[house_info[id][evInterior] ][intZ]))
   		{
   		    if(PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Yaralý olduðunuz için evden çýkamazsýnýz.");
     		if(house_info[id][evKilit] == 1) return HataMesajGonder(playerid,"Bu ev kilitlenmiþ.");
       		SetPlayerPos(playerid,house_info[id][evPos][0],house_info[id][evPos][1],house_info[id][evPos][2]);
         	SetPlayerInterior(playerid,0);
          	SetPlayerVirtualWorld(playerid,0);
           	ObjelerYukleniyor(playerid);
            SetCameraBehindPlayer(playerid);
            PlayerData[playerid][pHouse] = -1;
            SonMobilyaID[playerid] = -1;
            return 1;
     	}
      	if ((id = Business_Nearest(playerid)) != -1)
       	{
       	    if(PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Yaralý olduðunuz için iþyerine giremezsiniz.");
        	if(Isyeri[id][isyeriKilit]) return HataMesajGonder(playerid,"Bu iþyeri kilitli.");
         	if(Isyeri[id][isyeriGirisUcret] > 0 && Isyeri[id][isyeriSahip] != PlayerData[playerid][pID])
          	{
           		if(PlayerData[playerid][pCash] < Isyeri[id][isyeriGirisUcret]) return HataMesajGonder(playerid,"Giriþ Ücretini ödemek için yeterli paranýz bulunmuyor.");
             	Isyeri[id][isyeriKasa] += Isyeri[id][isyeriGirisUcret];
              	ParaVer(playerid,-Isyeri[id][isyeriGirisUcret]);
			}
			if(Isyeri[id][isyeriTip] == 6 && strlen(Isyeri[id][isyeriMuzik]) > 0)
			{
				    PlayAudioStreamForPlayer(playerid, Isyeri[id][isyeriMuzik]);
			}
			SetPlayerPos(playerid,Isyeri[id][isyeriInt][0],Isyeri[id][isyeriInt][1],Isyeri[id][isyeriInt][2]);
			SetPlayerFacingAngle(playerid,Isyeri[id][isyeriInt][3]);
			SetPlayerInterior(playerid,Isyeri[id][isyeriInterior]);
			SetPlayerVirtualWorld(playerid,Isyeri[id][isyeriID]+1);
			SendNearbyMessage(playerid, 20.0, COLOR_CYAN, "** %s kapýyý aralar ve '%s' adlý iþyerine girer.", ReturnName(playerid, 0), Isyeri[id][isyeriName]);
			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pIsyeri] = Isyeri[id][isyeriID];
			ObjelerYukleniyor(playerid);
			if(Isyeri[id][isyeriTip] != 7) SendClientMessage(playerid,-1,"{2ECC71}Ýþyeri: {FFFFFF}Birþeyler satýn almak için {2ECC71}'/satinal' {FFFFFF}komutunu kullanabilirsiniz.");
			else SendClientMessage(playerid,-1,"{2ECC71}Ýþyeri: {2ECC71}/kumar {FFFFFF}komutunu ile kumar oynayabilirsiniz.");
			if(strlen(Isyeri[id][isyeriMesaj]) && strcmp(Isyeri[id][isyeriMesaj], "Yok", true)) {
   			SendClientMessage(playerid, 0x1394BFFF, Isyeri[id][isyeriMesaj]); }

		}
		if((id = Garage_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 3.0, GarageInteriors[GarageData[id][gInterior]][intX], GarageInteriors[GarageData[id][gInterior]][intY], GarageInteriors[GarageData[id][gInterior]][intZ]))
		{
		    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    {
			    new vehicleid = GetPlayerVehicleID(playerid);
	    	    SetVehiclePos(vehicleid, GarageData[id][gPos][0], GarageData[id][gPos][1], GarageData[id][gPos][2]);
	    	    SetVehicleVirtualWorld(vehicleid, GarageData[id][gVw]);
	    	    LinkVehicleToInteriorEx(vehicleid, 0);
	      		SetPlayerInterior(playerid, 0);
	       		SetPlayerVirtualWorld(playerid, GarageData[id][gVw]);
	    	    ObjelerYukleniyor(playerid);
	    	    PlayerData[playerid][pGarage] = -1;
	    	    foreach(new i:Player)
	    	    {
		        	if(IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) != 128 && GetPlayerVehicleSeat(i) != 0)
	 	        	{
	           			SetPlayerPos(i,GarageData[id][gPos][0], GarageData[id][gPos][1], GarageData[id][gPos][2]);
	           			SetPlayerInterior(i, 0);
	           			SetPlayerVirtualWorld(i, GarageData[id][gVw]);
	           			SetCameraBehindPlayer(i);
	           			PutPlayerInVehicle(i, vehicleid, GetPlayerVehicleSeat(i));
	           			ObjelerYukleniyor(i);
	  	        	}
	    	    }
    	    }
    	    else
    	    {
         		SetPlayerPos(playerid, GarageData[id][gPos][0], GarageData[id][gPos][1], GarageData[id][gPos][2]);
	      		SetPlayerInterior(playerid, 0);
	       		SetPlayerVirtualWorld(playerid, GarageData[id][gVw]);
	        	SetCameraBehindPlayer(playerid);
	        	ObjelerYukleniyor(playerid);
	        	PlayerData[playerid][pGarage] = -1;
    	    }
    	    return 1;
		}
		if((id = Garage_Nearest(playerid)) != -1)
		{
		    if(PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Yaralý olduðunuz için garaja giremezsiniz.");
        	if(GarageData[id][gKilit] == 1) return HataMesajGonder(playerid,"Garaj kilitli.");
        	if(GarageData[id][gBirlik] != -1 && PlayerData[playerid][pFaction] != GarageData[id][gBirlik]) return HataMesajGonder(playerid, "Bu garaj birliðe özeldir.");
        	if(!strcmp(GarageData[id][gSifre], "Yok", true))
        	{
  	    		if(!IsPlayerInAnyVehicle(playerid))
             	{
              		SetPlayerPos(playerid,GarageInteriors[GarageData[id][gInterior]][intX],GarageInteriors[GarageData[id][gInterior]][intY],GarageInteriors[GarageData[id][gInterior]][intZ]);
                	SetPlayerInterior(playerid,GarageInteriors[GarageData[id][gInterior]][intID]);
                 	SetPlayerVirtualWorld(playerid, id+23);
                 	ObjelerYukleniyor(playerid);
                  	SetPlayerFacingAngle(playerid,GarageInteriors[GarageData[id][gInterior]][intA]);
                   	SetCameraBehindPlayer(playerid);
                   	PlayerData[playerid][pGarage] = id;
              	}
              	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
              	{
              	    new vehicleid = GetPlayerVehicleID(playerid);
              	    SetVehiclePos(vehicleid, GarageInteriors[GarageData[id][gInterior]][intX],GarageInteriors[GarageData[id][gInterior]][intY],GarageInteriors[GarageData[id][gInterior]][intZ]+1);
              	    SetVehicleVirtualWorld(vehicleid, id+23);
              	    LinkVehicleToInteriorEx(vehicleid, GarageInteriors[GarageData[id][gInterior]][intID]);
              	    SetVehicleZAngle(vehicleid, GarageInteriors[GarageData[id][gInterior]][intA]);
              	    SetPlayerPos(playerid,GarageInteriors[GarageData[id][gInterior]][intX],GarageInteriors[GarageData[id][gInterior]][intY],GarageInteriors[GarageData[id][gInterior]][intZ]);
                	SetPlayerInterior(playerid,GarageInteriors[GarageData[id][gInterior]][intID]);
                 	SetPlayerVirtualWorld(playerid, id+23);
                  	SetPlayerFacingAngle(playerid,GarageInteriors[GarageData[id][gInterior]][intA]);
                   	SetCameraBehindPlayer(playerid);
              	    PutPlayerInVehicle(playerid, vehicleid, 0);
              	    ObjelerYukleniyor(playerid);
              	    PlayerData[playerid][pGarage] = id;
              	    foreach(new i:Player)
              	    {
              	        if(IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) != 128 && GetPlayerVehicleSeat(i) != 0)
						{
						    SetPlayerPos(i,GarageInteriors[GarageData[id][gInterior]][intX],GarageInteriors[GarageData[id][gInterior]][intY],GarageInteriors[GarageData[id][gInterior]][intZ]);
                			SetPlayerInterior(i,GarageInteriors[GarageData[id][gInterior]][intID]);
                 			SetPlayerVirtualWorld(i, id+23);
                  			SetPlayerFacingAngle(i,GarageInteriors[GarageData[id][gInterior]][intA]);
                   			SetCameraBehindPlayer(i);
                   			PutPlayerInVehicle(i, vehicleid, GetPlayerVehicleSeat(i));
                   			ObjelerYukleniyor(i);
                   			PlayerData[i][pGarage] = id;
              	        }
              	    }
              	}
            }
            else
            {
                SetPVarInt(playerid, "Garaj", id);
                Dialog_Show(playerid, GarajGiris, DIALOG_STYLE_INPUT, "Garaj Þifre", "Bu garaj þifreli, lütfen þifreyi giriniz:", "Tamam", "Kapat");
            }
            return 1;
		}
		if ((id = Business_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, Isyeri[id][isyeriInt][0], Isyeri[id][isyeriInt][1], Isyeri[id][isyeriInt][2]))
	    {
	        if(PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Yaralý olduðunuz için iþyerinden çýkamazsýnýz.");
			SetPlayerPos(playerid, Isyeri[id][isyeriPos][0], Isyeri[id][isyeriPos][1], Isyeri[id][isyeriPos][2]);
			SetPlayerFacingAngle(playerid, Isyeri[id][isyeriPos][3] - 180.0);

			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			ObjelerYukleniyor(playerid);
			if (Isyeri[id][isyeriTip] == 6)	StopAudioStreamForPlayer(playerid);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pIsyeri] = -1;
			return 1;
		}
	    if(IsPlayerInAnyVehicle(playerid) && Garage_Nearest(playerid) == -1)
     	{
     	    if(Garage_Inside(playerid) != -1 && IsPlayerInRangeOfPoint(playerid, 3.0, GarageInteriors[GarageData[PlayerData[playerid][pGarage]][gInterior]][intX], GarageInteriors[GarageData[PlayerData[playerid][pGarage]][gInterior]][intY], GarageInteriors[GarageData[PlayerData[playerid][pGarage]][gInterior]][intZ])) return 1;
      		callcmd::motor(playerid);
      	}
	}
	else if(newkeys & KEY_LOOK_BEHIND && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsEngineVehicle(GetPlayerVehicleID(playerid)))
	{
	    callcmd::afarlar(playerid);
	}
	else if (newkeys & KEY_CROUCH)
	{
	    if ((id = Gate_Nearest(playerid)) != -1)
		{
		    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1  || PlayerData[playerid][pSoklandi] > 0) return HataMesajGonder(playerid, "Bunu þu an yapamazsýnýz.");
		    callcmd::kapi(playerid);
		}
	}
	else if(newkeys & KEY_WALK)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, 1404.3395,-1301.0625,13.5454))
	    {
	        if(GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_LSMD || GetFactionType(playerid) == BIRLIK_FBI) return HataMesajGonder(playerid, "Bu oluþum türü silah alamaz.");
	        Dialog_Show(playerid, SilahTuccari, DIALOG_STYLE_LIST, "Silah/Mermi Tüccarý","{AFAFAF}» {FFFFFF}Silah Satýn Al\n{AFAFAF}» {FFFFFF}Mermi Satýn Al\n{AFAFAF}» {FFFFFF}Þarjör Satýn Al", "Seç", "Kapat");
	    }
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, -1100.6758,-1621.0950,76.3672))
	    {
	        Dialog_Show(playerid, Ciftci, DIALOG_STYLE_TABLIST, "Çiftçi", "{FFFFFF}Portakal Tohumu Al\t{2ECC71}$20\nElma Tohumu Al\t{2ECC71}$25\nArmut Tohumu Al\t{2ECC71}$30\n{AFAFAF}» {FFFFFF}Meyveleri Sat", "Seç", "Kapat");
	        return 1;
	    }
      if(IsPlayerInRangeOfPoint(playerid, 3.0, 1240.0562,5301.6147,50.3004))
      {
          Dialog_Show(playerid, , DIALOG_STYLE_MSGBOX, "Gardiyan", "{FF0000}» {FFFFFF}Yaptýðýn hatalar yüzünden cezalandýrýldýn ama sana yönetici bir þans daha verdi\n Labirent oyununu bitirince özgür kalacaksýn iyi þanslar...", "Tamam", "Kapat");
          return 1;
      }
      if(IsPlayerInRangeOfPoint(playerid, 3.0, 1358.4274,5212.8857,50.3004))
      {
          Dialog_Show(playerid, Labitent, DIALOG_STYLE_MSGBOX, "Gardiyan", "{FF0000}» {FFFFFF}Tebrikler bu zorlu labirenti bitirdin sana $5000 ödül ve özgürlüðün.", "Tamam", "Kapat");
          return 1;
      }
	    new dealerid = GetClosestDealer(playerid);
	    if(dealerid != -1)
	    {
	        if(PlayerData[playerid][pFaction] == -1 || Birlikler[PlayerData[playerid][pFaction]][birlikOnaylar][2] == 0) return HataMesajGonder(playerid, "Uyuþturucu onaylý bir birliðin üyesi deðilsiniz!");
	        PlayerDrugData[playerid][DealerID] = dealerid;
			ShowDealerMenu(playerid);
	    }
	    if(GetClosestATM(playerid) != -1)
	    {
	        SetPVarInt(playerid, "usingATM", 1);
			Bank_ShowMenu(playerid);
	    }
	    if(IsPlayerNearBanker(playerid))
	    {
	        SetPVarInt(playerid, "usingATM", 0);
			Bank_ShowMenu(playerid);
	    }
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, 1457.8317,-1777.6063,1815.9910) && GetPlayerVirtualWorld(playerid) == 100)
	    {
	        if(GetTicketCount(playerid) > 0) return HataMesajGonder(playerid, "Devlet hizmetlerinden yararlanmak için PD binasýndan kiþisel cezanýzý ödemelisiniz.");
	        Dialog_Show(playerid, HukumetBinasi, DIALOG_STYLE_LIST, "{FFFFFF}Hükümet Binasý", "{FFFFFF}Araç Vergisi Sorgula\n{FFFFFF}Ýþyeri Vergisi Sorgula\n{FFFFFF}Ev Vergisi Sorgula\n{FFFFFF}Boþanma Ýþlemleri {2ECC71}($1500)\n{FFFFFF}Maaþ Çek {2ECC71}(%s)\n{FFFFFF}Sigorta Yap {2ECC71}($3000)", "Seç", "Kapat",FormatNumber(PlayerData[playerid][pMaas]));
	    }
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, 1462.7961,-1682.5978,-70.0371))
	    {
	        Dialog_Show(playerid, LSPD, DIALOG_STYLE_LIST, "{C9A527}LSPD Halkla Ýliþkiler", "{FFFFFF}Kiþisel Cezalar\n{FFFFFF}Araç Cezalarý\n{FFFFFF}Haczedilen Araçlarým\n{FFFFFF}Kefalet Öde\n{FFFFFF}Memur Çaðýr", "Seç", "Kapat");
	    }
	    new npc = NPC_Nearest(playerid);
	    if(npc != -1)
	    {
	        new str[750], count;
		    for(new i; i<MAX_SECENEK; i++) if(strcmp(NPCSecenekler[npc][i], "Yok", true) != 0)
		    {
		        count++;
				format(str, sizeof(str), "%s{FFFFFF}%s\n", str, NPCSecenekler[npc][i]);
		    }
		    SetPVarInt(playerid, "NPCEtkilesimID", npc);
		    if(count > 0) Dialog_Show(playerid, NPCEtkilesim, DIALOG_STYLE_LIST, "Etkileþim", str, "Seç", "Kapat");
	    }
	}
	else if (newkeys & KEY_NO)
	{
     	if(HasTrash[playerid] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			Trash_ResetPlayer(playerid);
			SendClientMessage(playerid, 0x2ECC71FF, "ÇÖPÇÜLÜK: {FFFFFF}Çöp torbasýný sildiniz.");
		}
	    if(PlayerData[playerid][pMangalKuruldu] == true && PlayerData[playerid][pPisirilenYemek] > 0 && PlayerData[playerid][pYemekPisiriliyor] == 1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
	        new Float:pos[3];
	        GetDynamicObjectPos(PlayerData[playerid][pMangalObject][0], pos[0], pos[1], pos[2]);
	        if(IsPlayerInRangeOfPoint(playerid, 4.0, pos[0], pos[1], pos[2]))
	        {
	            SetPVarInt(playerid, "PisirilenYemek", PlayerData[playerid][pPisirilenYemek]);
	            PlayerData[playerid][pPisirilenYemek] = 0;
	            PlayerData[playerid][pYemekPisiriliyor] = 0;
	            Dialog_Show(playerid, BarbekuYemek, DIALOG_STYLE_INPUT, "Barbekü", "{ff0000}» {FFFFFF}Yemeði vermek istediðiniz oyuncunun ID'sini girin (Kendi ID'nizi yazarsanýz siz yersiniz ID: %d):", "Ver", "Kapat", playerid);
	        }
	        return 1;
	    }
        if(GetPlayerWeapon(playerid) == WEAPON_CHAINSAW && CuttingTreeID[playerid] == -1 && !CarryingLog[playerid] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
		    id = GetClosestTree(playerid);

		    if(id != -1)
		    {
		        if(!Tree_BeingEdited(id) && !TreeData[id][treeGettingCut] && TreeData[id][treeSeconds] < 1)
				{
		            SetPlayerLookAt(playerid, TreeData[id][treeX], TreeData[id][treeY]);

		            Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, TreeData[id][treeLabel], E_STREAMER_COLOR, 0xE74C3CFF);
		            CuttingTimer[playerid] = SetTimerEx("CutTree", 1000, true, "i", playerid);
					CuttingTreeID[playerid] = id;
					SetPlayerProgressBarValue(playerid, CuttingBar[playerid], 0.0);
					ShowPlayerProgressBar(playerid, CuttingBar[playerid]);
					TogglePlayerControllable(playerid, 0);
					SetPlayerArmedWeapon(playerid, WEAPON_CHAINSAW);
					ApplyAnimation(playerid, "CHAINSAW", "WEAPON_csaw", 4.1, 1, 0, 0, 1, 0, 1);

					TreeData[id][treeGettingCut] = true;
		        }
		        return 1;
		    }

	    }
		if(CarryingOre[playerid] != -1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
		    id = Ore_FindFreeID();
			if(id != -1)
			{
			    if(Player_GetClosestOre(playerid, 1.5) != -1) return HataMesajGonder(playerid,  "Cevherinizi buraya býrakamazsýnýz.");
			    new label[48], type = CarryingOre[playerid], Float: x, Float: y, Float: z, Float: a;
			    GetPlayerPos(playerid, x, y, z);
			    GetPlayerFacingAngle(playerid, a);
			    x += (1.25 * floatsin(-a, degrees));
				y += (1.25 * floatcos(-a, degrees));

			    DroppedOres[id][Type] = type;
				DroppedOres[id][OreTimer] = SetTimerEx("Ore_Destroy", ORE_TIME * 60000, false, "i", id);
			    DroppedOres[id][OreObject] = CreateDynamicObject(3929, x, y, z - 0.65, 0.0, 0.0, random(360));
		  		SetDynamicObjectMaterial(DroppedOres[id][OreObject], 0, 2936, "kmb_rckx", "larock256", RGBAToARGB(OreData[type][Color]));
				format(label, sizeof(label), "%s Cevher\n{FFFFFF}\n\n/cevher al", OreData[type][Name]);
		  		DroppedOres[id][OreLabel] = CreateDynamic3DTextLabel(label, OreData[type][Color], x, y, z, 5.0, .testlos = 1);
			    DroppedOres[id][OreExists] = true;
			    ApplyAnimation(playerid, "CARRY", "putdwn05", 4.1, 0, 1, 1, 0, 0, 1);
				Player_CleanUp(playerid, 1);
			}
			return 1;

		}
		new pns = IsPlayerNearPNS(playerid);
		if(pns != -1 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new Float:vHealth, vid = Car_GetID(GetPlayerVehicleID(playerid));
			GetVehicleHealth(GetPlayerVehicleID(playerid), vHealth);
			if(vid == -1) return HataMesajGonder(playerid, "Bu aracý tamir edemezsiniz.");
			if(vHealth >= 999) return HataMesajGonder(playerid, "Bu aracýn tamire ihtiyacý yok.");
			if(PlayerData[playerid][pCash] < GetServerBilgi("TamirciUcret")) return HataMesajGonder(playerid, "Yeterli paranýz yok.");
			ParaVer(playerid, -GetServerBilgi("TamirciUcret"));
			SetPVarInt(playerid, "pnsID", pns);
			SetVehiclePos(GetPlayerVehicleID(playerid), PayNSpray[pns][3], PayNSpray[pns][4], PayNSpray[pns][5]);
			TogglePlayerControllable(playerid, false);
			SetTimerEx("TamirExit", 6000, false, "ii", playerid, GetPlayerVehicleID(playerid));
			return 1;
		}
	}
	if (newkeys & KEY_FIRE && PlayerData[playerid][pDrinking])
	{
	    if (GetPlayerAnimationIndex(playerid) != 15 && GetPlayerAnimationIndex(playerid) != 16)
	    {
	        if(GetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar]) >= 100.0)
	        {
	            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				DestroyPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);

				PlayerData[playerid][pDrinking] = 0;
				MesajGonder(playerid, "Suyunuz bitti.");
	        }
		}
		else
		{
			 if(!spamProtect(playerid,"DrinkTime",2)) return 1;
 			 SetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar], GetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar]) + 10.0);
		}
	}
	if (newkeys & KEY_SPRINT && IsPlayerSpawnedEx(playerid) && PlayerData[playerid][pLoopAnim] && PlayerData[playerid][pBaygin] == 0)
    {
        ClearAnimations(playerid);

        StopLoopingAnim(playerid);
    }
	if((newkeys == KEY_SPRINT || newkeys == KEY_JUMP) && PlayerData[playerid][pTopallama] == true && PlayerData[playerid][pBaygin] == 0)
	{
	    ApplyAnimation(playerid, "PED", "FALL_COLLAPSE", 4.0, 0, 1, 1, 0, 500, 1);
	    ApplyAnimation(playerid, "PED", "FALL_COLLAPSE", 4.0, 0, 1, 1, 0, 500, 1);

	}

	return 1;
}
stock NPC_Nearest(playerid)
{
	for(new i; i<MAXIMUM_NPC; i++) if(NPCBilgi[i][npcExists] == true && GetPlayerDistanceFromPoint(playerid, NPCBilgi[i][npcPos][0], NPCBilgi[i][npcPos][1], NPCBilgi[i][npcPos][2]) < 4.0)
 	{
  		return i;
  	}
   	return -1;
}
forward AskBot(playerid,response_code,data[]);
public AskBot(playerid,response_code,data[])
{

    if(response_code == 200)
    {
        new buffer[300];
        format(buffer,sizeof(buffer),RED BOT_NAME WHITE"(bot): %s",data);
        SendClientMessage(playerid, -1, buffer);
    }
    else if(response_code == HTTP_ERROR_CANT_CONNECT)
    {
        print("[UYARI] BOT Sunucusuna baðlanýlamýyor lütfen baðlantýlarý kontrol edin.");
        SendClientMessage(playerid,-1,RED BOT_NAME" {FFFFFF}Ýsimli destek botu bakýmda lütfen daha sonra tekrar deneyiniz!");
    }
    else
    {
        SendClientMessage(playerid,-1,RED BOT_NAME  WHITE"(bot): Sorununuzu tam anlayamadým lütfen daha açýklayýcý anlatýn?");
        printf("[Bilinmeyen Kelime] %d",response_code);
    }
    return 1;
}
forward WalkAnim(playerid);
public  WalkAnim(playerid)
{
	new keys, updown, leftright;
	GetPlayerKeys(playerid,keys,updown,leftright);
	if (GetPlayerWalkingStyle(playerid) == WALK_NORMAL)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_player",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_PED)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_civi",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
 	else if (GetPlayerWalkingStyle(playerid) == WALK_GANGSTA)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_gang1",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_GANGSTA2)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_gang2",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_OLD)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_old",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_FAT_OLD)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_fatold",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_FAT)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_fat",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_LADY)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_LADY2)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_WHORE)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_WHORE2)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_DRUNK)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_drunk",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_BLIND)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","Walk_Wuzi",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	return 1;
}
stock GetPlayerWalkingStyle(playerid)
{
	return PlayerData[playerid][pAyarlar][9];
}
public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}
stock IsPlayerRunning(playerid)
{
    if(!IsPlayerConnected(playerid)) return 0;
    if(IsPlayerInAnyVehicle(playerid)) return 0;
    new keys, updown, leftright;
    GetPlayerKeys(playerid, keys, updown, leftright);
    if(keys & KEY_SPRINT) return 1;
    return 0;
}
stock IsPlayerAiming(playerid)
{
    new anim = GetPlayerAnimationIndex(playerid);
    if (((anim >= 1160) && (anim <= 1163)) || (anim == 1167) || (anim == 1365) ||
    (anim == 1643) || (anim == 1453) || (anim == 220)) return 1;
    return 0;
}
stock GetMoveDirectionFromKeys(ud, lr)
{
	new direction = 0;

    if(lr < 0)
	{
		if(ud < 0) 		direction = MOVE_FORWARD_LEFT; 	// Up & Left key pressed
		else if(ud > 0) direction = MOVE_BACK_LEFT; 	// Back & Left key pressed
		else            direction = MOVE_LEFT;          // Left key pressed
	}
	else if(lr > 0) 	// Right pressed
	{
		if(ud < 0)      direction = MOVE_FORWARD_RIGHT;  // Up & Right key pressed
		else if(ud > 0) direction = MOVE_BACK_RIGHT;     // Back & Right key pressed
		else			direction = MOVE_RIGHT;          // Right key pressed
	}
	else if(ud < 0) 	direction = MOVE_FORWARD; 	// Up key pressed
	else if(ud > 0) 	direction = MOVE_BACK;		// Down key pressed

	return direction;
}
forward OnPlayerCBug(playerid);
public OnPlayerCBug(playerid)
{
	SetPlayerArmedWeapon(playerid, 0);
	TogglePlayerControllable(playerid, false);
	SetTimerEx("CbugUnfreeze", 500, false, "i", playerid);
 	ShowTextDrawMessage(playerid, "C-BUG ~r~Yasak!", TEXTDRAW_TYPE_MSG, 1500);
	return 1;
}
forward CbugUnfreeze(playerid);
public CbugUnfreeze(playerid)
{
    TogglePlayerControllable(playerid, true);
	return 1;
}
forward CrouchCheck(playerid);
public CrouchCheck(playerid) {
        CheckCrouch[playerid] = 0;
        return 1;
}
Float:GetVehSpeed(vid)
{
    new Float:vx, Float:vy, Float:vz, Float:vel;
	vel = GetVehicleVelocity(vid, vx, vy, vz);
	vel = (floatsqroot(((vx*vx)+(vy*vy))+(vz*vz))* 181.5);
	return vel;
}
public OnPlayerUpdate(playerid)
{
        new keys, ud, lr;
        GetPlayerKeys(playerid, keys, ud, lr);
        if(CheckCrouch[playerid] == 1) {
                switch(WeaponID[playerid]) {
                    case 23..25, 27, 29..34, 41: {
                        if((keys & KEY_CROUCH) && !((keys & KEY_FIRE) || (keys & KEY_HANDBRAKE)) && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK ) {
                                if(Ammo[playerid][GetPlayerWeapon(playerid)] > GetPlayerAmmo(playerid)) {
                                                OnPlayerCBug(playerid);
                                        }
                        }
                    }
                }
        }

        new
                  s_iVehicle
          ;

          s_iVehicle = GetPlayerVehicleID( playerid );

          if ( g_fSpeedCap[ playerid ][ s_iVehicle ] != 0.0 && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
          {
                  if ( s_iVehicle )
                  {
                          new
                                  Float:s_fX,
                                  Float:s_fY,
                                  Float:s_fZ,
                                  Float:s_fVX,
                                  Float:s_fVY,
                                  Float:s_fVZ
                          ;

                          GetVehiclePos( s_iVehicle, s_fX, s_fY, s_fZ );
                          GetVehicleVelocity( s_iVehicle, s_fVX, s_fVY, s_fVZ );

                          if ( GetVehSpeed(GetPlayerVehicleID(playerid)) >  g_fSpeedCap[ playerid ][ s_iVehicle ])
                          {
                                  SetVehicleSpeed(GetPlayerVehicleID(playerid), g_fSpeedCap[ playerid ][ s_iVehicle ] / 2);
  						}
                  }
          }

	if(!ud && !lr) { NotMoving[playerid] = 1; }
 		else { NotMoving[playerid] = 0; }

	new drunknew;
    drunknew = GetPlayerDrunkLevel(playerid);

    if (drunknew < 100) { // go back up, keep cycling.
        SetPlayerDrunkLevel(playerid, 2000);
    } else {

        if (pDrunkLevelLast[playerid] != drunknew) {

            new wfps = pDrunkLevelLast[playerid] - drunknew;

            if ((wfps > 0) && (wfps < 200))
                pFPS[playerid] = wfps;

            pDrunkLevelLast[playerid] = drunknew;
        }

    }
    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK && PlayerData[playerid][pAdmin] < 1)
	{
 		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if((GetPlayerWeapon(playerid) == 18 || GetPlayerWeapon(playerid) == 35 || GetPlayerWeapon(playerid) == 36 || GetPlayerWeapon(playerid) == 37 || GetPlayerWeapon(playerid) == 38 || GetPlayerWeapon(playerid) == 39) && PlayerData[playerid][pAdmin] < 1 && pbOda[playerid] == -1)
	{
	    AdminMessage(COLOR_LIGHTRED, "AdmLog: %s adlý oyuncu yasaklý silah kullanýmý sebebiyle sistem tarafýndan yasaklandý. (Silah: %s)", ReturnDate(), Player_GetName(playerid), ReturnWeaponName(GetPlayerWeapon(playerid)));
	    ResetWeapons(playerid);
	    AddBan(GetIP(playerid), Player_GetName(playerid), "", "Sistem", 0, "Silah Hilesi");
	    Kick(playerid);
	}
	if(PlayerData[playerid][pTaxiPlayer] != -1 && PlayerData[PlayerData[playerid][pTaxiPlayer]][pTaxiDuty] == true && CarUpdate[GetPlayerVehicleID(playerid)] < tickcount())
	{
 		new id = Car_GetID(GetPlayerVehicleID(playerid));
   		new driverid = GetVehicleDriver(GetPlayerVehicleID(playerid));
	    if(floatround(PlayerData[playerid][pTaksiUcret]) >= PlayerData[playerid][pCash])
		{
                LeaveTaxi(playerid, driverid);
                RemovePlayerFromVehicle(playerid);
                MesajGonder(driverid, "Yolcunun taksi ücretini ödeyecek parasý olmadýðý için taksiden indirdin.");
                BilgiMesajGonder(playerid, "Taksi ücretini ödeyecek paran olmadýðý için taksiden indin.");
  		}
     	else
      	{
                new Float:distance = GetVehicleDistanceFromPoint(GetPlayerVehicleID(playerid), TaxiLastPos[GetPlayerVehicleID(playerid)][0], TaxiLastPos[GetPlayerVehicleID(playerid)][1], TaxiLastPos[GetPlayerVehicleID(playerid)][2]);
                if(distance > 0)
				{
				    PlayerData[playerid][pTaksiUcret] += AracInfo[id][Taksimetre] * 0.01;
				    GetVehiclePos(GetPlayerVehicleID(playerid), TaxiLastPos[GetPlayerVehicleID(playerid)][0], TaxiLastPos[GetPlayerVehicleID(playerid)][1], TaxiLastPos[GetPlayerVehicleID(playerid)][2]);
				}
                new str[30];
                format(str, sizeof(str), "$%d (%s/km)", floatround(PlayerData[playerid][pTaksiUcret]), FormatNumber(AracInfo[id][Taksimetre]));
                PlayerTextDrawSetString(playerid, TaxiTD[playerid][1], str);
                PlayerTextDrawSetString(driverid, TaxiTD[driverid][1], str);
       }
	}
	if(NetStats_GetConnectedTime(playerid) - WeaponTick[playerid] >= 250)
	{
	    new weaponid = PlayerData[playerid][pSilahlar][1];
	    switch(weaponid)
	    {
	        case 3:
	        {
	            if(GetPlayerWeapon(playerid) != 3)
	            {
					SetPlayerAttachedObject(playerid, 5, 334, 1, -0.309999, 0.098999, -0.336000, -8.099987, -88.599998, -14.699998, 1.000000, 1.000000, 1.000000);
	            }
	            else
	            {
	                if(IsPlayerAttachedObjectSlotUsed(playerid, 5)) RemovePlayerAttachedObject(playerid, 5);
	            }
	        }
	        case 5:
	        {
	            if(GetPlayerWeapon(playerid) != 5)
	            {
	                SetPlayerAttachedObject(playerid, 5, 336, 1, -0.022999, -0.157999, -0.013999, 2.300014, 54.599956, -4.300000, 1.000000, 1.000000, 1.000000);
	            }
	            else
	            {
	                if(IsPlayerAttachedObjectSlotUsed(playerid, 5)) RemovePlayerAttachedObject(playerid, 5);
	            }
	        }
	        default: if(IsPlayerAttachedObjectSlotUsed(playerid, 5)) RemovePlayerAttachedObject(playerid, 5);
	    }
	    weaponid = PlayerData[playerid][pSilahlar][3];
	    if(weaponid == 25)
	    {
            if(GetPlayerWeapon(playerid) != 25)
            {
				SetPlayerAttachedObject(playerid, 6, 349, 1, -0.065999, 0.152999, 0.067999, 2.299999, 50.800006, -0.299999, 1.000000, 1.000000, 1.000000);
            }
            else
            {
                if(IsPlayerAttachedObjectSlotUsed(playerid, 6)) RemovePlayerAttachedObject(playerid, 6);
            }
	    }
	    else if(IsPlayerAttachedObjectSlotUsed(playerid, 6)) RemovePlayerAttachedObject(playerid, 6);
	    weaponid = PlayerData[playerid][pSilahlar][4];
	    switch(weaponid)
	    {
	        case 28:
	        {
	            if(GetPlayerWeapon(playerid) != 28)
	            {
					SetPlayerAttachedObject(playerid, 7, 352, 1, -0.222000, -0.000000, 0.171999, -7.500000, 89.300041, 99.300018, 1.000000, 1.000000, 1.000000);
	            }
	            else
	            {
	                if(IsPlayerAttachedObjectSlotUsed(playerid, 7)) RemovePlayerAttachedObject(playerid, 7);
	            }
	        }
	        case 29:
	        {
	            if(GetPlayerWeapon(playerid) != 29)
	            {
					SetPlayerAttachedObject(playerid, 7, 353, 1, -0.089999, 0.225000, -0.018000, -166.099990, 45.800003, 7.599999, 1.000000, 1.000000, 1.000000);
	            }
	            else
	            {
	                if(IsPlayerAttachedObjectSlotUsed(playerid, 7)) RemovePlayerAttachedObject(playerid, 7);
	            }
	        }
	        default: if(IsPlayerAttachedObjectSlotUsed(playerid, 7)) RemovePlayerAttachedObject(playerid, 7);
	    }
	    weaponid = PlayerData[playerid][pSilahlar][5];
	    switch(weaponid)
	    {
	        case 30:
	        {
	            if(GetPlayerWeapon(playerid) != 30)
	            {
	            	SetPlayerAttachedObject(playerid, 8, 355, 1, 0.000000, -0.166000, 0.000000, -3.600000, 37.300003, 0.000000, 1.000000, 1.000000, 1.000000);
	            }
	            else
	            {
	                if(IsPlayerAttachedObjectSlotUsed(playerid, 8)) RemovePlayerAttachedObject(playerid, 8);
	            }
	        }
	        case 31:
	        {
	            if(GetPlayerWeapon(playerid) != 31)
	            {
	                SetPlayerAttachedObject(playerid, 8, 356, 1, 0.000000, -0.134000, -0.100999, -176.000030, 51.399997, -3.199999, 1.000000, 1.000000, 1.000000);
	            }
	            else
	            {
	                if(IsPlayerAttachedObjectSlotUsed(playerid, 8)) RemovePlayerAttachedObject(playerid, 8);
	            }
	        }
	        default: if(IsPlayerAttachedObjectSlotUsed(playerid, 8)) RemovePlayerAttachedObject(playerid, 8);
	    }
	    weaponid = PlayerData[playerid][pSilahlar][6];
	    switch(weaponid)
	    {
	        case 33:
	        {
	            if(GetPlayerWeapon(playerid) != 33)
	            {
                    SetPlayerAttachedObject(playerid, 9, 357, 1, 0.000000, -0.166000, 0.000000, -3.600000, 37.300003, 0.000000, 1.000000, 1.000000, 1.000000);
	            }
				else
				{
				    if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
				}
	        }
	        case 34:
	        {
	            if(GetPlayerWeapon(playerid) != 34)
	            {
                    SetPlayerAttachedObject(playerid, 9, 358, 1, 0.000000, -0.134000, -0.100999, -176.000030, 51.399997, -3.199999, 1.000000, 1.000000, 1.000000);
	            }
	            else
	            {
	                if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
	            }
	        }
	        default: if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
	    }
	}
	if(IsPlayerRunning(playerid) && PlayerData[playerid][pTopallama] == true && PlayerData[playerid][pBaygin] == 0)
	{
	    ApplyAnimation(playerid, "PED", "FALL_COLLAPSE", 4.0, 0, 1, 1, 0, 500, 1);
	    ApplyAnimation(playerid, "PED", "FALL_COLLAPSE", 4.0, 0, 1, 1, 0, 500, 1);
	}
    if(surf_LastChecked[playerid] < tickcount())
    {
        surf_LastChecked[playerid] = tickcount()+500;
        new vehicleid = GetPlayerSurfingVehicleID(playerid);
        if(vehicleid != INVALID_VEHICLE_ID && GetPlayerSpeed(vehicleid) >= 25 && GetVehicleModel(vehicleid) != 422)
        {
            new Float:pos[3];
            GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
            SetPlayerPos(playerid, pos[0], pos[1], pos[2]+3.5);
           	ShowTextDrawMessage(playerid, "~w~Car Surfing ~r~Yasak!", TEXTDRAW_TYPE_MSG, 3000);
        }
    }
	if(PetKontrol[playerid] != -1 && GetPlayerWeapon(playerid) > 0) SetPlayerArmedWeapon(playerid, 0);
	if(GetPlayerMoney(playerid) != PlayerData[playerid][pCash])
	{
	    ResetPlayerMoney(playerid);
	    GivePlayerMoney(playerid, PlayerData[playerid][pCash]);
	}
	new str[100];
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    new id = Car_GetID(vehicleid);
	    if(IsSpeedoVehicle(vehicleid))
	    {
	        static
		        Float:fDamage;

	  		GetVehicleHealth(vehicleid, fDamage);

	  		fDamage = floatdiv(1000 - fDamage, 10) * 1.42999; // 1.33334;
 	 		if (fDamage < 0.0) fDamage = 0.0;
			else if (fDamage > 100.0) fDamage = 100.0;

            if(GetPlayerSpeed(vehicleid) >= 100)
            {
	           	format(str, sizeof(str), "%d", GetPlayerSpeed(vehicleid));
				PlayerTextDrawSetString(playerid, AracTD[playerid][1], str);
				PlayerTextDrawColor(playerid, AracTD[playerid][1], 0xFFFFFFFF);
				PlayerTextDrawShow(playerid, AracTD[playerid][1]);
			}
			else
			{
			    format(str, sizeof(str), " %d", GetPlayerSpeed(vehicleid));
				PlayerTextDrawSetString(playerid, AracTD[playerid][1], str);
				PlayerTextDrawColor(playerid, AracTD[playerid][1], 0xFFFFFFFF);
				PlayerTextDrawShow(playerid, AracTD[playerid][1]);
			}
			format(str, sizeof(str), "%.0f%%", (fDamage > 100.0) ? (100.0) : (fDamage));
			PlayerTextDrawSetString(playerid, AracTD[playerid][2], str);

			new Float:benzin;
			if(id == -1)
			{
			    benzin = 100.0;
			}
			else
			{
			    benzin = AracInfo[id][aracBenzin];
			}
			if(id == -1 || AracInfo[id][aracTip] == 1 || AracInfo[id][aracTip] == 2 || AracInfo[id][aracTip] == 3 || AracInfo[id][aracTip] == 5)
			{
				format(str,sizeof(str), " N/A");
				PlayerTextDrawSetString(playerid, AracTD[playerid][3],str);
			}
			else
			{
			    format(str,sizeof(str),"%.1f",benzin);
			    PlayerTextDrawSetString(playerid, AracTD[playerid][3],str);
			}
			if(id == -1 || AracInfo[id][aracTip] == 1 || AracInfo[id][aracTip] == 2 || AracInfo[id][aracTip] == 3 || AracInfo[id][aracTip] == 5)
			{
				format(str,sizeof(str)," N/A");
	   			PlayerTextDrawSetString(playerid, AracTD[playerid][4],str);
   			}
   			else
   			{
   			    format(str,sizeof(str)," %.1f",AracInfo[id][aracKM]);
	   			PlayerTextDrawSetString(playerid, AracTD[playerid][4],str);
   			}
   			if(id != -1 && CarUpdate[vehicleid] < tickcount())
   			{
   			    CarUpdate[vehicleid] = tickcount()+1000;
                new Float: fDistance = GetVehicleDistanceFromPoint(vehicleid, CarLastPos[vehicleid][0], CarLastPos[vehicleid][1], CarLastPos[vehicleid][2]);
                if(fDistance <= 100) AracInfo[id][aracKM] += fDistance/1000;
                GetVehiclePos(vehicleid,CarLastPos[vehicleid][0],CarLastPos[vehicleid][1],CarLastPos[vehicleid][2]);
   			}
			if(AracInfo[id][aracTip] == 2 && GetVehicleModel(vehicleid) == 574)
		    {
		        new Float: tDistance = GetVehicleDistanceFromPoint(vehicleid, TemizlikciLastPos[vehicleid][0], TemizlikciLastPos[vehicleid][1], TemizlikciLastPos[vehicleid][2]);
		        if(tDistance > 100)
		        {
		            TemizlikciDistance[playerid] += 1;
		            GetVehiclePos(vehicleid, TemizlikciLastPos[vehicleid][0], TemizlikciLastPos[vehicleid][1], TemizlikciLastPos[vehicleid][2]);
		            SetPVarInt(playerid,"TemizlikciKazanilan",GetPVarInt(playerid,"TemizlikciKazanilan")+3);
		            ParaVer(playerid, 3);
				}
		    }
	    }
	}
	if(PlayerData[playerid][pGPS] != -1 || GetPVarInt(playerid, "EvBuluyor") != -1 || GetPVarInt(playerid, "IsyeriBuluyor") != -1  || GetPVarInt(playerid, "BinaBuluyor") != -1)
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    {
	        SetPVarInt(playerid, "EvBuluyor", -1);
	    	SetPVarInt(playerid, "IsyeriBuluyor", -1);
	    	SetPVarInt(playerid, "BinaBuluyor", -1);
	    	PlayerData[playerid][pGPS] = -1;
	    	DisablePlayerCheckpoint(playerid);
	    	PlayerTextDrawHide(playerid, MesafeTD[playerid]);
	    }
	    if(PlayerData[playerid][pGPS] != -1)
	    {
		    if(Lokasyon[PlayerData[playerid][pGPS]][Exists] == false)
		    {
		        PlayerData[playerid][pGPS] = -1;
		        DisablePlayerCheckpoint(playerid);
		        PlayerTextDrawHide(playerid, MesafeTD[playerid]);
		    }
		    format(str, sizeof(str), "~g~Mesafe:~w~ %.2f metre",GetPlayerDistanceFromPoint(playerid, Lokasyon[PlayerData[playerid][pGPS]][lokasyonPos][0], Lokasyon[PlayerData[playerid][pGPS]][lokasyonPos][1], Lokasyon[PlayerData[playerid][pGPS]][lokasyonPos][2]));
			PlayerTextDrawSetString(playerid, MesafeTD[playerid], str);
		}
		else if(GetPVarInt(playerid, "EvBuluyor") != -1)
		{
		    format(str, sizeof(str), "~g~Mesafe:~w~ %.2f metre",GetPlayerDistanceFromPoint(playerid, house_info[GetPVarInt(playerid, "EvBuluyor")][evPos][0], house_info[GetPVarInt(playerid, "EvBuluyor")][evPos][1], house_info[GetPVarInt(playerid, "EvBuluyor")][evPos][2]));
			PlayerTextDrawSetString(playerid, MesafeTD[playerid], str);
		}
		else if(GetPVarInt(playerid, "IsyeriBuluyor") != -1)
		{
		    format(str, sizeof(str), "~g~Mesafe:~w~ %.2f metre",GetPlayerDistanceFromPoint(playerid, Isyeri[GetPVarInt(playerid, "IsyeriBuluyor")][isyeriPos][0], Isyeri[GetPVarInt(playerid, "IsyeriBuluyor")][isyeriPos][1], Isyeri[GetPVarInt(playerid, "IsyeriBuluyor")][isyeriPos][2]));
			PlayerTextDrawSetString(playerid, MesafeTD[playerid], str);
		}
		else if(GetPVarInt(playerid, "BinaBuluyor") != -1)
		{
		    format(str, sizeof(str), "~g~Mesafe:~w~ %.2f metre",GetPlayerDistanceFromPoint(playerid, EntranceData[GetPVarInt(playerid, "BinaBuluyor")][entrancePos][0], EntranceData[GetPVarInt(playerid, "BinaBuluyor")][entrancePos][1], EntranceData[GetPVarInt(playerid, "BinaBuluyor")][entrancePos][2]));
			PlayerTextDrawSetString(playerid, MesafeTD[playerid], str);
		}
	}
	if (PlayerData[playerid][pDrinking] && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_SPRUNK && !IsPlayerInAnyVehicle(playerid))
	{
 		DestroyPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
 		PlayerData[playerid][pDrinking] = 0;
	}
	if(PlayerData[playerid][pDestek] > 0)
	{
	    DestekGuncelle(playerid);
	}
	return 1;
}
public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z)
{
    if(PlayerData[playerid][pTazer] == 1 && weaponid == 23)
	{
	    ApplyAnimation(playerid,"SILENCED","Silence_reload",4.1,0,0,0,0,1000,1);
	    ApplyAnimation(playerid,"SILENCED","Silence_reload",4.1,0,0,0,0,1000,1);
	}
	return 1;
}
stock PlayerHasTazer(playerid)
{
    return (GetPlayerWeapon(playerid) == 23 && PlayerData[playerid][pTazer]);
}
stock PlayerHasBeanbag(playerid)
{
    return (GetPlayerWeapon(playerid) == 25 && PlayerData[playerid][pBeanbag]);
}
public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
    if (GetPlayerWeapon(playerid) >= 1 && GetPlayerWeapon(playerid) <= 45 && PlayerData[playerid][pSilahlar][g_aWeaponSlots[GetPlayerWeapon(playerid)]] != GetPlayerWeapon(playerid) && !PlayerHasTazer(playerid) && !PlayerHasBeanbag(playerid) && pbOda[playerid] == -1)
    {
        AdminMessage(COLOR_LIGHTRED, "AdmLog: %s adlý kiþi Silah Hilesi sebebiyle sistem tarafýndan banlandý. (Silah: %s)", ReturnDate(), Player_GetName(playerid), ReturnWeaponName(GetPlayerWeapon(playerid)));
        ResetWeapons(playerid);
        AddBan(GetIP(playerid), Player_GetName(playerid), "", "Sistem", 0, "Silah Hilesi");
        Kick(playerid);
        return 0;
    }
	if(IsBulletWeapon(weaponid) && GuvenliBolgedeyse(playerid) && GetFactionType(playerid) != BIRLIK_LSPD)
	{
	    SetPlayerArmedWeapon(playerid, 0);
	    Dialog_Show(playerid, GBIUyari, DIALOG_STYLE_MSGBOX, "{FF0000}Güvenli Bölgedesiniz!", "{FFFFFF}Bulunduðunuz bölge güvenli bölgedir, silah ateþleyemezsiniz.\n Eðer 1 dakika içinde oyuncuya 3 kere zarar vermeye çalýþýrsanýz sistem tarafýndan\n otomatik olarak Güvenli Bölge Ýhlalinden hapse atýlýrsýnýz!", "Tamam", "");
	    AdminHelperMessage(COLOR_LIGHTRED, "*** %s (%d) adlý kiþi güvenli bölgede ateþ etti.", Player_GetName(playerid), playerid);
	    return 0;
	}
	if(weaponid > 0 && GetPVarInt(playerid, "CCTVKontrol") < gettime())
	{
	    new id = GetNearestCCTV(playerid);
	    SetPVarInt(playerid, "CCTVKontrol", gettime()+10);
	    if(id != -1 && CCTVInfo[id][cctvBildirim] < gettime())
	    {
	        CCTVInfo[id][cctvBildirim] = gettime()+100;
	        SendBirlikMessageEx(BIRLIK_LSPD, COLOR_RADIO, "** (Telsiz) %s adlý CCTV'de çatýþma görüldü.",CCTVInfo[id][cctv_Name]);
	    }
	}
    if(PlayerData[playerid][pTazer] == 1 && weaponid == 23)
	{
	    ApplyAnimation(playerid,"SILENCED","Silence_reload",4.1,0,0,0,0,1000,1);
	    ApplyAnimation(playerid,"SILENCED","Silence_reload",4.1,0,0,0,0,1000,1);
	}
	/*if((GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_FBI) && PlayerData[playerid][pTazer] == 1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && weaponid == 23 && hittype == BULLET_HIT_TYPE_PLAYER && PlayerData[playerid][pTazerTime] <= 0)
	{
		if(IsPlayerConnected(hitid) && PlayerData[hitid][pKelepce] == 0 && GetPlayerState(hitid) == PLAYER_STATE_ONFOOT && PlayerData[hitid][pSoklandi] < 1)
		{
		    if(!IsPlayerNearPlayer(playerid, hitid, 10.0)) return HataMesajGonder(playerid,"Tazer o kadar uzaða etki etmez.");
		    PlayerData[hitid][pSoklandi] = 10;
	    	TogglePlayerControllable(hitid, 0);
	    	ApplyAnimation(hitid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
	    	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s elektroþok silahýný %s'a doðru yöneltir ve ateþler.", ReturnName(playerid, 0), ReturnName(damagedid, 0));
		}
	}*/
	return 1;
}
public OnPlayerDamage(&playerid, &Float:amount, &issuerid, &weapon, &bodypart)
{
	if(weapon == WEAPON_CARPARK || weapon == WEAPON_HELIBLADES || weapon == WEAPON_CHAINSAW) return 0;
	if(GetPVarInt(playerid, "KOSKorumasi") == 1) return 0;
	if(PlayerData[playerid][pGOD] == true && PlayerData[playerid][pAdmin] > 0) return 0;
	if(PlayerData[playerid][pBaygin] == 1 && !IsBulletWeapon(weapon)) return 0;
	if(IsPlayerPause(playerid)) return 0;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    new id = Car_GetID(GetPlayerVehicleID(playerid));
	    if(id != -1 && AracInfo[id][aracZirh] > 75)
	    {
	        AracInfo[id][aracZirh] -= 50;
	        return 0;
	    }
	}
	if(issuerid != INVALID_PLAYER_ID)
	{
    	if((GetFactionType(issuerid) == BIRLIK_LSPD || GetFactionType(issuerid) == BIRLIK_FBI) && PlayerData[issuerid][pTazer] == 1 && PlayerData[playerid][pSoklandi] < 1 && weapon == 23 && PlayerData[playerid][pKelepce] == 0)
		{
	    	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	    	{
	    	    HataMesajGonder(issuerid,"Araçta olan bir kiþiyi donduramazsýn.");
	    	    return 0;
	    	}
	    	if(!IsPlayerNearPlayer(issuerid, playerid, 10.0))
	    	{
	    	    HataMesajGonder(issuerid,"Kiþi çok uzak, tazer etki etmez.");
	    	    return 0;
	    	}

	    	PlayerData[playerid][pSoklandi] = 30;
	    	TogglePlayerControllable(playerid, 0);
	    	ApplyAnimation(playerid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
	    	SendNearbyMessage(issuerid, 30.0, COLOR_PURPLE, "** %s elektroþok silahýný %s'a doðru yöneltir ve ateþler.", ReturnName(issuerid, 0), ReturnName(playerid, 0));
	    	return 0;
		}
		if((GetFactionType(issuerid) == BIRLIK_LSPD || GetFactionType(issuerid) == BIRLIK_FBI) && PlayerData[issuerid][pBeanbag] == 1 && PlayerData[playerid][pSoklandi] < 1 && weapon == 25 && PlayerData[playerid][pKelepce] == 0)
		{
	    	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	    	{
	    	    HataMesajGonder(issuerid,"Araçta olan bir kiþiye beanbag sýkamazsýnýz.");
	    	    return 0;
	    	}
	    	if(!IsPlayerNearPlayer(issuerid, playerid, 25.0))
	    	{
	    	    HataMesajGonder(issuerid,"Kiþi çok uzak, beanbag etki etmez.");
	    	    return 0;
	    	}

	    	PlayerData[playerid][pSoklandi] = 30;
	    	TogglePlayerControllable(playerid, 0);
	    	ApplyAnimation(playerid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
	    	SendNearbyMessage(issuerid, 30.0, COLOR_PURPLE, "** %s beanbag tüfeðini %s'a doðru yöneltir ve ateþler.", ReturnName(issuerid, 0), ReturnName(playerid, 0));
	    	return 0;
		}
		if(weapon >= 22 && weapon <= 34 && !PlayerData[playerid][pBaygin] && pbOda[playerid] == -1 && PetKontrol[playerid] == -1 && PlayerData[playerid][pTopallama] == false && (bodypart == 7 || bodypart == 8))
		{
	    	PlayerData[playerid][pTopallama] = true;
	    	PlayerData[playerid][pTopallamaSayac] = 0;
	    	BilgiMesajGonder(playerid, "Ayaðýnýzdan vuruldunuz, koþma ve zýplama özelliklerini 120 saniye boyunca kullanamayacaksýnýz.");
		}
	}
	if(PlayerData[playerid][pIyilestiriyor] != -1)
	{
	    SetPVarInt(PlayerData[playerid][pIyilestiriyor], "Iyilestiriliyor", 0);
	    PlayerData[playerid][pIyilestiriyor] = -1;
	    PlayerData[playerid][pIyilestirmeSure] = 0;
	    ClearAnimations(playerid);
	    StopLoopingAnim(playerid);
	    TogglePlayerControllable(playerid, true);
	    BilgiMesajGonder(playerid, "Hasar aldýðýnýz için tedavi edemediniz.");
	}
	if(issuerid != INVALID_PLAYER_ID && bodypart == 9) amount *= 1.60;
	Hasar_Ekle(playerid, bodypart, amount, issuerid, weapon);
	return 1;
}
public OnPlayerDamageDone(playerid, Float:amount, issuerid, weapon, bodypart)
{
	PlayerData[playerid][pShootedBody] = bodypart;
	PlayerData[playerid][pLastShot] = issuerid;
	return 1;
}
public OnPlayerStreamIn(playerid, forplayerid)
{
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
{
    if (newstate)
    {
        GameTextForPlayer(playerid, "~W~Siren ~G~Açýldý", 1000, 3);
    }
    else
    {
        GameTextForPlayer(playerid, "~W~Siren ~r~Kapatýldý", 1000, 3);
    }
    return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    if(dialogid == ODA_AYARLARI)
	{
	    if(response)
	    {
		    if(strfind(inputtext, "Oda Adý", true) != -1)
		    {
		        ShowPlayerDialog(playerid, ODA_AYARLARI_AD, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlarý - Ad", "Lütfen odanýz için yeni bir ad giriniz:", "Deðiþtir", "Geri");
			}
			if(strfind(inputtext, "Oda Þifre", true) != -1)
			{
			    ShowPlayerDialog(playerid, ODA_AYARLARI_SIFRE, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlarý - Þifre", "Lütfen odanýz için yeni bir þifre giriniz. Eðer þifre olmasýný istemiyorsanýz boþ býrakýn.", "Deðiþtir", "Geri");
			}
			if(strfind(inputtext, "Takým 1 Ad", true) != -1)
			{
			    ShowPlayerDialog(playerid, ODA_AYARLARI_TAKIMAD, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlarý - Takým 1 Ad", "Lütfen takým 1'in yeni adýný girin:", "Deðiþtir", "Geri");
			}
			if(strfind(inputtext, "Takým 2 Ad", true) != -1)
			{
			    ShowPlayerDialog(playerid, ODA_AYARLARI_TAKIMAD+1, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlarý - Takým 2 Ad", "Lütfen takým 2'in yeni adýný girin:", "Deðiþtir", "Geri");
			}
			if(strfind(inputtext, "Takým Dengeleme", true) != -1)
			{
			    if(Paintball[GetPVarInt(playerid, "OdaAyarID")][TakimDengeleme] == true)
			    {
			        Paintball[GetPVarInt(playerid, "OdaAyarID")][TakimDengeleme] = false;
			        OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
				}
				else
				{
				    Paintball[GetPVarInt(playerid, "OdaAyarID")][TakimDengeleme] = true;
			        OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
				}
			}
			if(strfind(inputtext, "Oyun Türü", true) != -1)
			{
			    if(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaOyunTuru] == 1)
			    {
			        Paintball[GetPVarInt(playerid, "OdaAyarID")][odaOyunTuru] = 2;
			        OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
				}
				else
				{
				    Paintball[GetPVarInt(playerid, "OdaAyarID")][odaOyunTuru] = 1;
			        OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
				}
			}
			if(strfind(inputtext, "Maç Süresi", true) != -1)
			{
			    ShowPlayerDialog(playerid, ODA_AYARLARI_SURE, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlarý - Süre", "Lütfen maçýn kaç dakikada biteceðini girin:", "Devam", "Geri");
			}
			if(strfind(inputtext, "Arena", true) != -1)
			{
			    ShowPlayerDialog(playerid, ODA_AYARLARI_ARENA, DIALOG_STYLE_LIST, "{1DF21D}Oda Ayarlarý - Arena", "{1DF21D}Warehouse 1\n{1DF21D}Warehouse 2\n{1DF21D}RC Battlefield\n{1DF21D}LV Police HQ\n{1DF21D}LV Warehouse\n{1DF21D}Crack Factory\n{1DF21D}Jefferson Motel", "Seç", "Geri");
			}
			if(strfind(inputtext, "Baþlangýç Zýrhý", true) != -1)
			{
			    ShowPlayerDialog(playerid, ODA_AYARLARI_ZIRH, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlarý - Zýrh", "Lütfen zýrh girin:", "Deðiþtir", "Geri");
			}
			if(strfind(inputtext, "Silah Ayarlarý", true) != -1)
			{
			    new silahisim1[20], silahisim2[20], silahisim3[20], silahisim4[20];
			    GetWeaponName(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][0], silahisim1, sizeof(silahisim1));
			    GetWeaponName(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][1], silahisim2, sizeof(silahisim2));
			    GetWeaponName(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][2], silahisim3, sizeof(silahisim3));
			    GetWeaponName(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][3], silahisim4, sizeof(silahisim4));
			    new str[150];
			    format(str, sizeof(str), "{FFFFFF}%s (ID: %d)\n{FFFFFF}%s (ID: %d)\n{FFFFFF}%s (ID: %d)\n{FFFFFF}%s (ID: %d)", silahisim1, Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][0], silahisim2, Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][1], silahisim3, Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][2], silahisim4, Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][3]);
			    ShowPlayerDialog(playerid, ODA_AYARLARI_SILAH, DIALOG_STYLE_LIST, "{1DF21D}Oda Ayarlarý - Silahlar", str, "Deðiþtir", "Geri");
			}
			if(strfind(inputtext, "Katýlýmcý Ayarlarý", true) != -1)
			{
			    KatilimciDialog(playerid, GetPVarInt(playerid, "OdaAyarID"));
			}
			if(strfind(inputtext, "Maçý Baþlat", true) != -1)
			{
			    Paintball[GetPVarInt(playerid, "OdaAyarID")][odaDurum] = ODA_BASLADI;
			    Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSayac] = Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSure]*60;
			    if(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaOyunTuru] == 1)
			    {
			        ShowPlayerDialog(playerid, TAKIM_SEC, DIALOG_STYLE_MSGBOX,"Takým Seç", "Lütfen hangi takýmda olacaðýnýzý seçin:", Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim1Ad],Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim2Ad]);
			        return 1;
			    }
			    pbTakim[playerid] = 1;
			    pbOldurme[playerid] = 0;
			    pbOlme[playerid] = 0;
			    SaveWeapons(playerid);
			    GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
			    GetPlayerArmour(playerid, PlayerData[playerid][pArmour]);
			    PaintballSpawn(playerid);
			    MesajGonder(playerid, "Maç baþlatýldý.");

			    PlayerTextDrawShow(playerid, PaintballTD[playerid][0]);
     			if(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaOyunTuru] == 1) PlayerTextDrawShow(playerid, PaintballTD[playerid][1]);
				if(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaOyunTuru] == 1) PlayerTextDrawShow(playerid, PaintballTD[playerid][2]);
				PlayerTextDrawShow(playerid, PaintballTD[playerid][3]);
				PlayerTextDrawShow(playerid, PaintballTD[playerid][4]);
				PlayerTextDrawShow(playerid, PaintballTD[playerid][5]);
				PlayerTextDrawShow(playerid, PaintballTD[playerid][6]);
				PlayerTextDrawShow(playerid, PaintballTD[playerid][7]);
				PlayerTextDrawShow(playerid, PaintballTD[playerid][8]);
	   			PaintballSpawn(playerid);
       			TogglePlayerControllable(playerid, true);

			}
			if(strfind(inputtext, "Maçý Bitir", true) != -1)
			{
			    if(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaDurum] != ODA_BASLADI) return 1;
			    MacBitir(GetPVarInt(playerid, "OdaAyarID"));
			}
			if(strfind(inputtext, "Odayý Sil", true) != -1)
			{
			    Paintball[GetPVarInt(playerid, "OdaAyarID")][odaExists] = false;
			    format(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaIsim], 30, "");
			    format(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSifre], 30, "");
			    Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSahip] = -1;
			    format(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim1Ad], 20, "");
			    format(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim2Ad], 20, "");
			    Paintball[GetPVarInt(playerid, "OdaAyarID")][odaZirh] = 0;
			    Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSure] = 0;
			    Paintball[GetPVarInt(playerid, "OdaAyarID")][odaOyunTuru] = 1;
			    Paintball[GetPVarInt(playerid, "OdaAyarID")][odaArena] = 1;
			    Paintball[GetPVarInt(playerid, "OdaAyarID")][odaPuan][0] = 0;
			    Paintball[GetPVarInt(playerid, "OdaAyarID")][odaPuan][1] = 0;
			    Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSayac] = 0;
			    DeletePVar(playerid, "OdaAyarID");
			    MesajGonder(playerid, "Oda silindi.");
			}
		}
		return 1;
	}
	if(dialogid == TAKIM_SEC)
	{
	    new id = pbOda[playerid];
	    if(response)
	    {
	        if(Paintball[id][odaDurum] == ODA_BEKLEME) return 1;
	        if(Paintball[id][TakimDengeleme] == true && Takim1Sayi(id) > Takim2Sayi(id))
	        {
	            HataMesajGonder(playerid, "Bu takým dolu, baþka takýmý seç!");
	            return ShowPlayerDialog(playerid, TAKIM_SEC, DIALOG_STYLE_MSGBOX,"Takým Seç", "Lütfen hangi takýmda olacaðýnýzý seçin:", Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim1Ad],Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim2Ad]);
	        }
	        if(Paintball[id][odaDurum] == ODA_BASLADI)
	        {
	            for(new i; i<9; i++)
	            {
		            PlayerTextDrawShow(playerid, PaintballTD[playerid][i]);
				}
			}
	        pbTakim[playerid] = 1;
			pbOldurme[playerid] = 0;
			pbOlme[playerid] = 0;
			SaveWeapons(playerid);
			GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
			GetPlayerArmour(playerid, PlayerData[playerid][pArmour]);
			PaintballSpawn(playerid);
		}
		else
		{
		    if(Paintball[id][odaDurum] == ODA_BEKLEME) return 1;
	        if(Paintball[id][TakimDengeleme] == true && Takim2Sayi(id) > Takim1Sayi(id))
	        {
	            HataMesajGonder(playerid, "Bu takým dolu, baþka takýmý seç!");
	            return ShowPlayerDialog(playerid, TAKIM_SEC, DIALOG_STYLE_MSGBOX,"Takým Seç", "Lütfen hangi takýmda olacaðýnýzý seçin:", Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim1Ad],Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim2Ad]);
	        }
	        if(Paintball[id][odaDurum] == ODA_BASLADI)
	        {
                for(new i; i<9; i++)
	            {
		            PlayerTextDrawShow(playerid, PaintballTD[playerid][i]);
				}
			}
	        pbTakim[playerid] = 2;
			pbOldurme[playerid] = 0;
			pbOlme[playerid] = 0;
			SaveWeapons(playerid);
            GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
			GetPlayerArmour(playerid, PlayerData[playerid][pArmour]);
			PaintballSpawn(playerid);
		}
		return 1;
	}
	if(dialogid == ODA_AYARLARI_AD)
	{
	    if(!response) return OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    if(response)
	    {
	        if(isnull(inputtext)) return ShowPlayerDialog(playerid, ODA_AYARLARI_AD, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlarý - Ad", "Lütfen odanýz için yeni bir ad giriniz:", "Deðiþtir", "Geri");
	        if(strlen(inputtext) > 30) return ShowPlayerDialog(playerid, ODA_AYARLARI_AD, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlarý - Ad", "Lütfen odanýz için yeni bir ad giriniz:", "Deðiþtir", "Geri");
	        format(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaIsim], 30, inputtext);
	        OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    }
	    return 1;
	}
	if(dialogid == ODA_AYARLARI_SIFRE)
	{
	    if(!response) return OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    if(response)
	    {
	        if(strlen(inputtext) > 30) return ShowPlayerDialog(playerid, ODA_AYARLARI_SIFRE, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlarý - Þifre", "Lütfen odanýz için yeni bir þifre giriniz. Eðer þifre olmasýný istemiyorsanýz boþ býrakýn.", "Deðiþtir", "Geri");
	        format(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSifre], 30, inputtext);
	        OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    }
	    return 1;
	}
	if(dialogid == ODA_AYARLARI_TAKIMAD)
	{
	    if(!response) return OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    if(response)
	    {
	        if(isnull(inputtext)) return ShowPlayerDialog(playerid, ODA_AYARLARI_TAKIMAD, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlarý - Takým 1 Ad", "Lütfen takým 1'in yeni adýný girin:", "Deðiþtir", "Geri");
	        if(strlen(inputtext) > 20) return ShowPlayerDialog(playerid, ODA_AYARLARI_TAKIMAD, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlarý - Takým 1 Ad", "Lütfen takým 1'in yeni adýný girin:", "Deðiþtir", "Geri");
	        format(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim1Ad], 20, inputtext);
	        OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    }
	    return 1;
	}
	if(dialogid == ODA_AYARLARI_TAKIMAD+1)
	{
	    if(!response) return OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    if(response)
	    {
	        if(isnull(inputtext)) return ShowPlayerDialog(playerid, ODA_AYARLARI_TAKIMAD+1, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlarý - Takým 2 Ad", "Lütfen takým 2'in yeni adýný girin:", "Deðiþtir", "Geri");
	        if(strlen(inputtext) > 20) return ShowPlayerDialog(playerid, ODA_AYARLARI_TAKIMAD+1, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlarý - Takým 2 Ad", "Lütfen takým 2'in yeni adýný girin:", "Deðiþtir", "Geri");
	        format(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim2Ad], 20, inputtext);
	        OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    }
	    return 1;
	}
	if(dialogid == ODA_AYARLARI_SURE)
	{
	    if(!response) return OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    if(response)
	    {
	        if(isnull(inputtext)) return ShowPlayerDialog(playerid, ODA_AYARLARI_SURE, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlarý - Süre", "Lütfen maçýn kaç dakikada biteceðini girin:", "Devam", "Geri");
	        if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, ODA_AYARLARI_SURE, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlarý - Süre", "Lütfen maçýn kaç dakikada biteceðini girin:", "Devam", "Geri");
	        if(strval(inputtext) < 3 || strval(inputtext) > 20)
	        {
	            SendClientMessage(playerid, -1, "{FF0000}» {FFFFFF}Maç süresi en az 3, en fazla 20 dakika olabilir.");
	            return ShowPlayerDialog(playerid, ODA_AYARLARI_SURE, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlarý - Süre", "Lütfen maçýn kaç dakikada biteceðini girin:", "Devam", "Geri");
			}
			Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSure] = strval(inputtext);
			Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSayac] = strval(inputtext)*60;
			OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    }
	    return 1;
	}
	if(dialogid == ODA_AYARLARI_ARENA)
	{
	    if(!response) return OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    if(response)
	    {
	        Paintball[GetPVarInt(playerid, "OdaAyarID")][odaArena] = listitem+1;
	        OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    }
	    return 1;
	}
	if(dialogid == ODA_AYARLARI_ZIRH)
	{
	    if(!response) return OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    if(response)
	    {
	        if(isnull(inputtext)) return ShowPlayerDialog(playerid, ODA_AYARLARI_ZIRH, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlarý - Zýrh", "Lütfen zýrh girin:", "Deðiþtir", "Geri");
	        if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, ODA_AYARLARI_ZIRH, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlarý - Zýrh", "Lütfen zýrh girin:", "Deðiþtir", "Geri");
	        if(strval(inputtext) < 0  || strval(inputtext) > 100)
	        {
	            SendClientMessage(playerid, -1, "{FF0000}» {FFFFFF}Zýrh 0 ile 100 arasýnda olmalýdýr.");
	            return ShowPlayerDialog(playerid, ODA_AYARLARI_ZIRH, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlarý - Zýrh", "Lütfen zýrh girin:", "Deðiþtir", "Geri");
			}
			Paintball[GetPVarInt(playerid, "OdaAyarID")][odaZirh] = strval(inputtext);
			OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    }
	    return 1;
	}
	if(dialogid == ODA_AYARLARI_SILAH)
	{
	    if(!response) return OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    if(response)
	    {
	        SetPVarInt(playerid, "SilahDuzenle", listitem);
	        ShowPlayerDialog(playerid, ODA_AYARLARI_SILAH+1, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlarý - Silahlar", "Lütfen bu silah için yeni bir ID girin:", "Deðiþtir", "Geri");
		}
		return 1;
	}
	if(dialogid == ODA_AYARLARI_SILAH+1)
	{
	    if(!response)
	    {
	        new silahisim1[20], silahisim2[20], silahisim3[20], silahisim4[20];
	    	GetWeaponName(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][0], silahisim1, sizeof(silahisim1));
		    GetWeaponName(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][1], silahisim2, sizeof(silahisim2));
		    GetWeaponName(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][2], silahisim3, sizeof(silahisim3));
		    GetWeaponName(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][3], silahisim4, sizeof(silahisim4));
		    new str[150];
		    format(str, sizeof(str), "{FFFFFF}%s (ID: %d)\n{FFFFFF}%s (ID: %d)\n{FFFFFF}%s (ID: %d)\n{FFFFFF}%s (ID: %d)", silahisim1, Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][0], silahisim2, Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][1], silahisim3, Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][2], silahisim4, Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][3]);
		    ShowPlayerDialog(playerid, ODA_AYARLARI_SILAH, DIALOG_STYLE_LIST, "{1DF21D}Oda Ayarlarý - Silahlar", str, "Deðiþtir", "Geri");
	    }
	    else
	    {
	        if(isnull(inputtext)) return ShowPlayerDialog(playerid, ODA_AYARLARI_SILAH+1, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlarý - Silahlar", "Lütfen bu silah için yeni bir ID girin:", "Deðiþtir", "Geri");
	        if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, ODA_AYARLARI_SILAH+1, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlarý - Silahlar", "Lütfen bu silah için yeni bir ID girin:", "Deðiþtir", "Geri");
	        if(strval(inputtext) < 0 || strval(inputtext) > 38)
	        {
	            SendClientMessage(playerid, -1, "{FF0000}» {FFFFFF}Silah ID 0 ile 38 arasýnda olmalýdýr.");
	            return ShowPlayerDialog(playerid, ODA_AYARLARI_SILAH+1, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlarý - Silahlar", "Lütfen bu silah için yeni bir ID girin:", "Deðiþtir", "Geri");
	        }
	        Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][GetPVarInt(playerid, "SilahDuzenle")] = strval(inputtext);
	        new silahisim1[20], silahisim2[20], silahisim3[20], silahisim4[20];
	    	GetWeaponName(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][0], silahisim1, sizeof(silahisim1));
		    GetWeaponName(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][1], silahisim2, sizeof(silahisim2));
		    GetWeaponName(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][2], silahisim3, sizeof(silahisim3));
		    GetWeaponName(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][3], silahisim4, sizeof(silahisim4));
		    new str[150];
		    format(str, sizeof(str), "{FFFFFF}%s (ID: %d)\n{FFFFFF}%s (ID: %d)\n{FFFFFF}%s (ID: %d)\n{FFFFFF}%s (ID: %d)", silahisim1, Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][0], silahisim2, Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][1], silahisim3, Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][2], silahisim4, Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][3]);
		    ShowPlayerDialog(playerid, ODA_AYARLARI_SILAH, DIALOG_STYLE_LIST, "{1DF21D}Oda Ayarlarý - Silahlar", str, "Deðiþtir", "Geri");
	        DeletePVar(playerid,"SilahDuzenle");
	    }
	    return 1;
	}
	if(dialogid == ODA_AYARLARI_KATILIMCI)
	{
	    if(!response) return OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    if(response)
	    {
	        new id = strval(inputtext);
	        if(IsPlayerConnected(id) && pbOda[id] == GetPVarInt(playerid, "OdaAyarID"))
	        {
	            if(playerid == id) return KatilimciDialog(playerid, GetPVarInt(playerid, "OdaAyarID"));
	            SetPVarInt(playerid, "OyuncuID", id);
	            ShowPlayerDialog(playerid, ODA_AYARLARI_KATILIMCI+1, DIALOG_STYLE_LIST, "{1DF21D}Oda Ayarlarý", "{1DF21D}Odadan At\n{1DF21D}Odayý Devret", "Seç", "Geri");
	        }
	    }
	    return 1;
	}
	if(dialogid == ODA_AYARLARI_KATILIMCI+1)
	{
	    if(!response) return KatilimciDialog(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    if(response)
	    {
	        new id = GetPVarInt(playerid, "OyuncuID");
	        if(IsPlayerConnected(id) && pbOda[id] == GetPVarInt(playerid, "OdaAyarID"))
	        {
	            if(listitem == 0)
	            {
	                BilgiMesajGonder(id, "Oda sahibi %s tarafýndan odadan atýldýnýz.", ReturnName(playerid, 0));
	                OdadanAt(id, 1);
	                DeletePVar(playerid, "OyuncuID");
	                KatilimciDialog(playerid, GetPVarInt(playerid, "OdaAyarID"));
	            }
	            if(listitem == 1)
	            {
	                pbOda[id] = pbOda[playerid];
	                Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSahip] = id;
	                BilgiMesajGonder(id, "Oda sahibi %s, odayý size devretti. (/pboda)", ReturnName(playerid, 0));
	                BilgiMesajGonder(playerid, "Odayý %s adlý kiþiye devrettiniz.", ReturnName(id, 0));
	                DeletePVar(playerid, "OyuncuID");
	                DeletePVar(playerid, "OdaAyarID");
				}
	        }
	    }
	    return 1;
	}
	if(dialogid == DIALOG_KATIL)
	{
	    if(response)
	    {
	        new id = strval(inputtext);
	        if(Paintball[id][odaExists])
	        {
	            if(Paintball[id][odaDurum] != ODA_BASLADI)
	            {
	                HataMesajGonder(playerid, "Bu odada maç baþlamamýþ.");
	                return pbOdalari(playerid);
	            }
	            DeletePVar(playerid, "OdadanAt");
	            if(!strlen(Paintball[id][odaSifre]))
	            {
	                pbOda[playerid] = id;
	                new str[100];
                 	format(str, sizeof(str), "{33EE33}PB: %s adlý kiþi odaya katýldý.", ReturnName(playerid, 0));
                  	SendPBMessage(id, -1, str);
	                if(Paintball[id][odaOyunTuru] == 1)
	                {
	                    ShowPlayerDialog(playerid, TAKIM_SEC, DIALOG_STYLE_MSGBOX,"Takým Seç", "Lütfen hangi takýmda olacaðýnýzý seçin:", Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim1Ad],Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim2Ad]);
	                }
	                else
					{
      					for(new i; i<9; i++)
	            		{
		            		PlayerTextDrawShow(playerid, PaintballTD[playerid][i]);
						}

						pbTakim[playerid] = 1;
        				pbOldurme[playerid] = 0;
          				pbOlme[playerid] = 0;
          				SaveWeapons(playerid);
						GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
						GetPlayerArmour(playerid, PlayerData[playerid][pArmour]);
						PaintballSpawn(playerid);
      				}
	            }
	            else
	            {
	                SetPVarInt(playerid, "OdaKatil", id);
	                ShowPlayerDialog(playerid, DIALOG_KATIL_SIFRE, DIALOG_STYLE_INPUT, "Þifre", "Bu oda için þifre belirlenmiþ, lütfen þifreyi giriniz:", "Devam", "Geri");
	            }
	        }
	    }
	}
	if(dialogid == DIALOG_KATIL_SIFRE)
	{
	    if(!response) return pbOdalari(playerid);
	    if(response)
	    {
	        new id = GetPVarInt(playerid, "OdaKatil");
	        if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_KATIL_SIFRE, DIALOG_STYLE_INPUT, "Þifre", "Bu oda için þifre belirlenmiþ, lütfen þifreyi giriniz:", "Devam", "Geri");
	        if(strcmp(Paintball[id][odaSifre], inputtext, false) == 0)
	        {
	            	pbOda[playerid] = id;
	            	pbOldurme[playerid] = 0;
	            	pbOlme[playerid] = 0;
	            	new str[100];
              		format(str, sizeof(str), "{33EE33}PB: %s adlý kiþi odaya katýldý.", ReturnName(playerid, 0));
                	SendPBMessage(id, -1, str);
	                if(Paintball[id][odaOyunTuru] == 1)
	                {
	                    ShowPlayerDialog(playerid, TAKIM_SEC, DIALOG_STYLE_MSGBOX,"Takým Seç", "Lütfen hangi takýmda olacaðýnýzý seçin:", Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim1Ad],Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim2Ad]);
	                }
	                else
	                {
                 		PlayerTextDrawShow(playerid, PaintballTD[playerid][0]);
						PlayerTextDrawShow(playerid, PaintballTD[playerid][3]);
						PlayerTextDrawShow(playerid, PaintballTD[playerid][4]);
						PlayerTextDrawShow(playerid, PaintballTD[playerid][5]);
						PlayerTextDrawShow(playerid, PaintballTD[playerid][6]);
						PlayerTextDrawShow(playerid, PaintballTD[playerid][7]);
						PlayerTextDrawShow(playerid, PaintballTD[playerid][8]);
       				}
           			pbTakim[playerid] = 1;
            		pbOldurme[playerid] = 0;
	            	pbOlme[playerid] = 0;
	            	SaveWeapons(playerid);
					GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
					GetPlayerArmour(playerid, PlayerData[playerid][pArmour]);
					PaintballSpawn(playerid);
	        }
	        else
	        {
	            HataMesajGonder(playerid, "Yanlýþ þifre girdiniz.");
	            return ShowPlayerDialog(playerid, DIALOG_KATIL_SIFRE, DIALOG_STYLE_INPUT, "Þifre", "Bu oda için þifre belirlenmiþ, lütfen þifreyi giriniz:", "Devam", "Geri");
	        }
	    }
	    return 1;
	}
    if(dialogid == DIALOG_PETLERIM)
	{
	    if(response)
	    {
	        new id = strval(inputtext);
	        if(Iter_Contains(Petler, id))
	        {
	            if(PetBilgi[id][petDurum] == false)
	            {
	                if(PetBilgi[id][petYarali] == 1)
	                {
	                    ShowPlayerDialog(playerid, DIALOG_PET_IYILESTIR, DIALOG_STYLE_MSGBOX, "{FFFFFF}Petiniz Yaralý!", "{f90000}» {FFFFFF}Petiniz yaralý, onu iyileþtirmeniz gerekiyor. {10f900}$500 {FFFFFF}ödeyerek iyileþtirmek ister misiniz?", "Evet", "Hayýr");
	                    return 1;
	                }
	                new petname[10];
					format(petname,sizeof(petname),"pet_%d", id);
					new npc = FCNPC_Create(petname);
					if(npc == INVALID_PLAYER_ID) return HataMesajGonder(playerid, "Pet oluþturulurken hata oluþtu, lütfen yetkili kiþilerle iletiþime geçin.");
					new int = GetPlayerInterior(playerid), vw = GetPlayerVirtualWorld(playerid);
					new Float:pos[3];
					GetPlayerPos(playerid,pos[0], pos[1], pos[2]);
					FCNPC_Spawn(npc, PetTurSkin(PetBilgi[id][petTuru]), pos[0], pos[1], pos[2]);
					FCNPC_SetPosition(npc, pos[0] + 1, pos[1] + 1, pos[2]);
					FCNPC_SetInterior(npc, int);
					FCNPC_SetVirtualWorld(npc, vw);
					FCNPC_SetHealth(npc, PetBilgi[id][petSaglik]);
					FCNPC_SetInvulnerable(npc, true);
					PetBilgi[id][petTakip] = -1;
					PetBilgi[id][petDurum] = true;
					PetBilgi[id][NPCID] = npc;
					PetBilgi[id][petSaldir] = -1;
					new str[200];
					if(PetBilgi[id][petRenk] == 1) format(str, sizeof(str), "{FFFFFF}[%s]\n\n{AFAFAF}ID: %d\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saðlýk: %.1f\nAçlýk: %d",PetBilgi[id][petAdi],id, PetTurIsim(PetBilgi[id][petTuru]), (PetBilgi[id][petCinsiyet] == 1) ? ("Erkek") : ("Kadýn"), PetBilgi[id][petSaglik], PetBilgi[id][petAclik]);
					if(PetBilgi[id][petRenk] == 2) format(str, sizeof(str), "{0295f7}[%s]\n\n{AFAFAF}ID: %d\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saðlýk: %.1f\nAçlýk: %d",PetBilgi[id][petAdi],id, PetTurIsim(PetBilgi[id][petTuru]), (PetBilgi[id][petCinsiyet] == 1) ? ("Erkek") : ("Kadýn"), PetBilgi[id][petSaglik], PetBilgi[id][petAclik]);
					if(PetBilgi[id][petRenk] == 3) format(str, sizeof(str), "{f70202}[%s]\n\n{AFAFAF}ID: %d\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saðlýk: %.1f\nAçlýk: %d",PetBilgi[id][petAdi],id, PetTurIsim(PetBilgi[id][petTuru]), (PetBilgi[id][petCinsiyet] == 1) ? ("Erkek") : ("Kadýn"), PetBilgi[id][petSaglik], PetBilgi[id][petAclik]);
					if(PetBilgi[id][petRenk] == 4) format(str, sizeof(str), "{f77002}[%s]\n\n{AFAFAF}ID: %d\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saðlýk: %.1f\nAçlýk: %d",PetBilgi[id][petAdi],id, PetTurIsim(PetBilgi[id][petTuru]), (PetBilgi[id][petCinsiyet] == 1) ? ("Erkek") : ("Kadýn"), PetBilgi[id][petSaglik], PetBilgi[id][petAclik]);
					if(PetBilgi[id][petRenk] == 5) format(str, sizeof(str), "{ffff00}[%s]\n\n{AFAFAF}ID: %d\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saðlýk: %.1f\nAçlýk: %d",PetBilgi[id][petAdi],id, PetTurIsim(PetBilgi[id][petTuru]), (PetBilgi[id][petCinsiyet] == 1) ? ("Erkek") : ("Kadýn"), PetBilgi[id][petSaglik], PetBilgi[id][petAclik]);
					if(PetBilgi[id][petRenk] == 6) format(str, sizeof(str), "{ee00ff}[%s]\n\n{AFAFAF}ID: %d\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saðlýk: %.1f\nAçlýk: %d",PetBilgi[id][petAdi],id, PetTurIsim(PetBilgi[id][petTuru]), (PetBilgi[id][petCinsiyet] == 1) ? ("Erkek") : ("Kadýn"), PetBilgi[id][petSaglik], PetBilgi[id][petAclik]);
					if(PetBilgi[id][petRenk] == 7) format(str, sizeof(str), "{2aff00}[%s]\n\n{AFAFAF}ID: %d\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saðlýk: %.1f\nAçlýk: %d",PetBilgi[id][petAdi],id, PetTurIsim(PetBilgi[id][petTuru]), (PetBilgi[id][petCinsiyet] == 1) ? ("Erkek") : ("Kadýn"), PetBilgi[id][petSaglik], PetBilgi[id][petAclik]);
					PetBilgi[id][petText] = CreateDynamic3DTextLabel(str, -1, pos[0], pos[1], pos[2], 10.0, npc, INVALID_VEHICLE_ID, 1);
					//Attach3DTextLabelToPlayer(PetBilgi[id][petText], npc, 0.0, 0.0, 0.0);
	            }
	            else
	            {
	                if(PetKontrol[playerid] == id) return HataMesajGonder(playerid, "Petinizi kontrol ettiðiniz için bunu yapamazsýnýz. (/pet) ");
	                PetBilgi[id][petSaglik] = FCNPC_GetHealth(PetBilgi[id][NPCID]);
	                FCNPC_Destroy(PetBilgi[id][NPCID]);
	                PetBilgi[id][petTakip] = -1;
	                PetBilgi[id][NPCID] = -1;
	                PetBilgi[id][petDurum] = false;
	                DestroyDynamic3DTextLabel(PetBilgi[id][petText]);
	            }
	        }
	    }
	    return 1;
	}
	if(dialogid == DIALOG_PET)
	{
	    new id = GetPVarInt(playerid, "PetID");
	    if(response)
	    {
	        if(id == -1) return 1;
	        switch(listitem)
	        {
	            case 0: ShowPlayerDialog(playerid, DIALOG_PET+1, DIALOG_STYLE_INPUT, "{FFFFFF}Pet - Isim Deðiþtir", "{f70202}» {FFFFFF}Lütfen petiniz için yeni bir isim belirleyin:", "Deðiþtir", "Geri");
	            case 1: ShowPlayerDialog(playerid, DIALOG_PET+2, DIALOG_STYLE_LIST, "{FFFFFF}Pet - Ad Rengi", "{FFFFFF}Beyaz\n{0295f7}Mavi\n{f70202}Kýrmýzý\n{f77002}Turuncu\n{ffff00}Sarý\n{ee00ff}Mor\n{2aff00}Yeþil", "Seç", "Geri");
	            case 2: ShowPlayerDialog(playerid, DIALOG_PET+3, DIALOG_STYLE_LIST, "{FFFFFF}Pet - Türünü Deðiþtir", "{FFFFFF}Black Pitbull\n{FFFFFF}Boxer Dog\n{FFFFFF}Brown Pitbull\n{FFFFFF}Bull Terrier\n{FFFFFF}Dalmation\n{FFFFFF}Doberman\n{FFFFFF}European Shepherd\n{FFFFFF}German Shorthair\n{FFFFFF}Gray Pitbull\n{FFFFFF}Siberian Husky\n{FFFFFF}White Pitbull", "Seç", "Geri");
	            case 3:
				{
				    if(PetBilgi[id][petCinsiyet] == 1) PetBilgi[id][petCinsiyet] = 2;
				    else PetBilgi[id][petCinsiyet] = 1;
				    Pet_Kaydet(id);
				    PetDialog(playerid, id);
				}
				case 6:
				{
				    if(PetBilgi[id][petAclik] <= 5) return HataMesajGonder(playerid, "Petiniz aç olduðu için bu iþlemi gerçekleþtiremezsiniz.");
				    new Float:can, Float:zirh;
				    PetKontrol[playerid] = id;
				    SetPVarInt(playerid, "LastSkin",GetPlayerSkinEx(playerid));
				    SetPVarInt(playerid, "LastInterior", GetPlayerInterior(playerid));
				    SetPVarInt(playerid, "LastVw", GetPlayerVirtualWorld(playerid));
				    GetPlayerHealth(playerid, can);
				    GetPlayerArmour(playerid, zirh);
				    SetPVarFloat(playerid, "LastHealth", can);
				    SetPVarFloat(playerid, "LastArmour", zirh);
				    GetPlayerPos(playerid, LastPos[playerid][0], LastPos[playerid][1], LastPos[playerid][2]);
				    SetPlayerSkin(playerid, PetTurSkin(PetBilgi[id][petTuru]));
				    SetPlayerHealth(playerid, FCNPC_GetHealth(PetBilgi[id][NPCID]));
				    SetPlayerArmour(playerid, 0);
				    FCNPC_SetVirtualWorld(PetBilgi[id][NPCID], 500);
				    PetBilgi[id][petTakip] = -1;
				    PetBilgi[id][petSaldir] = -1;
				    MesajGonder(playerid, "Petinizi kontrol ediyorsunuz, çýkmak için (/pet) yazabilirsiniz.");
				}
				case 7:
				{
				    if(PetBilgi[id][petTakip] == -1)
				    {
				        if(PetBilgi[id][petAclik] <= 5) return HataMesajGonder(playerid, "Petiniz aç, sizi takip edecek gücü yok.");
				        FCNPC_ClearAnimations(PetBilgi[id][NPCID]);
				        PetBilgi[id][petTakip] = playerid;
				        PetBilgi[id][petSaldir] = -1;
				        FCNPC_StopAttack(PetBilgi[id][NPCID]);
                        MesajGonder(playerid, "Petiniz artýk sizi takip ediyor.");
				    }
				    else
				    {
				        PetBilgi[id][petTakip] = -1;
				        PetBilgi[id][petSaldir] = -1;
				        MesajGonder(playerid, "Petiniz artýk sizi takip etmiyor.");
				    }
				}
				case 8:
				{
					if(PetBilgi[id][petAclik] > 50) return SendClientMessage(playerid,0xff0000ff, "» Petiniz aç deðil.");
					PetBilgi[id][petAclik] = 100;
					Pet_Kaydet(id);
					MesajGonder(playerid, "Petinizi beslediniz.");
				}
				case 9:
				{
				    if(FCNPC_GetHealth(PetBilgi[id][NPCID]) >= 95) return HataMesajGonder(playerid, "Petinizin iyileþmeye ihtiyacý yok.");
				    if(PlayerData[playerid][pCash] < floatround(100-FCNPC_GetHealth(PetBilgi[id][NPCID]))*3) return HataMesajGonder(playerid, "Yeterli paranýz yok.");
				    ParaVer(playerid, -floatround(100-FCNPC_GetHealth(PetBilgi[id][NPCID]))*3);
				    FCNPC_SetHealth(PetBilgi[id][NPCID], 100.0);
				    PetBilgi[id][petSaglik] = 100.0;
				    Pet_Kaydet(id);
				    MesajGonder(playerid, "Petinizi iyileþtirdiniz.");
				}
	        }
	    }
	    return 1;
	}
	if(dialogid == DIALOG_PET+1)
	{
	    if(!response) return callcmd::pet(playerid);
	    if(response)
	    {
	        if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_PET+1, DIALOG_STYLE_INPUT, "{FFFFFF}Pet - Isim Deðiþtir", "{f70202}» {FFFFFF}Lütfen petiniz için yeni bir isim belirleyin:", "Deðiþtir", "Geri");
	        if(strlen(inputtext) > 24) return ShowPlayerDialog(playerid, DIALOG_PET+1, DIALOG_STYLE_INPUT, "{FFFFFF}Pet - Isim Deðiþtir", "{f70202}» {FFFFFF}Lütfen petiniz için yeni bir isim belirleyin:", "Deðiþtir", "Geri");
	        new id = GetPVarInt(playerid, "PetID");
	        format(PetBilgi[id][petAdi], 24, inputtext);
	        Pet_Kaydet(id);
	        PetDialog(playerid, id);
	    }
	    return 1;
	}
	if(dialogid == DIALOG_PET+2)
	{
	    if(!response) return PetDialog(playerid, GetPVarInt(playerid, "PetID"));
	    if(response)
	    {
	        PetBilgi[GetPVarInt(playerid, "PetID")][petRenk] = listitem+1;
	        Pet_Kaydet(GetPVarInt(playerid, "PetID"));
	        PetDialog(playerid, GetPVarInt(playerid, "PetID"));
	    }
	    return 1;
	}
	if(dialogid == DIALOG_PET+3)
	{
	    if(!response) return PetDialog(playerid, GetPVarInt(playerid, "PetID"));
	    if(response)
	    {
	        PetBilgi[GetPVarInt(playerid, "PetID")][petTuru] = listitem+1;
	        FCNPC_SetSkin(PetBilgi[GetPVarInt(playerid, "PetID")][NPCID], PetTurSkin(listitem+1));
	        Pet_Kaydet(GetPVarInt(playerid, "PetID"));
	        PetDialog(playerid, GetPVarInt(playerid, "PetID"));
	    }
	    return 1;
	}
	if(dialogid == DIALOG_PET_IYILESTIR)
	{
	    if(response)
	    {
	        new id = GetPVarInt(playerid, "PetID");
	        if(PlayerData[playerid][pCash] < 500) return HataMesajGonder(playerid, "Yeterli paranýz yok.");
	        ParaVer(playerid, -500);
	        PetBilgi[id][petYarali] = 0;
	        Pet_Kaydet(id);
	        MesajGonder(playerid, "Petiniz iyileþtirildi, artýk onu spawn edebilirsiniz. (/petlerim)");
	    }
	}
    if(dialogid == COPOBJECTS_DIALOG)
	{
		if(!response) return 1;
		if(listitem == 0) ShowModelSelectionMenu(playerid, RoadblockList, "Roadblocks", 0x393939BB, 0x3498DBBB);
		if(listitem == 1) ShowModelSelectionMenu(playerid, SignList, "Signs", 0x393939BB, 0x3498DBBB);

		if(listitem == 2)
		{
		    new id = GetFreeObjectID();
		    if(id == -1) return HataMesajGonder(playerid, "Obje oluþturulurken hata oluþtu, geliþtiri ekibiyle iletiþime geçiniz.");
		    CopObjectData[id][ObjCreated] = true;
		    CopObjectData[id][Owner] = PlayerData[playerid][pID];
		    CopObjectData[id][Type] = OBJECT_TYPE_POLICELINE;
		    CopObjectData[id][ObjModel] = 19834;
		    CopObjectData[id][ObjInterior] = GetPlayerInterior(playerid);
		    CopObjectData[id][ObjVirtualWorld] = GetPlayerVirtualWorld(playerid);

		    new Float: x, Float: y, Float: z, Float: a;
		    GetPlayerPos(playerid, x, y, z);
		    GetPlayerFacingAngle(playerid, a);
		    x += (2.0 * floatsin(-a, degrees));
			y += (2.0 * floatcos(-a, degrees));
			CopObjectData[id][ObjX] = x;
			CopObjectData[id][ObjY] = y;
			CopObjectData[id][ObjZ] = z;
			CopObjectData[id][ObjRX] = 0.0;
			CopObjectData[id][ObjRY] = 0.0;
			CopObjectData[id][ObjRZ] = a;
			CopObjectData[id][ObjID] = CreateDynamicObject(19834, x, y, z, 0.0, 0.0, a, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
			CopObjectData[id][ObjArea] = -1;

			new string[96];
			format(string, sizeof(string), "Olay Yeri Þeridi (ID: %d)\n{FFFFFF}Yerleþtiren: %s", id, ReturnName(playerid, 0));
			CopObjectData[id][ObjLabel] = CreateDynamic3DTextLabel(string, 0x3498DBFF, x, y, z + 0.35, 5.0, _, _, _, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
            InsertObjectToDB(id);
		}

		if(listitem == 3)
		{
		    new id = GetFreeObjectID();
		    if(id == -1) return HataMesajGonder(playerid, "Obje oluþturulurken hata oluþtu, geliþtiri ekibiyle iletiþime geçiniz.");
		    CopObjectData[id][ObjCreated] = true;
		    CopObjectData[id][Owner] = PlayerData[playerid][pID];
		    CopObjectData[id][Type] = OBJECT_TYPE_SPIKE;
		    CopObjectData[id][ObjModel] = 2899;
		    CopObjectData[id][ObjInterior] = GetPlayerInterior(playerid);
		    CopObjectData[id][ObjVirtualWorld] = GetPlayerVirtualWorld(playerid);

		    new Float: x, Float: y, Float: z, Float: a;
		    GetPlayerPos(playerid, x, y, z);
		    GetPlayerFacingAngle(playerid, a);
		    x += (2.0 * floatsin(-a, degrees));
			y += (2.0 * floatcos(-a, degrees));

			CopObjectData[id][ObjX] = x;
			CopObjectData[id][ObjY] = y;
			CopObjectData[id][ObjZ] = z - 0.85;
			CopObjectData[id][ObjRX] = 0.0;
			CopObjectData[id][ObjRY] = 0.0;
			CopObjectData[id][ObjRZ] = a + 90.0;
			CopObjectData[id][ObjID] = CreateDynamicObject(2899, x, y, z - 0.85, 0.0, 0.0, a + 90.0, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
			CopObjectData[id][ObjArea] = CreateDynamicSphere(x, y, z - 0.85, 2.5, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);

			new string[96];
			format(string, sizeof(string), "Çivi (ID: %d)\n{FFFFFF}Yerleþtiren: %s", id, ReturnName(playerid, 0));
			CopObjectData[id][ObjLabel] = CreateDynamic3DTextLabel(string, 0x3498DBFF, x, y, z - 0.4, 3.0, _, _, _, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
            InsertObjectToDB(id);
		}

		if(listitem == 4) ShowPlayerDialog(playerid, COPOBJECTS_DIALOG+1, DIALOG_STYLE_INPUT, "Hýz Kamerasý", "Lütfen hýz limitini girin:", "Oluþtur", "Ýptal");
	    return 1;
	}

	if(dialogid == COPOBJECTS_DIALOG+1)
	{
		if(!response) return 1;
		if(isnull(inputtext) || !IsNumeric(inputtext)) return ShowPlayerDialog(playerid, COPOBJECTS_DIALOG+1, DIALOG_STYLE_INPUT, "Hýz Kamerasý", "Lütfen hýz limitini girin:", "Oluþtur", "Iptal");
		if(strval(inputtext) < 10 || strval(inputtext) > 250)
		{
		    HataMesajGonder(playerid, "En az 10, en fazla 250 girebilirsiniz.");
		    return ShowPlayerDialog(playerid, COPOBJECTS_DIALOG+1, DIALOG_STYLE_INPUT, "Hýz Kamerasý", "Lütfen hýz limitini girin:", "Oluþtur", "Iptal");
		}
		new id = GetFreeObjectID(), limit = strval(inputtext);
	    if(id == -1) return HataMesajGonder(playerid, "Obje oluþturulurken hata oluþtu, geliþtiri ekibiyle iletiþime geçiniz.");
	    CopObjectData[id][ObjCreated] = true;
	    CopObjectData[id][Owner] = PlayerData[playerid][pID];
	    CopObjectData[id][Type] = OBJECT_TYPE_SPEEDCAM;
	    CopObjectData[id][ObjData] = limit;
	    CopObjectData[id][ObjModel] = 18880;
	    CopObjectData[id][ObjInterior] = GetPlayerInterior(playerid);
	    CopObjectData[id][ObjVirtualWorld] = GetPlayerVirtualWorld(playerid);

	    new Float: x, Float: y, Float: z, Float: a;
	    GetPlayerPos(playerid, x, y, z);
	    GetPlayerFacingAngle(playerid, a);
	    x += (2.0 * floatsin(-a, degrees));
		y += (2.0 * floatcos(-a, degrees));
		CopObjectData[id][ObjX] = x;
		CopObjectData[id][ObjY] = y;
		CopObjectData[id][ObjZ] = z - 1.5;
		CopObjectData[id][ObjRX] = 0.0;
		CopObjectData[id][ObjRY] = 0.0;
		CopObjectData[id][ObjRZ] = 0.0;
		CopObjectData[id][ObjID] = CreateDynamicObject(18880, x, y, z - 1.5, 0.0, 0.0, 0.0, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
		CopObjectData[id][ObjArea] = CreateDynamicSphere(x, y, z - 1.5, SPEEDCAM_RANGE, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);

		new string[128];
		format(string, sizeof(string), "Hýz Kamerasý (ID: %d)\n{FFFFFF}Hýz Limiti: {E74C3C}%d\n{FFFFFF}Yerleþtiren: %s", id, limit, ReturnName(playerid, 0));
		CopObjectData[id][ObjLabel] = CreateDynamic3DTextLabel(string, 0x3498DBFF, x, y, z + 3.85, SPEEDCAM_RANGE, _, _, _, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
        InsertObjectToDB(id);
		return 1;
	}
	switch(dialogid)
	{
	    case DIALOG_ORE_TAKE:
		{
		    if(!response) return 1;
		    if(MiningVein[playerid] != -1) return HataMesajGonder(playerid, "Zaten cevher çýkarýyorsunuz.");
			if(CarryingOre[playerid] != -1) return HataMesajGonder(playerid, "Zaten cevher taþýyorsunuz.");
			new id = GetNearestVehicleEx(playerid);
			if(!IsValidVehicle(id)) return HataMesajGonder(playerid,  "Herhangi bir araca yakýn deðilsiniz.");
			new Float: x, Float: y, Float: z;
			GetVehicleBoot(id, x, y, z);
			if(GetPlayerDistanceFromPoint(playerid, x, y, z) > 3.0) return HataMesajGonder(playerid, "Aracýn arkasýna yakýn deðilsiniz.");
			if(LoadedOres[id][listitem] < 1) return HataMesajGonder(playerid, "Cevher yüklenmemiþ.");
			LoadedOres[id][listitem]--;
			Player_GiveOre(playerid, listitem, 2);
		}
	    case DIALOG_BANK_MENU_NOLOGIN:
	    {
	        if(!response) return 1;
	        if(listitem == 0)
	        {
	            if(GetPVarInt(playerid, "usingATM"))
				{
				    HataMesajGonder(playerid,"Bunu ATM'de yapamazsýnýz, bankayý ziyaret etmelisiniz.");
					return Bank_ShowMenu(playerid);
				}

	            if(ACCOUNT_PRICE > PlayerData[playerid][pCash])
	            {
	                HataMesajGonder(playerid,"Yeterli paranýz yok.");
	                return Bank_ShowMenu(playerid);
	            }

				#if defined ACCOUNT_CLIMIT
				if(Bank_AccountCount(playerid) >= ACCOUNT_CLIMIT)
	            {
	                HataMesajGonder(playerid,"En fazla %d banka hesabý oluþturabilirsiniz.", ACCOUNT_CLIMIT);
	                return Bank_ShowMenu(playerid);
	            }
				#endif

				ShowPlayerDialog(playerid, DIALOG_BANK_CREATE_ACCOUNT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Hesap Oluþtur", "Lütfen hesabýnýz için bir þifre belirleyin:", "Oluþtur", "Geri");
	        }

	        if(listitem == 1) Bank_ListAccounts(playerid);
	        if(listitem == 2) ShowPlayerDialog(playerid, DIALOG_BANK_LOGIN_ID, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Giriþ", "Hesap Numarasý:", "Devam", "Iptal");
	        return 1;
	    }
     	/* ---------------------------------------------------------------------- */
     	case DIALOG_BANK_MENU:
		{
		    if(!response) return 1;
		    if(listitem == 0)
	        {
	            if(GetPVarInt(playerid, "usingATM"))
				{
				    HataMesajGonder(playerid,"Bunu ATM'de yapamazsýnýz, bir bankayý ziyaret etmelisiniz.");
					return Bank_ShowMenu(playerid);
				}

	            if(ACCOUNT_PRICE > PlayerData[playerid][pCash])
	            {
	                HataMesajGonder(playerid,"Yeterli paranýz yok.");
	                return Bank_ShowMenu(playerid);
	            }

				#if defined ACCOUNT_CLIMIT
				if(Bank_AccountCount(playerid) >= ACCOUNT_CLIMIT)
	            {
	                HataMesajGonder(playerid,"En fazla %d banka hesabý oluþturabilirsiniz.", ACCOUNT_CLIMIT);
	                return Bank_ShowMenu(playerid);
	            }
				#endif

				ShowPlayerDialog(playerid, DIALOG_BANK_CREATE_ACCOUNT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Hesap Oluþtur", "Lütfen hesabýnýz için bir þifre belirleyin:", "Oluþtur", "Geri");
	        }

	        if(listitem == 1) Bank_ListAccounts(playerid);
	        if(listitem == 2) ShowPlayerDialog(playerid, DIALOG_BANK_DEPOSIT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Yatýr", "Lütfen yatýrmak istediðiniz para miktarýný girin:", "Yatýr", "Geri");
            if(listitem == 3) ShowPlayerDialog(playerid, DIALOG_BANK_WITHDRAW, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Çek", "Lütfen hesabýnýzdan çekmek istediðiniz para miktarýný girin:", "Çek", "Geri");
			if(listitem == 4) ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_1, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Transfer", "Hesap Numarasý girin:", "Devam", "Geri");
            if(listitem == 5)
			{
			    if(GetPVarInt(playerid, "usingATM"))
				{
				    HataMesajGonder(playerid,"Bunu ATM'de yapamazsýnýz, bir bankayý ziyaret etmelisiniz.");
					return Bank_ShowMenu(playerid);
				}

				Bank_ShowLogMenu(playerid);
			}

			if(listitem == 6)
			{
			    if(GetPVarInt(playerid, "usingATM"))
				{
				    HataMesajGonder(playerid,"Bunu ATM'de yapamazsýnýz, bir bankayý ziyaret etmelisiniz.");
					return Bank_ShowMenu(playerid);
				}
				if(Bank_GetOwner(CurrentAccountID[playerid]) != PlayerData[playerid][pID])
				{
				    HataMesajGonder(playerid, "Bu iþlemi sadece hesabýn sahibi yapabilir.");
				    return Bank_ShowMenu(playerid);
				}

				ShowPlayerDialog(playerid, DIALOG_BANK_PASSWORD, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Þifre Deðiþtir", "Lütfen yeni bir þifre belirleyin:", "Deðiþtir", "Geri");
			}

			if(listitem == 7)
			{
			    if(GetPVarInt(playerid, "usingATM"))
				{
				    HataMesajGonder(playerid,"Bunu ATM'de yapamazsýnýz, bir bankayý ziyaret etmelisiniz.");
					return Bank_ShowMenu(playerid);
				}

			    if(Bank_GetOwner(CurrentAccountID[playerid]) != PlayerData[playerid][pID])
				{
				    HataMesajGonder(playerid, "Bu iþlemi sadece hesabýn sahibi yapabilir.");
				    return Bank_ShowMenu(playerid);
				}

				ShowPlayerDialog(playerid, DIALOG_BANK_REMOVE, DIALOG_STYLE_MSGBOX, "{F1C40F}Banka: {FFFFFF}Hesap Sil", "Hesabýnýzý silmek istediðinize emin misiniz?", "Evet", "Hayýr");
				// https://youtu.be/rcjpags7JT8 - because it doesn't get deleted actually
			}

			if(listitem == 8)
			{
			    MesajGonder(playerid, "Hesaptan çýkýþ yaptýnýz.");

			    CurrentAccountID[playerid] = -1;
			    Bank_ShowMenu(playerid);
			}
		}
        /* ---------------------------------------------------------------------- */
	    case DIALOG_BANK_CREATE_ACCOUNT:
	    {
	        if(!response) return Bank_ShowMenu(playerid);
	        if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_CREATE_ACCOUNT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Hesap Oluþtur", "{E74C3C}Þifreyi boþ býrakamazsýnýz.\n\n{FFFFFF}Lütfen hesabýnýz için bir þifre belirleyin:", "Oluþtur", "Geri");
			if(strlen(inputtext) > 16) return ShowPlayerDialog(playerid, DIALOG_BANK_CREATE_ACCOUNT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Hesap Oluþtur", "{E74C3C}Þifreniz 16 karakterden uzun olmamalý.\n\n{FFFFFF}Lütfen hesabýnýz için bir þifre belirleyin:", "Oluþtur", "Geri");
			if(ACCOUNT_PRICE > PlayerData[playerid][pCash])
            {
                HataMesajGonder(playerid, "Yeterli paranýz yok.");
                return Bank_ShowMenu(playerid);
            }

			#if defined ACCOUNT_CLIMIT
			if(Bank_AccountCount(playerid) >= ACCOUNT_CLIMIT)
            {
                MesajGonder(playerid, "En fazla %d banka hesabý oluþturabilirsiniz.", ACCOUNT_CLIMIT);
                return Bank_ShowMenu(playerid);
            }
			#endif

			new query[144];
			mysql_format(baglanti, query, sizeof(query), "INSERT INTO bank_accounts SET Owner='%d', Password=md5('%e'), CreatedOn=UNIX_TIMESTAMP()", PlayerData[playerid][pID], inputtext);
			mysql_tquery(baglanti, query, "OnBankAccountCreated", "is", playerid, inputtext);
	        return 1;
	    }
	    /* ---------------------------------------------------------------------- */
	    case DIALOG_BANK_ACCOUNTS:
	    {
            if(!response) return Bank_ShowMenu(playerid);

            SetPVarInt(playerid, "bankLoginAccount", strval(inputtext));
			ShowPlayerDialog(playerid, DIALOG_BANK_LOGIN_PASS, DIALOG_STYLE_PASSWORD, "{F1C40F}Banka: {FFFFFF}Giriþ", "Hesap Þifresi:", "Giriþ", "Iptal");
	        return 1;
	    }
	    /* ---------------------------------------------------------------------- */
	    case DIALOG_BANK_LOGIN_ID:
	    {
	        if(!response) return Bank_ShowMenu(playerid);
	        if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_LOGIN_ID, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Giriþ", "{E74C3C}Hesap numarasýný boþ býrakamazsýnýz.\n\n{FFFFFF}Hesap Numarasý:", "Devam", "Iptal");

			SetPVarInt(playerid, "bankLoginAccount", strval(inputtext));
			ShowPlayerDialog(playerid, DIALOG_BANK_LOGIN_PASS, DIALOG_STYLE_PASSWORD, "{F1C40F}Banka: {FFFFFF}Giriþ", "Hesap Þifresi:", "Giriþ", "Iptal");
			return 1;
	    }
	    /* ---------------------------------------------------------------------- */
	    case DIALOG_BANK_LOGIN_PASS:
	    {
	        if(!response) return Bank_ShowMenu(playerid);
	        if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_LOGIN_PASS, DIALOG_STYLE_PASSWORD, "{F1C40F}Banka: {FFFFFF}Giriþ", "{E74C3C}Þifreyi boþ býrakamazsýnýz.\n\n{FFFFFF}Hesap Þifresi:", "Giriþ", "Iptal");

			new query[200], id = GetPVarInt(playerid, "bankLoginAccount");
			mysql_format(baglanti, query, sizeof(query), "SELECT Owner, LastAccess, FROM_UNIXTIME(LastAccess, '%%d/%%m/%%Y %%H:%%i:%%s') AS Last FROM bank_accounts WHERE ID=%d && Password=md5('%e') && Disabled=0 LIMIT 1", id, inputtext);
			mysql_tquery(baglanti, query, "OnBankAccountLogin", "ii", playerid, id);
			return 1;
	    }
	    /* ---------------------------------------------------------------------- */
	    case DIALOG_BANK_DEPOSIT:
	    {
			if(!response) return Bank_ShowMenu(playerid);
			if(CurrentAccountID[playerid] == -1) return 1;
     		if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_DEPOSIT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Yatýr", "{E74C3C}Boþ býrakamazsýnýz.\n\n{FFFFFF}Lütfen yatýrmak istediðiniz para miktarýný girin:", "Yatýr", "Geri");
			new amount = strval(inputtext);
			if(!(1 <= amount <= (GetPVarInt(playerid, "usingATM") ? 5000000 : 250000000))) return ShowPlayerDialog(playerid, DIALOG_BANK_DEPOSIT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Yatýr", "{E74C3C}En az $1, en fazla $250,000,000 para yatýrabilirsiniz.\n\n{FFFFFF}Lütfen yatýrmak istediðiniz para miktarýný girin:", "Yatýr", "Geri");
			if(amount > PlayerData[playerid][pCash]) return ShowPlayerDialog(playerid, DIALOG_BANK_DEPOSIT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Yatýr", "{E74C3C}O kadar paranýz yok.\n\n{FFFFFF}Lütfen yatýrmak istediðiniz para miktarýný girin:", "Yatýr", "Geri");
			if((amount + Bank_GetBalance(CurrentAccountID[playerid])) > ACCOUNT_LIMIT)
			{
   				HataMesajGonder(playerid, "Bu hesaba daha fazla para yatýramazsýnýz.");
			    return Bank_ShowMenu(playerid);
			}

			new query[96];
			mysql_format(baglanti, query, sizeof(query), "UPDATE bank_accounts SET Balance=Balance+%d WHERE ID=%d && Disabled=0", amount, CurrentAccountID[playerid]);
			mysql_tquery(baglanti, query, "OnBankAccountDeposit", "ii", playerid, amount);
			return 1;
		}
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_WITHDRAW:
	    {
			if(!response) return Bank_ShowMenu(playerid);
			if(CurrentAccountID[playerid] == -1) return 1;
     		if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_WITHDRAW, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Çek", "{E74C3C}Burayý boþ býrakamazsýnýz.\n\n{FFFFFF}Lütfen hesabýnýzdan çekmek istediðiniz para miktarýný girin:", "Çek", "Geri");
			new amount = strval(inputtext);
			if(!(1 <= amount <= (GetPVarInt(playerid, "usingATM") ? 5000000 : 250000000))) return ShowPlayerDialog(playerid, DIALOG_BANK_WITHDRAW, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Çek", "{E74C3C}En az $1, en fazla $250,000,000 çekebilirsiniz.\n\n{FFFFFF}Lütfen hesabýnýzdan çekmek istediðiniz para miktarýný girin:", "Çek", "Geri");
			if(amount > Bank_GetBalance(CurrentAccountID[playerid])) return ShowPlayerDialog(playerid, DIALOG_BANK_WITHDRAW, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Çek", "{E74C3C}Hesabýnýzda o kadar para yok.\n\n{FFFFFF}Lütfen hesabýnýzdan çekmek istediðiniz para miktarýný girin:", "Çek", "Geri");

			new query[96];
			mysql_format(baglanti, query, sizeof(query), "UPDATE bank_accounts SET Balance=Balance-%d WHERE ID=%d && Disabled=0", amount, CurrentAccountID[playerid]);
			mysql_tquery(baglanti, query, "OnBankAccountWithdraw", "ii", playerid, amount);
			return 1;
		}
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_TRANSFER_1:
	    {
			if(!response) return Bank_ShowMenu(playerid);
			if(CurrentAccountID[playerid] == -1) return 1;
     		if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_1, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Transfer", "{E74C3C}Burayý boþ býrakamazsýnýz.\n\n{FFFFFF}Hesap numarasý girin:", "Devam", "Geri");
            if(strval(inputtext) == CurrentAccountID[playerid]) return ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_1, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Transfer", "{E74C3C}Kendi hesap numaranýza para transfer edemezsiniz.\n\n{FFFFFF}Hesap numarasý girin:", "Devam", "Geri");
            SetPVarInt(playerid, "bankTransferAccount", strval(inputtext));
            ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_2, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Transfer", "Lütfen transfer etmek istediðiniz para miktarýný girin:", "Transfer", "Geri");
            return 1;
		}
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_TRANSFER_2:
        {
            if(!response) return ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_1, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Transfer", "Hesap numarasý girin:", "Devam", "Geri");
            if(CurrentAccountID[playerid] == -1) return 1;
			if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_2, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Transfer", "{E74C3C}Burayý boþ býrakamazsýnýz.\n\n{FFFFFF}Lütfen transfer etmek istediðiniz para miktarýný girin:", "Transfer", "Geri");
            new amount = strval(inputtext);
			if(!(1 <= amount <= (GetPVarInt(playerid, "usingATM") ? 5000000 : 250000000))) return ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_2, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Transfer", "{E74C3C}En az $1, en fazla $250,000,000 transfer edebilirsiniz.\n\n{FFFFFF}Lütfen transfer etmek istediðiniz para miktarýný girin:", "Transfer", "Geri");
            if(amount > Bank_GetBalance(CurrentAccountID[playerid])) return ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_2, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Transfer", "{E74C3C}Hesabýnýzda o kadar para yok.\n\n{FFFFFF}Lütfen transfer etmek istediðiniz para miktarýný girin:", "Transfer", "Geri");
			new id = GetPVarInt(playerid, "bankTransferAccount");
			if((amount + Bank_GetBalance(id)) > ACCOUNT_LIMIT)
			{
				HataMesajGonder(playerid, "Bu hesaba daha fazla para gönderilemez.");
				return Bank_ShowMenu(playerid);
			}

			new query[96];
			mysql_format(baglanti, query, sizeof(query), "UPDATE bank_accounts SET Balance=Balance+%d WHERE ID=%d && Disabled=0", amount, id);
			mysql_tquery(baglanti, query, "OnBankAccountTransfer", "iii", playerid, id, amount);
            return 1;
        }
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_PASSWORD:
        {
        	if(!response) return Bank_ShowMenu(playerid);
        	if(CurrentAccountID[playerid] == -1) return 1;
	        if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_PASSWORD, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Þifre Deðiþtir", "{E74C3C}Burayý boþ býrakamazsýnýz.\n\n{FFFFFF}Lütfen hesabýnýz için yeni bir þifre belirleyin:", "Deðiþtir", "Geri");
			if(strlen(inputtext) > 16) return ShowPlayerDialog(playerid, DIALOG_BANK_PASSWORD, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Þifre Deðiþtir", "{E74C3C}Þifreniz 16 karakterden fazla olmamalý.\n\n{FFFFFF}Lütfen hesabýnýz için yeni bir þifre belirleyin:", "Deðiþtir", "Geri");

			new query[128];
			mysql_format(baglanti, query, sizeof(query), "UPDATE bank_accounts SET Password=md5('%e') WHERE ID=%d && Disabled=0", inputtext, CurrentAccountID[playerid]);
			mysql_tquery(baglanti, query, "OnBankAccountPassChange", "is", playerid, inputtext);
	        return 1;
	    }
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_REMOVE:
        {
            if(!response) return Bank_ShowMenu(playerid);
            if(CurrentAccountID[playerid] == -1) return 1;

            new query[96], amount = Bank_GetBalance(CurrentAccountID[playerid]);
			mysql_format(baglanti, query, sizeof(query), "UPDATE bank_accounts SET Disabled=1 WHERE ID=%d", CurrentAccountID[playerid]);
			mysql_tquery(baglanti, query, "OnBankAccountDeleted", "iii", playerid, CurrentAccountID[playerid], amount);
            return 1;
        }
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_LOGS:
        {
            if(!response) return Bank_ShowMenu(playerid);
            if(CurrentAccountID[playerid] == -1) return 1;

            new typelist[6] = {TYPE_NONE, TYPE_DEPOSIT, TYPE_WITHDRAW, TYPE_TRANSFER, TYPE_LOGIN, TYPE_PASSCHANGE};
            LogListType[playerid] = typelist[listitem + 1];
            LogListPage[playerid] = 0;
            Bank_ShowLogs(playerid);
            return 1;
   		}
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_LOG_PAGE:
		{
		    if(CurrentAccountID[playerid] == -1 || LogListType[playerid] == TYPE_NONE) return 1;
			if(!response) {
			    LogListPage[playerid]--;
			    if(LogListPage[playerid] < 0) return Bank_ShowLogMenu(playerid);
			}else{
			    LogListPage[playerid]++;
			}

			Bank_ShowLogs(playerid);
		    return 1;
		}
		/* -------------------------------------------------------------------------- */
	    case DIALOG_DRUG_STATS:
	    {
	        if(!response) return 1;
	        if(listitem < 9) {
	            ShowDrugStats(playerid);
	        }else{
	            ShowPlayerDialog(playerid, DIALOG_CONFIRM_RESET, DIALOG_STYLE_MSGBOX, "Uyuþturucu Ýstatistikleri Sýfýrlama", "Uyuþturucu istatistiklerinizi sýfýrlamak istediðinize emin misiniz?", "Evet", "Hayýr");
	        }

	        return 1;
	    }
	    ////////////////////////////////////////////////////////////////
	    case DIALOG_CONFIRM_RESET:
	    {
			if(!response) return ShowDrugStats(playerid);
			PlayerDrugData[playerid][TotalUsed] = PlayerDrugData[playerid][TotalPlanted] = PlayerDrugData[playerid][TotalHarvestedPlants] = PlayerDrugData[playerid][TotalHarvestedGrams] =
			PlayerDrugData[playerid][TotalGiven] = PlayerDrugData[playerid][TotalReceived] = PlayerDrugData[playerid][TotalBought] = PlayerDrugData[playerid][TotalBoughtPrice] =
			PlayerDrugData[playerid][TotalSold] = PlayerDrugData[playerid][TotalSoldPrice] = 0;

			Player_SaveDrugs(playerid);
			ShowDrugStats(playerid);
			return 1;
		}
	    ////////////////////////////////////////////////////////////////
	    case DIALOG_DRUG_DEALER:
	    {
         	if(response)
	        {
				if(listitem == 0)
				{
				    if(PlayerDrugData[playerid][Seeds] >= SEED_LIMIT)
				    {
				        HataMesajGonder(playerid, "Daha fazla uyuþturucu tohumu alamazsýnýz.");
				        return ShowDealerMenu(playerid);
				    }

					ShowPlayerDialog(playerid, DIALOG_DRUG_DEALER_BUY_SEEDS, DIALOG_STYLE_INPUT, "Uyuþturucu Tohumu Al", "Lütfen almak istediðiniz uyuþturucu tohumu miktarýný girin:", "Al", "Geri");
				}

                if(listitem == 1)
				{
				    if(PlayerDrugData[playerid][Drugs] >= CARRY_LIMIT)
				    {
				        HataMesajGonder(playerid, "Daha fazla uyuþturucu alamazsýnýz.");
				        return ShowDealerMenu(playerid);
				    }

				    if(DealerData[ PlayerDrugData[playerid][DealerID] ][dealerDrugs] < 1)
				    {
				        HataMesajGonder(playerid,"Bu uyuþturucu satýcýsýnýn hiç uyuþturucusu yok.");
				        return ShowDealerMenu(playerid);
				    }

					ShowPlayerDialog(playerid, DIALOG_DRUG_DEALER_BUY_DRUGS, DIALOG_STYLE_INPUT, "Uyuþturucu Satýn Al", "Lütfen satýn almak istediðiniz uyuþturucu miktarýný girin:", "Al", "Geri");
				}

				if(listitem == 2)
				{
                    if(PlayerDrugData[playerid][Drugs] < 1)
				    {
				        HataMesajGonder(playerid,"Hiç uyuþturucunuz yok.");
				        return ShowDealerMenu(playerid);
				    }

					ShowPlayerDialog(playerid, DIALOG_DRUG_DEALER_SELL, DIALOG_STYLE_INPUT, "Uyuþturucu Sat", "Lütfen satmak istediðiniz uyuþturucu miktarýný girin:", "Sat", "Geri");
				}
			}

	        return 1;
	    }
	    case DIALOG_DRUG_DEALER_BUY_SEEDS:
	    {
	        if(!response) return ShowDealerMenu(playerid);
	        if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_DRUG_DEALER_BUY_SEEDS, DIALOG_STYLE_INPUT, "Uyuþturucu Tohumu Al", "{E74C3C}Burayý boþ býrakamazsýnýz.\n\n{FFFFFF}Lütfen almak istediðiniz uyuþturucu tohumu miktarýný girin:", "Al", "Geri");
			new amount = strval(inputtext);
			if(!(0 < amount <= SEED_LIMIT))
			{
			    HataMesajGonder(playerid, "En az 1, en fazla %d uyuþturucu tohumu taþýyabilirsiniz.", SEED_LIMIT);
			    return ShowPlayerDialog(playerid, DIALOG_DRUG_DEALER_BUY_SEEDS, DIALOG_STYLE_INPUT, "Uyuþturucu Tohumu Al", "{E74C3C}Geçersiz miktar girdiniz.\n\n{FFFFFF}Lütfen almak istediðiniz uyuþturucu tohumu miktarýný girin:", "Al", "Geri");
			}
			if(PlayerDrugData[playerid][Seeds] + amount > SEED_LIMIT) amount = SEED_LIMIT - PlayerDrugData[playerid][Seeds];
			new price = amount * SEED_PRICE;
			if(price > PlayerData[playerid][pCash]) return ShowPlayerDialog(playerid, DIALOG_DRUG_DEALER_BUY_SEEDS, DIALOG_STYLE_INPUT, "Uyuþturucu Tohumu Al", "{E74C3C}Yeterli paranýz yok.\n\n{FFFFFF}Lütfen almak istediðiniz uyuþturucu tohumu miktarýný girin:", "Al", "Geri");
            PlayerDrugData[playerid][Seeds] += amount;
            ParaVer(playerid, -price);
			MesajGonder(playerid, "%s ödeyerek %d uyuþturucu tohumu satýn aldýnýz. (/utohum)", FormatNumber(price), amount);
            /*new string[96];
            format(string, sizeof(string), "DRUG DEALER: {FFFFFF}Bought %s seeds for {2ECC71}%s.", formatInt(amount, .iCurrencyChar = '\0'), formatInt(price));
            SendClientMessage(playerid, 0x3498DBFF, string);*/
			return 1;
	    }
	    ////////////////////////////////////////////////////////////////
	    case DIALOG_DRUG_DEALER_BUY_DRUGS:
	    {
	        if(!response) return ShowDealerMenu(playerid);
	        if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_DRUG_DEALER_BUY_DRUGS, DIALOG_STYLE_INPUT, "Uyuþturucu Satýn Al", "Lütfen satýn almak istediðiniz uyuþturucu miktarýný girin:", "Al", "Geri");
			new amount = strval(inputtext), id = PlayerDrugData[playerid][DealerID];
			if(!(0 < amount <= CARRY_LIMIT))
			{
			    HataMesajGonder(playerid, "En az 1, en fazla %d uyuþturucu taþýyabilirsiniz.", CARRY_LIMIT);
			    return ShowPlayerDialog(playerid, DIALOG_DRUG_DEALER_BUY_DRUGS, DIALOG_STYLE_INPUT, "Uyuþturucu Satýn Al", "Lütfen satýn almak istediðiniz uyuþturucu miktarýný girin:", "Al", "Geri");
			}
			if(amount > DealerData[id][dealerDrugs])
			{
			    HataMesajGonder(playerid, "Uyuþturucu satýcýsýnýn o kadar uyuþturucusu yok.");
			    return ShowDealerMenu(playerid);
			}

			if(PlayerDrugData[playerid][Drugs] + amount > CARRY_LIMIT) amount = CARRY_LIMIT - PlayerDrugData[playerid][Drugs];
			new price = amount * DRUG_BUY_PRICE;
			if(price > PlayerData[playerid][pCash])
			{
			    HataMesajGonder(playerid, "Yeterli paranýz yok. (%s)", FormatNumber(price));
			    return ShowPlayerDialog(playerid, DIALOG_DRUG_DEALER_BUY_DRUGS, DIALOG_STYLE_INPUT, "Uyuþturucu Satýn Al", "Lütfen satýn almak istediðiniz uyuþturucu miktarýný girin:", "Al", "Geri");
			}
			DealerData[id][dealerDrugs] -= amount;
			PlayerDrugData[playerid][Drugs] += amount;
			PlayerDrugData[playerid][TotalBought] += amount;
			PlayerDrugData[playerid][TotalBoughtPrice] += price;
            ParaVer(playerid, -price);
			MesajGonder(playerid, "%s ödeyerek %d gram uyuþturucu satýn aldýnýz.", FormatNumber(price), amount);
            /*new string[96];
            format(string, sizeof(string), "DRUG DEALER: {FFFFFF}Bought %s grams of drugs for {2ECC71}%s.", formatInt(amount, .iCurrencyChar = '\0'), formatInt(price));
            SendClientMessage(playerid, 0x3498DBFF, string);*/

            stmt_bind_value(UpdateDealerDrugs, 0, DB::TYPE_INTEGER, DealerData[id][dealerDrugs]);
            stmt_bind_value(UpdateDealerDrugs, 1, DB::TYPE_INTEGER, id);
            stmt_execute(UpdateDealerDrugs);
			return 1;
	    }
	    ////////////////////////////////////////////////////////////////
	    case DIALOG_DRUG_DEALER_SELL:
	    {
	        if(!response) return ShowDealerMenu(playerid);
	        if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_DRUG_DEALER_SELL, DIALOG_STYLE_INPUT, "Uyuþturucu Sat", "Lütfen satmak istediðiniz uyuþturucu miktarýný girin:", "Sat", "Geri");
            new amount = strval(inputtext), id = PlayerDrugData[playerid][DealerID];
			if(!(0 < amount <= CARRY_LIMIT))
			{
			    HataMesajGonder(playerid, "En az 1, en fazla %d girebilirsiniz.", CARRY_LIMIT);
			    return ShowPlayerDialog(playerid, DIALOG_DRUG_DEALER_SELL, DIALOG_STYLE_INPUT, "Uyuþturucu Sat", "Lütfen satmak istediðiniz uyuþturucu miktarýný girin:", "Sat", "Geri");
			}
			if(amount > PlayerDrugData[playerid][Drugs])
			{
			    HataMesajGonder(playerid, "O kadar uyuþturucunuz yok.");
			    return ShowPlayerDialog(playerid, DIALOG_DRUG_DEALER_SELL, DIALOG_STYLE_INPUT, "Uyuþturucu Sat", "Lütfen satmak istediðiniz uyuþturucu miktarýný girin:", "Sat", "Geri");
			}
			new price = amount * DRUG_SELL_PRICE;
			DealerData[id][dealerDrugs] += amount;
			PlayerDrugData[playerid][Drugs] -= amount;
			PlayerDrugData[playerid][TotalSold] += amount;
			PlayerDrugData[playerid][TotalSoldPrice] += price;
            ParaVer(playerid, price);
			MesajGonder(playerid, "%s miktar para karþýlýðýnda %d gram uyuþturucu sattýnýz.", FormatNumber(price), amount);
            /*new string[96];
            format(string, sizeof(string), "DRUG DEALER: {FFFFFF}Sold %s grams of drugs for {2ECC71}%s.", formatInt(amount, .iCurrencyChar = '\0'), formatInt(price));
            SendClientMessage(playerid, 0x3498DBFF, string);*/

            stmt_bind_value(UpdateDealerDrugs, 0, DB::TYPE_INTEGER, DealerData[id][dealerDrugs]);
            stmt_bind_value(UpdateDealerDrugs, 1, DB::TYPE_INTEGER, id);
            stmt_execute(UpdateDealerDrugs);
			return 1;
		}
	    ////////////////////////////////////////////////////////////////
	    case DIALOG_DRUG_OFFER:
	    {
	        if(!response)
			{
			    BilgiMesajGonder(PlayerDrugData[playerid][DrugsOfferedBy], "%s adlý kiþi uyuþturucu satma isteðinizi kabul etmedi.", ReturnName(playerid, 0));
				/*new string[96];
				format(string, sizeof(string), "DRUGS: {FFFFFF}Your offer got rejected by %s(%d).", Player_GetName(playerid), playerid);
				SendClientMessage(PlayerDrugData[playerid][DrugsOfferedBy], 0x3498DBFF, string);*/

                PlayerDrugData[playerid][DrugsOfferedBy] = INVALID_PLAYER_ID;
				return 1;
			}

	        new id = PlayerDrugData[playerid][DrugsOfferedBy], offeredp = PlayerDrugData[playerid][DrugsOfferedPrice], amount = PlayerDrugData[playerid][DrugsOfferedGram];
	        PlayerDrugData[playerid][DrugsOfferedBy] = INVALID_PLAYER_ID;
	        if(!IsPlayerConnected(id)) return HataMesajGonder(playerid, "Kiþi oyundan çýkmýþ.");
	        if(!IsPlayerNearPlayer(playerid, id, 5.0)) return HataMesajGonder(playerid, "Kiþiye yeterince yakýn deðilsiniz.");
			//if(!(0 < amount <= CARRY_LIMIT)) return HataMesajGonder(playerid,"En fazla %d uyuþturucu taþýyabilirsiniz.");
 	 	 	if(amount > PlayerDrugData[id][Drugs]) return HataMesajGonder(playerid,"Kiþinin o kadar uyuþturucusu yok.");
 	 	 	if(PlayerDrugData[playerid][Drugs] + amount > CARRY_LIMIT) amount = CARRY_LIMIT - PlayerDrugData[playerid][Drugs];
			new price = offeredp;
			if(price > PlayerData[playerid][pCash]) return HataMesajGonder(playerid,"Yeterli paranýz yok. (%s)", FormatNumber(price));
			PlayerDrugData[playerid][Drugs] += amount;
			PlayerDrugData[id][Drugs] -= amount;
            ParaVer(playerid, -price);
            ParaVer(id, price);
			MesajGonder(id, "%s adlý kiþiye %s miktar para karþýlýðýnda %d gram uyuþturucu sattýnýz.", ReturnName(playerid, 0), FormatNumber(price), amount);
			MesajGonder(playerid, "%s adlý kiþiye %s ödeyerek %d gram uyuþturucu satýn aldýnýz.", ReturnName(id, 0), FormatNumber(price), amount);
            /*new string[128];
            format(string, sizeof(string), "DRUGS: {FFFFFF}Sold %s grams of drugs to %s(%d) for {2ECC71}%s.", formatInt(amount, .iCurrencyChar = '\0'), Player_GetName(playerid), playerid, formatInt(price));
            SendClientMessage(id, 0x3498DBFF, string);

            format(string, sizeof(string), "DRUGS: {FFFFFF}Bought %s grams of drugs from %s(%d) for {2ECC71}%s.", formatInt(amount, .iCurrencyChar = '\0'), Player_GetName(id), id, formatInt(price));
            SendClientMessage(playerid, 0x3498DBFF, string);*/
			return 1;
		}
	    case 1:
	    {
	        if(!response) return Kick(playerid);
	        if(response)
	        {
	            if(listitem == 0 || listitem == 1)
	            {
	                SetPVarInt(playerid,"hata",1);
	                ShowPlayerDialog(playerid,2,DIALOG_STYLE_LIST,"{FFBF00}Refuse RP nedir?","{AA3333}Rolu kabul etmemek\n{AA3333}Rolu kabul etmek\n{AA3333}Rolu tekrarlamak","Cevapla","Çýkýþ");
				}
				else
				{
				    ShowPlayerDialog(playerid,2,DIALOG_STYLE_LIST,"{FFBF00}Refuse RP nedir?","{AA3333}Rolu kabul etmemek\n{AA3333}Rolu kabul etmek\n{AA3333}Rolu tekrarlamak","Cevapla","Çýkýþ");
				}
			}
	    }
	    case 2:
	    {
	        if(!response) return Kick(playerid);
	        if(response)
	        {
	            if(listitem == 1 || listitem == 2)
	            {
	                SetPVarInt(playerid,"hata",1);
	                ShowPlayerDialog(playerid,3,DIALOG_STYLE_LIST,"{FFBF00}Powergaming nedir?","{AA3333}Gerçek hayatta yapabileceðin þeyleri oyunda yapmamak\n{AA3333}Gerçek hayatta yapabileceðin þeyleri oyunda yapmak\n{AA3333}Gerçek hayatta yapamayacaðýn þeyleri oyunda yapmak","Cevapla","Çýkýþ");
	            }
	            else
	            {
	                ShowPlayerDialog(playerid,3,DIALOG_STYLE_LIST,"{FFBF00}Powergaming nedir?","{AA3333}Gerçek hayatta yapabileceðin þeyleri oyunda yapmamak\n{AA3333}Gerçek hayatta yapabileceðin þeyleri oyunda yapmak\n{AA3333}Gerçek hayatta yapamayacaðýn þeyleri oyunda yapmak","Cevapla","Çýkýþ");
	            }
	        }
		}
		case 3:
		{
		    if(!response) return Kick(playerid);
		    if(response)
		    {
		        if(listitem == 0 || listitem == 1)
		        {
		            SetPVarInt(playerid,"hata",1);
		            ShowPlayerDialog(playerid,4,DIALOG_STYLE_LIST,"{FFBF00}Non-RP nedir?","{AA3333}Roleplay kurallarýna uymak\n{AA3333}Roleplay kurallarýna uymamak\n{AA3333}Role girmemek","Cevapla","Çýkýþ");
		        }
		        else
		        {
		            ShowPlayerDialog(playerid,4,DIALOG_STYLE_LIST,"{FFBF00}Non-RP nedir?","{AA3333}Roleplay kurallarýna uymak\n{AA3333}Roleplay kurallarýna uymamak\n{AA3333}Role girmemek","Cevapla","Çýkýþ");
		        }
			}
		}
		case 4:
		{
		    if(!response) return Kick(playerid);
		    if(response)
		    {
		        if(listitem == 0 || listitem == 2)
		        {
		            SetPVarInt(playerid,"hata",1);
		            ShowPlayerDialog(playerid,5,DIALOG_STYLE_LIST,"{FFBF00}Mix Nedir?","{AA3333}OOC bilgiyi IC'ye yansýtmak\n{AA3333}IC bilgiyi OOC'ye yansýtmak\n{AA3333}OOC bilgiyi baþkasýna söylemek","Cevapla","Çýkýþ");
		        }
		        else
		        {
		            ShowPlayerDialog(playerid,5,DIALOG_STYLE_LIST,"{FFBF00}Mix Nedir?","{AA3333}OOC ve IC karýþtýrmak\n{AA3333}Yasaklý rol yapmak\n{AA3333}OOC bilgiyi baþkasýna söylemek","Cevapla","Çýkýþ");
				}
			}
		}
		case 5:
		{
		    if(!response) return Kick(playerid);
		    if(response)
		    {
		        if(listitem == 1 || listitem == 2)
		        {
		            HataMesajGonder(playerid,"Maalesef sorulara yanlýþ cevap verdiniz. Lütfen tekrar deneyiniz.");
					DeletePVar(playerid,"hata");
					Kick(playerid);
		        }
		        else
		        {
		            if(GetPVarInt(playerid,"hata") >= 1)
		            {
		                HataMesajGonder(playerid,"Maalesef sorulara yanlýþ cevap verdiniz. Lütfen tekrar deneyiniz.");
						DeletePVar(playerid,"hata");
						Kick(playerid);
					}
					else
					{
					    MesajGonder(playerid,"Tüm sorulara doðru cevap verdiniz, devam edebilirsiniz.");
						DeletePVar(playerid,"hata");
						new string[280];
						format(string,sizeof(string),"{FFFFFF}Sunucumuza hoþ geldin {808080}%s {FFFFFF}\nkayýt olmak için lütfen þifrenizi boþ kutucuða girin.\n\nÞifrenizi girin:",ReturnName(playerid,1));
						ShowPlayerDialog(playerid,6,DIALOG_STYLE_PASSWORD,"{FFFFFF}Kayýt - Þifre",string,"Devam","Iptal");
					}
		        }
		    }
		}
		case 6:
		{
		    if(!response) return Kick(playerid);
		    if(response)
		    {
		        new string[280];
		        if(strlen(inputtext) < 6 || strlen(inputtext) > 30)
		        {
		            HataMesajGonder(playerid,"Þifreniz 6 ile 30 karakter arasýnda olmalýdýr.");
         			format(string,sizeof(string),"{FFFFFF}Sunucumuza hoþ geldin {808080}%s {FFFFFF}\nkayýt olmak için lütfen þifrenizi boþ kutucuða girin.\n\nÞifrenizi girin:",ReturnName(playerid,1));
					ShowPlayerDialog(playerid,6,DIALOG_STYLE_PASSWORD,"{FFFFFF}Kayýt - Þifre",string,"Devam","Iptal");
					return 1;
				}
				if(TurkceKarakter(inputtext))
				{
				    HataMesajGonder(playerid,"Þifreniz Türkçe karakter içeremez.");
				    format(string,sizeof(string),"{FFFFFF}Sunucumuza hoþ geldin {808080}%s {FFFFFF}\nkayýt olmak için lütfen þifrenizi boþ kutucuða girin.\n\nÞifrenizi girin:",ReturnName(playerid,1));
					ShowPlayerDialog(playerid,6,DIALOG_STYLE_PASSWORD,"{FFFFFF}Kayýt - Þifre",string,"Devam","Iptal");
					return 1;
				}
				if(OzelKarakter(inputtext))
				{
				    HataMesajGonder(playerid,"Þifreniz Özel karakter içeremez.");
				    format(string,sizeof(string),"{FFFFFF}Sunucumuza hoþ geldin {808080}%s {FFFFFF}\nkayýt olmak için lütfen þifrenizi boþ kutucuða girin.\n\nÞifrenizi girin:",ReturnName(playerid,1));
					ShowPlayerDialog(playerid,6,DIALOG_STYLE_PASSWORD,"{FFFFFF}Kayýt - Þifre",string,"Devam","Iptal");
					return 1;
				}
				SetPVarString(playerid,"Sifre",inputtext);
				BilgiMesajGonder(playerid,"Þifreniz MD5 Ýle hash edildi ve salt edildi.");
				ShowPlayerDialog(playerid,7,DIALOG_STYLE_INPUT,"{FFFFFF}Kayýt - Yaþ","{FFFFFF}Lütfen karakterinizin yaþýný girin.","Devam","Iptal");
		    }
		}
		case 7:
		{
		    if(!response) return Kick(playerid);
		    if(response)
		    {
		        if(!IsNumeric(inputtext) || strval(inputtext) < 18 || strval(inputtext) > 80)
		        {
		            ShowPlayerDialog(playerid,7,DIALOG_STYLE_INPUT,"{FFFFFF}Kayýt - Yaþ","{FFFFFF}Lütfen 18 ila 60 arasýnda bir yaþ giriniz.","Devam","Iptal");
		            return 1;
		        }
		        SetPVarInt(playerid,"Yas",strval(inputtext));
            for (new i = 0; i < 50; i ++) {
                SendClientMessageToAll(-1, "");
            }
				    BilgiMesajGonder(playerid,"Yaþýnýz %d olarak seçtiniz.", strval(inputtext));
            ShowPlayerDialog(playerid,8,DIALOG_STYLE_LIST,"{FFFFFF}Kayýt - Cinsiyet","Cinsiyetini alttaki kutucuklara týklayarak seçebilirsin.","Erkek","Kadýn");
		    }
		}
		case 8:
		{
		    new str[700];
		    if(!response)
		    {
		        SetPVarInt(playerid,"Sex",2);
		        for(new i; i<sizeof(DogumYeri); i++)
		        {
		            format(str, sizeof(str), "%s{FFFFFF}%s\n", str, DogumYeri[i]);
		        }
            for (new i = 0; i < 50; i ++) {
                SendClientMessageToAll(-1, "");
            }
            BilgiMesajGonder(playerid,"Cinsiyetinizi kadýn olarak seçtiniz.");
		        ShowPlayerDialog(playerid,9,DIALOG_STYLE_LIST,"{FFFFFF}Kayýt - Doðum Yeri",str,"Devam","Kapat");
		    }
		    if(response)
		    {
		        SetPVarInt(playerid,"Sex",1);
		        for(new i; i<sizeof(DogumYeri); i++)
		        {
		            format(str, sizeof(str), "%s{FFFFFF}%s\n", str, DogumYeri[i]);
		        }
            for (new i = 0; i < 50; i ++) {
                SendClientMessageToAll(-1, "");
            }
            BilgiMesajGonder(playerid,"Cinsiyetinizi erkek olarak seçtiniz.");
		        ShowPlayerDialog(playerid,9,DIALOG_STYLE_LIST,"{FFFFFF}Kayýt - Doðum Yeri",str,"Devam","Kapat");
		    }
		}
		case 9:
		{
		    if(!response) return Kick(playerid);
		    if(response)
		    {
		        SetPVarString(playerid,"dogum",DogumYeri[listitem]);
            for (new i = 0; i < 50; i ++) {
                SendClientMessageToAll(-1, "");
            }
            BilgiMesajGonder(playerid,"Doðum yerinizi %s olarak seçtiniz.", DogumYeri[listitem]);
		        ShowPlayerDialog(playerid,10,DIALOG_STYLE_LIST,"{FFFFFF}Kayýt - Ten Rengi","{FFFFFF}Beyaz\nSiyah","Devam","Iptal");
		    }
		}
		case 10:
		{
		    if(!response) return Kick(playerid);
		    if(response)
		    {
		        if(listitem == 0)
		        {
              for (new i = 0; i < 50; i ++) {
                  SendClientMessageToAll(-1, "");
              }
                new query[400];
		            new pass[30];
		            new dogum[30];
		            GetPVarString(playerid,"Sifre",pass,sizeof(pass));
		            GetPVarString(playerid,"dogum",dogum,sizeof(dogum));
		            format(query,sizeof(query),"INSERT INTO `oyuncular` (`Isim`,`Sifre`,`Yas`,`Cinsiyet`,`DogumYeri`,`TenRengi`) VALUES ('%s',md5('%s'),'%d','%d','%s','1')",ReturnName(playerid),pass,GetPVarInt(playerid,"Yas"),GetPVarInt(playerid,"Sex"),SQL_ReturnEscaped(dogum));
		            mysql_query(baglanti,query);
		            PlayerData[playerid][pID] = cache_insert_id();
		            PlayerData[playerid][pYas] = GetPVarInt(playerid,"Yas");
		            PlayerData[playerid][pCinsiyet] = GetPVarInt(playerid,"Sex");
		            format(PlayerData[playerid][pDogum],30,dogum);
		            PlayerData[playerid][pTen] = 1;
		            PlayerData[playerid][pEhliyet] = 1;
					DeletePVar(playerid,"Sifre");
					DeletePVar(playerid,"Yas");
					DeletePVar(playerid,"Sex");
					DeletePVar(playerid,"dogum");
					SetPVarInt(playerid,"Kayit",1);
					TextDrawHideForPlayer(playerid, GirisTD);
					LogoDur(playerid);
					PlayerData[playerid][pCash] = 1000;
					SetSpawnInfo(playerid, NO_TEAM, (PlayerData[playerid][pCinsiyet] == 1) ? (101) : (211), 1.808619,32.384357,1199.593750, 0.0, 0, 0, 0, 0, 0, 0);
					SpawnPlayer(playerid);
		        }
		        if(listitem == 1)
		        {
		            new query[400];
		            new pass[30];
		            new dogum[30];
		            GetPVarString(playerid,"Sifre",pass,sizeof(pass));
		            GetPVarString(playerid,"dogum",dogum,sizeof(dogum));
		            format(query,sizeof(query),"INSERT INTO `oyuncular` (`Isim`,`Sifre`,`Yas`,`Cinsiyet`,`DogumYeri`,`TenRengi`) VALUES ('%s',md5('%s'),'%d','%d','%s','2')",ReturnName(playerid),pass,GetPVarInt(playerid,"Yas"),GetPVarInt(playerid,"Sex"),SQL_ReturnEscaped(dogum));
		            mysql_query(baglanti,query);
		            PlayerData[playerid][pID] = cache_insert_id();
		            PlayerData[playerid][pYas] = GetPVarInt(playerid,"Yas");
		            PlayerData[playerid][pCinsiyet] = GetPVarInt(playerid,"Sex");
		            format(PlayerData[playerid][pDogum],30,dogum);
		            PlayerData[playerid][pTen] = 2;
		            PlayerData[playerid][pEhliyet] = 1;
					DeletePVar(playerid,"Sifre");
					DeletePVar(playerid,"Yas");
					DeletePVar(playerid,"Sex");
					DeletePVar(playerid,"dogum");
					SetPVarInt(playerid,"Kayit",1);
					TextDrawHideForPlayer(playerid, GirisTD);
					LogoDur(playerid);
					PlayerData[playerid][pCash] = 1000;
					SetSpawnInfo(playerid, NO_TEAM, (PlayerData[playerid][pCinsiyet] == 1) ? (184) : (12), 1.808619,32.384357,1199.593750, 0.0, 0, 0, 0, 0, 0, 0);
					SpawnPlayer(playerid);
		        }
		    }
		}
		case 11:
		{
		    if(!response) return Kick(playerid);
		    if(response)
		    {
				new string[500];
		        if(!strlen(inputtext))
		        {
		            format(string,sizeof(string),"{FFFFFF}Sunucumuza tekrar hoþ geldin {808080}%s, {FFFFFF}\ngiriþ yapmak için þifrenizi girmelisiniz.\n\nÞifreniz:",ReturnName(playerid,0));
	    			ShowPlayerDialog(playerid,11,DIALOG_STYLE_PASSWORD,"{FFFFFF}Giriþ - Þifre",string,"Giriþ","Iptal");
	    			return 1;
				}
				format(string,sizeof(string),"SELECT * FROM `oyuncular` WHERE `Isim` = '%s' AND `Sifre` = md5('%s')",ReturnName(playerid),inputtext);
				mysql_tquery(baglanti,string,"Login","i",playerid);
			}
		}
		case 22:
		{
		    if(!response) return DeletePVar(playerid,"binaid");
		    if(response)
		    {
		        new i = GetPVarInt(playerid,"binaid");
		        if(i == -1) return 1;
		        if(isnull(inputtext)) return ShowPlayerDialog(playerid,22,DIALOG_STYLE_INPUT,"{FFFFFF}Bina Þifre","Bu bina için þifre belirlenmiþ, lütfen þifreyi girin:","Devam","Kapat");
		        if(!strcmp(EntranceData[i][entrancePass], inputtext, true))
		        {
		            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s kapýyý açar ve '%s' adlý binaya girer.", ReturnName(playerid, 0),EntranceData[i][entranceName]);
		            SetPlayerPos(playerid, EntranceData[i][entranceInt][0], EntranceData[i][entranceInt][1], EntranceData[i][entranceInt][2]);
					SetPlayerFacingAngle(playerid, EntranceData[i][entranceInt][3]);
					SetPlayerInterior(playerid, EntranceData[i][entranceInterior]);
	            	SetPlayerVirtualWorld(playerid, i+100);
					SetCameraBehindPlayer(playerid);
					ObjelerYukleniyor(playerid);
					DeletePVar(playerid, "binaid");
		        }
		        else
		        {
		            HataMesajGonder(playerid,"Hatalý þifre girdiniz.");
		            ShowPlayerDialog(playerid,22,DIALOG_STYLE_INPUT,"{FFFFFF}Bina Þifre","Bu bina için þifre belirlenmiþ, lütfen þifreyi giriniz.","Devam","Kapat");
		        }
		    }
		}
		case 23:
		{
		    if(response)
		    {
		        DeletePVar(playerid,"ehliyethata");
		        SetPVarInt(playerid,"ehliyetsinavinda",1);
				ParaVer(playerid,-200);
				ShowPlayerDialog(playerid,24,DIALOG_STYLE_LIST,"{FFBF00}Kazada ölüm riskini azaltmak için ne kullanýlmalýdýr?","{FFFFFF}El Freni\n{FFFFFF}Emniyet Kemeri\n{FFFFFF}Fren","Devam","");
		    }
		}
		case 24:
		{
		    if(!response) return DeletePVar(playerid,"ehliyetsinavinda");
		    if(response)
		    {
		        if(listitem == 0 || listitem == 2)
		        {
		            SetPVarInt(playerid,"ehliyethata",1);
		            ShowPlayerDialog(playerid,25,DIALOG_STYLE_LIST,"{FFBF00}Hangi þeritten gitmeliyiz?","{FFFFFF}Sað\n{FFFFFF}Sol\n{FFFFFF}Farketmez","Devam","");
		        }
		        else
		        {
		            ShowPlayerDialog(playerid,25,DIALOG_STYLE_LIST,"{FFBF00}Hangi þeritten gitmeliyiz?","{FFFFFF}Sað\n{FFFFFF}Sol\n{FFFFFF}Farketmez","Devam","");
		        }
		    }
		}
		case 25:
		{
		    if(!response) return DeletePVar(playerid,"ehliyetsinavinda"),DeletePVar(playerid,"ehliyethata");
		    if(response)
		    {
		        if(listitem == 1 || listitem == 2)
		        {
		            SetPVarInt(playerid,"ehliyethata",1);
		            ShowPlayerDialog(playerid,26,DIALOG_STYLE_LIST,"{FFBF00}Polis sizden durmanýzý istiyor, ne yaparsýnýz?","{FFFFFF}Aracý sürmeye devam ederim\n{FFFFFF}Aracý saða çekip motoru kapatýrým\n{FFFFFF}Araçtan inip kaçmaya baþlarým","Devam","");
		        }
		        ShowPlayerDialog(playerid,26,DIALOG_STYLE_LIST,"{FFBF00}Polis sizden durmanýzý istiyor, ne yaparsýnýz?","{FFFFFF}Aracý sürmeye devam ederim\n{FFFFFF}Aracý saða çekip motoru kapatýrým\n{FFFFFF}Araçtan inip kaçmaya baþlarým","Devam","");
		    }
		}
		case 26:
		{
		    if(!response) return DeletePVar(playerid,"ehliyetsinavinda"),DeletePVar(playerid,"ehliyethata");
		    if(response)
		    {
				if(listitem == 0 || listitem == 2)
				{
				    SetPVarInt(playerid,"ehliyethata",1);
				    ShowPlayerDialog(playerid,27,DIALOG_STYLE_LIST,"{FFBF00}Bir kiþi trafik kurallarýna uymuyor, ne yaparsýnýz?","{FFFFFF}Araçtan inip dövmeye baþlarým\n{FFFFFF}Araçtan inip baðýrmaya baþlarým\n{FFFFFF}Umursamam yoluma devam ederim\n{FFFFFF}Polisi arar ve durumu bildiririm","Devam","");
				}
				ShowPlayerDialog(playerid,27,DIALOG_STYLE_LIST,"{FFBF00}Bir kiþi trafik kurallarýna uymuyor, ne yaparsýnýz?","{FFFFFF}Araçtan inip dövmeye baþlarým\n{FFFFFF}Araçtan inip baðýrmaya baþlarým\n{FFFFFF}Umursamam yoluma devam ederim\n{FFFFFF}Polisi arar ve durumu bildiririm","Devam","");
			}
		}
		case 27:
		{
		    if(!response) return DeletePVar(playerid,"ehliyetsinavinda"),DeletePVar(playerid,"ehliyethata");
		    if(response)
		    {
		        if(listitem == 0 || listitem == 1 || listitem == 2)
		        {
		            SetPVarInt(playerid,"ehliyethata",1);
		            ShowPlayerDialog(playerid,28,DIALOG_STYLE_LIST,"{FFBF00}Hangi araç daha önceliklidir?","{FFFFFF}Ambulans\n{FFFFFF}Polis\n{FFFFFF}Taksi\n{FFFFFF}Otobüs","Devam","");
		        }
		        ShowPlayerDialog(playerid,28,DIALOG_STYLE_LIST,"{FFBF00}Hangi araç daha önceliklidir?","{FFFFFF}Ambulans\n{FFFFFF}Polis\n{FFFFFF}Taksi\n{FFFFFF}Otobüs","Devam","");
			}
		}
		case 28:
		{
		    if(!response) return DeletePVar(playerid,"ehliyetsinavinda"),DeletePVar(playerid,"ehliyethata");
		    if(response)
		    {
		        if(listitem == 1 || listitem == 2 || listitem == 3)
		        {
		            SetPVarInt(playerid,"ehliyethata",1);
		            ShowPlayerDialog(playerid,29,DIALOG_STYLE_LIST,"{FFBF00}Þehir içi maksimum hýz kaç","{FFFFFF}60 km/h\n{FFFFFF}70 km/h\n{FFFFFF}80 km/h","Devam","");
		        }
		        ShowPlayerDialog(playerid,29,DIALOG_STYLE_LIST,"{FFBF00}Þehir içi maksimum hýz kaç","{FFFFFF}60 km/h\n{FFFFFF}70 km/h\n{FFFFFF}80 km/h","Devam","");
			}
		}
		case 29:
		{
		    if(!response) return DeletePVar(playerid,"ehliyetsinavinda"),DeletePVar(playerid,"ehliyethata");
		    if(response)
		    {
		        if(listitem == 0 || listitem == 2)
		        {
		            DeletePVar(playerid,"ehliyetsinavinda");
		            DeletePVar(playerid,"ehliyethata");
		            HataMesajGonder(playerid,"Sorulara yanlýþ cevap verdiniz, tekrar deneyin.");
		        }
		        else
		        {
		            if(GetPVarInt(playerid,"ehliyethata") >= 1)
		            {
		                DeletePVar(playerid,"ehliyetsinavinda");
		            	DeletePVar(playerid,"ehliyethata");
		            	HataMesajGonder(playerid,"Sorulara yanlýþ cevap verdiniz, tekrar deneyin.");
		            }
		            else
		            {
		                DeletePVar(playerid,"ehliyetsinavinda");
		            	DeletePVar(playerid,"ehliyethata");
		            	SetPVarInt(playerid,"ehliyetaliyor",1);
		            	MesajGonder(playerid,"Tüm sorulara doðru cevap verdiniz, dýþardaki araçlardan birine binin.");
		            }
				}
			}
		}
		case 30:
		{
		    if(response)
		    {
		        new id = Gate_Nearest(playerid);
				if(id == -1) return 1;
				if(isnull(inputtext)) return ShowPlayerDialog(playerid,30,DIALOG_STYLE_INPUT,"{FFFFFF}Gate Þifre","Bu gate için þifre belirlenmiþ, lütfen þifreyi giriniz:","Aç","Kapat");
				if (strcmp(inputtext, GateData[id][gatePass]) != 0) return ShowPlayerDialog(playerid,30,DIALOG_STYLE_INPUT,"{FFFFFF}Gate Þifre","{FF0000}HATA: Hatalý þifre girdiniz.\nBu gate için þifre belirlenmiþ, lütfen þifreyi giriniz:","Aç","Kapat");
				Gate_Operate(id);
		    }
		}
		case 31:
		{
		    new id = -1;
		    if(response)
		    {
		        if(listitem == 0)
		        {
		            if (!IsPlayerInAnyVehicle(playerid) && (id = (House_Inside(playerid) == -1) ? (House_Nearest(playerid)) : (House_Inside(playerid))) != -1)
		            {
		                if(house_info[id][evKilit] == 1)
		                {
		                    house_info[id][evKilit] = 0;
		                    Ev_Kaydet(id);
		                    Ev_Yenile(id);
		                    MesajGonder(playerid,"Evinizin kilidi açýldý.");
		                    callcmd::ev(playerid);
		                }
		                else
		                {
		                    house_info[id][evKilit] = 1;
		                    Ev_Kaydet(id);
		                    Ev_Yenile(id);
		                    MesajGonder(playerid,"Eviniz kilitlendi.");
		                    callcmd::ev(playerid);
		                }
		            }

		        }
		        if(listitem == 1)
		        {
		            ShowPlayerDialog(playerid,68, DIALOG_STYLE_INPUT, "Ev Isim", "{FFFFFF}Lütfen eviniz için yeni bir isim girin:", "Deðiþtir", "Geri");
		        }
		        if(listitem == 2)
		        {
		            if((id = House_Inside(playerid)) == -1) return HataMesajGonder(playerid,"Evinizin içerisinde olmalýsýnýz.");
		            if(house_info[id][evSahip] != PlayerData[playerid][pID]) return HataMesajGonder(playerid,"Evinizin içerisinde olmalýsýnýz.");
		            new string[500],string2[250];
		            strcat(string,"Ýþlem\tDurum\n");
		            format(string2,sizeof(string2),"Para Al\t{2ECC71}%s\n",FormatNumber(house_info[id][evCash]));
		            strcat(string,string2);
		            format(string2,sizeof(string2),"Para Koy\t{2ECC71}%s üzerinde\n\n\n",FormatNumber(PlayerData[playerid][pCash]));
		            strcat(string,string2);

		            format(string2,sizeof(string2),"Uyuþturucu Koy\t{2ECC71}%d gram üzerinde\n",PlayerDrugData[playerid][Drugs]);
		            strcat(string,string2);
		            format(string2,sizeof(string2),"Uyuþturucu Al\t{2ECC71}%d gram evde\n\n\n",house_info[id][evUyusturucu]);
		            strcat(string,string2);

		            format(string2,sizeof(string2),"Silahlar\t{2ECC71}%d/10 adet\n",Ev_GetWeaponCount(id));
		            strcat(string,string2);
	             	ShowPlayerDialog(playerid,33,DIALOG_STYLE_TABLIST_HEADERS,"Ev Kasasý",string,"Seç","Geri");
		        }
		        if(listitem == 3)
		        {
		            new string[500],string2[150];
		            if((id = House_Inside(playerid)) == -1) return HataMesajGonder(playerid,"Evinizin içerisinde olmalýsýnýz.");
		            if(house_info[id][evSahip] != PlayerData[playerid][pID]) return HataMesajGonder(playerid,"Evinizin içerisinde olmalýsýnýz.");
		            new slotlar[5][20];
		            if(house_info[id][evKiyafetler][0] > 0) format(slotlar[0],20,"{ADFF2F}ID: %d",house_info[id][evKiyafetler][0]);
		            else slotlar[0] = "{FF0000}Boþ";
		            if(house_info[id][evKiyafetler][1] > 0) format(slotlar[1],20,"{ADFF2F}ID: %d",house_info[id][evKiyafetler][1]);
		            else slotlar[1] = "{FF0000}Boþ";
		            if(house_info[id][evKiyafetler][2] > 0) format(slotlar[2],20,"{ADFF2F}ID: %d",house_info[id][evKiyafetler][2]);
		            else slotlar[2] = "{FF0000}Boþ";
		            if(house_info[id][evKiyafetler][3] > 0) format(slotlar[3],20,"{ADFF2F}ID: %d",house_info[id][evKiyafetler][3]);
		            else slotlar[3] = "{FF0000}Boþ";
		            if(house_info[id][evKiyafetler][4] > 0) format(slotlar[4],20,"{ADFF2F}ID: %d",house_info[id][evKiyafetler][4]);
		            else slotlar[4] = "{FF0000}Boþ";
		            strcat(string,"Slot\tDurum\n");
		            format(string2,sizeof(string2),"Slot 1\t%s\n",slotlar[0]);
		            strcat(string,string2);
		            format(string2,sizeof(string2),"Slot 2\t%s\n",slotlar[1]);
		            strcat(string,string2);
		            format(string2,sizeof(string2),"Slot 3\t%s\n",slotlar[2]);
		            strcat(string,string2);
		            format(string2,sizeof(string2),"Slot 4\t%s\n",slotlar[3]);
		            strcat(string,string2);
		            format(string2,sizeof(string2),"Slot 5\t%s\n",slotlar[4]);
		            strcat(string,string2);
		            ShowPlayerDialog(playerid,34,DIALOG_STYLE_TABLIST_HEADERS,"Ev Gardolap",string,"Seç","Kapat");
		        }
		        if(listitem == 4) // Ev Dekorasyon
		        {
                    if((id = House_Inside(playerid)) == -1) return HataMesajGonder(playerid,"Evinizin içerisinde olmalýsýnýz.");
		            if(house_info[id][evSahip] != PlayerData[playerid][pID]) return HataMesajGonder(playerid,"Evinizin içerisinde olmalýsýnýz.");
		            MobilyaMenu(playerid, id);

		        }
		        if(listitem == 5) // Evi Satýlýða Çýkar
		        {
		            if((id = House_Inside(playerid)) == -1) return HataMesajGonder(playerid,"Evinizin içerisinde olmalýsýnýz.");
		            if(house_info[id][evSahip] != PlayerData[playerid][pID]) return HataMesajGonder(playerid,"Evinizin içerisinde olmalýsýnýz.");
					new str[128];
					format(str,sizeof(str),"Satýlýða Çýkar\nSisteme Sat{2ECC71}(%s){FFFFFF}\nEvi Satmaktan Vazgeç", FormatNumber(house_info[id][evKendiFiyati]/2));
					ShowPlayerDialog(playerid,36,DIALOG_STYLE_LIST,"Evi Satýlýða Çýkar",str,"Seç","Geri");
		        }
		        if(listitem == 6)
		        {
		            if((id = House_Inside(playerid)) == -1) return HataMesajGonder(playerid,"Evinizin içerisinde olmalýsýnýz.");
		            if(house_info[id][evSahip] != PlayerData[playerid][pID]) return HataMesajGonder(playerid,"Evinizin içerisinde olmalýsýnýz.");
		            if(Ev_GetKeyCount(id) < 1) return HataMesajGonder(playerid, "Bu evin anahtarý kimseye verilmemiþ, /anahtarver ile verebilirsiniz.");
		            Ev_KeyDialog(playerid, id);
		        }
		    }
		}
		case 32:
		{
		    if(response)
		    {
		        new kslot = GetPVarInt(playerid,"KiyafetSlot");
		        if(listitem == 0)
		        {
		            if(house_info[GetPVarInt(playerid,"KiyafetEvID")][evKiyafetler][kslot] < 1) return 1;
		            new simdiskin = PlayerData[playerid][pSkin];
		            new slotskin = house_info[GetPVarInt(playerid,"KiyafetEvID")][evKiyafetler][kslot];
		            PlayerData[playerid][pSkin] = slotskin;
		            SetPlayerSkin(playerid,slotskin);
		            house_info[GetPVarInt(playerid,"KiyafetEvID")][evKiyafetler][kslot] = simdiskin;
		            Ev_Kaydet(GetPVarInt(playerid,"KiyafetEvID"));
		        }
		        if(listitem == 1)
		        {
		            if(house_info[GetPVarInt(playerid,"KiyafetEvID")][evKiyafetler][kslot] < 1) return 1;
		            house_info[GetPVarInt(playerid,"KiyafetEvID")][evKiyafetler][kslot] = 0;
		            MesajGonder(playerid,"Kiyafet silindi.");
		            Ev_Kaydet(GetPVarInt(playerid,"KiyafetEvID"));
		        }
		    }
		}
		case 34:
		{
		    if(response)
		    {
		        new evev = House_Inside(playerid);
		        if(evev == -1) return 1;
		        if(house_info[evev][evKiyafetler][listitem] < 1) return HataMesajGonder(playerid,"Bu slot boþ. Bu slota kiyafet eklemek için Kiyafet Maðazasýndan kiyafet alýn.");
		        SetPVarInt(playerid,"KiyafetEvID",evev);
		        SetPVarInt(playerid,"KiyafetSlot",listitem);
		        ShowPlayerDialog(playerid,32,DIALOG_STYLE_LIST,"{FF0000}Ev Gardolap","Kýyafeti Giy\nKýyafeti Sil","Seç","Kapat");
		    }
		}
		case 35:
		{
		    if(!response) return callcmd::ev(playerid);
		    if(response)
		    {
      			new houseid = House_Inside(playerid);
		        if(isnull(inputtext)) return ShowPlayerDialog(playerid,35,DIALOG_STYLE_INPUT,"Ev Kira Ücreti","Lütfen bu ev için kira ücreti belirleyin. Kira Ücreti $20 ile $1000 arasýnda olmalýdýr.\nEvi kiralayan kiþi her maaþ aldýðýnýda kirayý ödemek zorundadýr. Kirayý ödeyemezse kiracýlýktan otomatik çýkarýlýr.","Ayarla","Geri");
		        if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid,35,DIALOG_STYLE_INPUT,"Ev Kira Ücreti","Lütfen bu ev için kira ücreti belirleyin. Kira Ücreti $20 ile $1000 arasýnda olmalýdýr.\nEvi kiralayan kiþi her maaþ aldýðýnýda kirayý ödemek zorundadýr. Kirayý ödeyemezse kiracýlýktan otomatik çýkarýlýr.","Ayarla","Geri");
		        if(strval(inputtext) < 20 || strval(inputtext) > 1000) return ShowPlayerDialog(playerid,35,DIALOG_STYLE_INPUT,"Ev Kira Ücreti","Lütfen bu ev için kira ücreti belirleyin. Kira Ücreti $20 ile $1000 arasýnda olmalýdýr.\nEvi kiralayan kiþi her maaþ aldýðýnýda kirayý ödemek zorundadýr. Kirayý ödeyemezse kiracýlýktan otomatik çýkarýlýr.","Ayarla","Geri");
		        house_info[houseid][evKiraUcret] = strval(inputtext);
		        Ev_Kaydet(houseid);
		        Ev_Yenile(houseid);
		        callcmd::ev(playerid);
		        return 1;
		    }
		}
		case 36:
		{
		    if(!response) return callcmd::ev(playerid);
		    if(response)
		    {
		        new evid = House_Inside(playerid);
		        if(evid == -1) return 1;
		        if(listitem == 0)
		        {
		            ShowPlayerDialog(playerid,37,DIALOG_STYLE_INPUT,"Satýlýða Çýkar","{FFFFFF}Lütfen evinizi satýlýða çýkarmak istediðiniz fiyatý girin.","Satýlýða Çýkar","Geri");
		        }
		        if(listitem == 1)
		        {
		            if(house_info[evid][evSatilik] == 1)
		            {
		                HataMesajGonder(playerid,"Ev zaten satýlýk.");
		                callcmd::ev(playerid);
		                return 1;
		            }
		            new str[200];
		            house_info[evid][evFiyat] = house_info[evid][evKendiFiyati];
		            new fiyat = house_info[evid][evFiyat]/2;
		            format(str,sizeof(str),"{FFFFFF}Evi gerçekten {2ECC71}%s {FFFFFF}fiyatýna satmak istediðinize emin misiniz? Bunun geri dönüþü yoktur.\n{FF0000}Evi satmadan önce mutlaka silahlarýnýzý, paralarýnýzý ve uyuþturucularýnýzý alýn.",FormatNumber(fiyat));
		            ShowPlayerDialog(playerid,38,DIALOG_STYLE_MSGBOX,"Sisteme Sat",str,"Sat","Iptal");
		        }
		        if(listitem == 2)
		        {
		            if(house_info[evid][evSatilik] == 0)
		            {
		                HataMesajGonder(playerid,"Eviniz satýlýk deðil.");
		                callcmd::ev(playerid);
		                return 1;
		            }
		            house_info[evid][evSatilik]= 0;
		            house_info[evid][evFiyat] = house_info[evid][evKendiFiyati];
		            callcmd::ev(playerid);
		        }
		    }
		}
		case 37:
		{
		    if(response)
		    {
		        if(!response) return callcmd::ev(playerid);
		        if(response)
		        {
		            new hid = House_Inside(playerid);
		            if(house_info[hid][evKiralik] == 1) return 1;
		            if(isnull(inputtext)) return ShowPlayerDialog(playerid,37,DIALOG_STYLE_INPUT,"Satýlýða Çýkar","{FFFFFF}Lütfen evinizi satýlýða çýkarmak istediðiniz fiyatý girin.","Satýlýða Çýkar","Geri");
		            if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid,37,DIALOG_STYLE_INPUT,"Satýlýða Çýkar","{FFFFFF}Lütfen evinizi satýlýða çýkarmak istediðiniz fiyatý girin.","Satýlýða Çýkar","Geri");
		            if(strval(inputtext) < 1) return ShowPlayerDialog(playerid,37,DIALOG_STYLE_INPUT,"Satýlýða Çýkar","{FFFFFF}Lütfen evinizi satýlýða çýkarmak istediðiniz fiyatý girin.","Satýlýða Çýkar","Geri");
		            house_info[hid][evSatilik] = 1;
		            house_info[hid][evFiyat] = strval(inputtext);
		            house_info[hid][evKiralik] = 0;
		            house_info[hid][evKiralayan] = -1;
		            house_info[hid][evKiraUcret] = 0;
		            Ev_Kaydet(hid);
		            Ev_Yenile(hid);
		            callcmd::ev(playerid);
		            MesajGonder(playerid,"Eviniz satýlýða çýkarýldý.");
		        }
		    }
		}
		case 38:
		{
		    if(!response) return callcmd::ev(playerid);
		    if(response)
		    {
		        new ev = House_Inside(playerid);
		        if(ev == -1) return 1;
		        house_info[ev][evSahip] = -1;
		        house_info[ev][evCash] = 0;
		        for(new i; i<10; i++)
		        {
		            if(i < 5)
		            {
		                house_info[ev][evKiyafetler][i] = 0;
		            }
		            house_info[ev][evSilahlar][i] = 0;
	             	house_info[ev][evMermiler][i] = 0;
		        }
		        // Deðiþti
		        house_info[ev][evKiralik] = 0;
		        house_info[ev][evUyusturucu] = 0;
		        house_info[ev][evKiralayan] = -1;
		        house_info[ev][evKiraUcret] = 0;
		        house_info[ev][evSatilik] = 0;
		        house_info[ev][evKilit] = 1;
		        SetPlayerInterior(playerid,0);
		        SetPlayerPos(playerid,house_info[ev][evPos][0],house_info[ev][evPos][1],house_info[ev][evPos][2]);
		        SetPlayerVirtualWorld(playerid,0);
		        PlayerData[playerid][pHouse] = -1;
		        new fiyat = house_info[ev][evFiyat]/2;
		        ParaVer(playerid,fiyat);
		        MesajGonder(playerid,"Evinizi baþarýyla {2ECC71}%s {FFFFFF}karþýlýðýnda sattýnýz.",FormatNumber(fiyat));
		        Ev_Kaydet(ev);
		        Ev_Yenile(ev);
		        House_RemoveFurniture(ev);
		    }
		}
		case 33:
		{
		    if(!response) return callcmd::ev(playerid);
		    if(response)
		    {
		        new evid = House_Inside(playerid);
		        if(evid == -1) return 1;
		        if(house_info[evid][evSahip] != PlayerData[playerid][pID]) return 1;
		        if(listitem == 0)
		        {
		            ShowPlayerDialog(playerid,40,DIALOG_STYLE_INPUT,"Para Al","Lütfen evinizden almak istediðiniz para miktarýný girin.","Al","Geri");
		        }
		        if(listitem == 1)
		        {
		            ShowPlayerDialog(playerid,41,DIALOG_STYLE_INPUT,"Para Koy","Lütfen evinize koymak istediðiniz para miktarýný girin.","Koy","Geri");
		        }
		        if(listitem == 2)
		        {
		            if(GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_LSMD) return HataMesajGonder(playerid, "Bulunduðunuz oluþum türü bunu yapamaz.");
		            if(PlayerDrugData[playerid][Drugs] < 1) return HataMesajGonder(playerid, "Uyuþturucunuz yok.");
		            Dialog_Show(playerid, EvUyusturucuKoy, DIALOG_STYLE_INPUT, "Uyuþturucu Koy", "{FFFFFF}Lütfen evinize koymak istediðiniz uyuþturucu miktarýný girin:", "Koy", "Kapat");
		        }
		        if(listitem == 3)
		        {
		            if(GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_LSMD) return HataMesajGonder(playerid, "Bulunduðunuz oluþum türü bunu yapamaz.");
		            if(house_info[evid][evUyusturucu] < 1) return HataMesajGonder(playerid, "Evinizin kasasýnda uyuþturucu yok.");
		            Dialog_Show(playerid, EvUyusturucuAl, DIALOG_STYLE_INPUT, "Uyuþturucu Al", "{FFFFFF}Lütfen evinizin kasasýndan almak istediðiniz uyuþturucu miktarýný girin:", "Al", "Kapat");
		        }
		        if(listitem == 4)
		        {
		            if(GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_LSMD) return HataMesajGonder(playerid, "Bulunduðunuz oluþum türü bunu yapamaz.");
		            EvSilahlar(playerid, evid);
				}
		    }
		}
		case 39:
		{
		    if(response)
		    {
		        new evz;
		        if(listitem == 0)
		        {
		            if (!IsPlayerInAnyVehicle(playerid) && (evz = (House_Inside(playerid) == -1) ? (House_Nearest(playerid)) : (House_Inside(playerid))) != -1)
		            {
		                if(house_info[evz][evKilit] == 1)
		                {
		                    house_info[evz][evKilit] = 0;
		                    Ev_Kaydet(evz);
		                    Ev_Yenile(evz);
		                    MesajGonder(playerid,"Evinizin kilidi açýldý.");
		                    callcmd::ev(playerid);
		                }
		                else
		                {
		                    house_info[evz][evKilit] = 1;
		                    Ev_Kaydet(evz);
		                    Ev_Yenile(evz);
		                    MesajGonder(playerid,"Eviniz kilitlendi.");
		                    callcmd::ev(playerid);
		                }
		            }
		        }
		        if(listitem == 1)
		        {
		            new toplamstring[500],stringg2[150];
		            if((evz = House_Inside(playerid)) == -1) return HataMesajGonder(playerid,"Evinizin içerisinde olmalýsýnýz.");
		            if(house_info[evz][evKiralayan] != PlayerData[playerid][pID]) return HataMesajGonder(playerid,"Evinizin içerisinde olmalýsýnýz.");
		            new slots[5][20];
		            if(house_info[evz][evKiyafetler][0] > 0) format(slots[0],20,"{ADFF2F}ID: %d",house_info[evz][evKiyafetler][0]);
		            else slots[0] = "{FF0000}Boþ";
		            if(house_info[evz][evKiyafetler][1] > 0) format(slots[1],20,"{ADFF2F}ID: %d",house_info[evz][evKiyafetler][1]);
		            else slots[1] = "{FF0000}Boþ";
		            if(house_info[evz][evKiyafetler][2] > 0) format(slots[2],20,"{ADFF2F}ID: %d",house_info[evz][evKiyafetler][2]);
		            else slots[2] = "{FF0000}Boþ";
		            if(house_info[evz][evKiyafetler][3] > 0) format(slots[3],20,"{ADFF2F}ID: %d",house_info[evz][evKiyafetler][3]);
		            else slots[3] = "{FF0000}Boþ";
		            if(house_info[evz][evKiyafetler][4] > 0) format(slots[4],20,"{ADFF2F}ID: %d",house_info[evz][evKiyafetler][4]);
		            else slots[4] = "{FF0000}Boþ";
		            strcat(toplamstring,"Slot\tDurum\n");
		            format(stringg2,sizeof(stringg2),"{2ECC71}Slot 1\t%s\n",slots[0]);
		            strcat(toplamstring,stringg2);
		            format(stringg2,sizeof(stringg2),"{2ECC71}Slot 2\t%s\n",slots[1]);
		            strcat(toplamstring,stringg2);
		            format(stringg2,sizeof(stringg2),"{2ECC71}Slot 3\t%s\n",slots[2]);
		            strcat(toplamstring,stringg2);
		            format(stringg2,sizeof(stringg2),"{2ECC71}Slot 4\t%s\n",slots[3]);
		            strcat(toplamstring,stringg2);
		            format(stringg2,sizeof(stringg2),"{2ECC71}Slot 5\t%s\n",slots[4]);
		            strcat(toplamstring,stringg2);
		            ShowPlayerDialog(playerid,34,DIALOG_STYLE_TABLIST_HEADERS,"Ev Gardolap",toplamstring,"Seç","Kapat");
		        }
		        if(listitem == 2)
		        {
		            if((evz = House_Inside(playerid)) == -1) return HataMesajGonder(playerid,"Evinizin içerisinde olmalýsýnýz.");
		            if(house_info[evz][evKiralayan] != PlayerData[playerid][pID]) return 1;
		            house_info[evz][evKiralayan] = -1;
		            Ev_Kaydet(evz);
		            Ev_Yenile(evz);
		            MesajGonder(playerid,"Kiracýlýktan çýktýnýz.");
		        }
		    }
		}
		case 40:
		{
		    if(!response) return callcmd::ev(playerid);
		    if(response)
		    {
      			new eid = House_Inside(playerid);
		        if(isnull(inputtext)) return ShowPlayerDialog(playerid,40,DIALOG_STYLE_INPUT,"Para Al","Lütfen evinizden almak istediðiniz para miktarýný girin.","Al","Geri");
		        if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid,40,DIALOG_STYLE_INPUT,"Para Al","Lütfen evinizden almak istediðiniz para miktarýný girin.","Al","Geri");
		        if(strval(inputtext) < 1) return ShowPlayerDialog(playerid,40,DIALOG_STYLE_INPUT,"Para Al","Lütfen evinizden almak istediðiniz para miktarýný girin.","Al","Geri");
		        if(strval(inputtext) > house_info[eid][evCash])
		        {
		            HataMesajGonder(playerid,"Ev kasasýnda yeterli miktarda para bulunmamaktadýr.");
                    ShowPlayerDialog(playerid,40,DIALOG_STYLE_INPUT,"Para Al","Lütfen evinizden almak istediðiniz para miktarýný girin.","Al","Geri");
                    return 1;
		        }
		        house_info[eid][evCash] -= strval(inputtext);
		        ParaVer(playerid,strval(inputtext));
		        Ev_Kaydet(eid);
		        callcmd::ev(playerid);
		        MesajGonder(playerid,"Ev kasasýndan {2ECC71}%s {FFFFFF}miktar para aldýnýz.",FormatNumber(strval(inputtext)));
		    }
		}
		case 41:
		{
		    if(!response) return callcmd::ev(playerid);
		    if(response)
		    {
		        new evv = House_Inside(playerid);
           		if(isnull(inputtext)) return ShowPlayerDialog(playerid,41,DIALOG_STYLE_INPUT,"Para Koy","Lütfen evinize koymak istediðiniz para miktarýný girin.","Koy","Geri");
           		if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid,41,DIALOG_STYLE_INPUT,"Para Koy","Lütfen evinize koymak istediðiniz para miktarýný girin.","Koy","Geri");
           		if(strval(inputtext) < 1) return ShowPlayerDialog(playerid,41,DIALOG_STYLE_INPUT,"Para Koy","Lütfen evinize koymak istediðiniz para miktarýný girin.","Koy","Geri");
           		if(strval(inputtext) > PlayerData[playerid][pCash])
           		{
           		    HataMesajGonder(playerid,"Üzerinizde yeterli miktarda para bulunmamaktadýr.");
           		    ShowPlayerDialog(playerid,41,DIALOG_STYLE_INPUT,"Para Koy","Lütfen evinize koymak istediðiniz para miktarýný girin.","Koy","Geri");
           		    return 1;
           		}
           		house_info[evv][evCash] += strval(inputtext);
           		ParaVer(playerid,-strval(inputtext));
		        Ev_Kaydet(evv);
		        callcmd::ev(playerid);
	         	MesajGonder(playerid,"Ev kasasýna {2ECC71}%s {FFFFFF}miktar para koydunuz.",FormatNumber(strval(inputtext)));
		    }
		}
		case 45:
		{
		    if(!response)
		    {
		        PlayerData[playerid][pSelectFurniture] = 0;
		        PlayerData[playerid][pSelectType] = 0;
		        SetPVarInt(playerid,"mobilyaid",-1);
		        CancelEdit(playerid);
		        MobilyaMenu(playerid, GetPVarInt(playerid, "FurnitureHouse"));
		        return 1;
		    }
		    if(response)
		    {
		        if(GetPVarInt(playerid,"mobilyaid") == -1) return 1;
		        new mid = GetPVarInt(playerid,"mobilyaid");
		        new fiyat = floatround(FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][mid][furniturePrice]/2);
		        ParaVer(playerid,fiyat);
		        Furniture_Delete(mid, GetPVarInt(playerid, "FurnitureHouse"));
		       	PlayerData[playerid][pSelectFurniture] = 0;
		        PlayerData[playerid][pSelectType] = 0;
		        SetPVarInt(playerid,"mobilyaid",-1);
		        MobilyaMenu(playerid, GetPVarInt(playerid, "FurnitureHouse"));
		        MesajGonder(playerid,"Mobilya satýldý.");
		        CancelEdit(playerid);
		    }
		}
		case 47:
		{
		    if(response)
		    {
		        if(isnull(inputtext)) return HataMesajGonder(playerid,"Geçersiz birlik adý.");
		        if(strlen(inputtext) < 4) return HataMesajGonder(playerid, "Birlik adý 4 karakterden kýsa olamaz.");
		        if(strlen(inputtext) > 32) return HataMesajGonder(playerid,"Birlik adý 32 karakterden uzun olamaz.");
		        format(BirlikAdi[playerid], 32, inputtext);
		        ShowPlayerDialog(playerid,48,DIALOG_STYLE_LIST,"Birlik Tipi Seçiniz:","{ffffff}Çete\n{ffffff}Mafya\n{ffffff}Yayýn Ajansý\n{ffffff}Legal","Kur","Kapat");
		    }
		}
		case 48:
		{
		    if(response)
		    {
		        if(PlayerData[playerid][pCash] < 20000) return HataMesajGonder(playerid, "Yeterli paranýz yok. ($20,000)");
		        new bid = Birlik_Olustur(BirlikAdi[playerid],listitem+1);
		        if(bid == -1) return HataMesajGonder(playerid,"Birlik oluþturulamadý, lütfen geliþtirici ekibiyle iletiþime geçin.");
		        ParaVer(playerid, -20000);
		        MesajGonder(playerid,"Baþarý ile '%s' adlý birlik oluþturuldu, /birlik komutuyla birlik ayarlarýna eriþebilirsiniz.",BirlikAdi[playerid]);
		        PlayerData[playerid][pFaction] = bid;
		        PlayerData[playerid][pFactionRutbe] = Birlikler[bid][birlikRutbeler];
		        PlayerData[playerid][pFactionDivizyon] = 0;
		        Log_Write("logs/birliklog.txt","%s(%d) Adli oyuncu %s isimli birlik olusturdu.",ReturnName(playerid),playerid,BirlikAdi[playerid]);
		        Oyuncu_Kaydet(playerid);
		    }
		}
		case BILDIRIM_DIALOG:
		{
  			if(response)
	    	{
		        new query[350];
		        format(query,sizeof(query),"SELECT * FROM `bildirimler` WHERE `id` = '%d'",strval(inputtext));
		        new Cache:sawyer = mysql_query(baglanti,query);
		        new rows;
		        cache_get_row_count(rows);
		        if(rows)
		        {
		            new gonderen[24],tarih[22],mesaj[128],idx;
		            cache_get_value_name_int(0,"id",idx);
		            cache_get_value_name(0,"Gonderen",gonderen,24);
		            cache_get_value_name(0,"Tarih",tarih,22);
		            cache_get_value_name(0,"Mesaj",mesaj,128);
		            SetPVarInt(playerid,"OkuduguMesaj",idx);
		            format(query,sizeof(query),"UPDATE `bildirimler` SET `Durum` = '1' WHERE `id` = '%d'",strval(inputtext));
		            mysql_query(baglanti,query);
		            new goster[500];
		            format(goster,sizeof(goster),"{FFBF00}Gönderen: {FFFFFF}%s\n{FFBF00}Tarih: {FFFFFF}%s\n{FFBF00}Mesaj: {FFFFFF}%s",gonderen,tarih,mesaj);
		            ShowPlayerDialog(playerid,BILDIRIM_DIALOG2,DIALOG_STYLE_MSGBOX,"Mesaj",goster,"Sil","Geri");
		        }
		        cache_delete(sawyer);
	    	}
		}
		case BILDIRIM_DIALOG2:
		{
		    if(response)
	    	{
		        new bildirimid = GetPVarInt(playerid,"OkuduguMesaj");
		        Bildirim_Sil(bildirimid);
		        BilgiMesajGonder(playerid,"Bildirim silindi.");
		        DeletePVar(playerid,"OkuduguMesaj");
		        BildirimlerDialog(playerid);
	    	}
	    	if(!response)
	    	{
	        	BildirimlerDialog(playerid);
	    	}
		}
		case 51:
		{
		    if(response)
		    {
		        new
					bizid = -1,
					price;

			    if ((bizid = Business_Inside(playerid)) == -1 || Isyeri[bizid][isyeriTip] != 2)
			        return 0;

				if (Isyeri[bizid][isyeriUrunSayisi][0] < 1)
				    return HataMesajGonder(playerid, "Dükkanda ürün kalmamýþ.");

			    price = Isyeri[bizid][isyeriFiyatlar][0];

			    if (PlayerData[playerid][pCash] < price)
			        return HataMesajGonder(playerid, "Bu ürünü alabilmek için yeterli paran yok.");

				ParaVer(playerid,-price);
    			if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1) Isyeri[bizid][isyeriUrunSayisi][0]--;
				Isyeri[bizid][isyeriKasa] += price;

				Isyeri_Kaydet(bizid);
				if(Ev_GetCount(playerid) < 1 && EvKiraID(playerid) == -1)
				{
				    if(PlayerData[playerid][pCinsiyet] == 1)
				    {
					    PlayerData[playerid][pSkin] = g_aMaleSkins[listitem];
		            	SetPlayerSkin(playerid, g_aMaleSkins[listitem]);
	            	}
					else
					{
					    PlayerData[playerid][pSkin] = g_aFemaleSkins[listitem];
		            	SetPlayerSkin(playerid, g_aFemaleSkins[listitem]);
					}
	            	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s adlý kiþi %s ödeyerek bir kiyafet aldý.", ReturnName(playerid, 0), FormatNumber(price));
				}
				else if(Ev_GetCount(playerid) >= 1 || EvKiraID(playerid) != -1)
				{
    				if(PlayerData[playerid][pCinsiyet] == 1) SetPVarInt(playerid,"AlinanSkin",g_aMaleSkins[listitem]);
				    else SetPVarInt(playerid,"AlinanSkin",g_aFemaleSkins[listitem]);
				    SetPVarInt(playerid, "KiyafetPrice", price);
				    Dialog_Show(playerid,KiyafetAl,DIALOG_STYLE_MSGBOX,"Kiyafet Al","{2ECC71}%s {FFFFFF}miktar paraya aldýðýnýz bu kiyafeti eve koymak ister misiniz?","Evet","Hayir",FormatNumber(price));
				}
		    }
		}
		case 52:
		{
		    if(response)
		    {
		        new
					bizid = -1,
					price;

			    if ((bizid = Business_Inside(playerid)) == -1 || Isyeri[bizid][isyeriTip] != 2)
			        return 0;

				if (Isyeri[bizid][isyeriUrunSayisi][1] < 1)
				    return HataMesajGonder(playerid, "Dükkanda ürün kalmamýþ.");

			    price = Isyeri[bizid][isyeriFiyatlar][1];

			    if (PlayerData[playerid][pCash] < price)
			        return HataMesajGonder(playerid, "Bu ürünü alabilmek için yeterli paran yok.");

				ParaVer(playerid,-price);
				if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1) Isyeri[bizid][isyeriUrunSayisi][1]--;
				Isyeri[bizid][isyeriKasa] += price;

				Isyeri_Kaydet(bizid);
				if(Ev_GetCount(playerid) < 1 && EvKiraID(playerid) == -1)
				{
				    if(PlayerData[playerid][pCinsiyet] == 1)
				    {
					    PlayerData[playerid][pSkin] = OzelErkekKiyafetler[listitem];
		            	SetPlayerSkin(playerid, OzelErkekKiyafetler[listitem]);
	            	}
					else
					{
					    PlayerData[playerid][pSkin] = OzelBayanKiyafetler[listitem];
		            	SetPlayerSkin(playerid, OzelBayanKiyafetler[listitem]);
					}
	            	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s adlý kiþi %s ödeyerek bir kiyafet aldý.", ReturnName(playerid, 0), FormatNumber(price));
				}
				else if(Ev_GetCount(playerid) >= 1 || EvKiraID(playerid) != -1)
				{
	 				    if(PlayerData[playerid][pCinsiyet] == 1) SetPVarInt(playerid,"AlinanSkin",OzelErkekKiyafetler[listitem]);
	 				    else SetPVarInt(playerid,"AlinanSkin",OzelBayanKiyafetler[listitem]);
	 				    SetPVarInt(playerid, "KiyafetPrice", price);
	 				    Dialog_Show(playerid,KiyafetAl,DIALOG_STYLE_MSGBOX,"Kiyafet Al","{2ECC71}%s {FFFFFF}miktar paraya aldýðýnýz bu kiyafeti eve koymak ister misiniz?","Evet","Hayir",FormatNumber(price));
				}
		    }
		}
  		case 53:
		{
		    if(response)
		    {
		        new biz;
				if ((biz = Business_Inside(playerid)) == -1) return 1;
		        if(PlayerData[playerid][pASlot][listitem] != 0)
		        {
		            HataMesajGonder(playerid,"Bu slot dolu, baþka bir slot seçin.");
		            return AksesuarlariGoster(playerid,1);
		        }
		        if(Isyeri[biz][isyeriKilit] != 0)
		        {
		            return HataMesajGonder(playerid,"Bu iþyeri kilitli.");
		        }
		        new yazi[2000];
		        for(new i; i < sizeof(AttachmentObjects); ++i)
		        {
		            format(yazi,sizeof(yazi),"%s%d\n",yazi,AttachmentObjects[i][attachmodel]);
		        }
		        SetPVarInt(playerid,"AttachmentIndexSel",listitem);
		        ShowPlayerDialog(playerid,54,DIALOG_STYLE_PREVMODEL,"Aksesuarlar",yazi,"Sec","Geri");
		    }
		}
		case 54:
		{
		    if(!response)
			{
			    AksesuarlariGoster(playerid,1);
			    return DeletePVar(playerid,"AttachmentIndexSel");
			}
			if(response)
			{
			    new playerbiz = Business_Inside(playerid);
			    if(playerbiz == -1) return 1;
			    if(Isyeri[playerbiz][isyeriFiyatlar][2] > PlayerData[playerid][pCash])
			    {
			        HataMesajGonder(playerid,"Yeterli paranýz yok.");
			        return DeletePVar(playerid,"AttachmentIndexSel");
			    }
			    ParaVer(playerid,-Isyeri[playerbiz][isyeriFiyatlar][2]);
			    if(Isyeri[playerbiz][isyeriSahip] != -99 && Isyeri[playerbiz][isyeriSahip] != -1) Isyeri[playerbiz][isyeriUrunSayisi][2]--;
			    SetPVarInt(playerid,"AttachmentModelSel",AttachmentObjects[listitem][attachmodel]);
			    new bstring[257];
			    for(new x;x<sizeof(AttachmentBones);x++)
	        	{
	        		format(bstring, sizeof(bstring), "%s%s\n", bstring, AttachmentBones[x]);
	        	}
	        	ShowPlayerDialog(playerid,55,DIALOG_STYLE_LIST,"{FF0000}Kemik Seç",bstring,"Seç","{FF6347}Kapat");
			}
		}
		case 55:
		{
		    if(response)
		    {
		        SetPlayerAttachedObject(playerid, GetPVarInt(playerid, "AttachmentIndexSel"), GetPVarInt(playerid, "AttachmentModelSel"), listitem+1);
          		EditAttachedObject(playerid, GetPVarInt(playerid, "AttachmentIndexSel"));
          		BilgiMesajGonder(playerid,"{FFFF00}~k~~PED_SPRINT~{FFFFFF} tuþuna basarak kamerayý oynatabilirsiniz.");
		    }
		    new slotid = GetPVarInt(playerid, "AttachmentIndexSel");
      		new modelid = GetPVarInt(playerid, "AttachmentModelSel");
   			PlayerData[playerid][pASlot][slotid] = modelid;
      		DeletePVar(playerid, "AttachmentIndexSel");
        	DeletePVar(playerid, "AttachmentModelSel");
         	SQL_AksesuarKaydet(playerid);
		}
		case 56:
		{
		    if(response)
		    {
		        if(PlayerData[playerid][pASlot][listitem] != 0)
		        {
		            ShowPlayerDialog(playerid,57,DIALOG_STYLE_LIST,"{FF0000}Aksesuar Ayarlari","{FFFFFF}Tak/Çýkar\n{FFFFFF}Düzenle\n{FFFFFF}Renk Deðiþtir\n{FFFFFF}Sil","Seç","Geri");
		            SetPVarInt(playerid, "AttachmentIndexSel", listitem);
		        }
		        else return HataMesajGonder(playerid,"Bu slot boþ, aksesuar almak için kiyafet dükkanlarýný ziyaret edin.");
		    }
		}
		case 57:
		{
		    if(!response)
		    {
		        DeletePVar(playerid,"AttachmentIndexSel");
		        return callcmd::aksesuar(playerid);
		    }
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                new slotid =  GetPVarInt(playerid, "AttachmentIndexSel");
						if(PlayerData[playerid][pTSlot][slotid])
						{
						    BilgiMesajGonder(playerid, "Aksesuar çýkartýldý.");
							PlayerData[playerid][pTSlot][slotid] = false;
							RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "AttachmentIndexSel"));
							SQL_AksesuarKaydet(playerid);
						}
						else
						{
							PlayerData[playerid][pTSlot][slotid] = true;
							BilgiMesajGonder(playerid, "Aksesuar takýldý.");
							AksesuarTak(playerid, slotid);
							SQL_AksesuarKaydet(playerid);
						}
		            }
		            case 1:
		            {
                        BilgiMesajGonder(playerid,"{FFFF00}~k~~PED_SPRINT~{FFFFFF} tuþuna basarak kamerayý oynatabilirsiniz.");
                        EditAttachedObject(playerid, GetPVarInt(playerid, "AttachmentIndexSel"));
		            }
		            case 2:
		            {
		                Dialog_Show(playerid, AksesuarRenk, DIALOG_STYLE_LIST, "Renk Seç", "{FFFFFF}Siyah\n{FFFFFF}Kýrmýzý\n{FFFFFF}Mavi\n{FFFFFF}Turuncu\n{FFFFFF}Mor\n{FFFFFF}Sarý\n{FFFFFF}Yeþil\n{FFFFFF}Renk Kaldýr", "Seç", "Kapat");
		            }
		            case 3:
		            {
		                RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "AttachmentIndexSel"));
                        new slotid =  GetPVarInt(playerid, "AttachmentIndexSel");
                        PlayerData[playerid][pASlot][slotid] = 0;
                        PlayerData[playerid][pABone][slotid] = 0;
                        PlayerData[playerid][pTSlot][slotid] = 0;
						DeletePVar(playerid, "AttachmentIndexSel");
						BilgiMesajGonder(playerid, "Aksesuar silindi.");
						SQL_AksesuarKaydet(playerid);
						callcmd::aksesuar(playerid);
		            }
		        }
		    }
		}
		case 58:
		{
		    if(!response) return callcmd::isyeri(playerid);
		    if(response)
		    {
		        if(GetPVarInt(playerid,"AracDuzenle") == 1)
		        {
		            SetPVarInt(playerid,"AracDuzenleID",listitem);
		            Dialog_Show(playerid,AracFiyatDegistir,DIALOG_STYLE_INPUT,"{2ECC71}Araç Fiyat Deðiþtir","Lütfen seçtiðiniz araç için yeni bir fiyat girin:","Deðiþtir","Kapat");
		        }
		        else if(GetPVarInt(playerid,"AracDuzenle") == 2)
		        {
		            SetPVarInt(playerid,"AracDuzenleID",listitem);
		            Dialog_Show(playerid,AracSil,DIALOG_STYLE_MSGBOX,"{2ECC71}Araç Sil","Seçtiðiniz aracý galerinizden silmek istediðinize emin misiniz?","Evet","Hayýr");
		        }
		    }
		}
		case 59:
		{
		    if(response)
		    {
		        new bizid = Business_Inside(playerid);
		        if(bizid != -1 && Isyeri[bizid][isyeriExists] && Isyeri[bizid][isyeriTip] == 4)
		        {
		            if (!DealershipCars[bizid][listitem][vehModel])
		        		return HataMesajGonder(playerid, "Seçtiðiniz slot boþ.");

		        	if(PlayerData[playerid][pCash] < DealershipCars[bizid][listitem][vehPrice])
		        	    return HataMesajGonder(playerid,"Yeterli paranýz yok. {FF0000}(%s)",FormatNumber(DealershipCars[bizid][listitem][vehPrice]));
					new maksarac = MAX_OWNABLE_CARS;
					switch(PlayerData[playerid][pVip])
					{
					    case 1: maksarac += 2;
					    case 2: maksarac += 4;
					    case 3: maksarac += 6;
					}
					if(Car_GetCount(playerid) >= maksarac) return HataMesajGonder(playerid,"En fazla %d araç sahibi olabilirsin.",maksarac);
		        	SetPVarInt(playerid,"AracSatinAl",listitem);
		        	Dialog_Show(playerid, Renk1, DIALOG_STYLE_INPUT, "Araç Renk 1", "{FFFFFF}Lütfen aracýn 1. rengini girin:\n\n{FFBF00}[Ýnfo] {FFFFFF}Renk 0-255 arasýnda olmalýdýr.", "Devam", "Iptal");
		        	//Dialog_Show(playerid,AracSatinAl,DIALOG_STYLE_MSGBOX,"{2ECC71}Araç Satýn Alma","{FF0000}'%s' {FFFFFF}model aracý {2ECC71}%s {FFFFFF}karþýlýðýnda satýn almak istediðinize emin misiniz?","Evet","Hayýr",ReturnVehicleModelName(DealershipCars[bizid][listitem][vehModel]),FormatNumber(DealershipCars[bizid][listitem][vehPrice]));
		        }
		    }
		}
		case 61:
		{
		    if(!response) return callcmd::dolap(playerid);
		    if(response)
		    {
		        if(PlayerData[playerid][pFaction] == -1) return 1;
		        PlayerData[playerid][pOnDutySkin] = PolisSkinler[listitem];
		        SetPlayerSkin(playerid, PolisSkinler[listitem]);

		    }
		}
		case 62:
		{
		    if(response)
		    {
		        if(PlayerData[playerid][pASlot][listitem] != 0)
		        {
		            HataMesajGonder(playerid,"Bu slot dolu, baþka bir slot seçin.");
		            return AksesuarlariGoster(playerid,2);
		        }
		        new yazi[1000];
        		for(new i; i < sizeof(AttachCops); ++i)
	        	{
         			format(yazi,sizeof(yazi),"%s%d\n",yazi,AttachCops[i][olusumamodel]);
	        	}
	        	SetPVarInt(playerid,"AttachmentIndexSel",listitem);
	        	ShowPlayerDialog(playerid,63,DIALOG_STYLE_PREVMODEL,"Aksesuarlar",yazi,"Sec","Geri");
		    }
		}
		case 63:
		{
		    if(!response) return callcmd::dolap(playerid);
		    if(response)
		    {
		        SetPVarInt(playerid,"AttachmentModelSel",AttachCops[listitem][olusumamodel]);
			    new bstring[257];
			    for(new x;x<sizeof(AttachmentBones);x++)
	        	{
	        		format(bstring, sizeof(bstring), "%s%s\n", bstring, AttachmentBones[x]);
	        	}
	        	ShowPlayerDialog(playerid,64,DIALOG_STYLE_LIST,"{FF0000}Kemik Seç",bstring,"Seç","{FF6347}Kapat");
		    }
		}
		case 64:
		{
		    if(response)
		    {
		        SetPlayerAttachedObject(playerid, GetPVarInt(playerid, "AttachmentIndexSel"), GetPVarInt(playerid, "AttachmentModelSel"), listitem+1);
          		EditAttachedObject(playerid, GetPVarInt(playerid, "AttachmentIndexSel"));
          		BilgiMesajGonder(playerid,"{FFFF00}~k~~PED_SPRINT~{FFFFFF} tuþuna basarak kamerayý oynatabilirsiniz.");
		    }
		    new slotid = GetPVarInt(playerid, "AttachmentIndexSel");
      		new modelid = GetPVarInt(playerid, "AttachmentModelSel");
   			PlayerData[playerid][pASlot][slotid] = modelid;
      		DeletePVar(playerid, "AttachmentIndexSel");
        	DeletePVar(playerid, "AttachmentModelSel");
         	SQL_AksesuarKaydet(playerid);
		}
		case 65:
		{
		    if(response)
		    {
		        new playerev;
		        if(listitem == 0)
		        {
		            if (!IsPlayerInAnyVehicle(playerid) && (playerev = (House_Inside(playerid) == -1) ? (House_Nearest(playerid)) : (House_Inside(playerid))) != -1)
		            {
		                if(house_info[playerev][evKilit] == 1)
		                {
		                    house_info[playerev][evKilit] = 0;
		                    Ev_Kaydet(playerev);
		                    Ev_Yenile(playerev);
		                    MesajGonder(playerid,"Evinizin kilidi açýldý.");
		                    callcmd::ev(playerid);
		                }
		                else
		                {
		                    house_info[playerev][evKilit] = 1;
		                    Ev_Kaydet(playerev);
		                    Ev_Yenile(playerev);
		                    MesajGonder(playerid,"Eviniz kilitlendi.");
		                    callcmd::ev(playerid);
		                }
		             }
          		}
		    }
		}
		case 66:
		    {
		        if(response)
		        {
		            new Float:pos[3];
		            switch(listitem)
		            {
		                case 0:
		                {
		                    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		                    PlaySoundEx(9605, pos[0], pos[1], pos[2], 15);
		                    callcmd::megafon(playerid, "Teslim ol, etrafýn sarýldý!");
		                    return 1;
		                }
		                case 1:
		                {
		                    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		                    PlaySoundEx(9612, pos[0], pos[1], pos[2], 15);
		                    callcmd::megafon(playerid, "Orada olduðunu biliyoruz!");
		                    return 1;
		                }
		                case 2:
						{
						    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		                    PlaySoundEx(10200, pos[0], pos[1], pos[2], 15);
		                    callcmd::megafon(playerid, "Hey Sen! Polis, dur!");
		                    return 1;
						}
						case 3:
						{
						    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		                    PlaySoundEx(15800, pos[0], pos[1], pos[2], 15);
		                    callcmd::megafon(playerid, "Los Santos Polis Departmaný, olduðun yerde kal!");
		                    return 1;
						}
						case 4:
						{
						    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		                    PlaySoundEx(15801, pos[0], pos[1], pos[2], 15);
		                    callcmd::megafon(playerid, "Dur! yoksa ateþ açacaðýz!");
		                    return 1;
						}
						case 5:
						{
						    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		                    PlaySoundEx(15802, pos[0], pos[1], pos[2], 15);
		                    callcmd::megafon(playerid, "Hadi! Hadi! Hadi!");
		                    return 1;
						}
						case 6:
						{
						    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		                    PlaySoundEx(34402, pos[0], pos[1], pos[2], 15);
		                    callcmd::megafon(playerid, "Polis, kýpýrdama!");
		                    return 1;
						}
						case 7:
						{
						    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		                    PlaySoundEx(34403, pos[0], pos[1], pos[2], 15);
		                    callcmd::megafon(playerid, "Ellerin baþýnýn üstüne araçtan in!");
		                    return 1;
						}
					}
				}
		    }
		    case 68:
		    {
		        if(!response) return callcmd::ev(playerid);
		        if(response)
		        {
		            new housee;
		            if(isnull(inputtext)) return ShowPlayerDialog(playerid,68, DIALOG_STYLE_INPUT, "Ev Isim", "{FFFFFF}Lütfen eviniz için yeni bir isim girin:", "Deðiþtir", "Geri");
		            if((housee = (House_Inside(playerid) == -1) ? (House_Nearest(playerid)) : (House_Inside(playerid))) != -1)
		            {
		                format(house_info[housee][evIsim], 30, inputtext);
		                Ev_Yenile(housee);
		                Ev_Kaydet(housee);
		                callcmd::ev(playerid);
					}
					else HataMesajGonder(playerid, "Evinize yakýn deðilsiniz.");
				}
		    }
		    case 69:
			{
			    if(!response) return callcmd::dolap(playerid);
		    	if(response)
		    	{
			        if(PlayerData[playerid][pFaction] == -1) return 1;
			        PlayerData[playerid][pOnDutySkin] = DoktorSkinler[listitem];
			        SetPlayerSkin(playerid, DoktorSkinler[listitem]);

		    	}
			}
	}
	return 1;
}
public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	if(listid == RoadblockList)
	{
	    if(!response) return 1;
		new id = GetFreeObjectID();
	    if(id == -1) return HataMesajGonder(playerid, "Obje oluþturulurken hata oluþtu, geliþtiri ekibiyle iletiþime geçin.");
	    CopObjectData[id][ObjCreated] = true;
	    CopObjectData[id][Owner] = PlayerData[playerid][pID];
	    CopObjectData[id][Type] = OBJECT_TYPE_ROADBLOCK;
	    CopObjectData[id][ObjModel] = modelid;
	    CopObjectData[id][ObjInterior] = GetPlayerInterior(playerid);
	    CopObjectData[id][ObjVirtualWorld] = GetPlayerVirtualWorld(playerid);

	    new Float: x, Float: y, Float: z, Float: a;
	    GetPlayerPos(playerid, x, y, z);
	    GetPlayerFacingAngle(playerid, a);
	    x += (2.0 * floatsin(-a, degrees));
		y += (2.0 * floatcos(-a, degrees));
		CopObjectData[id][ObjX] = x;
		CopObjectData[id][ObjY] = y;
		CopObjectData[id][ObjZ] = z;
		CopObjectData[id][ObjRX] = 0.0;
		CopObjectData[id][ObjRY] = 0.0;
		CopObjectData[id][ObjRZ] = a;
		CopObjectData[id][ObjID] = CreateDynamicObject(modelid, x, y, z, 0.0, 0.0, a, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
		CopObjectData[id][ObjArea] = -1;

		new string[96];
		format(string, sizeof(string), "Barikat (ID: %d)\n{FFFFFF}Yerleþtiren: %s", id, ReturnName(playerid, 0));
		CopObjectData[id][ObjLabel] = CreateDynamic3DTextLabel(string, 0x3498DBFF, x, y, z + 1.35, 10.0, _, _, _, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
		InsertObjectToDB(id);
	}

	if(listid == SignList)
	{
	    if(!response) return 1;
		new id = GetFreeObjectID();
	    if(id == -1) return HataMesajGonder(playerid, "Obje oluþturulurken hata oluþtu, geliþtiri ekibiyle iletiþime geçin.");
	    CopObjectData[id][ObjCreated] = true;
	    CopObjectData[id][Owner] = PlayerData[playerid][pID];
	    CopObjectData[id][Type] = OBJECT_TYPE_SIGN;
	    CopObjectData[id][ObjModel] = modelid;
	    CopObjectData[id][ObjInterior] = GetPlayerInterior(playerid);
	    CopObjectData[id][ObjVirtualWorld] = GetPlayerVirtualWorld(playerid);

	    new Float: x, Float: y, Float: z, Float: a;
	    GetPlayerPos(playerid, x, y, z);
	    GetPlayerFacingAngle(playerid, a);
	    x += (2.0 * floatsin(-a, degrees));
		y += (2.0 * floatcos(-a, degrees));
		CopObjectData[id][ObjX] = x;
		CopObjectData[id][ObjY] = y;
		CopObjectData[id][ObjZ] = z - 1.25;
		CopObjectData[id][ObjRX] = 0.0;
		CopObjectData[id][ObjRY] = 0.0;
		CopObjectData[id][ObjRZ] = a;
		CopObjectData[id][ObjID] = CreateDynamicObject(modelid, x, y, z - 1.25, 0.0, 0.0, a, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
		CopObjectData[id][ObjArea] = -1;

		new string[96];
		format(string, sizeof(string), "Tabela (ID: %d)\n{FFFFFF}Yerleþtiren: %s", id, ReturnName(playerid, 0));
		CopObjectData[id][ObjLabel] = CreateDynamic3DTextLabel(string, 0x3498DBFF, x, y, z + 2.0, 10.0, _, _, _, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
		InsertObjectToDB(id);
	}

	return 1;
}
public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	if(checkpointid == TohumCP[playerid] && TohumTutuyor[playerid] != -1)
	{
	    new vehicleid = PlayerData[playerid][pLastCar];
	    if(GetVehicleModel(vehicleid) != 422) return HataMesajGonder(playerid, "Son bindiðiniz araç Bobcat olmalýdýr.");
		new Float:x, Float:y, Float:z;
		GetVehicleBoot(vehicleid, x, y, z);
		if(GetPlayerDistanceFromPoint(playerid, x, y, z) >= 5.0) return HataMesajGonder(playerid, "Aracýnýza çok uzaksýnýz.");
		new bool:bulundu;
		for(new i; i<5; i++)
		{
		    if(!IsValidDynamicObject(AracTohumObjeler[vehicleid][i]))
		    {
		        bulundu = true;
		        AracTohumObjeler[vehicleid][i] = CreateDynamicObject(19636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		        AttachDynamicObjectToVehicle(AracTohumObjeler[vehicleid][i], vehicleid, TohumAttachOffsets[i][0], TohumAttachOffsets[i][1], TohumAttachOffsets[i][2], 0.000000, 0.000000, 0.000000);
		        break;
		    }
		}
		if(!bulundu) return HataMesajGonder(playerid, "Bu araç dolu, daha fazla kasa koyamazsýnýz.");
		AracTohumlar[vehicleid][TohumTutuyor[playerid]] += TohumSayisi[playerid];
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		RemovePlayerAttachedObject(playerid, 4);
		ApplyAnimation(playerid, "CARRY", "putdwn05", 4.1, 0, 1, 1, 0, 0, 1);
		TohumTutuyor[playerid] = -1;
		TohumSayisi[playerid] = 0;
		DestroyDynamicCP(TohumCP[playerid]);
	}
	if(checkpointid == TrashCP[playerid])
	{
	    if(!HasTrash[playerid]) return HataMesajGonder(playerid, "Çöp torbasý taþýmýyorsunuz.");
	    new vehicleid = PlayerData[playerid][pLastCar];
	    if(LoadedTrash[vehicleid] >= TRASH_LIMIT) return HataMesajGonder(playerid, "Bu aracýn çöp kapasitesi doldu, daha fazla çöp torbasý koyamazsýnýz.");
	    LoadedTrash[vehicleid]++;
		ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.1, 0, 0, 0, 0, 0);
		SendClientMessage(playerid, 0x2ECC71FF, "ÇÖPÇÜLÜK: {FFFFFF}Bir çöp torbasý topladýnýz.");

		if(TRASH_LIMIT - LoadedTrash[vehicleid] > 0)
		{
			new string[96];
			format(string, sizeof(string), "ÇÖPÇÜLÜK: {FFFFFF}Araca {F39C12}%d {FFFFFF}çöp torbasý daha koyabilirsiniz.", TRASH_LIMIT - LoadedTrash[vehicleid]);
			SendClientMessage(playerid, 0x2ECC71FF, string);
		}

		new driver = GetVehicleDriver(vehicleid);
		if(OyundaDegil(driver)) Trash_ShowCapacity(driver);
		Trash_ResetPlayer(playerid);
		return 1;
	}

    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		for(new i; i < sizeof(FactoryData); i++)
		{
		    if(checkpointid == FactoryData[i][FactoryCP])
		    {
		        new string[128], vehicleid = GetPlayerVehicleID(playerid), cash = LoadedTrash[vehicleid] * TRASH_BAG_VALUE;
		        format(string, sizeof(string), "ÇÖPÇÜLÜK: {FFFFFF}Baþarý ile {F39C12}%d {FFFFFF}çöp torbasý sattýn ve {2ECC71}%s {FFFFFF}kazandýn.", LoadedTrash[vehicleid], FormatNumber(cash));
		        SendClientMessage(playerid, 0x2ECC71FF, string);
		        ParaVer(playerid, cash);
		        FactoryData[i][FactoryCurrent] += LoadedTrash[vehicleid];
		        LoadedTrash[vehicleid] = 0;
                Trash_ShowCapacity(playerid);
                format(string, sizeof(string), "Geridönüþüm Fabrikasý - %s\n\n{FFFFFF}Mevcut Çöp Sayýsý: {F39C12}%d\n{FFFFFF}Teslim et ve paraný al!", FactoryData[i][FactoryName], FactoryData[i][FactoryCurrent]);
                UpdateDynamic3DTextLabelText(FactoryData[i][FactoryLabel], 0x2ECC71FF, string);

		        for(new x; x < sizeof(FactoryData); x++)
				{
				    if(IsValidDynamicMapIcon(FactoryIcons[playerid][x]))
				    {
				        DestroyDynamicMapIcon(FactoryIcons[playerid][x]);
				        FactoryIcons[playerid][x] = -1;
				    }

					TogglePlayerDynamicCP(playerid, FactoryData[x][FactoryCP], 0);
				}

		        break;
		    }
		}
	}
    if(checkpointid == LoadingPoint[playerid])
	{
	    if(GetPVarInt(playerid, "LoadingCooldown") > gettime()) return 1;
		new vehicleid = PlayerData[playerid][pLastCar];
		if(Vehicle_LoadedOres(vehicleid) >= VEHICLE_LIMIT) return HataMesajGonder(playerid, "Bu araca daha fazla cevher yükleyemezsiniz.");
		LoadedOres[vehicleid][ CarryingOre[playerid] ]++;

		new string[48];
		format(string, sizeof(string), "MADENCÝ: {FFFFFF}%s yüklendi.", OreData[ CarryingOre[playerid] ][Name]);
		SendClientMessage(playerid, 0x2ECC71FF, string);
		ApplyAnimation(playerid, "CARRY", "putdwn05", 4.1, 0, 1, 1, 0, 0, 1);
		Player_CleanUp(playerid, 1);
		return 1;
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		for(new i; i < sizeof(DropPoints); i++)
		{
		    if(checkpointid == DropPoints[i][PointCP])
		    {
		        new string[128], vehicleid = GetPlayerVehicleID(playerid), cash = Vehicle_GetOreValue(vehicleid);
		        format(string, sizeof(string), "MADENCÝ:{F39C12}%d {FFFFFF}cevher satýldý ve {2ECC71}$%d {FFFFFF}alýndý.", Vehicle_LoadedOres(vehicleid), cash);
		        SendClientMessage(playerid, 0x2ECC71FF, string);
		        ParaVer(playerid, cash);
		        Vehicle_CleanUp(vehicleid);

		        for(new x; x < sizeof(DropPoints); x++)
				{
				    if(IsValidDynamicMapIcon(PointIcons[playerid][x]))
				    {
				        DestroyDynamicMapIcon(PointIcons[playerid][x]);
				        PointIcons[playerid][x] = -1;
				    }

					TogglePlayerDynamicCP(playerid, DropPoints[x][PointCP], 0);
				}

		        break;
		    }
		}
	}
	return 1;
}
public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	PlayerTextDrawHide(playerid, OnayliHoodGirisTD[playerid][0]);
	PlayerTextDrawHide(playerid, OnayliHoodGirisTD[playerid][1]);
	PlayerTextDrawHide(playerid, OnayliHoodGirisTD[playerid][2]);
	return 1;
}
public OnPlayerEnterDynamicArea(playerid, areaid)
{
	for(new i; i<MAX_HOOD; i++) if(Hood[i][hExists] == true && Hood[i][hZone] == areaid)
	{
	    new str[100];
	    format(str, sizeof(str), "~w~Bu_bolge_~r~%s_~w~adli_birlige_aittir. Korku_rolu_yapmaktan_kacinmayiniz.", Birlikler[Hood[i][hBirlik]][birlikAd]);
	    PlayerTextDrawSetString(playerid, OnayliHoodGirisTD[playerid][0], str);
	    PlayerTextDrawShow(playerid, OnayliHoodGirisTD[playerid][0]);
	    PlayerTextDrawShow(playerid, OnayliHoodGirisTD[playerid][1]);
	    PlayerTextDrawShow(playerid, OnayliHoodGirisTD[playerid][2]);
	    break;
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		for(new i; i < MAX_COP_OBJECTS; i++)
		{
		    if(!CopObjectData[i][ObjCreated]) continue;
		    if(areaid == CopObjectData[i][ObjArea])
		    {
				switch(CopObjectData[i][Type])
				{
				    case OBJECT_TYPE_SPIKE:
				    {
						new panels, doors, lights, tires;
			        	GetVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, tires);
        				UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, encode_tires(1, 1, 1, 1));
			        	PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
					}

					case OBJECT_TYPE_SPEEDCAM:
					{
					    new speed = GetPlayerSpeed(GetPlayerVehicleID(playerid));
					    if((GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_FBI || GetFactionType(playerid) == BIRLIK_LSMD || GetFactionType(playerid) == BIRLIK_GOV) && PlayerData[playerid][pOnDuty] == 1) break;
					    if(speed > CopObjectData[i][ObjData])
					    {
					        if(GetPVarInt(playerid, "HizAsimi") >= 3)
					        {
					            PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
					            SetPVarInt(playerid, "HizAsimi", 0);
					            new id = Ticket_Add(playerid, 1000, "Hýz Limitini Aþmak", "Hiz Kamerasi");
					            if(id != -1)
					            {
					                BilgiMesajGonder(playerid, "Hýz Kamerasýna 3 defa yakalandýðýnýz için $1000 para cezasý kesildi.");
					                BilgiMesajGonder(playerid, "Cezayý ödeyene kadar devlet hizmetlerinden yararlanamayacaksýnýz.");
					            }
					        }
				            else
				            {
				                SetPVarInt(playerid, "HizAsimi", GetPVarInt(playerid, "HizAsimi") + 1);
				                PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
				                BilgiMesajGonder(playerid, "Hýz Kamerasýna yakalandýnýz, yavaþlayýn! {fc1616}[%d/3]", GetPVarInt(playerid, "HizAsimi"));
				            }
					    }
					}
				}

				break;
		    }
		}
	}

	return 1;
}
HasarBolge(bolge)
{
	new string[24];
	switch(bolge)
	{
	    case 3: format(string, 24, "Karýn");
	    case 4: format(string, 24, "Çatal");
	    case 5: format(string, 24, "Sol El");
	    case 6: format(string, 24, "Sað El");
	    case 7: format(string, 24, "Sol Ayak");
	    case 8: format(string, 24, "Sað Ayak");
	    case 9: format(string, 24, "Kafa");
	}
	return string;
}
ResetPlayerDamages(playerid)
{
	for(new i; i<MAX_HASAR; i++)
	{
	    Hasarlar[playerid][i][hasarVarmi] = false;
	    Hasarlar[playerid][i][hasarBolge] = 0;
	    Hasarlar[playerid][i][hasarVeren] = -1;
     	Hasarlar[playerid][i][hasarDeger] = 0.0;
      	Hasarlar[playerid][i][hasarSilah] = 0;
	}
	return 1;
}
Hasar_Ekle(playerid, bodypart, Float:hasar, hasarveren, silahid)
{

	for (new i = 0; i != MAX_HASAR; i ++)
	{
	    if (!Hasarlar[playerid][i][hasarVarmi])
	    {
			Hasarlar[playerid][i][hasarVarmi] = true;
		    Hasarlar[playerid][i][hasarBolge] = bodypart;
		    Hasarlar[playerid][i][hasarVeren] = hasarveren;
            Hasarlar[playerid][i][hasarDeger] = hasar;
            Hasarlar[playerid][i][hasarSilah] = silahid;
			return i;
		}
	}
	return -1;
}
GetNearestCCTV(playerid)
{
	foreach(new i:CCTVIter)
	{
		if(IsPlayerInRangeOfPoint(playerid, 30.0, CCTVInfo[i][cctv_X],CCTVInfo[i][cctv_Y], CCTVInfo[i][cctv_Z]))
		{
			return i;
		}
	}
	return -1;
}
stock Float:GetDistanceBetweenPoints(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
    return VectorSize(x1-x2, y1-y2, z1-z2);
}
GetServerBilgi(str[])
{
	new query[150];
	format(query, sizeof(query), "SELECT `%s` FROM `server`", str);
	new Cache:cachee = mysql_query(baglanti, query);
	new rows;
	cache_get_row_count(rows);
	if(!rows) return -1;
	new degisken;
	cache_get_value_name_int(0, str, degisken);
	cache_delete(cachee);
	return degisken;
}
SetServerBilgi(str[], deger)
{
	new query[150];
	format(query, sizeof(query), "UPDATE `server` SET `%s` = '%d'", str, deger);
	mysql_query(baglanti, query, false);
	return 1;
}
SetServerBilgiStr(str[], yazi[])
{
	new query[200];
	format(query, sizeof(query), "UPDATE `server` SET `%s` = '%s'", str, yazi);
	mysql_query(baglanti, query, false);
	return 1;
}
GetServerBilgiStr(str[])
{
	new query[300];
	format(query, sizeof(query), "SELECT `%s` FROM `server`", str);
	new Cache:cachee = mysql_query(baglanti, query);
	new rows;
	cache_get_row_count(rows);
	new yazi[100];
	yazi = "Hata";
	if(rows)
	{
		cache_get_value_name(0, str, yazi, 100);
		cache_delete(cachee);
	}
	return yazi;
}
PlayerPlaySoundEx(playerid, sound)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);

	foreach (new i : Player) if (IsPlayerInRangeOfPoint(i, 20.0, x, y, z)) {
	    PlayerPlaySound(i, sound, x, y, z);
	}
	return 1;
}
stock AnimationCheck(playerid)
{
    return (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !PlayerData[playerid][pBaygin] && !PlayerData[playerid][pKelepce] && !PlayerData[playerid][pSoklandi]  && !PlayerData[playerid][pYereYatirildi] && GetPVarInt(playerid, "IpBaglandi") == 0);
}
stock PlaySoundEx(soundid, Float:x, Float:y, Float:z, range)
{
        foreach(new i : Player)
        {
                if(!OyundaDegil(i)) continue;
                if(!IsPlayerInRangeOfPoint(i, range, x, y, z)) continue;
                PlayerPlaySound(i, soundid, 0, 0, 0);
        }
}
stock Ev_GetKeyCount(houseid)
{
	if(house_info[houseid][evExists])
	{
	    new query[100];
	    format(query, sizeof(query), "SELECT null FROM `anahtarlar` WHERE `sqlid` = '%d' AND `tip` = '1'", house_info[houseid][evID]);
	    new Cache:cachee = mysql_query(baglanti, query);
	    new rows;
	    cache_get_row_count(rows);
	    cache_delete(cachee);
	    return rows;
	}
	return 0;
}
stock Arac_GetKeyCount(aracid)
{
	if(AracInfo[aracid][aracExists])
	{
	    new query[100];
	    format(query, sizeof(query), "SELECT null FROM `anahtarlar` WHERE `sqlid` = '%d' AND `tip` = '2'", AracInfo[aracid][aracID]);
	    new Cache:cachee = mysql_query(baglanti, query);
	    new rows;
	    cache_get_row_count(rows);
	    cache_delete(cachee);
	    return rows;
	}
	return 0;
}
stock Arac_KeyDialog(playerid, aracid)
{
	if(AracInfo[aracid][aracExists])
	{
	    new query[100];
	    format(query, sizeof(query), "SELECT * FROM `anahtarlar` WHERE `sqlid` = '%d' AND `tip` = '2'", AracInfo[aracid][aracID]);
	    new Cache:cachee = mysql_query(baglanti, query);
	    new rows;
	    cache_get_row_count(rows);
	    if(rows)
	    {
	        new psqlid, str[300];
	        for(new i; i<rows; i++)
	        {
	            cache_get_value_name_int(i, "playersqlid", psqlid);
	            format(str, sizeof(str), "%s{FFFFFF}%s\n", str, SQLName(psqlid, 0));
	            KeyListeleme[playerid][i] = psqlid;
	        }
	        cache_delete(cachee);
	        SetPVarInt(playerid, "KeyDeleteCarID", aracid);
	        Dialog_Show(playerid, AracAnahtarlar, DIALOG_STYLE_LIST, "{AA3333}Anahtarlar", str, "Sil", "Geri");
		}
		else
		{
		    DeletePVar(playerid, "KeyDeleteCarID");
		    callcmd::arac(playerid);
		}
	}
	return 1;
}
stock Ev_KeyDialog(playerid, houseid)
{
	if(house_info[houseid][evExists])
	{
	    new query[100];
	    format(query, sizeof(query), "SELECT * FROM `anahtarlar` WHERE `sqlid` = '%d' AND `tip` = '1'", house_info[houseid][evID]);
	    new Cache:cachee = mysql_query(baglanti, query);
	    new rows;
	    cache_get_row_count(rows);
	    if(rows)
	    {
	        new psqlid, str[300];
	        for(new i; i<rows; i++)
	        {
	            cache_get_value_name_int(i, "playersqlid", psqlid);
	            format(str, sizeof(str), "%s{FFFFFF}%s\n", str, SQLName(psqlid, 0));
	            KeyListeleme[playerid][i] = psqlid;
	        }
	        cache_delete(cachee);
	        SetPVarInt(playerid, "KeyDeleteHouseID", houseid);
	        Dialog_Show(playerid, EvAnahtarlar, DIALOG_STYLE_LIST, "{AA3333}Anahtarlar", str, "Sil", "Geri");
		}
		else
		{
		    DeletePVar(playerid, "KeyDeleteHouseID");
		    callcmd::ev(playerid);
		}
	}
	return 1;
}
stock OyuncuAnahtarlar(playerid)
{
	new query[100];
	format(query, sizeof(query), "SELECT * FROM `anahtarlar` WHERE `playersqlid` = '%d'", PlayerData[playerid][pID]);
	new Cache:sawyer = mysql_query(baglanti, query);
	new rows;
	cache_get_row_count(rows);
	if(!rows) return HataMesajGonder(playerid, "Size verilmiþ hiç anahtar yok.");
	new str[2500], string[124], sqlid, givesqlid, tip, id;
	strcat(str, "{FF0000}Tip\t{FF0000}Ev Adý/Araç Model\n");
	for(new i; i<rows; i++)
	{
	    cache_get_value_name_int(i, "sqlid", sqlid);
	    cache_get_value_name_int(i, "givesqlid", givesqlid);
	    cache_get_value_name_int(i, "tip", tip);
	    if(tip == 1)
	    {
			id = Ev_GetID(sqlid);
	        format(string, sizeof(string), "{FFBF00}%s", house_info[id][evIsim]);
		}
		else if(tip == 2)
		{
		    id = Car_GetID2(sqlid);
		    format(string, sizeof(string), "{FFBF00}%s", ReturnVehicleModelName(AracInfo[id][aracModel]));
		}
		KeyListeleme[playerid][i] = sqlid;
		KeyListelemeTip[playerid][i] = tip;
		format(string, sizeof(string), "{FFBF00}%s\t{FFBF00}%s\n",(tip == 1) ? ("Ev") : ("Araç"), string);
		strcat(str, string);
	}
	cache_delete(sawyer);
	format(string, sizeof(string),"{B8860B}Anahtarlarýnýz (%d adet)", rows);
	Dialog_Show(playerid, OyuncuAnahtar, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Sil", "Kapat");
	return 1;
}
stock MobilyaMenu(playerid, id)
{
	if(house_info[id][evSahip] != PlayerData[playerid][pID] && house_info[id][MobilyaYetki] != PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Mobilya düzenleme yetkiniz bulunmamaktadýr.");
	new str[100];
   	SetPVarInt(playerid, "FurnitureHouse", id);
	format(str, sizeof(str), "{FFFFFF}Mobilyalar (%d/%d)", Ev_MobilyaSayisi(id), GetMaxFurniture(playerid, id));
	Dialog_Show(playerid, Mobilya, DIALOG_STYLE_LIST, str, "{FFFFFF}Mobilya Satýn Al (Liste)\n{FFFFFF}Mobilya Satýn Al (Obje ID)\n{FFFFFF}Mobilya Düzenle\n{FFFFFF}Mobilya Sat\n{FFFFFF}Mobilya Kopyala\n{FFFFFF}Mobilya Materyallerini Düzenle\n{FFFFFF}Son Eklenen Mobilyayý Sil\n{FFFFFF}Mobilya Yetkilendirme\n{FFFFFF}Kapýya Git\n{f7163f}Tüm Mobilyalarý Sat", "Seç", "Kapat");
	return 1;
}
stock GetMaxFurniture(playerid, evid)
{
	new evmax = house_info[evid][evMaksMobilya];
	switch(PlayerData[playerid][pVip])
	{
	    case 1: evmax += 60;
	    case 2: evmax += 120;
	    case 3: evmax += 200;
	}
	return evmax;
}
stock NPC_Secenekler(playerid, id)
{
	new str[600];
	for(new i; i<MAX_SECENEK; i++)
	{
		format(str, sizeof(str), "%s{E74C3C}» {FFFFFF}Seçenek %d: %s\n{E74C3C}» {FFFFFF}Seçenek %d Cevap: %s\n", str, i, NPCSecenekler[id][i], i, NPCSecenekCevaplar[id][i]);
	}
	SetPVarInt(playerid, "npcid", id);
	Dialog_Show(playerid, Secenekler, DIALOG_STYLE_LIST, "Seçenekler", str, "Seç", "Kapat");
	return 1;
}
/*stock ModifiyeMenu(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return ModifiyeBitir(playerid);
    Dialog_Show(playerid, Modifiye, DIALOG_STYLE_LIST, "Modifiye", D_TEXT, "Seç", "Kapat");
	return 1;
}*/

Action:ActionInfernus(playerid, response)
{
	if (response == ACTION_RESPONSE_YES)
	{
		new Float:x, Float:y, Float:z, Float:ang;

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, ang);

		new vehicleid = CreateVehicle(411,
			x + 2.5 * floatsin(-ang, degrees),
			y + 2.5 * floatcos(-ang, degrees),
			z + 0.3,
			ang,
			0,
			0,
			-1);

		LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
		SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	} else {
		HataMesajGonder(playerid, "Herhangi birþey yapmadýðýn için iptal edildi.");
	}
}

Dialog:TaksiPlaka(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	    if(PlayerData[playerid][pCash] < 35000) return HataMesajGonder(playerid, "Yeterli paranýz yok.");
	    new id = Car_GetID(GetPlayerVehicleID(playerid));
	    if(id == -1) return 1;
	    ParaVer(playerid, -35000);
	    AracInfo[id][TaksiPlaka] = 1;
	    Arac_Kaydet(id);
	    MesajGonder(playerid, "Araca taksi plakasý taktýnýz. (/taksi)");
	}
	return 1;
}
Dialog:AracZirhlat(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	    if(PlayerData[playerid][pCash] < 65000) return HataMesajGonder(playerid, "Yeterli paranýz yok.");
	    new id = Car_GetID(GetPlayerVehicleID(playerid));
	    if(id == -1) return 1;
	    ParaVer(playerid, -65000);
	    AracInfo[id][aracZirh] += 1000;
	    Arac_Kaydet(id);
	    MesajGonder(playerid, "Araç zýrhlandýrýldý.");
	}
	return 1;
}

Dialog:Labitent(playerid, response, listitem, inputtext[])
{
	if(response)
	{
    if (!PlayerData[playerid][pHapisSure])
        return HataMesajGonder(playerid, "Hapiste deðilsiniz.");
    if(PlayerData[playerid][pCK] == 1) return HataMesajGonder(playerid, "Bu karakter CK edilmiþ, hapisten çýkarýlamaz.");

    PlayerData[playerid][pHapisSure] = 1;
    MesajGonder(playerid, "Tebrikler labirenti bitirdiðiniz için cezanýz silinde ve $5000 dolar kazandýnýz.");
    ParaVer(playerid, 5000);
  }
	return 1;
}
Dialog:Ciftci(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(PlayerData[playerid][pCash] < 20) return HataMesajGonder(playerid, "Yeterlý paranýz bulunmamaktadýr.");
	            if(PlayerData[playerid][pTohumlar][0] >= 5) return HataMesajGonder(playerid, "En fazla 5 adet portakal tohumu taþýyabilirsiniz.");
	            ParaVer(playerid, -20);
	            PlayerData[playerid][pTohumlar][0]++;
	            MesajGonder(playerid, "Portakal tohumu satýn aldýnýz.");
	        }
	        case 1:
	        {
	            if(PlayerData[playerid][pCash] < 25) return HataMesajGonder(playerid, "Yeterlý paranýz bulunmamaktadýr.");
	            if(PlayerData[playerid][pTohumlar][1] >= 5) return HataMesajGonder(playerid, "En fazla 5 adet elma tohumu taþýyabilirsiniz.");
	            ParaVer(playerid, -25);
	            PlayerData[playerid][pTohumlar][1]++;
	            MesajGonder(playerid, "Elma tohumu satýn aldýnýz.");
	        }
	        case 2:
	        {
	            if(PlayerData[playerid][pCash] < 30) return HataMesajGonder(playerid, "Yeterlý paranýz bulunmamaktadýr.");
	            if(PlayerData[playerid][pTohumlar][2] >= 5) return HataMesajGonder(playerid, "En fazla 5 adet armut tohumu taþýyabilirsiniz.");
	            ParaVer(playerid, -30);
	            PlayerData[playerid][pTohumlar][2]++;
	            MesajGonder(playerid, "Armut tohumu satýn aldýnýz.");
	        }
	        case 3:
	        {
	        	new vehicleid = PlayerData[playerid][pLastCar];
	    		if(GetVehicleModel(vehicleid) != 422) return HataMesajGonder(playerid, "Son bindiðiniz araç Bobcat olmalýdýr.");
				new Float:x, Float:y, Float:z;
				GetVehiclePos(vehicleid, x, y, z);
				if(GetPlayerDistanceFromPoint(playerid, x, y, z) >= 5.0) return HataMesajGonder(playerid, "Aracýnýza çok uzaksýnýz.");
	            if(AracTohumlar[vehicleid][0] <= 0 && AracTohumlar[vehicleid][1] <= 0 && AracTohumlar[vehicleid][2] <= 0) return HataMesajGonder(playerid, "Araçta hiç meyve yok.");
	            new fiyat;
	            fiyat = AracTohumlar[vehicleid][0] * 10;
	            fiyat += AracTohumlar[vehicleid][1] * 12;
	            fiyat += AracTohumlar[vehicleid][2] * 15;
	            for(new i; i<5; i++)
	            {
	                if(IsValidDynamicObject(AracTohumObjeler[vehicleid][i]))
	                {
	                    DestroyDynamicObject(AracTohumObjeler[vehicleid][i]);
	                }
	            }
	            AracTohumlar[vehicleid][0] = 0;
	            AracTohumlar[vehicleid][1] = 0;
	            AracTohumlar[vehicleid][2] = 0;
	            ParaVer(playerid, fiyat);
	            MesajGonder(playerid, "Meyveleri satarak {2ECC71}%s {FFFFFF}kazandýnýz.", FormatNumber(fiyat));
	        }
	    }
	}
	return 1;
}
Dialog:SoruEkle(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid,SoruEkle,DIALOG_STYLE_INPUT,"Soru Ekle","{FFFFFF}Lütfen ekleyeceðiniz sorunun sorusunu giriniz:\n\n{FFBF00}[Ýnfo] en fazla 50 karakterden oluþabilir.","Devam","Kapat");
	    if(strlen(inputtext) >= 50) return Dialog_Show(playerid,SoruEkle,DIALOG_STYLE_INPUT,"Soru Ekle","{FFFFFF}Lütfen ekleyeceðiniz sorunun sorusunu giriniz:\n\n{FFBF00}[Ýnfo] en fazla 50 karakterden oluþabilir.","Devam","Kapat");
	    SetPVarString(playerid,"Soru",inputtext);
	    Dialog_Show(playerid, SoruCevap, DIALOG_STYLE_INPUT, "Soru Ekle", "{FFFFFF}Lütfen sorunun cevabýný yazýnýz:\n\n{FFBF00}[Ýnfo] en fazla 128 karakterden oluþabilir.", "Devam", "Kapat");
	}
	return 1;
}
Dialog:SoruCevap(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext)) return Dialog_Show(playerid, SoruCevap, DIALOG_STYLE_INPUT, "Soru Ekle", "{FFFFFF}Lütfen sorunun cevabýný yazýnýz:\n\n{FFBF00}[Ýnfo] en fazla 128 karakterden oluþabilir.", "Devam", "Kapat");
        if(strlen(inputtext) >= 128) return Dialog_Show(playerid, SoruCevap, DIALOG_STYLE_INPUT, "Soru Ekle", "{FFFFFF}Lütfen sorunun cevabýný yazýnýz:\n\n{FFBF00}[Ýnfo] en fazla 128 karakterden oluþabilir.", "Devam", "Kapat");
        new soru[50];
        GetPVarString(playerid,"Soru",soru,sizeof(soru));
        new id = Soru_Ekle(soru ,inputtext, PlayerData[playerid][pAdminName]);
        if(id == -1) return HataMesajGonder(playerid, "Soru eklenemedi.");
        else MesajGonder(playerid, "Soru eklenmiþtir, ID: %d.", id);
        DeletePVar(playerid,"Soru");
    }
	return 1;
}
stock Soru_Sil(soruid)
{
    new query[124];
    format(query,sizeof(query),"DELETE FROM `sorular` WHERE `sid` = '%d'",SoruData[soruid][soruID]);
    mysql_query(baglanti,query,false);
    SoruData[soruid][soruExists] = false;
    format(SoruData[soruid][Soru],50,"");
    format(SoruData[soruid][SoruCevap],128,"");
    SoruData[soruid][OkunmaSayisi] = 0;
    format(SoruData[soruid][EklenmeTarihi],25,"");
    format(SoruData[soruid][Ekleyen],24,"");
	return 1;
}
stock SoruSayisi()
{
    new sayi;
    for(new i; i<MAX_SORU; i++)
    {
        if(SoruData[i][soruExists])
        {
            sayi++;
        }
    }
    return sayi;
}
forward SorulariYukle();
public SorulariYukle()
{
    new Cache:sawyer = mysql_query(baglanti,"SELECT * FROM `sorular`");
    new rows;
    cache_get_row_count(rows);
    printf("» Toplam %d soru yüklenmiþtir.",rows);
    for(new i = 0; i < rows; i ++) if (i < MAX_SORU)
    {
        SoruData[i][soruExists] = true;
        cache_get_value_name_int(i,"sid",SoruData[i][soruID]);
        cache_get_value_name(i,"Soru",SoruData[i][Soru],50);
        cache_get_value_name(i,"Cevap",SoruData[i][SoruCevap],128);
        cache_get_value_name_int(i,"OkunmaSayisi",SoruData[i][OkunmaSayisi]);
        cache_get_value_name(i,"Tarih",SoruData[i][EklenmeTarihi],25);
        cache_get_value_name(i,"Ekleyen",SoruData[i][Ekleyen],24);
    }
    cache_delete(sawyer);
    return 1;
}
stock Soru_Ekle(Soruu[], sCevap[], EkleyenAdam[])
{
    if(SoruSayisi() >= MAX_SORU) return 1;
    for(new i; i<MAX_SORU; i++)
    {
        if(!SoruData[i][soruExists])
        {
            SoruData[i][soruExists] = true;
            format(SoruData[i][Soru],50,Soruu);
            format(SoruData[i][SoruCevap],128,sCevap);
            SoruData[i][OkunmaSayisi] = 0;
            format(SoruData[i][EklenmeTarihi],25,ReturnDate());
            format(SoruData[i][Ekleyen],24,EkleyenAdam);
            new query[350];
            format(query,sizeof(query),"INSERT INTO `sorular` (`Soru`,`Cevap`,`Tarih`,`Ekleyen`) VALUES ('%s','%s','%s','%s')",SQL_ReturnEscaped(Soruu),SQL_ReturnEscaped(sCevap),ReturnDate(),EkleyenAdam);
            new Cache:sawyer = mysql_query(baglanti,query);
            SoruData[i][soruID] = cache_insert_id();
            cache_delete(sawyer);
            return i;
        }
    }
    return -1;

}
/*Dialog:Modifiye(playerid, response, listitem, inputtext[])
{
	if(!response) return ModifiyeBitir(playerid);
	if(response)
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return ModifiyeBitir(playerid);
	    switch(listitem)
	    {
	        case 0:
	        {
	            new Float:health;
	            GetVehicleHealth(PlayerData[playerid][pModifiye], health);
	            if(health > 950)
	            {
	                HataMesajGonder(playerid, "Bu aracýn bakýma ihtiyacý yok.");
	                return ModifiyeMenu(playerid);
	            }
	            RepairVehicle(PlayerData[playerid][pModifiye]);
	            SetVehicleHealth(PlayerData[playerid][pModifiye], 999);
	            PlayerData[playerid][pModifiyeUcret] += 1000;
	            MesajGonder(playerid, "Aracýn bakým ve onarým iþlemleri yapýldý. (Ücret: $1000, Toplam Ücret: %s)", FormatNumber(PlayerData[playerid][pModifiyeUcret]));
	            ModifiyeMenu(playerid);
	            new id = GetCarOwnerID(PlayerData[playerid][pModifiye]);
	            if(id != -1) MesajGonder(id, "%s adlý kiþi aracýnýza bakým yaptý. (Ücret: $1000, Toplam Ücret: %s)", ReturnName(playerid, 0), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
	        }
	        case 2:
	        {
	            Dialog_Show(playerid, Color1, DIALOG_STYLE_INPUT, "Renk 1", "Lütfen aracýn 1. rengini girin (0-255)", "Devam", "Geri");
	        }
	        case 1:
	        {
	            new str[300], sayi;
	            for(new i = 0; i < NUMBER_TYPE_PAINTJOB; i++)
	            {
	                if(pjInfo[ i ][ vehID ] == GetVehicleModel(PlayerData[playerid][pModifiye]))
	                {
	                    ModifiyeListeleme[playerid][sayi] = i;
	                    sayi++;
	                    format(str, sizeof(str), "%s{FFFFFF}Paintjob %d\n", str, sayi);
	                }
	            }
	            if(!sayi)
	            {
	                HataMesajGonder(playerid, "Bu araç ile uyumlu paintjob yok.");
	                return ModifiyeMenu(playerid);
	            }
	            strcat(str, "\n{FFFFFF}Paintjob Kaldýr");
	            Dialog_Show(playerid, Paintjob, DIALOG_STYLE_LIST, "Paintjob Seç", str, "Seç", "Geri");
	        }
	        case 3:
	        {
	            new str[500], sayi;
	            for( new i = 0; i < MAX_COMPONENTS; i++ )
	            {
	                if(cInfo[i][cType] == CARMODTYPE_EXHAUST && IsVehicleUpgradeCompatible(GetVehicleModel(PlayerData[playerid][pModifiye]), cInfo[i][cID]))
	                {
	                    ModifiyeListeleme[playerid][sayi] = i;
	                    sayi++;
	                    format(str, sizeof(str), "%s{FFFFFF}%s\n", str, cInfo[i][cName]);
	                }
	            }
	            if(!sayi)
	            {
	                HataMesajGonder(playerid, "Bu araç ile uyumlu egzoz yok.");
	                return ModifiyeMenu(playerid);
	            }
	            strcat(str, "\n{FFFFFF}Egzozu Kaldýr");
	            Dialog_Show(playerid, Egzoz, DIALOG_STYLE_LIST, "Egzoz", str, "Seç", "Geri");
	        }
	        case 4:
	        {
	            new str[500], sayi;
	            for(new i = 0; i < MAX_COMPONENTS; i++)
	            {
	                if( cInfo[ i ][ cType ] == CARMODTYPE_FRONT_BUMPER && IsVehicleUpgradeCompatible(GetVehicleModel(PlayerData[playerid][pModifiye]), cInfo[i][cID]))
	                {
						ModifiyeListeleme[playerid][sayi] = i;
						sayi++;
						format(str, sizeof(str), "%s{FFFFFF}%s\n",str, cInfo[i][cName]);
	                }
	            }
	            if(!sayi)
	            {
	                HataMesajGonder(playerid, "Bu araç ile uyumlu ön tampon yok.");
	                return ModifiyeMenu(playerid);
	            }
	            strcat(str, "\n{FFFFFF}Ön Tamponu Kaldýr");
	            Dialog_Show(playerid, OnTampon, DIALOG_STYLE_LIST, "Ön Tampon", str, "Seç", "Geri");
	        }
	        case 5:
	        {
	            new str[500], sayi;
	            for(new i = 0; i < MAX_COMPONENTS; i++)
	            {
	                if( cInfo[ i ][ cType ] == CARMODTYPE_REAR_BUMPER && IsVehicleUpgradeCompatible(GetVehicleModel(PlayerData[playerid][pModifiye]), cInfo[i][cID]))
	                {
						ModifiyeListeleme[playerid][sayi] = i;
						sayi++;
						format(str, sizeof(str), "%s{FFFFFF}%s\n",str, cInfo[i][cName]);
	                }
	            }
	            if(!sayi)
	            {
	                HataMesajGonder(playerid, "Bu araç ile uyumlu arka tampon yok.");
	                return ModifiyeMenu(playerid);
	            }
	            strcat(str, "\n{FFFFFF}Arka Tamponu Kaldýr");
	            Dialog_Show(playerid, ArkaTampon, DIALOG_STYLE_LIST, "Arka Tampon", str, "Seç", "Geri");
	        }
	        case 6:
	        {
	            new str[500], sayi;
	            for(new i = 0; i < MAX_COMPONENTS; i++)
	            {
	                if( cInfo[ i ][ cType ] == CARMODTYPE_ROOF && IsVehicleUpgradeCompatible(GetVehicleModel(PlayerData[playerid][pModifiye]), cInfo[i][cID]))
	                {
						ModifiyeListeleme[playerid][sayi] = i;
						sayi++;
						format(str, sizeof(str), "%s{FFFFFF}%s\n",str, cInfo[i][cName]);
	                }
	            }
	            if(!sayi)
	            {
	                HataMesajGonder(playerid, "Bu araç ile uyumlu çatý yok.");
	                return ModifiyeMenu(playerid);
	            }
	            strcat(str, "\n{FFFFFF}Çatýyý Kaldýr");
	            Dialog_Show(playerid, Cati, DIALOG_STYLE_LIST, "Çatý", str, "Seç", "Geri");
	        }
	        case 7:
	        {
	            new str[500], sayi;
	            for(new i = 0; i < MAX_COMPONENTS; i++)
	            {
	                if( cInfo[ i ][ cType ] == CARMODTYPE_SPOILER && IsVehicleUpgradeCompatible(GetVehicleModel(PlayerData[playerid][pModifiye]), cInfo[i][cID]))
	                {
						ModifiyeListeleme[playerid][sayi] = i;
						sayi++;
						format(str, sizeof(str), "%s{FFFFFF}%s\n",str, cInfo[i][cName]);
	                }
	            }
	            if(!sayi)
	            {
	                HataMesajGonder(playerid, "Bu araç ile uyumlu rüzgarlýk yok.");
	                return ModifiyeMenu(playerid);
	            }
	            strcat(str, "\n{FFFFFF}Rüzgarlýk Kaldýr");
	            Dialog_Show(playerid, Ruzgarlik, DIALOG_STYLE_LIST, "Rüzgarlýk", str, "Seç", "Geri");
	        }
	        case 8:
	        {
	            new str[300], sayi;
	            for(new i = 0; i < MAX_COMPONENTS; i++)
	            {
	                if( cInfo[ i ][ cType ] == CARMODTYPE_SIDESKIRT && IsVehicleUpgradeCompatible(GetVehicleModel(PlayerData[playerid][pModifiye]), cInfo[i][cID]))
	                {
						ModifiyeListeleme[playerid][sayi] = i;
						sayi++;
						format(str, sizeof(str), "%s{FFFFFF}%s\n",str, cInfo[i][cName]);
	                }
	            }
	            if(!sayi)
	            {
	                HataMesajGonder(playerid, "Bu araç ile uyumlu yan etek yok.");
	                return ModifiyeMenu(playerid);
	            }
	            strcat(str, "\n{FFFFFF}Yan Etek Kaldýr");
	            Dialog_Show(playerid, YanEtek, DIALOG_STYLE_LIST, "Yan Etekler", str, "Seç", "Geri");
	        }
	        case 9:
	        {
	            new str[700], sayi;
	            for(new i = 0; i < MAX_COMPONENTS; i++)
	            {
	                if( cInfo[ i ][ cType ] == CARMODTYPE_WHEELS && IsVehicleUpgradeCompatible(GetVehicleModel(PlayerData[playerid][pModifiye]), cInfo[i][cID]))
	                {
						ModifiyeListeleme[playerid][sayi] = i;
						sayi++;
						format(str, sizeof(str), "%s{FFFFFF}%s\n",str, cInfo[i][cName]);
	                }
	            }
	            if(!sayi)
	            {
	                HataMesajGonder(playerid, "Bu araç ile uyumlu jant yok.");
	                return ModifiyeMenu(playerid);
	            }
	            strcat(str, "\n{FFFFFF}Jant Kaldýr");
	            Dialog_Show(playerid, Jantlar, DIALOG_STYLE_LIST, "Jantlar", str, "Seç", "Geri");
	        }
	        case 10:
	        {
         		new id = Car_GetID(PlayerData[playerid][pModifiye]);
	            if(CarComponents[PlayerData[playerid][pModifiye]][9] == 0)
	            {
	                if(AracInfo[id][aracMods][9] != 0)
	                {
	                    HataMesajGonder(playerid, "Bu araçta zaten hidrolik var.");
	                    return ModifiyeMenu(playerid);
	                }
	                AddVehicleComponent(PlayerData[playerid][pModifiye], 1087);
	                CarComponents[PlayerData[playerid][pModifiye]][9] = 1087;
	                PlayerData[playerid][pModifiyeUcret] += 500;
	                MesajGonder(playerid, "Araca hidrolik eklediniz. (Ücret: $500, Toplam Ücret: %s)", FormatNumber(PlayerData[playerid][pModifiyeUcret]));
                 	new ownerid = GetCarOwnerID(PlayerData[playerid][pModifiye]);
            		if(ownerid != -1) MesajGonder(ownerid, "%s adlý kiþi aracýnýza hidrolik ekledi. (Ücret: $500, Toplam Ücret: %s)",ReturnName(playerid, 0),FormatNumber(PlayerData[playerid][pModifiyeUcret]));
            		ModifiyeMenu(playerid);
	            }
	            else
	            {
	                RemoveVehicleComponent(PlayerData[playerid][pModifiye], 1087);
	                CarComponents[PlayerData[playerid][pModifiye]][9] = 0;
	                PlayerData[playerid][pModifiyeUcret] -= 500;
	                MesajGonder(playerid, "Araca eklediðiniz hidrolik kaldýrýldý. (Ücret: -$500, Toplam Ücret: %s)", FormatNumber(PlayerData[playerid][pModifiyeUcret]));
	                new ownerid = GetCarOwnerID(PlayerData[playerid][pModifiye]);
            		if(ownerid != -1) MesajGonder(ownerid, "%s adlý kiþi aracýnýza eklediði hidroliði kaldýrdý. (Ücret: -$500, Toplam Ücret: %s)",ReturnName(playerid, 0), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
            		ModifiyeMenu(playerid);
	            }
	        }
	        case 11:
	        {
	            Dialog_Show(playerid, Nitro, DIALOG_STYLE_LIST, "{FFFFFF}Nitro", "{FFFFFF}2x Nitro {2ECC71}($500)\n{FFFFFF}5x Nitro {2ECC71}($1000)\n{FFFFFF}10x Nitro {2ECC71}($1500)\n{FFFFFF}Nitro Kaldýr", "Seç", "Kapat");
	        }
	        case 12:
	        {
	            if(PlayerData[playerid][pModifiyeUcret] < 1)
	            {
	                HataMesajGonder(playerid, "Modifiye yapmamýþsýnýz.");
	                return ModifiyeMenu(playerid);
	            }
	            new id = GetCarOwnerID(PlayerData[playerid][pModifiye]);
	            if(id == -1 || !OyundaDegil(id))
	            {
	                HataMesajGonder(playerid, "Aracýn sahibi oyunda deðil.");
	                return ModifiyeMenu(playerid);
	            }
	            PlayerData[id][pModifiyeBitir][0] = playerid;
	            PlayerData[id][pModifiyeBitir][1] = PlayerData[playerid][pModifiye];
	            AracModifiye[PlayerData[playerid][pModifiye]] = 0;
	            PlayerData[playerid][pModifiye] = -1;

	            MesajGonder(playerid, "Modifiye bitirme isteði gönderildi, aracýn sahibi onaylarsa paranýz verilecek.");
	            MesajGonder(id, "%s adlý kiþi aracýnýzý modifiye etti, onaylamak için Y, onaylamamak için N tuþuna basýn. (Ücret: %s)", ReturnName(playerid, 0), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
	        }
	    }
	}
	return 1;
}
stock GetComponentPrice(comid)
{
    for( new i = 0; i < MAX_COMPONENTS; i++ )
    {
        if(cInfo[i][cID] == comid) return cInfo[i][cPrice];
    }
    return -1;
}
Dialog:Nitro(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new id = Car_GetID(PlayerData[playerid][pModifiye]);
	    if(strfind(inputtext, "Nitro Kaldýr", true) != -1)
	    {
	        if(CarComponents[PlayerData[playerid][pModifiye]][5] == 0)
	        {
	            HataMesajGonder(playerid, "Nitro eklememiþsiniz.");
	            return ModifiyeMenu(playerid);
	        }
	        new price;
	        switch(CarComponents[PlayerData[playerid][pModifiye]][5])
	        {
	            case 1008: price = 500;
	            case 1009: price = 1000;
	            case 1010: price = 1500;
	        }
	        PlayerData[playerid][pModifiyeUcret] -= price;
	        RemoveVehicleComponent(PlayerData[playerid][pModifiye], CarComponents[PlayerData[playerid][pModifiye]][5]);
	        CarComponents[PlayerData[playerid][pModifiye]][5] = 0;
            if(AracInfo[id][aracMods][5] != 0) AddVehicleComponent(PlayerData[playerid][pModifiye],AracInfo[id][aracMods][5]);
            MesajGonder(playerid, "Eklediðiniz nitro kaldýrýldý. (Ücret: -%s, Toplam Ücret: %s)", FormatNumber(price), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
            MesajGonder(GetCarOwnerID(PlayerData[playerid][pModifiye]), "%s adlý kiþi aracýnýza eklediði nitro kaldýrdý. (Ücret: -%s, Toplam Ücret: %s)", ReturnName(playerid, 0),FormatNumber(price), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
            ModifiyeMenu(playerid);
            return 1;
	    }
	    if(AracInfo[id][aracMods][5] != 0) RemoveVehicleComponent(PlayerData[playerid][pModifiye], AracInfo[id][aracMods][5]);
	    AddVehicleComponent(PlayerData[playerid][pModifiye], 1008+listitem);
	    new fiyat = listitem+1*500;
	    if(CarComponents[PlayerData[playerid][pModifiye]][5] == 0)
     	{
            PlayerData[playerid][pModifiyeUcret] += fiyat;
            MesajGonder(playerid, "Araca nitro eklendi. (Ücret: %s, Toplam Ücret: %s)", FormatNumber(fiyat), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
            new ownerid = GetCarOwnerID(PlayerData[playerid][pModifiye]);
            if(ownerid != -1) MesajGonder(ownerid, "%s adlý kiþi aracýnýza nitro ekledi. (Ücret: %s, Toplam Ücret: %s)",ReturnName(playerid, 0),FormatNumber(fiyat), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
      	}
       	CarComponents[PlayerData[playerid][pModifiye]][5] = 1008+listitem;
       	ModifiyeMenu(playerid);
	}
	return 1;
}
Dialog:Jantlar(playerid, response, listitem, inputtext[])
{
    if(!response) return ModifiyeMenu(playerid);
    if(response)
    {
         new id = Car_GetID(PlayerData[playerid][pModifiye]);
         new comid = ModifiyeListeleme[playerid][listitem];
         if(strfind(inputtext, "Jant Kaldýr", true) != -1)
         {
            if(CarComponents[PlayerData[playerid][pModifiye]][7] == 0)
            {
                HataMesajGonder(playerid, "Jant eklememiþsiniz.");
                return ModifiyeMenu(playerid);
            }
            new price = GetComponentPrice(CarComponents[PlayerData[playerid][pModifiye]][7]);
            PlayerData[playerid][pModifiyeUcret] -= price;
            RemoveVehicleComponent(PlayerData[playerid][pModifiye], CarComponents[PlayerData[playerid][pModifiye]][7]);
            CarComponents[PlayerData[playerid][pModifiye]][7] = 0;
            if(AracInfo[id][aracMods][7] != 0) AddVehicleComponent(PlayerData[playerid][pModifiye],AracInfo[id][aracMods][7]);
            MesajGonder(playerid, "Eklediðiniz jant kaldýrýldý. (Ücret: -%s, Toplam Ücret: %s)", FormatNumber(price), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
            MesajGonder(GetCarOwnerID(PlayerData[playerid][pModifiye]), "%s adlý kiþi aracýnýza eklediði jantý kaldýrdý. (Ücret: -%s, Toplam Ücret: %s)", ReturnName(playerid, 0),FormatNumber(price), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
            ModifiyeMenu(playerid);
            return 1;
         }
         if(AracInfo[id][aracMods][7] != 0) RemoveVehicleComponent(PlayerData[playerid][pModifiye], AracInfo[id][aracMods][7]);
         AddVehicleComponent(PlayerData[playerid][pModifiye], cInfo[comid][cID]);
         if(CarComponents[PlayerData[playerid][pModifiye]][7] == 0)
         {
            PlayerData[playerid][pModifiyeUcret] += cInfo[comid][cPrice];
            MesajGonder(playerid, "Araca jant eklendi. (Ücret: %s, Toplam Ücret: %s)", FormatNumber(cInfo[comid][cPrice]), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
            new ownerid = GetCarOwnerID(PlayerData[playerid][pModifiye]);
            if(ownerid != -1) MesajGonder(ownerid, "%s adlý kiþi aracýnýza jant ekledi. (Ücret: %s, Toplam Ücret: %s)", ReturnName(playerid, 0), FormatNumber(cInfo[comid][cPrice]), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
         }
         CarComponents[PlayerData[playerid][pModifiye]][7] = cInfo[comid][cID];
         ModifiyeMenu(playerid);
    }
	return 1;
}
Dialog:YanEtek(playerid, response, listitem, inputtext[])
{
    if(!response) return ModifiyeMenu(playerid);
    if(response)
    {
         new id = Car_GetID(PlayerData[playerid][pModifiye]);
         new comid = ModifiyeListeleme[playerid][listitem];
         if(strfind(inputtext, "Rüzgarlýk Kaldýr", true) != -1)
         {
            if(CarComponents[PlayerData[playerid][pModifiye]][3] == 0)
            {
                HataMesajGonder(playerid, "Yan etek eklememiþsiniz.");
                return ModifiyeMenu(playerid);
            }
            new price = GetComponentPrice(CarComponents[PlayerData[playerid][pModifiye]][3]);
            PlayerData[playerid][pModifiyeUcret] -= price;
            RemoveVehicleComponent(PlayerData[playerid][pModifiye], CarComponents[PlayerData[playerid][pModifiye]][3]);
            CarComponents[PlayerData[playerid][pModifiye]][3] = 0;
            if(AracInfo[id][aracMods][0] != 0) AddVehicleComponent(PlayerData[playerid][pModifiye],AracInfo[id][aracMods][3]);
            MesajGonder(playerid, "Eklediðiniz yan etek kaldýrýldý. (Ücret: -%s, Toplam Ücret: %s)", FormatNumber(price), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
            MesajGonder(GetCarOwnerID(PlayerData[playerid][pModifiye]), "%s adlý kiþi aracýnýza eklediði yan eteði kaldýrdý. (Ücret: -%s, Toplam Ücret: %s)", ReturnName(playerid, 0), FormatNumber(price), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
            ModifiyeMenu(playerid);
            return 1;
         }
         if(AracInfo[id][aracMods][3] != 0) RemoveVehicleComponent(PlayerData[playerid][pModifiye], AracInfo[id][aracMods][3]);
         AddVehicleComponent(PlayerData[playerid][pModifiye], cInfo[comid][cID]);
         if(CarComponents[PlayerData[playerid][pModifiye]][3] == 0)
         {
            PlayerData[playerid][pModifiyeUcret] += cInfo[comid][cPrice];
            MesajGonder(playerid, "Araca yan etek eklendi. (Ücret: %s, Toplam Ücret: %s)", FormatNumber(cInfo[comid][cPrice]), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
            new ownerid = GetCarOwnerID(PlayerData[playerid][pModifiye]);
            if(ownerid != -1) MesajGonder(ownerid, "%s adlý kiþi aracýnýza yan etek ekledi. (Ücret: %s, Toplam Ücret: %s)", ReturnName(playerid, 0), FormatNumber(cInfo[comid][cPrice]), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
         }
         CarComponents[PlayerData[playerid][pModifiye]][3] = cInfo[comid][cID];
         ModifiyeMenu(playerid);
    }
	return 1;
}
Dialog:Ruzgarlik(playerid, response, listitem, inputtext[])
{
    if(!response) return ModifiyeMenu(playerid);
    if(response)
    {
         new id = Car_GetID(PlayerData[playerid][pModifiye]);
         new comid = ModifiyeListeleme[playerid][listitem];
         if(strfind(inputtext, "Rüzgarlýk Kaldýr", true) != -1)
         {
            if(CarComponents[PlayerData[playerid][pModifiye]][0] == 0)
            {
                HataMesajGonder(playerid, "Rüzgarlýk eklememiþsiniz.");
                return ModifiyeMenu(playerid);
            }
            new price = GetComponentPrice(CarComponents[PlayerData[playerid][pModifiye]][0]);
            PlayerData[playerid][pModifiyeUcret] -= price;
            RemoveVehicleComponent(PlayerData[playerid][pModifiye], CarComponents[PlayerData[playerid][pModifiye]][0]);
            CarComponents[PlayerData[playerid][pModifiye]][0] = 0;
            if(AracInfo[id][aracMods][0] != 0) AddVehicleComponent(PlayerData[playerid][pModifiye],AracInfo[id][aracMods][0]);
            MesajGonder(playerid, "Eklediðiniz rüzgarlýk kaldýrýldý. (Ücret: -%s, Toplam Ücret: %s)", FormatNumber(price), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
            MesajGonder(GetCarOwnerID(PlayerData[playerid][pModifiye]), "%s adlý kiþi aracýnýza eklediði rüzgarlýðý kaldýrdý. (Ücret: -%s, Toplam Ücret: %s)", ReturnName(playerid, 0),FormatNumber(price), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
            ModifiyeMenu(playerid);
            return 1;
         }
         if(AracInfo[id][aracMods][0] != 0) RemoveVehicleComponent(PlayerData[playerid][pModifiye], AracInfo[id][aracMods][0]);
         AddVehicleComponent(PlayerData[playerid][pModifiye], cInfo[comid][cID]);
         if(CarComponents[PlayerData[playerid][pModifiye]][0] == 0)
         {
            PlayerData[playerid][pModifiyeUcret] += cInfo[comid][cPrice];
            MesajGonder(playerid, "Araca rüzgarlýk eklendi. (Ücret: %s, Toplam Ücret: %s)", FormatNumber(cInfo[comid][cPrice]), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
            new ownerid = GetCarOwnerID(PlayerData[playerid][pModifiye]);
            if(ownerid != -1) MesajGonder(ownerid, "%s adlý kiþi aracýnýza rüzgarlýk ekledi. (Ücret: %s, Toplam Ücret: %s)", ReturnName(playerid, 0), FormatNumber(cInfo[comid][cPrice]), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
         }
         CarComponents[PlayerData[playerid][pModifiye]][0] = cInfo[comid][cID];
         ModifiyeMenu(playerid);
    }
	return 1;
}
Dialog:Cati(playerid, response, listitem, inputtext[])
{
    if(!response) return ModifiyeMenu(playerid);
    if(response)
    {
         new id = Car_GetID(PlayerData[playerid][pModifiye]);
         new comid = ModifiyeListeleme[playerid][listitem];
         if(strfind(inputtext, "Çatýyý Kaldýr", true) != -1)
         {
            if(CarComponents[PlayerData[playerid][pModifiye]][2] == 0)
            {
                HataMesajGonder(playerid, "Çatý eklememiþsiniz.");
                return ModifiyeMenu(playerid);
            }
            new price = GetComponentPrice(CarComponents[PlayerData[playerid][pModifiye]][2]);
            PlayerData[playerid][pModifiyeUcret] -= price;
            RemoveVehicleComponent(PlayerData[playerid][pModifiye], CarComponents[PlayerData[playerid][pModifiye]][2]);
            CarComponents[PlayerData[playerid][pModifiye]][2] = 0;
            if(AracInfo[id][aracMods][2] != 0) AddVehicleComponent(PlayerData[playerid][pModifiye],AracInfo[id][aracMods][2]);
            MesajGonder(playerid, "Eklediðiniz çatý kaldýrýldý. (Ücret: -%s, Toplam Ücret: %s)", FormatNumber(price), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
            MesajGonder(GetCarOwnerID(PlayerData[playerid][pModifiye]), "%s adlý kiþi aracýnýza eklediði çatýyý kaldýrdý. (Ücret: -%s, Toplam Ücret: %s)", ReturnName(playerid, 0),FormatNumber(price), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
            ModifiyeMenu(playerid);
            return 1;
         }
         if(AracInfo[id][aracMods][2] != 0) RemoveVehicleComponent(PlayerData[playerid][pModifiye], AracInfo[id][aracMods][2]);
         AddVehicleComponent(PlayerData[playerid][pModifiye], cInfo[comid][cID]);
         if(CarComponents[PlayerData[playerid][pModifiye]][2] == 0)
         {
            PlayerData[playerid][pModifiyeUcret] += cInfo[comid][cPrice];
            MesajGonder(playerid, "Araca çatý eklendi. (Ücret: %s, Toplam Ücret: %s)", FormatNumber(cInfo[comid][cPrice]), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
            new ownerid = GetCarOwnerID(PlayerData[playerid][pModifiye]);
            if(ownerid != -1) MesajGonder(ownerid, "%s adlý kiþi aracýnýza çatý ekledi. (Ücret: %s, Toplam Ücret: %s)", ReturnName(playerid, 0), FormatNumber(cInfo[comid][cPrice]), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
         }
         CarComponents[PlayerData[playerid][pModifiye]][2] = cInfo[comid][cID];
         ModifiyeMenu(playerid);
    }
	return 1;
}
Dialog:ArkaTampon(playerid, response, listitem, inputtext[])
{
    if(!response) return ModifiyeMenu(playerid);
    if(response)
    {
         new id = Car_GetID(PlayerData[playerid][pModifiye]);
         new comid = ModifiyeListeleme[playerid][listitem];
         if(strfind(inputtext, "Arka Tamponu Kaldýr", true) != -1)
         {
            if(CarComponents[PlayerData[playerid][pModifiye]][11] == 0)
            {
                HataMesajGonder(playerid, "Arka tampon eklememiþsiniz.");
                return ModifiyeMenu(playerid);
            }
            new price = GetComponentPrice(CarComponents[PlayerData[playerid][pModifiye]][11]);
            PlayerData[playerid][pModifiyeUcret] -= price;
            RemoveVehicleComponent(PlayerData[playerid][pModifiye], CarComponents[PlayerData[playerid][pModifiye]][11]);
            CarComponents[PlayerData[playerid][pModifiye]][11] = 0;
            if(AracInfo[id][aracMods][11] != 0) AddVehicleComponent(PlayerData[playerid][pModifiye],AracInfo[id][aracMods][11]);
            MesajGonder(playerid, "Eklediðiniz arka tampon kaldýrýldý. (Ücret: -%s, Toplam Ücret: %s)", FormatNumber(price), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
            MesajGonder(GetCarOwnerID(PlayerData[playerid][pModifiye]), "%s adlý kiþi aracýnýza eklediði arka tamponu kaldýrdý. (Ücret: -%s, Toplam Ücret: %s)", ReturnName(playerid, 0), FormatNumber(price), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
            ModifiyeMenu(playerid);
            return 1;
         }
         if(AracInfo[id][aracMods][11] != 0) RemoveVehicleComponent(PlayerData[playerid][pModifiye], AracInfo[id][aracMods][11]);
         AddVehicleComponent(PlayerData[playerid][pModifiye], cInfo[comid][cID]);
         if(CarComponents[PlayerData[playerid][pModifiye]][11] == 0)
         {
            PlayerData[playerid][pModifiyeUcret] += cInfo[comid][cPrice];
            MesajGonder(playerid, "Araca arka tampon eklendi. (Ücret: %s, Toplam Ücret: %s)", FormatNumber(cInfo[comid][cPrice]), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
            new ownerid = GetCarOwnerID(PlayerData[playerid][pModifiye]);
            if(ownerid != -1) MesajGonder(ownerid, "%s adlý kiþi aracýnýza arka tampon ekledi. (Ücret: %s, Toplam Ücret: %s)", ReturnName(playerid, 0), FormatNumber(cInfo[comid][cPrice]), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
         }
         CarComponents[PlayerData[playerid][pModifiye]][11] = cInfo[comid][cID];
         ModifiyeMenu(playerid);
    }
	return 1;
}
Dialog:OnTampon(playerid, response, listitem, inputtext[])
{
    if(!response) return ModifiyeMenu(playerid);
    if(response)
    {
         new id = Car_GetID(PlayerData[playerid][pModifiye]);
         new comid = ModifiyeListeleme[playerid][listitem];
         if(strfind(inputtext, "Ön Tamponu Kaldýr", true) != -1)
         {
            if(CarComponents[PlayerData[playerid][pModifiye]][10] == 0)
            {
                HataMesajGonder(playerid, "Ön tampon eklememiþsiniz.");
                return ModifiyeMenu(playerid);
            }
            new price = GetComponentPrice(CarComponents[PlayerData[playerid][pModifiye]][10]);
            PlayerData[playerid][pModifiyeUcret] -= price;
            RemoveVehicleComponent(PlayerData[playerid][pModifiye], CarComponents[PlayerData[playerid][pModifiye]][10]);
            CarComponents[PlayerData[playerid][pModifiye]][10] = 0;
            if(AracInfo[id][aracMods][10] != 0) AddVehicleComponent(PlayerData[playerid][pModifiye],AracInfo[id][aracMods][10]);
            MesajGonder(playerid, "Eklediðiniz ön tampon kaldýrýldý. (Ücret: -%s, Toplam Ücret: %s)", FormatNumber(price), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
            MesajGonder(GetCarOwnerID(PlayerData[playerid][pModifiye]), "%s adlý kiþi aracýnýza eklediði ön tamponu kaldýrdý. (Ücret: -%s, Toplam Ücret: %s)", ReturnName(playerid, 0), FormatNumber(price), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
            ModifiyeMenu(playerid);
            return 1;
         }
         if(AracInfo[id][aracMods][10] != 0) RemoveVehicleComponent(PlayerData[playerid][pModifiye], AracInfo[id][aracMods][10]);
         AddVehicleComponent(PlayerData[playerid][pModifiye], cInfo[comid][cID]);
         if(CarComponents[PlayerData[playerid][pModifiye]][10] == 0)
         {
            PlayerData[playerid][pModifiyeUcret] += cInfo[comid][cPrice];
            MesajGonder(playerid, "Araca ön tampon eklendi. (Ücret: %s, Toplam Ücret: %s)", FormatNumber(cInfo[comid][cPrice]), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
            new ownerid = GetCarOwnerID(PlayerData[playerid][pModifiye]);
            if(ownerid != -1) MesajGonder(ownerid, "%s adlý kiþi aracýnýza ön tampon ekledi. (Ücret: %s, Toplam Ücret: %s)", ReturnName(playerid, 0), FormatNumber(cInfo[comid][cPrice]), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
         }
         CarComponents[PlayerData[playerid][pModifiye]][10] = cInfo[comid][cID];
         ModifiyeMenu(playerid);
    }
	return 1;
}
Dialog:Egzoz(playerid, response, listitem, inputtext[])
{
    if(!response) return ModifiyeMenu(playerid);
    if(response)
    {
         new id = Car_GetID(PlayerData[playerid][pModifiye]);
         new comid = ModifiyeListeleme[playerid][listitem];
         if(strfind(inputtext, "Egzozu Kaldýr", true) != -1)
         {
            if(CarComponents[PlayerData[playerid][pModifiye]][6] == 0)
            {
                HataMesajGonder(playerid, "Egzoz eklememiþsiniz.");
                return ModifiyeMenu(playerid);
            }
            new price = GetComponentPrice(CarComponents[PlayerData[playerid][pModifiye]][6]);
            PlayerData[playerid][pModifiyeUcret] -= price;
            RemoveVehicleComponent(PlayerData[playerid][pModifiye], CarComponents[PlayerData[playerid][pModifiye]][6]);
            CarComponents[PlayerData[playerid][pModifiye]][6] = 0;
            if(AracInfo[id][aracMods][6] != 0) AddVehicleComponent(PlayerData[playerid][pModifiye],AracInfo[id][aracMods][6]);
            MesajGonder(playerid, "Eklediðiniz egzoz kaldýrýldý. (Ücret: -%s, Toplam Ücret: %s)", FormatNumber(price), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
            MesajGonder(GetCarOwnerID(PlayerData[playerid][pModifiye]), "%s adlý kiþi aracýnýza eklediði egzozu kaldýrdý. (Ücret: -%s, Toplam Ücret: %s)", ReturnName(playerid, 0), FormatNumber(price), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
            ModifiyeMenu(playerid);
            return 1;
         }
         if(AracInfo[id][aracMods][6] != 0) RemoveVehicleComponent(PlayerData[playerid][pModifiye], AracInfo[id][aracMods][6]);
         AddVehicleComponent(PlayerData[playerid][pModifiye], cInfo[comid][cID]);
         if(CarComponents[PlayerData[playerid][pModifiye]][6] == 0)
         {
            PlayerData[playerid][pModifiyeUcret] += cInfo[comid][cPrice];
            MesajGonder(playerid, "Araca egzoz eklendi. (Ücret: %s, Toplam Ücret: %s)", FormatNumber(cInfo[comid][cPrice]), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
            new ownerid = GetCarOwnerID(PlayerData[playerid][pModifiye]);
            if(ownerid != -1) MesajGonder(ownerid, "%s adlý kiþi aracýnýza egzoz ekledi. (Ücret: %s, Toplam Ücret: %s)", ReturnName(playerid, 0), FormatNumber(cInfo[comid][cPrice]), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
         }
         CarComponents[PlayerData[playerid][pModifiye]][6] = cInfo[comid][cID];
         ModifiyeMenu(playerid);
    }
	return 1;
}
Dialog:Paintjob(playerid, response, listitem, inputtext[])
{
	if(!response) return ModifiyeMenu(playerid);
	if(response)
	{
	    new id = Car_GetID(PlayerData[playerid][pModifiye]);
	    if(strfind(inputtext, "Paintjob Kaldýr", true) != -1)
	    {
	        if(CarComponents[PlayerData[playerid][pModifiye]][16] == -1)
	        {
	            HataMesajGonder(playerid, "Paintjob eklememiþsiniz.");
	            return ModifiyeMenu(playerid);
	        }
	        CarComponents[PlayerData[playerid][pModifiye]][16] = -1;
	        PlayerData[playerid][pModifiyeUcret] -= 120;
	        if(AracInfo[id][aracPaintjob] != -1) ChangeVehiclePaintjob(PlayerData[playerid][pModifiye], AracInfo[id][aracPaintjob]);
	        MesajGonder(playerid, "Eklediðiniz Paintjob kaldýrýldý. (Ücret: -$120, Toplam Ücret: %s)", FormatNumber(PlayerData[playerid][pModifiyeUcret]));
	        MesajGonder(GetCarOwnerID(PlayerData[playerid][pModifiye]), "%s adlý kiþi aracýnýza eklediði paintjobu kaldýrdý. (Ücret: -$120, Toplam Ücret: %s)", ReturnName(playerid, 0), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
	        ModifiyeMenu(playerid);
	        return 1;
	    }
	    new pjid = ModifiyeListeleme[playerid][listitem];
	    ChangeVehiclePaintjob(PlayerData[playerid][pModifiye], pjInfo[pjid][pNumber]);
	    if(CarComponents[PlayerData[playerid][pModifiye]][16] == -1)
	    {
	        PlayerData[playerid][pModifiyeUcret] += pjInfo[pjid][pPrice];
	        MesajGonder(playerid, "Araca paintjob eklendi. (Ücret: %s, Toplam Ücret: %s)", FormatNumber(pjInfo[pjid][pPrice]), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
	        new ownerid = GetCarOwnerID(PlayerData[playerid][pModifiye]);
	        if(ownerid != -1) MesajGonder(ownerid, "%s adlý kiþi aracýnýza paintjob ekledi. (Ücret: %s, Toplam Ücret: %s)", ReturnName(playerid, 0), FormatNumber(pjInfo[pjid][pPrice]), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
	    }
	    CarComponents[PlayerData[playerid][pModifiye]][16] = pjInfo[pjid][pNumber];
	    ModifiyeMenu(playerid);
	}
	return 1;
}
Dialog:Color1(playerid, response, listitem, inputtext[])
{
	if(!response) return ModifiyeMenu(playerid);
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, Color1, DIALOG_STYLE_INPUT, "Renk 1", "Lütfen aracýn 1. rengini girin (0-255)", "Devam", "Geri");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, Color1, DIALOG_STYLE_INPUT, "Renk 1", "Lütfen aracýn 1. rengini girin (0-255)", "Devam", "Geri");
	    if(strval(inputtext) < 0 || strval(inputtext) > 255) return Dialog_Show(playerid, Color1, DIALOG_STYLE_INPUT, "Renk 1", "Lütfen aracýn 1. rengini girin (0-255)", "Devam", "Geri");
	    SetPVarInt(playerid, "Color", strval(inputtext));
	    Dialog_Show(playerid, Color2, DIALOG_STYLE_INPUT, "Renk 2", "Lütfen aracýn 2. rengini girin (0-255)", "Devam", "Geri");
	}
	return 1;
}
Dialog:Color2(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, Color1, DIALOG_STYLE_INPUT, "Renk 1", "Lütfen aracýn 1. rengini girin (0-255)", "Devam", "Geri");
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, Color2, DIALOG_STYLE_INPUT, "Renk 2", "Lütfen aracýn 2. rengini girin (0-255)", "Devam", "Geri");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, Color2, DIALOG_STYLE_INPUT, "Renk 2", "Lütfen aracýn 2. rengini girin (0-255)", "Devam", "Geri");
	    if(strval(inputtext) < 0 || strval(inputtext) > 255) return Dialog_Show(playerid, Color2, DIALOG_STYLE_INPUT, "Renk 2", "Lütfen aracýn 2. rengini girin (0-255)", "Devam", "Geri");
	    new id = GetCarOwnerID(PlayerData[playerid][pModifiye]);
	    if(CarComponents[PlayerData[playerid][pModifiye]][14] == -1) PlayerData[playerid][pModifiyeUcret] += 80;
	    if(id != -1)
	    {
	        MesajGonder(id, "%s adlý kiþi aracýnýzýn rengini deðiþtirdi. (Ücret: $80, Toplam Ücret: %s)", ReturnName(playerid, 0), FormatNumber(PlayerData[playerid][pModifiyeUcret]));
	    }
	    CarComponents[PlayerData[playerid][pModifiye]][14] = GetPVarInt(playerid, "Color");
	    CarComponents[PlayerData[playerid][pModifiye]][15] = strval(inputtext);
	    ChangeVehicleColor(PlayerData[playerid][pModifiye], GetPVarInt(playerid, "Color"), strval(inputtext));
	    MesajGonder(playerid, "Aracýn rengini deðiþtirdiniz. (Ücret: $80, Toplam Ücret: %s)", FormatNumber(PlayerData[playerid][pModifiyeUcret]));
	    ModifiyeMenu(playerid);
	}
	return 1;
}*/
stock GetCarOwnerID(vehicleid)
{
	new id = Car_GetID(vehicleid);
	if(id == -1) return -1;
	return GetPlayerIDWithSQLID(AracInfo[id][aracSahip]);
}
Dialog:AksesuarRenk(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new slot = GetPVarInt(playerid, "AttachmentIndexSel");
	    if(listitem >= 0 && listitem <= 6)
	    {
	        PlayerData[playerid][pARenk][slot] = listitem+1;
	    }
	    else
	    {
	        PlayerData[playerid][pARenk][slot] = 0;
	    }
	    SQL_AksesuarKaydet(playerid);
	    AksesuarTak(playerid, slot);
	}
	return 1;
}
Dialog:Secenekler(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
	            SetPVarInt(playerid, "SecenekID", 0);
	            SetPVarInt(playerid, "SecenekTur", 1);
	        }
	        case 1:
	        {
	            SetPVarInt(playerid, "SecenekID", 0);
	            SetPVarInt(playerid, "SecenekTur", 2);
	        }
	        case 2:
	        {
	            SetPVarInt(playerid, "SecenekID", 1);
	            SetPVarInt(playerid, "SecenekTur", 1);
	        }
	        case 3:
	        {
	            SetPVarInt(playerid, "SecenekID", 1);
	            SetPVarInt(playerid, "SecenekTur", 2);
	        }
	        case 4:
	        {
	            SetPVarInt(playerid, "SecenekID", 2);
	            SetPVarInt(playerid, "SecenekTur", 1);
	        }
	        case 5:
	        {
	            SetPVarInt(playerid, "SecenekID", 2);
	            SetPVarInt(playerid, "SecenekTur", 2);
	        }
	        case 6:
	        {
	            SetPVarInt(playerid, "SecenekID", 3);
	            SetPVarInt(playerid, "SecenekTur", 1);
	        }
	        case 7:
	        {
	            SetPVarInt(playerid, "SecenekID", 3);
	            SetPVarInt(playerid, "SecenekTur", 2);
	        }
	        case 8:
	        {
	            SetPVarInt(playerid, "SecenekID", 4);
	            SetPVarInt(playerid, "SecenekTur", 1);
	        }
	        case 9:
	        {
	            SetPVarInt(playerid, "SecenekID", 4);
	            SetPVarInt(playerid, "SecenekTur", 2);
	        }
	    }
	    Dialog_Show(playerid, Secenek, DIALOG_STYLE_INPUT, "Seçenek Düzenle", "{FFFFFF}Lütfen yazýyý girin:", "Ayarla", "Kapat");
	}
	return 1;
}
Dialog:NPCEtkilesim(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new id = GetPVarInt(playerid, "NPCEtkilesimID");
	    if(id != -1)
	    {
	        SendClientMessageEx(playerid, -1, "{E74C3C}%s: {FFFFFF}%s", ReturnName(playerid, 0), NPCSecenekler[id][listitem]);
	        SendClientMessageEx(playerid, -1, "{E74C3C}%s: {FFFFFF}%s", NPCBilgi[id][npcAd], NPCSecenekCevaplar[id][listitem]);
	        SetPVarInt(playerid, "NPCEtkilesimID", -1);
	    }
	}
	return 1;
}
Dialog:AracRadyo(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	    switch(listitem)
	    {
	        case 0:
	        {
	            new str[300];
	            for(new i; i<sizeof(Radyolar); i++)
	            {
	                format(str, sizeof(str), "%s{FFFFFF}%s\n", str, Radyolar[i][radyoAd]);
	            }
	            Dialog_Show(playerid, RadyoSec, DIALOG_STYLE_LIST, "Radyo Kanallarý", str, "Seç", "Geri");
	        }
	        case 1:
	        {
	            Dialog_Show(playerid, URLGir, DIALOG_STYLE_INPUT, "URL Gir", "Lütfen müziðin MP3 linkini girin.", "Aç", "Geri");
	        }
	        case 2:
	        {
	            StopAudioStreamForPlayer(playerid);
	            format(RadyoLink[GetPlayerVehicleID(playerid)], 128, "");
	            foreach(new i:Player) if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid) && i != playerid)
	    		{
	        		StopAudioStreamForPlayer(i);
	    		}
	        }
		}
	}
	return 1;
}
Dialog:URLGir(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	    if(isnull(inputtext)) return Dialog_Show(playerid, URLGir, DIALOG_STYLE_INPUT, "URL Gir", "Lütfen müziðin MP3 linkini girin.", "Aç", "Geri");
	    StopAudioStreamForPlayer(playerid);
	    PlayAudioStreamForPlayer(playerid, inputtext);
	    format(RadyoLink[GetPlayerVehicleID(playerid)], 128, inputtext);
	    foreach(new i:Player) if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid) && i != playerid)
	    {
	        StopAudioStreamForPlayer(i);
	        PlayAudioStreamForPlayer(i, inputtext);
	    }
	}
	return 1;
}
Dialog:RadyoSec(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::radyo(playerid);
	if(response)
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	    StopAudioStreamForPlayer(playerid);
	    PlayAudioStreamForPlayer(playerid, Radyolar[listitem][radyoLink]);
	    format(RadyoLink[GetPlayerVehicleID(playerid)], 128, Radyolar[listitem][radyoLink]);
	    foreach(new i:Player) if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid) && i != playerid)
	    {
	        StopAudioStreamForPlayer(i);
	        PlayAudioStreamForPlayer(i, Radyolar[listitem][radyoLink]);
	    }
	}
	return 1;
}
Dialog:Secenek(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, Secenek, DIALOG_STYLE_INPUT, "Seçenek Düzenle", "{FFFFFF}Lütfen yazýyý girin:", "Ayarla", "Kapat");
	    if(strlen(inputtext) > 126)
	    {
	        HataMesajGonder(playerid, "Yazý çok uzun, en fazla 126 karakter girebilirsiniz.");
	        return Dialog_Show(playerid, Secenek, DIALOG_STYLE_INPUT, "Seçenek Düzenle", "{FFFFFF}Lütfen yazýyý girin:", "Ayarla", "Kapat");
	    }
	    if(GetPVarInt(playerid, "SecenekTur") == 1)
	    {
	        format(NPCSecenekler[GetPVarInt(playerid, "npcid")][GetPVarInt(playerid, "SecenekID")], 50, inputtext);
	        NPC_Secenekler(playerid, GetPVarInt(playerid, "npcid"));
	    }
	    else
	    {
	        format(NPCSecenekCevaplar[GetPVarInt(playerid, "npcid")][GetPVarInt(playerid, "SecenekID")], 200, inputtext);
	        NPC_Secenekler(playerid, GetPVarInt(playerid, "npcid"));
	    }
	}
	return 1;
}
stock Ekonomi_Menu(playerid)
{
    //if(GetFactionType(playerid) != BIRLIK_GOV || PlayerData[playerid][pFactionRutbe] != Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]) return 1;
    new str[550];
    strcat(str, "Ad\tDeðer\n");
    format(str, sizeof(str), "%s{FFFFFF}Sivil Maaþý\t{2ECC71}%s\n", str, FormatNumber(GetServerBilgi("SaatlikMaas")));
    format(str, sizeof(str), "%s{FFFFFF}Maaþ Vergi\t{2ECC71}%s\n", str, FormatNumber(GetServerBilgi("MaasVergi")));
    format(str, sizeof(str), "%s{FFFFFF}Giþe Ücreti\t{2ECC71}%s\n", str, FormatNumber(GetServerBilgi("GiseUcreti")));
    format(str, sizeof(str), "%s{FFFFFF}Benzin Fiyatý\t{2ECC71}%s\n", str, FormatNumber(GetServerBilgi("BenzinFiyat")));
    format(str, sizeof(str), "%s{FFFFFF}Tamirci Ücreti\t{2ECC71}%s", str, FormatNumber(GetServerBilgi("TamirciUcret")));
    Dialog_Show(playerid, Ekonomi, DIALOG_STYLE_TABLIST_HEADERS, "Ekonomi", str, "Ayarla", "Kapat");
	return 1;
}
Dialog:Ekonomi(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    switch(listitem)
	    {
	        case 0: Dialog_Show(playerid, SivilMaaslari, DIALOG_STYLE_INPUT, "Sivil Maaþý", "Lütfen yeni bir sivil maaþý girin:", "Ayarla", "Geri");
	        case 1: Dialog_Show(playerid, MaasVergi, DIALOG_STYLE_INPUT, "Maaþ Vergi", "Lütfen yeni maaþ vergisi girin:", "Ayarla", "Geri");
	        case 2: Dialog_Show(playerid, GiseUcreti, DIALOG_STYLE_INPUT, "Giþe Ücreti", "Lütfen yeni giþe ücreti girin:", "Ayarla", "Geri");
	        case 3: Dialog_Show(playerid, BenzinFiyat, DIALOG_STYLE_INPUT, "Benzin Fiyatý", "Lütfen yeni benzin fiyatý girin:", "Ayarla", "Geri");
	        case 4: Dialog_Show(playerid, TamirciUcret, DIALOG_STYLE_INPUT, "Tamirci Ücreti", "Lütfen tamirci ücretini girin:", "Ayarla", "Geri");
	    }
	}
	return 1;
}
Dialog:SivilMaaslari(playerid, response, listitem, inputtext[])
{
	if(!response) return Ekonomi_Menu(playerid);
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, SivilMaaslari, DIALOG_STYLE_INPUT, "Sivil Maaþý", "Lütfen yeni bir sivil maaþý girin:", "Ayarla", "Geri");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, SivilMaaslari, DIALOG_STYLE_INPUT, "Sivil Maaþý", "Lütfen yeni bir sivil maaþý girin:", "Ayarla", "Geri");
	    if(strval(inputtext) < 1) return Dialog_Show(playerid, SivilMaaslari, DIALOG_STYLE_INPUT, "Sivil Maaþý", "Lütfen yeni bir sivil maaþý girin:", "Ayarla", "Geri");
		SetServerBilgi("SaatlikMaas", strval(inputtext));
		MesajGonder(playerid, "Sivil maaþlarý %s olarak ayarlandý.", FormatNumber(strval(inputtext)));
		Ekonomi_Menu(playerid);
	}
	return 1;
}
Dialog:MaasVergi(playerid, response, listitem, inputtext[])
{
	if(!response) return Ekonomi_Menu(playerid);
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, MaasVergi, DIALOG_STYLE_INPUT, "Maaþ Vergi", "Lütfen yeni maaþ vergisi girin:", "Ayarla", "Geri");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, MaasVergi, DIALOG_STYLE_INPUT, "Maaþ Vergi", "Lütfen yeni maaþ vergisi girin:", "Ayarla", "Geri");
	    if(strval(inputtext) < 0) return Dialog_Show(playerid, MaasVergi, DIALOG_STYLE_INPUT, "Maaþ Vergi", "Lütfen yeni maaþ vergisi girin:", "Ayarla", "Geri");
		SetServerBilgi("MaasVergi", strval(inputtext));
		MesajGonder(playerid, "Maaþ Vergisi %s olarak ayarlandý.", FormatNumber(strval(inputtext)));
		Ekonomi_Menu(playerid);
	}
	return 1;
}
Dialog:GiseUcreti(playerid, response, listitem, inputtext[])
{
	if (!response) return Ekonomi_Menu(playerid);
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, GiseUcreti, DIALOG_STYLE_INPUT, "Giþe Ücreti", "Lütfen yeni giþe ücreti girin:", "Ayarla", "Geri");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, GiseUcreti, DIALOG_STYLE_INPUT, "Giþe Ücreti", "Lütfen yeni giþe ücreti girin:", "Ayarla", "Geri");
	    if (strval(inputtext) < 0) return Dialog_Show(playerid, GiseUcreti, DIALOG_STYLE_INPUT, "Giþe Ücreti", "Lütfen yeni giþe ücreti girin:", "Ayarla", "Geri");

		SetServerBilgi("GiseUcreti", strval(inputtext));
		MesajGonder(playerid, "Giþe Ücreti %s olarak ayarlandý.", FormatNumber(strval(inputtext)));
		Ekonomi_Menu(playerid);
	}
	return 1;
}

Dialog:BenzinFiyat(playerid, response, listitem, inputtext[])
{
	if(!response) return Ekonomi_Menu(playerid);
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, BenzinFiyat, DIALOG_STYLE_INPUT, "Benzin Fiyatý", "Lütfen yeni benzin fiyatý girin:", "Ayarla", "Geri");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, BenzinFiyat, DIALOG_STYLE_INPUT, "Benzin Fiyatý", "Lütfen yeni benzin fiyatý girin:", "Ayarla", "Geri");
	    if(strval(inputtext) < 1) return Dialog_Show(playerid, BenzinFiyat, DIALOG_STYLE_INPUT, "Benzin Fiyatý", "Lütfen yeni benzin fiyatý girin:", "Ayarla", "Geri");
		SetServerBilgi("BenzinFiyat", strval(inputtext));
		for(new i; i < MAX_GAS_PUMPS; i++)
		{
		    Pump_Update(i);
		}
		MesajGonder(playerid, "Benzin Fiyatý %s olarak ayarlandý.", FormatNumber(strval(inputtext)));
		Ekonomi_Menu(playerid);
	}
	return 1;
}
Dialog:TamirciUcret(playerid, response, listitem, inputtext[])
{
	if(!response) return Ekonomi_Menu(playerid);
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, TamirciUcret, DIALOG_STYLE_INPUT, "Tamirci Ücreti", "Lütfen tamirci ücretini girin:", "Ayarla", "Geri");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, TamirciUcret, DIALOG_STYLE_INPUT, "Tamirci Ücreti", "Lütfen tamirci ücretini girin:", "Ayarla", "Geri");
	    if(strval(inputtext) < 0) return Dialog_Show(playerid, TamirciUcret, DIALOG_STYLE_INPUT, "Tamirci Ücreti", "Lütfen tamirci ücretini girin:", "Ayarla", "Geri");
		SetServerBilgi("TamirciUcret", strval(inputtext));
		MesajGonder(playerid, "Tamirci Ücreti %s olarak ayarlandý.", FormatNumber(strval(inputtext)));
		Ekonomi_Menu(playerid);
	}
	return 1;
}
Dialog:Materyal(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    PlayerData[playerid][pMateryalDuzenle] = -1;
	    PlayerData[playerid][pMateryalSlot] = 0;
	    MobilyaMenu(playerid, GetPVarInt(playerid, "FurnitureHouse"));
	}
	else
	{
	    if(listitem == 5)
	    {
			new id = PlayerData[playerid][pMateryalDuzenle];
			for(new i; i<5; i++) FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][id][furnitureMateryalDesen][i] = 0;
			Furniture_Refresh(id, GetPVarInt(playerid, "FurnitureHouse"));
			Furniture_Save(id, GetPVarInt(playerid, "FurnitureHouse"));
			Streamer_Update(playerid, STREAMER_TYPE_OBJECT);
			MesajGonder(playerid, "Materyal slotlarý temizlendi.");
			Dialog_Show(playerid, Materyal, DIALOG_STYLE_LIST, "Materyal Slotlarý", "{FFFFFF}Materyal Slotu 1\n{FFFFFF}Materyal Slotu 2\n{FFFFFF}Materyal Slotu 3\n{FFFFFF}Materyal Slotu 4\n{FFFFFF}Materyal Slotu 5\n{E74C3C}Tüm Materyal Slotlarýný Temizle", "Seç", "Kapat");
			return 1;
	    }
	    PlayerData[playerid][pMateryalSlot] = listitem;
	    Dialog_Show(playerid, MateryalDuzenle, DIALOG_STYLE_LIST, "Materyal Düzenle", "{FFFFFF}Desen Deðiþtir\n{E74C3C}Bu Materyal Slotunu Temizle", "Seç", "Kapat");
 	}
	return 1;
}
Dialog:MateryalDuzenle(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, Materyal, DIALOG_STYLE_LIST, "Materyal Slotlarý", "{FFFFFF}Materyal Slotu 1\n{FFFFFF}Materyal Slotu 2\n{FFFFFF}Materyal Slotu 3\n{FFFFFF}Materyal Slotu 4\n{FFFFFF}Materyal Slotu 5\n{E74C3C}Tüm Materyal Slotlarýný Temizle", "Seç", "Kapat");
	if(response)
	{
	    if(listitem == 0)
	    {
		    new str[300];
		    for(new i; i<sizeof(Desenler); i++)
		    {
		        format(str, sizeof(str), "%s{FFFFFF}Desen %d\n", str, i);
		    }
		    Dialog_Show(playerid, Desenler, DIALOG_STYLE_LIST, "Desenler", str, "Seç", "Geri");
	    }
	    if(listitem == 1)
	    {
	        FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][PlayerData[playerid][pMateryalDuzenle]][furnitureMateryalDesen][PlayerData[playerid][pMateryalSlot]] = 0;
	        Furniture_Refresh(PlayerData[playerid][pMateryalDuzenle], GetPVarInt(playerid, "FurnitureHouse"));
	        Furniture_Save(PlayerData[playerid][pMateryalDuzenle], GetPVarInt(playerid, "FurnitureHouse"));
	        Dialog_Show(playerid, MateryalDuzenle, DIALOG_STYLE_LIST, "Materyal Düzenle", "{FFFFFF}Desen Deðiþtir\n{E74C3C}Bu Materyal Slotunu Temizle", "Seç", "Kapat");
	    }
	}
	return 1;
}
Dialog:Desenler(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, MateryalDuzenle, DIALOG_STYLE_LIST, "Materyal Düzenle", "{FFFFFF}Desen Deðiþtir\n{E74C3C}Bu Materyal Slotunu Temizle", "Seç", "Kapat");
	if(response)
	{
	    new furid = PlayerData[playerid][pMateryalDuzenle];
	    new slot = PlayerData[playerid][pMateryalSlot];
	    FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][furid][furnitureMateryalDesen][slot] = listitem+1;
	    SetDynamicObjectMaterial(FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][furid][furnitureObject], slot, Desenler[listitem][model_id], Desenler[listitem][txdname], Desenler[listitem][texturename], 0);
	    Furniture_Save(furid, GetPVarInt(playerid, "FurnitureHouse"));
	    new str[300];
	    for(new i; i<sizeof(Desenler); i++)
	    {
	        format(str, sizeof(str), "%s{FFFFFF}Desen %d\n", str, i);
	    }
	    Dialog_Show(playerid, Desenler, DIALOG_STYLE_LIST, "Desenler", str, "Seç", "Geri");
	}
	return 1;
}
Dialog:MobilyaKopyala(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    PlayerData[playerid][pSelectFurniture] = 0;
	    PlayerData[playerid][pSelectType] = 0;
	    SetPVarInt(playerid, "MobilyaKopyala", -1);
	    MobilyaMenu(playerid, GetPVarInt(playerid, "FurnitureHouse"));
	}
	else
	{
	    new id = GetPVarInt(playerid, "MobilyaKopyala");
		static Float:pos[6];

		GetDynamicObjectPos(FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][id][furnitureObject], pos[0], pos[1], pos[2]);
		GetDynamicObjectRot(FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][id][furnitureObject], pos[3], pos[4], pos[5]);

		new fur = Furniture_Add(GetPVarInt(playerid, "FurnitureHouse"),FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][id][furnitureName],FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][id][furnitureModel], pos[0], pos[1], pos[2], pos[3], pos[4], pos[5], FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][id][furniturePrice]);
		if(fur == -1) return HataMesajGonder(playerid,"Sunucu maksimum mobilya limitine ulaþmýþtýr.");
		SonMobilyaID[playerid] = fur;
		for(new i; i<5; i++)
		{
		    FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][fur][furnitureMateryalDesen][i] = FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][id][furnitureMateryalDesen][i];
		}
		Furniture_Refresh(fur, GetPVarInt(playerid, "FurnitureHouse"));
		ParaVer(playerid,-FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][id][furniturePrice]);
		PlayerData[playerid][pEditFurniture] = fur;
		PlayerData[playerid][pSelectFurniture] = 0;
	    PlayerData[playerid][pSelectType] = 0;
	    SetPVarInt(playerid, "MobilyaKopyala", -1);
		EditDynamicObject(playerid, FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][fur][furnitureObject]);
		MesajGonder(playerid,"%s adlý mobilya %s karþýlýðýnda kopyalandý.",FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][id][furnitureName], FormatNumber(FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][id][furniturePrice]));
	}
	return 1;
}
Dialog:MobilyaSatinAl(playerid, response, listitem, inputtext[])
{
	if(!response) return MobilyaMenu(playerid, GetPVarInt(playerid, "FurnitureHouse"));
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, MobilyaSatinAl, DIALOG_STYLE_INPUT, "Obje ID", "Lütfen satýn almak istediðiniz objenin modelini girin:", "Al", "Geri");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, MobilyaSatinAl, DIALOG_STYLE_INPUT, "Obje ID", "Lütfen satýn almak istediðiniz objenin modelini girin:", "Al", "Geri");
	    if(!IsValidObjectModel(strval(inputtext)))
	    {
	        HataMesajGonder(playerid, "Geçersiz Obje ID.");
	        return Dialog_Show(playerid, MobilyaSatinAl, DIALOG_STYLE_INPUT, "Obje ID", "Lütfen satýn almak istediðiniz objenin modelini girin:", "Al", "Geri");
	    }
	    if(strval(inputtext) >= 4000)
	    {
	        HataMesajGonder(playerid, "Bu obje alýnamaz.");
	        return Dialog_Show(playerid, MobilyaSatinAl, DIALOG_STYLE_INPUT, "Obje ID", "Lütfen satýn almak istediðiniz objenin modelini girin:", "Al", "Geri");
	    }
	    static
	    Float:x,
		Float:y,
  		Float:z,
    	Float:angle;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);
		x += 5.0 * floatsin(-angle, degrees);
		y += 5.0 * floatcos(-angle, degrees);
		new fur = Furniture_Add(GetPVarInt(playerid, "FurnitureHouse"), "Yok", strval(inputtext) ,x, y, z, 0.0, 0.0, angle,100);
		if(fur == -1) return HataMesajGonder(playerid,"Sunucu maksimum mobilya limitine ulaþmýþtýr.");
		SonMobilyaID[playerid] = fur;
		ParaVer(playerid,-100);
		PlayerData[playerid][pEditFurniture] = fur;
		EditDynamicObject(playerid, FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][fur][furnitureObject]);
		MesajGonder(playerid,"$100 karþýlýðýnda mobilya satýn aldýnýz. Lütfen mobilyanýn yerini ayarlayýn ve kayýt tuþuna basýn.");
	}
	return 1;
}
Dialog:Mobilya(playerid, response, listitem, inputtext[])
{
	if(!response) return SetPVarInt(playerid, "FurnitureHouse", -1);
	if(response)
	{
	    new id = GetPVarInt(playerid, "FurnitureHouse");
	    switch(listitem)
	    {
	        case 0:
	        {
			    new str[1200];
		   		if(Ev_MobilyaSayisi(id) >= GetMaxFurniture(playerid, id)) return HataMesajGonder(playerid, "Bu eve daha fazla mobilya alýnamaz.");
		   		for (new i = 0; i < sizeof(g_aFurnitureTypes); i ++)
		     	{
		      		format(str,sizeof(str),"%s{FFFFFF}%s\n",str,g_aFurnitureTypes[i]);
		      	}
				Dialog_Show(playerid,MobilyaTipleri,DIALOG_STYLE_LIST,"Mobilyalar",str,"Seç","Kapat");
	        }
	        case 1:
	        {
	            if(Ev_MobilyaSayisi(id) >= GetMaxFurniture(playerid, id)) return HataMesajGonder(playerid, "Bu eve daha fazla mobilya alýnamaz.");
	            Dialog_Show(playerid, MobilyaSatinAl, DIALOG_STYLE_INPUT, "Obje ID", "Lütfen satýn almak istediðiniz objenin modelini girin:", "Al", "Geri");
	        }
	        case 2:
	        {
	            PlayerData[playerid][pSelectFurniture] = 1;
	            PlayerData[playerid][pSelectType] = 1;
	            SelectObject(playerid);
	            MesajGonder(playerid,"Lütfen düzenlemek istediðiniz mobilyaya týklayýn.");
	        }
	        case 3:
	        {
	            PlayerData[playerid][pSelectFurniture] = 1;
	            PlayerData[playerid][pSelectType] = 2;
	            SelectObject(playerid);
	            MesajGonder(playerid,"Lütfen satmak istediðiniz mobilyaya týklayýn.");
	        }
	        case 4:
	        {
	            if(Ev_MobilyaSayisi(id) >= GetMaxFurniture(playerid, id)) return HataMesajGonder(playerid, "Bu eve daha fazla mobilya alýnamaz.");
	            PlayerData[playerid][pSelectFurniture] = 1;
	            PlayerData[playerid][pSelectType] = 3;
	            SelectObject(playerid);
	            MesajGonder(playerid,"Lütfen kopyalamak istediðiniz mobilyaya týklayýn.");
	        }
	        case 5:
	        {
	            PlayerData[playerid][pSelectFurniture] = 1;
	            PlayerData[playerid][pSelectType] = 4;
	            SelectObject(playerid);
	            MesajGonder(playerid,"Lütfen materyallerini düzenlemek istediðiniz mobilyaya týklayýn.");
	        }
	        case 6:
	        {
	            new furid = SonMobilyaID[playerid];
	            if(furid == -1) return HataMesajGonder(playerid, "Son eklediðiniz mobilya yok.");
	            if(!Iter_Contains(Mobilyalar[GetPVarInt(playerid, "FurnitureHouse")], furid))
	            {
	                HataMesajGonder(playerid, "Son eklediðiniz mobilya yok.");
	                return MobilyaMenu(playerid, GetPVarInt(playerid, "FurnitureHouse"));
	            }
	            Furniture_Delete(furid, GetPVarInt(playerid, "FurnitureHouse"));
	            SonMobilyaID[playerid] = -1;
	            MesajGonder(playerid, "Son eklediðiniz mobilya silindi.");
	            MobilyaMenu(playerid, GetPVarInt(playerid, "FurnitureHouse"));
	        }
	        case 7:
	        {
	            new hid = House_Inside(playerid);
	            if(hid == -1) return SetPVarInt(playerid, "FurnitureHouse", -1);
	            if(house_info[hid][evSahip] != PlayerData[playerid][pID])
	            {
	                HataMesajGonder(playerid, "Mobilya düzenleme yetkisini sadece ev sahibi verebilir.");
	                return MobilyaMenu(playerid, GetPVarInt(playerid, "FurnitureHouse"));
	            }
	            Dialog_Show(playerid, MobilyaYetkilendirme, DIALOG_STYLE_INPUT, "Mobilya Yetkilendirme", "{FFFFFF}Lütfen mobilya düzenleme yetkisi vereceðiniz kiþinin ID'sini girin (-1 yazarsanýz yetkiler silinir)", "Tamam", "Geri");
	        }
	        case 8:
	        {
	            new hid = House_Inside(playerid);
	            if(hid == -1) return SetPVarInt(playerid, "FurnitureHouse", -1);
	            SetPlayerInterior(playerid, HouseInteriors[ house_info[hid][evInterior] ][intID]);
  				SetPlayerPos(playerid, HouseInteriors[house_info[hid][evInterior] ][intX], HouseInteriors[ house_info[hid][evInterior] ][intY], HouseInteriors[ house_info[hid][evInterior] ][intZ]);
          		SetPlayerVirtualWorld(playerid,house_info[hid][evID]+1);
            	SetPVarInt(playerid, "FurnitureHouse", -1);
	        }
	        case 9:
	        {
             	new hid = GetPVarInt(playerid, "FurnitureHouse");
	            if (hid == -1) return 1;
	            if (house_info[hid][evSahip] != PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Tüm mobilyalarý sadece ev sahibi satabilir.");
	            if (Ev_MobilyaSayisi(hid) <= 0) return HataMesajGonder(playerid, "Hiç mobilya yok.");
	            Dialog_Show(playerid, MobilyalariSat, DIALOG_STYLE_MSGBOX, "Mobilyalarý Sat", "{FFFFFF}%d adet mobilyayý {2ECC71}%s {FFFFFF}karþýlýðýnda satmak istiyor musunuz?", "Sat", "Iptal", Ev_MobilyaSayisi(hid), FormatNumber(Ev_MobilyaFiyat(hid)));
	        }
	    }
	}
	return 1;
}

// Deðiþti
Dialog:MobilyalariSat(playerid, response, listitem, inputtext[])
{
	if (!response) return MobilyaMenu(playerid, GetPVarInt(playerid, "FurnitureHouse"));
	if (response)
	{
	    new id = GetPVarInt(playerid, "FurnitureHouse");
	    ParaVer(playerid, Ev_MobilyaFiyat(id));
	    MesajGonder(playerid, "Mobilyalar satýldý. (%s)", FormatNumber(Ev_MobilyaFiyat(id)));
	    SetPVarInt(playerid, "FurnitureHouse", -1);
	    House_RemoveFurniture(id);
	}
	return 1;
}
//
Dialog:MobilyaYetkilendirme(playerid, response, listitem, inputtext[])
{
	if(!response) return MobilyaMenu(playerid, GetPVarInt(playerid, "FurnitureHouse"));
	if(response)
	{
	    new evid = House_Inside(playerid);
	    if(isnull(inputtext)) return Dialog_Show(playerid, MobilyaYetkilendirme, DIALOG_STYLE_INPUT, "Mobilya Yetkilendirme", "{FFFFFF}Lütfen mobilya düzenleme yetkisi vereceðiniz kiþinin ID'sini girin (-1 yazarsanýz yetkiler silinir)", "Tamam", "Geri");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, MobilyaYetkilendirme, DIALOG_STYLE_INPUT, "Mobilya Yetkilendirme", "{FFFFFF}Lütfen mobilya düzenleme yetkisi vereceðiniz kiþinin ID'sini girin (-1 yazarsanýz yetkiler silinir)", "Tamam", "Geri");
	    new oyuncuid = strval(inputtext);
	    if(oyuncuid >= 0 && !OyundaDegil(oyuncuid))
		{
		    HataMesajGonder(playerid, "Geçersiz ID girdiniz.");
		    return Dialog_Show(playerid, MobilyaYetkilendirme, DIALOG_STYLE_INPUT, "Mobilya Yetkilendirme", "{FFFFFF}Lütfen mobilya düzenleme yetkisi vereceðiniz kiþinin ID'sini girin (-1 yazarsanýz yetkiler silinir)", "Tamam", "Geri");
		}
		if(oyuncuid >= 0 && !IsPlayerNearPlayer(playerid, oyuncuid, 15.0))
		{
		    HataMesajGonder(playerid, "Kiþiye yeterince yakýn deðilsiniz.");
		    return Dialog_Show(playerid, MobilyaYetkilendirme, DIALOG_STYLE_INPUT, "Mobilya Yetkilendirme", "{FFFFFF}Lütfen mobilya düzenleme yetkisi vereceðiniz kiþinin ID'sini girin (-1 yazarsanýz yetkiler silinir)", "Tamam", "Geri");
		}
	    if(oyuncuid == playerid)
	    {
	        HataMesajGonder(playerid, "Kendi ID'ni yazamazsýn.");
	        return Dialog_Show(playerid, MobilyaYetkilendirme, DIALOG_STYLE_INPUT, "Mobilya Yetkilendirme", "{FFFFFF}Lütfen mobilya düzenleme yetkisi vereceðiniz kiþinin ID'sini girin (-1 yazarsanýz yetkiler silinir)", "Tamam", "Geri");
	    }
	    if(oyuncuid == -1)
	    {
	        house_info[evid][MobilyaYetki] = -1;
	        MesajGonder(playerid, "Mobilya yetkisi kaldýrýldý.");
	        MobilyaMenu(playerid, evid);
	    }
	    else
	    {
		 	house_info[evid][MobilyaYetki] = PlayerData[oyuncuid][pID];
		 	MesajGonder(playerid, "%s adlý kiþiye mobilya düzenleme yetkisi verdiniz.", ReturnName(oyuncuid, 0));
		 	MobilyaMenu(playerid, evid);
	    }
	}
	return 1;
}
Dialog:MobilyaTipleri(playerid, response, listitem, inputtext[])
{
	if(!response) return MobilyaMenu(playerid, GetPVarInt(playerid, "FurnitureHouse"));
	if(response)
	{
	    new id = GetPVarInt(playerid, "FurnitureHouse");
	    if(Ev_MobilyaSayisi(id) >= GetMaxFurniture(playerid, id)) return HataMesajGonder(playerid, "Bu eve daha fazla mobilya alýnamaz.");

		new yazi[1500],sayi = -1;
  		for (new i = 0; i < sizeof(BuyableFurnitures); i ++) if (BuyableFurnitures[i][oSlot] == listitem)
  		{
	    	sayi++;
		    MobilyaListeleme[playerid][sayi] = BuyableFurnitures[i][oModelID];
		    format(yazi,sizeof(yazi),"%s%i\t~r~$%d\n",yazi,BuyableFurnitures[i][oModelID],BuyableFurnitures[i][oPrice]);
	    }
	    Dialog_Show(playerid, MobilyaListele, DIALOG_STYLE_PREVMODEL, "Mobilyalar", yazi, "Satin al", "Geri");
    }
	return 1;
}
Dialog:MobilyaListele(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    new str[1200];
	    for (new i = 0; i < sizeof(g_aFurnitureTypes); i ++)
     	{
      		format(str,sizeof(str),"%s{FFFFFF}%s\n",str,g_aFurnitureTypes[i]);
      	}
      	return Dialog_Show(playerid,MobilyaTipleri,DIALOG_STYLE_LIST,"Mobilyalar",str,"Seç","Kapat");
	}
	else
	{
	    new id = GetPVarInt(playerid, "FurnitureHouse");
   		if(Ev_MobilyaSayisi(id) >= GetMaxFurniture(playerid, id)) return HataMesajGonder(playerid, "Bu eve daha fazla mobilya alýnamaz.");
		new modelid = MobilyaListeleme[playerid][listitem];
		for(new i; i<sizeof(BuyableFurnitures); i++) if(BuyableFurnitures[i][oModelID] == modelid)
		{
		    if(PlayerData[playerid][pCash] < BuyableFurnitures[i][oPrice]) return HataMesajGonder(playerid, "Yeterli paranýz yok. (%s)", FormatNumber(BuyableFurnitures[i][oPrice]));
		    static
		    Float:x,
		    Float:y,
		    Float:z,
		    Float:angle;

			GetPlayerPos(playerid, x, y, z);
   			GetPlayerFacingAngle(playerid, angle);

			x += 5.0 * floatsin(-angle, degrees);
   			y += 5.0 * floatcos(-angle, degrees);
    		new fur = Furniture_Add(id, BuyableFurnitures[i][oStr],BuyableFurnitures[i][oModelID],x, y, z, 0.0, 0.0, angle,BuyableFurnitures[i][oPrice]);
    		if(fur == -1) return HataMesajGonder(playerid,"Sunucu maksimum mobilya limitine ulaþmýþtýr.");
    		SonMobilyaID[playerid] = fur;
    		ParaVer(playerid,-BuyableFurnitures[i][oPrice]);
    		PlayerData[playerid][pEditFurniture] = fur;
    		EditDynamicObject(playerid, FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][fur][furnitureObject]);
    		MesajGonder(playerid,"%s miktar para karþýlýðýnda '%s' adlý mobilyayý satýn aldýnýz. Lütfen mobilyanýn yerini ayarlayýn ve kayýt tuþuna basýn.",FormatNumber(BuyableFurnitures[i][oPrice]),BuyableFurnitures[i][oStr]);
    		break;
		}
	}
	return 1;
}
Dialog:BakimModu(playerid, response, listitem, inputtext[])
{
	if(!response) return Kick(playerid);
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, BakimModu, DIALOG_STYLE_INPUT, "Bakým", "Sunucumuz bakým modundadýr, giriþ yapmak için bakým þifresini girin:", "Gir", "Kapat");
	    if(strcmp(inputtext, GetServerBilgiStr("bakimSifre"), false) == 0)
	    {
	        TextDrawShowForPlayer(playerid, GirisTD);
		    MesajGonder(playerid,"Giriþ baþarýlý, hesabýnýz veritabanýnda aranýyor...");
			SetTimerEx("Giris_Yap",2500,false,"i",playerid);
	    }
	    else
	    {
	        HataMesajGonder(playerid, "Geçersiz þifre.");
	        return Dialog_Show(playerid, BakimModu, DIALOG_STYLE_INPUT, "Bakým", "Sunucumuz bakým modundadýr, giriþ yapmak için bakým þifresini girin:", "Gir", "Kapat");
	    }
	}
	return 1;
}
Dialog:SilahTuccari(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(listitem == 0)
	    {
	        new string[500];
	        for(new i; i<sizeof(SilahFiyatlar); i++)
	        {
	            format(string, sizeof(string), "%s{AFAFAF}» {FFFFFF}%s\t{33AA33}%s\n", string, SilahFiyatlar[i][silahAdi], FormatNumber(SilahFiyatlar[i][silahFiyat]));
			}
			Dialog_Show(playerid, Silahlar, DIALOG_STYLE_TABLIST, "Silahlar", string, "Satýn Al", "Geri");
		}
		if(listitem == 1)
		{
		    if(!GetWeapon(playerid)) return HataMesajGonder(playerid, "Elinizde silah yok.");
		    if(GetWeapon(playerid) <= 18 || GetWeapon(playerid) == 23 || GetWeapon(playerid) == 26 || GetWeapon(playerid) == 27 || GetWeapon(playerid) == 32 || GetWeapon(playerid) >= 34 ) return HataMesajGonder(playerid, "Elinizde bulunan silaha mermi satmýyoruz.");
		    if(GetMermiFiyat(GetWeapon(playerid)) > PlayerData[playerid][pCash]) return HataMesajGonder(playerid, "Mermi satýn almak için yeterli paranýz yok. (%s)", FormatNumber(GetMermiFiyat(GetWeapon(playerid))));
		    Dialog_Show(playerid, MermiAl, DIALOG_STYLE_MSGBOX, "Mermi Al", "{f44242}%s {FFFFFF}model silaha mermi almak için {0ef416}%s {FFFFFF}ödemelisin. Almak ister misin?", "Evet", "Hayýr", ReturnWeaponName(GetWeapon(playerid)), FormatNumber(GetMermiFiyat(GetWeapon(playerid))));

		}
		if(listitem == 2)
		{
			if(PlayerData[playerid][pEsyalar][13] >= 1) return HataMesajGonder(playerid, "Üzerinizde en fazla 1 þarjör bulundurabilirsiniz.");
			if(PlayerData[playerid][pCash] < 500) return HataMesajGonder(playerid, "Yeterli paranýz yok. ($500)");
			PlayerData[playerid][pEsyalar][13]++;
			ParaVer(playerid, -500);
			MesajGonder(playerid, "Þarjör satýn alýndý, (/silahlarim) komutu ile silahýnýza þarjör takabilirsiniz.");
		}
	}
	return 1;
}
stock LabelleriYukle()
{
	new yukle;
	for(new labelid = 0; labelid < MAX_LABEL; labelid++)
	{
		new File: SawyerL = fopen(LabelDosya(labelid), io_read);
		if(SawyerL)
		{
			new jstr[250];
			fread(SawyerL, jstr);
			sscanf(jstr, "p<>>s[120]dddffff", Label[labelid][LabelAdi], Label[labelid][Renk], Label[labelid][VW], Label[labelid][Int], Label[labelid][Pos][0], Label[labelid][Pos][1], Label[labelid][Pos][2], Label[labelid][Mesafe]);
			Label[labelid][objeID] = CreateDynamicObject(19482, Label[labelid][Pos][0], Label[labelid][Pos][1], Label[labelid][Pos][2], 0, 0, 0, Label[labelid][VW], Label[labelid][Int]);
			Label[labelid][ID] = CreateDynamic3DTextLabel(Label[labelid][LabelAdi], Label[labelid][Renk], Label[labelid][Pos][0], Label[labelid][Pos][1], Label[labelid][Pos][2], Label[labelid][Mesafe], INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Label[labelid][VW], Label[labelid][Int], -1);
			yukle++;
			fclose(SawyerL);
		}
	}
	if(yukle >= 1)
		printf("» Toplam %d Label yüklenmiþtir.", yukle);
	else
		print("» Toplam 0 Label yüklenmiþtir.");
	return 1;
}

forward LabelYarat(labelid, labeladi[], renk, vw, int, Float: x, Float: y, Float: z, Float: mesafe);
public LabelYarat(labelid, labeladi[], renk, vw, int, Float: x, Float: y, Float: z, Float: mesafe)
{
	new File:ldosya;
	new dosyayolu[128];
	new string[250];
	format(dosyayolu, sizeof(dosyayolu), "/Labeller/%d.txt", labelid);
	ldosya = fopen(dosyayolu, io_append);
	format(string, sizeof(string), "%s>%d>%d>%d>%f>%f>%f>%f\r\n", labeladi, renk, vw, int, x, y, z, mesafe);
	fwrite(ldosya, string);
	fclose(ldosya);
	return 1;
}

forward fcreate(filename[]);
public fcreate(filename[])
{
	if (fexist(filename)){return false;}
	new File:fhandle = fopen(filename, io_write);
	fwrite(fhandle, "bos");
	fclose(fhandle);
	return true;
}

stock LabelDosya(labelid)
{
	new jdosya[65];
	format(jdosya, sizeof(jdosya), "/Labeller/%d.txt", labelid);
	return jdosya;
}

stock LabelGuncelle(labelid)
{
	if(!fexist(LabelDosya(labelid)))
	{
		fcreate(LabelDosya(labelid));
	}
	new jstr[250], File: jensenR = fopen(LabelDosya(labelid), io_write);
	format(jstr, sizeof(jstr), "%s>%d>%d>%d>%f>%f>%f>%f\r\n", Label[labelid][LabelAdi], Label[labelid][Renk], Label[labelid][VW], Label[labelid][Int], Label[labelid][Pos][0], Label[labelid][Pos][1], Label[labelid][Pos][2], Label[labelid][Mesafe]);
	fwrite(jensenR, jstr);
	return fclose(jensenR);
}

stock Oyuncuadi(playerid)
{
	new isim[MAX_PLAYER_NAME];
	GetPlayerName(playerid, isim, MAX_PLAYER_NAME);
	return isim;
}

stock BosLabelID()
{
	for(new labelid = 0; labelid < MAX_LABEL; labelid++)
	{
		if(!fexist(LabelDosya(labelid)))
		{
			return labelid;
		}
	}
	return -1;
}
stock GetMaksAmmo(silahid)
{
	new mermi = 0;
	switch(silahid)
	{
	    case 22: mermi = 200;
	    case 24: mermi = 107;
	    case 25: mermi = 50;
	    case 28: mermi = 200;
	    case 29: mermi = 230;
	    case 30: mermi = 250;
	    case 33: mermi = 30;
	}
	return mermi;
}
Dialog:MermiAl(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(!GetWeapon(playerid)) return HataMesajGonder(playerid, "Elinizde silah yok.");
	    if(GetWeapon(playerid) <= 18 || GetWeapon(playerid) == 23 || GetWeapon(playerid) == 26 || GetWeapon(playerid) == 27 || GetWeapon(playerid) == 32 || GetWeapon(playerid) >= 34 ) return HataMesajGonder(playerid, "Elinizde bulunan silaha mermi satmýyoruz.");
		if(GetMermiFiyat(GetWeapon(playerid)) > PlayerData[playerid][pCash]) return HataMesajGonder(playerid, "Mermi satýn almak için yeterli paranýz yok. (%s)", FormatNumber(GetMermiFiyat(GetWeapon(playerid))));
		new id = -1;
  		for(new i; i<sizeof(SilahFiyatlar); i++)
    	{
     		if(SilahFiyatlar[i][silahID] == GetWeapon(playerid))
       		{
         		id = i;
           		break;
	        }
	    }
	    new mermi = GetPlayerAmmo(playerid);
	    new silahid = GetWeapon(playerid);
	    ResetWeapon(playerid, GetWeapon(playerid));
	    GiveWeaponToPlayer(playerid, silahid, mermi+SilahFiyatlar[id][silahMermi]*2);
	    ParaVer(playerid, -GetMermiFiyat(GetWeapon(playerid)));
	}
	return 1;
}
Dialog:Silahlar(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, SilahTuccari, DIALOG_STYLE_LIST, "Silah/Mermi Tüccarý","{AFAFAF}» {FFFFFF}Silah Satýn Al\n{AFAFAF}» {FFFFFF}Mermi Satýn Al\n{AFAFAF}» {FFFFFF}Þarjör Satýn Al", "Seç", "Kapat");
	if(response)
	{
	    new id = PlayerData[playerid][pFaction];
	    if(id == -1 || Birlikler[id][birlikOnaylar][1] == 0) return HataMesajGonder(playerid, "Silah onaylý bir birliðin üyesi deðilsiniz.");
	    if(PlayerData[playerid][pLevel] < 2) return HataMesajGonder(playerid, "En az 2 seviye olmalýsýnýz.");
	    if(PlayerData[playerid][pSilahAlmaSayisi] >= 2 && PlayerData[playerid][pSilahAlma] >= gettime()) return HataMesajGonder(playerid, "24 saatte en fazla 2 silah alabilirsiniz.");
	    if(PlayerData[playerid][pCash] < SilahFiyatlar[listitem][silahFiyat]) return HataMesajGonder(playerid, "Bu silahý satýn alabilmek için yeterli paranýz yok.");
	    if(PlayerHasWeapon(playerid, SilahFiyatlar[listitem][silahID])) return HataMesajGonder(playerid, "Zaten bu silaha sahipsiniz.");
	    if(PlayerData[playerid][pSilahlar][g_aWeaponSlots[SilahFiyatlar[listitem][silahID]]] != 0) return HataMesajGonder(playerid, "Bu silah türü sizde bulunuyor.");
	    PlayerData[playerid][pSilahAlmaSayisi]++;
	    if(PlayerData[playerid][pSilahAlmaSayisi] >= 2) PlayerData[playerid][pSilahAlma] = gettime()+1*86400;
	    ParaVer(playerid, -SilahFiyatlar[listitem][silahFiyat]);
	    GiveWeaponToPlayer(playerid, SilahFiyatlar[listitem][silahID], SilahFiyatlar[listitem][silahMermi]);
	}
	return 1;
}
stock GetMermiFiyat(silahid)
{
	new fiyat = 0;
	switch(silahid)
	{
	    case 22: fiyat = 100;
	    case 24: fiyat = 150;
	    case 25: fiyat = 200;
	    case 28: fiyat = 160;
	    case 29: fiyat = 110;
	    case 30: fiyat = 250;
	    case 33: fiyat = 150;
	}
	return fiyat;
}
Dialog:BarbekuYemek(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, BarbekuYemek, DIALOG_STYLE_INPUT, "Barbekü", "{ff0000}» {FFFFFF}Yemeði vermek istediðiniz oyuncunun ID'sini girin (Kendi ID'nizi yazarsanýz siz yersiniz ID: %d):", "Ver", "Kapat", playerid);
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, BarbekuYemek, DIALOG_STYLE_INPUT, "Barbekü", "{ff0000}» {FFFFFF}Yemeði vermek istediðiniz oyuncunun ID'sini girin (Kendi ID'nizi yazarsanýz siz yersiniz ID: %d):", "Ver", "Kapat", playerid);
	    new id = strval(inputtext);
	    if(!OyundaDegil(id))
	    {
	        HataMesajGonder(playerid, "Oyuncu oyunda deðil.");
	        return Dialog_Show(playerid, BarbekuYemek, DIALOG_STYLE_INPUT, "Barbekü", "{ff0000}» {FFFFFF}Yemeði vermek istediðiniz oyuncunun ID'sini girin (Kendi ID'nizi yazarsanýz siz yersiniz ID: %d):", "Ver", "Kapat", playerid);
	    }
	    if(!IsPlayerNearPlayer(playerid, id, 5.0))
	    {
	        HataMesajGonder(playerid, "Kiþiye yeterince yakýn deðilsiniz.");
	        return Dialog_Show(playerid, BarbekuYemek, DIALOG_STYLE_INPUT, "Barbekü", "{ff0000}» {FFFFFF}Yemeði vermek istediðiniz oyuncunun ID'sini girin (Kendi ID'nizi yazarsanýz siz yersiniz ID: %d):", "Ver", "Kapat", playerid);
	    }
	    new yemekid = GetPVarInt(playerid, "PisirilenYemek");
	    ApplyAnimation(id, "FOOD", "EAT_Burger",4.1,0,1,1,0,0);
	    ApplyAnimation(id, "FOOD", "EAT_Burger",4.1,0,1,1,0,0);
		if(id == playerid)
		{
		    MesajGonder(id, "Barbekü de piþirdiðiniz yemeði yediniz.");
		    if(yemekid == 1) SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s barbekü de piþirdiði Köfteyi yemeye baþlar.", ReturnName(playerid, 0));
		    if(yemekid == 2) SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s barbekü de piþirdiði Tavuk etini yemeye baþlar.", ReturnName(playerid, 0));
		    if(yemekid == 3) SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s barbekü de piþirdiði Dana etini yemeye baþlar.", ReturnName(playerid, 0));
		}
		else
		{
		    if(yemekid == 1) SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s barbekü de piþirdiði Köfteyi %s adlý kiþiye verir.", ReturnName(playerid, 0), ReturnName(id, 0));
		    if(yemekid == 2) SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s barbekü de piþirdiði Tavuk etini %s adlý kiþiye verir.", ReturnName(playerid, 0), ReturnName(id, 0));
		    if(yemekid == 3) SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s barbekü de piþirdiði Dana etini %s adlý kiþiye verir.", ReturnName(playerid, 0), ReturnName(id, 0));
		}
		DeletePVar(playerid, "PisirilenYemek");
	}
	return 1;
}
Dialog:BarbekuPisir(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(PlayerData[playerid][pEsyalar][7] <= 0) return HataMesajGonder(playerid, "Hiç köfteniz yok.");
	            PlayerData[playerid][pEsyalar][7]--;
	            PlayerData[playerid][pYemekPisiriliyor] = 15;
	            PlayerData[playerid][pPisirilenYemek] = 1;

	            MesajGonder(playerid, "Köfte 15 saniye sonra piþecek.");
	        }
	        case 1:
	        {
	            if(PlayerData[playerid][pEsyalar][8] <= 0) return HataMesajGonder(playerid, "Hiç tavuk etiniz yok.");
	            PlayerData[playerid][pEsyalar][8]--;
	            PlayerData[playerid][pYemekPisiriliyor] = 15;
	            PlayerData[playerid][pPisirilenYemek] = 2;

	            MesajGonder(playerid, "Tavuk eti 15 saniye sonra piþecek.");
	        }
	        case 2:
	        {
	            if(PlayerData[playerid][pEsyalar][9] <= 0) return HataMesajGonder(playerid, "Hiç dana etiniz yok.");
	            PlayerData[playerid][pEsyalar][9]--;
	            PlayerData[playerid][pYemekPisiriliyor] = 15;
	            PlayerData[playerid][pPisirilenYemek] = 3;

	            MesajGonder(playerid, "Dana eti 15 saniye sonra piþecek.");
	        }
	    }
	}
	return 1;
}
Dialog:Yaralilar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new id = GetPlayerID(inputtext);
	    if(id != -1 && PlayerData[id][pBaygin] == 1)
	    {
	        if(EMSAccepted(id) != INVALID_PLAYER_ID) return HataMesajGonder(playerid, "Bu kiþinin çaðrýsý %s tarafýndan kabul edildi.", ReturnName(EMSAccepted(id), 0));
	        new Float:pos[3];
	        GetPlayerPosEx(id, pos[0], pos[1], pos[2]);
	        DisablePlayerCheckpoint(playerid);
	        SetPlayerCheckpoint(playerid, pos[0], pos[1], pos[2], 7.0);
	        EMSKabul[playerid] = id;
	        MesajGonder(playerid, "%s adlý kiþinin yeri haritada iþaretlendi.", ReturnName(id, 0));
	    }
	}
	return 1;
}
Dialog:OyuncuAnahtar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    SetPVarInt(playerid, "KeyDeleteSqlID", KeyListeleme[playerid][listitem]);
	    SetPVarInt(playerid, "KeyDeleteTip", KeyListelemeTip[playerid][listitem]);
	    Dialog_Show(playerid, AnahtarSilOnay, DIALOG_STYLE_MSGBOX, "Anahtar Sil - Onay", "{FFFFFF}Seçtiðiniz anahtar {FF0000}silinecek{FFFFFF}, onaylýyor musunuz?", "Onayla", "Iptal");
	    /*new query[124];
	    format(query, sizeof(query), "DELETE FROM `anahtarlar` WHERE `playersqlid` = '%d' AND `sqlid` = '%d' AND `tip` = '%d'", PlayerData[playerid][pID],KeyListeleme[playerid][listitem],KeyListelemeTip[playerid][listitem]);
	    mysql_query(baglanti, query);
	    MesajGonder(playerid, "Anahtar baþarýyla silindi.");
	    callcmd::anahtarlarim(playerid);*/
	}
	return 1;
}
Dialog:AnahtarSilOnay(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    DeletePVar(playerid, "KeyDeleteSqlID");
	    DeletePVar(playerid, "KeyDeleteTip");
	    callcmd::anahtarlarim(playerid);
	}
	else
	{
	    new query[124];
	    format(query, sizeof(query), "DELETE FROM `anahtarlar` WHERE `playersqlid` = '%d' AND `sqlid` = '%d' AND `tip` = '%d'", PlayerData[playerid][pID],GetPVarInt(playerid, "KeyDeleteSqlID"),GetPVarInt(playerid, "KeyDeleteTip"));
	    mysql_query(baglanti, query, false);
	    MesajGonder(playerid, "Anahtar baþarýyla silindi.");
	    DeletePVar(playerid, "KeyDeleteSqlID");
	    DeletePVar(playerid, "KeyDeleteTip");
	    callcmd::anahtarlarim(playerid);

	}
	return 1;
}
Dialog:AracAnahtarlar(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::arac(playerid);
	if(response)
	{
	    if(listitem > MAX_CAR_KEYS) return callcmd::arac(playerid);
	    new query[150];
	    format(query, sizeof(query), "DELETE FROM `anahtarlar` WHERE `playersqlid` = '%d' AND `sqlid` = '%d' AND `tip` = '2'", KeyListeleme[playerid][listitem], AracInfo[GetPVarInt(playerid, "KeyDeleteCarID")][aracID]);
	    mysql_query(baglanti, query, false);
	    foreach(new i:Player)
	    {
	        if(PlayerData[i][pID] == KeyListeleme[playerid][listitem])
	        {
	            BilgiMesajGonder(i, "%s adlý kiþi tarafýndan %s model aracýn anahtarý geri alýndý.", ReturnName(playerid, 0), ReturnVehicleModelName(AracInfo[ GetPVarInt(playerid, "KeyDeleteCarID")][aracModel]));
	        }
	    }
	    MesajGonder(playerid, "%s adlý kiþinin anahtarý geri alýndý.", SQLName(KeyListeleme[playerid][listitem], 0));
	    Arac_KeyDialog(playerid, GetPVarInt(playerid, "KeyDeleteCarID"));
	}
	return 1;
}
Dialog:EvAnahtarlar(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::ev(playerid);
	if(response)
	{
	    if(listitem > MAX_HOUSE_KEYS) return callcmd::ev(playerid);
	    new query[150];
	    format(query, sizeof(query), "DELETE FROM `anahtarlar` WHERE `playersqlid` = '%d' AND `sqlid` = '%d' AND `tip` = '1'", KeyListeleme[playerid][listitem], house_info[GetPVarInt(playerid, "KeyDeleteHouseID")][evID]);
	    mysql_query(baglanti, query, false);
	    foreach(new i:Player)
	    {
	        if(PlayerData[i][pID] == KeyListeleme[playerid][listitem])
	        {
	            //Iter_Remove(EvAnahtarlar[i], GetPVarInt(playerid, "KeyDeleteHouseID"));
	            BilgiMesajGonder(i, "%s adlý kiþi tarafýndan %d ID'li evin anahtarý geri alýndý.", ReturnName(playerid, 0), GetPVarInt(playerid, "KeyDeleteHouseID"));
	        }
	    }
	    MesajGonder(playerid, "%s adlý kiþinin anahtarý geri alýndý.", SQLName(KeyListeleme[playerid][listitem], 0));
	    Ev_KeyDialog(playerid, GetPVarInt(playerid, "KeyDeleteHouseID"));
	}
	return 1;
}
Dialog:AnahtarVer(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new str[1000], string[124],sayi = 0;
	    if(listitem == 0)
	    {
	        strcat(str, "{FF0000}ID\t{FF0000}Ev Adý\n");
			for(new i; i<MAX_EV; i++)
			{
			    if(house_info[i][evExists])
			    {
			        if(house_info[i][evSahip] == PlayerData[playerid][pID])
			        {
			            sayi++;
			            format(string, sizeof(string), "{FFFFFF}%d\t{FFFFFF}%s\n", i, house_info[i][evIsim]);
			            strcat(str, string);
			        }
			    }
			}
   			if(sayi == 0) return HataMesajGonder(playerid, "Hiç eviniz yok.");
			Dialog_Show(playerid, SelectHouse, DIALOG_STYLE_TABLIST_HEADERS, "{8D8DFF}Ev Seç", str, "Seç", "Geri");
	    }
	    if(listitem == 1)
	    {
	        strcat(str, "{FF0000}ID\t{FF0000}Model\t{FF0000}Plaka\n");
	        for(new i; i<MAX_ARAC; i++)
	        {
	            if(AracInfo[i][aracExists])
	            {
	                if(AracInfo[i][aracSahip] == PlayerData[playerid][pID])
	                {
	                    sayi++;
	                    format(string, sizeof(string), "{FFFFFF}%d\t{FFFFFF}%s\t{FFFFFF}%s\n", i, ReturnVehicleModelName(AracInfo[i][aracModel]), AracInfo[i][aracPlaka]);
	                    strcat(str, string);
	                }
	            }
	        }
	        if(sayi == 0) return HataMesajGonder(playerid, "Hiç aracýnýz yok.");
	        Dialog_Show(playerid, SelectCar, DIALOG_STYLE_TABLIST_HEADERS, "{8D8DFF}Araç Seç", str, "Seç", "Geri");
	    }
	}
	return 1;
}
Dialog:SelectCar(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::anahtarver(playerid);
	if(response)
	{
	    new carid = strval(inputtext);
	    if(AracInfo[carid][aracExists])
	    {
	        if(AracInfo[carid][aracModel] == 509) return HataMesajGonder(playerid, "Bu aracýn anahtarýný veremezsiniz.");
   			if(Arac_GetKeyCount(carid) >= MAX_CAR_KEYS) return HataMesajGonder(playerid, "Maksimum %d anahtar verebilirsiniz.", MAX_CAR_KEYS);
	        SetPVarInt(playerid, "GiveKeyCarID", carid);
	        Dialog_Show(playerid, EnterPlayerID2, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtarý vermek istediðiniz oyuncunun ID'sini girin:", "Ver", "Kapat");
	    }
	}
	return 1;
}
Dialog:SelectHouse(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::anahtarver(playerid);
	if(response)
	{
	    new evid = strval(inputtext);
	    if(house_info[evid][evExists])
	    {
   			if(Ev_GetKeyCount(evid) >= MAX_HOUSE_KEYS) return HataMesajGonder(playerid, "Maksimum %d anahtar verebilirsiniz.", MAX_HOUSE_KEYS);
	        SetPVarInt(playerid, "GiveKeyHouseID", evid);
	        Dialog_Show(playerid, EnterPlayerID, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtarý vermek istediðiniz oyuncunun ID'sini girin:", "Ver", "Kapat");
	    }
	}
	return 1;
}
Dialog:EnterPlayerID(playerid, response, listitem, inputtext[])
{
	if(!response) return DeletePVar(playerid, "GiveKeyHouseID");
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, EnterPlayerID, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtarý vermek istediðiniz oyuncunun ID'sini girin:", "Ver", "Kapat");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, EnterPlayerID, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtarý vermek istediðiniz oyuncunun ID'sini girin:", "Ver", "Kapat");
	    if(!OyundaDegil(strval(inputtext)))
	    {
	        HataMesajGonder(playerid, "Oyuncu oyunda deðil.");
	        return Dialog_Show(playerid, EnterPlayerID, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtarý vermek istediðiniz oyuncunun ID'sini girin:", "Ver", "Kapat");
		}
		if(strval(inputtext) == playerid)
		{
		    HataMesajGonder(playerid, "Kendi kendine anahtar veremezsiniz.");
		    return Dialog_Show(playerid, EnterPlayerID, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtarý vermek istediðiniz oyuncunun ID'sini girin:", "Ver", "Kapat");
		}
		if(!IsPlayerNearPlayer(playerid, strval(inputtext), 5.0))
		{
		    HataMesajGonder(playerid, "Kiþiye yeterince yakýn deðilsiniz.");
		    return Dialog_Show(playerid, EnterPlayerID, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtarý vermek istediðiniz oyuncunun ID'sini girin:", "Ver", "Kapat");
		}
		if(house_info[GetPVarInt(playerid, "GiveKeyHouseID")][evKiralayan] == PlayerData[strval(inputtext)][pID])
		{
		    HataMesajGonder(playerid, "Evinizi kiralayan kiþiye anahtar veremezsiniz.");
		    return Dialog_Show(playerid, EnterPlayerID, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtarý vermek istediðiniz oyuncunun ID'sini girin:", "Ver", "Kapat");
		}
		if(Ev_AnahtarVar(strval(inputtext),GetPVarInt(playerid, "GiveKeyHouseID")))
		{
		    HataMesajGonder(playerid, "Bu evin anahtarý zaten kiþide var.");
		    return Dialog_Show(playerid, EnterPlayerID, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtarý vermek istediðiniz oyuncunun ID'sini girin:", "Ver", "Kapat");
		}
		new query[250];
		format(query, sizeof(query), "INSERT INTO `anahtarlar` (`playersqlid`, `givesqlid`, `sqlid`, `tip`) VALUES ('%d', '%d', '%d', '1')",PlayerData[strval(inputtext)][pID], PlayerData[playerid][pID], house_info[GetPVarInt(playerid, "GiveKeyHouseID")][evID]);
		mysql_query(baglanti, query, false);
		MesajGonder(strval(inputtext), "%s adlý kiþi size %d ID'li evin anahtarýný verdi. (/anahtarlarim)", ReturnName(playerid, 0), GetPVarInt(playerid, "GiveKeyHouseID"));
		MesajGonder(playerid, "%s adlý kiþiye evin anahtarý verildi.",ReturnName(strval(inputtext), 0));
		DeletePVar(playerid, "GiveKeyHouseID");
	}
	return 1;
}
Dialog:EnterPlayerID2(playerid, response, listitem, inputtext[])
{
	if(!response) return DeletePVar(playerid, "GiveKeyCarID");
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, EnterPlayerID2, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtarý vermek istediðiniz oyuncunun ID'sini girin:", "Ver", "Kapat");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, EnterPlayerID2, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtarý vermek istediðiniz oyuncunun ID'sini girin:", "Ver", "Kapat");
	    if(!OyundaDegil(strval(inputtext)))
	    {
	        HataMesajGonder(playerid, "Oyuncu oyunda deðil.");
	        return Dialog_Show(playerid, EnterPlayerID2, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtarý vermek istediðiniz oyuncunun ID'sini girin:", "Ver", "Kapat");
		}
		if(strval(inputtext) == playerid)
		{
		    HataMesajGonder(playerid, "Kendi kendine anahtar veremezsiniz.");
		    return Dialog_Show(playerid, EnterPlayerID2, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtarý vermek istediðiniz oyuncunun ID'sini girin:", "Ver", "Kapat");
		}
		if(!IsPlayerNearPlayer(playerid, strval(inputtext), 5.0))
		{
		    HataMesajGonder(playerid, "Kiþiye yeterince yakýn deðilsiniz.");
		    return Dialog_Show(playerid, EnterPlayerID2, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtarý vermek istediðiniz oyuncunun ID'sini girin:", "Ver", "Kapat");
		}
		if(Arac_AnahtarVar(strval(inputtext),GetPVarInt(playerid, "GiveKeyCarID")))
		{
		    HataMesajGonder(playerid, "Bu aracýn anahtarý zaten kiþide var.");
		    return Dialog_Show(playerid, EnterPlayerID2, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtarý vermek istediðiniz oyuncunun ID'sini girin:", "Ver", "Kapat");
		}
		new query[250];
		format(query, sizeof(query), "INSERT INTO `anahtarlar` (`playersqlid`, `givesqlid`, `sqlid`, `tip`) VALUES ('%d', '%d', '%d', '2')",PlayerData[strval(inputtext)][pID], PlayerData[playerid][pID], AracInfo[GetPVarInt(playerid, "GiveKeyCarID")][aracID]);
		mysql_query(baglanti, query, false);
		MesajGonder(strval(inputtext), "%s adlý kiþi size %s model aracýn anahtarýný verdi. (/anahtarlarim)", ReturnName(playerid, 0), ReturnVehicleModelName(AracInfo[GetPVarInt(playerid, "GiveKeyCarID")][aracModel]));
		MesajGonder(playerid, "%s adlý kiþiye aracýn anahtarý verildi.",ReturnName(strval(inputtext), 0));
		DeletePVar(playerid, "GiveKeyCarID");
	}
	return 1;
}
stock Arac_AnahtarVar(playerid, carid)
{
	if(AracInfo[carid][aracExists])
	{
	    new query[124];
	    format(query, sizeof(query), "SELECT null FROM `anahtarlar` WHERE `playersqlid` = '%d' AND `sqlid` = '%d' AND `tip` = '2'", PlayerData[playerid][pID], AracInfo[carid][aracID]);
	    new Cache:sawyer = mysql_query(baglanti, query);
	    new rows;
	    cache_get_row_count(rows);
	    cache_delete(sawyer);
	    if(rows) return 1;
	}
	return 0;
}
stock Ev_AnahtarVar(playerid, evid)
{
	if(house_info[evid][evExists])
	{
	    new query[124];
	    format(query, sizeof(query), "SELECT null FROM `anahtarlar` WHERE `playersqlid` = '%d' AND `sqlid` = '%d' AND `tip` = '1'", PlayerData[playerid][pID], house_info[evid][evID]);
	    new Cache:sawyer = mysql_query(baglanti, query);
	    new rows;
	    cache_get_row_count(rows);
	    cache_delete(sawyer);
	    if(rows) return 1;
	}
	return 0;
}
Dialog:Renk1(playerid, response, listitem, inputtext[])
{
	if(!response) return DeletePVar(playerid, "AracSatinAl");
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, Renk1, DIALOG_STYLE_INPUT, "Araç Renk 1", "{FFFFFF}Lütfen aracýn 1. rengini girin:\n\n{FFBF00}[Ýnfo] {FFFFFF}Renk 0-255 arasýnda olmalýdýr.", "Devam", "Iptal");
		if(!IsNumeric(inputtext)) return Dialog_Show(playerid, Renk1, DIALOG_STYLE_INPUT, "Araç Renk 1", "{FFFFFF}Lütfen aracýn 1. rengini girin:\n\n{FFBF00}[Ýnfo] {FFFFFF}Renk 0-255 arasýnda olmalýdýr.", "Devam", "Iptal");
		if(strval(inputtext) < 0 || strval(inputtext) > 255) return Dialog_Show(playerid, Renk1, DIALOG_STYLE_INPUT, "Araç Renk 1", "{FFFFFF}Lütfen aracýn 1. rengini girin:\n\n{FFBF00}[Ýnfo] {FFFFFF}Renk 0-255 arasýnda olmalýdýr.", "Devam", "Iptal");
		SetPVarInt(playerid, "aracrenk1", strval(inputtext));
		Dialog_Show(playerid, Renk2, DIALOG_STYLE_INPUT, "Araç Renk 2", "{FFFFFF}Lütfen aracýn 2. rengini girin:\n\n{FFBF00}[Ýnfo] {FFFFFF}Renk 0-255 arasýnda olmalýdýr.", "Devam", "Iptal");
	}
	return 1;
}
Dialog:Renk2(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    DeletePVar(playerid, "AracSatinAl");
	    DeletePVar(playerid, "aracrenk1");
	}
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, Renk2, DIALOG_STYLE_INPUT, "Araç Renk 2", "{FFFFFF}Lütfen aracýn 2. rengini girin:\n\n{FFBF00}[Ýnfo] {FFFFFF}Renk 0-255 arasýnda olmalýdýr.", "Devam", "Iptal");
		if(!IsNumeric(inputtext)) return Dialog_Show(playerid, Renk2, DIALOG_STYLE_INPUT, "Araç Renk 2", "{FFFFFF}Lütfen aracýn 2. rengini girin:\n\n{FFBF00}[Ýnfo] {FFFFFF}Renk 0-255 arasýnda olmalýdýr.", "Devam", "Iptal");
		if(strval(inputtext) < 0 || strval(inputtext) > 255) return Dialog_Show(playerid, Renk2, DIALOG_STYLE_INPUT, "Araç Renk 2", "{FFFFFF}Lütfen aracýn 2. rengini girin:\n\n{FFBF00}[Ýnfo] {FFFFFF}Renk 0-255 arasýnda olmalýdýr.", "Devam", "Iptal");
		new
			bizid = Business_Inside(playerid),
			carid = GetPVarInt(playerid,"AracSatinAl"),
			price = DealershipCars[bizid][carid][vehPrice];

			if (bizid != -1 && Isyeri[bizid][isyeriExists] && Isyeri[bizid][isyeriTip] == 4)
			{
			    if(PlayerData[playerid][pCash] < price) return HataMesajGonder(playerid,"Yeterli paranýz yok.");
				new maksarac = MAX_OWNABLE_CARS;
		 		switch(PlayerData[playerid][pVip])
				{
    				case 1: maksarac += 2;
				    case 2: maksarac += 4;
				    case 3: maksarac += 6;
				}
				if(Car_GetCount(playerid) >= maksarac) return HataMesajGonder(playerid,"En fazla %d araç sahibi olabilirsin.",maksarac);
				switch(DealershipCars[bizid][carid][vehModel])
				{
				    case 471, 495, 509:
				    {
				        if(PlayerData[playerid][pVip] < 2) return HataMesajGonder(playerid, "Bu aracý satýn alabilmek için Silver VIP ve üstü olmalýsýnýz.");
				    }
					case 502, 503, 494, 434, 504:
					{
					    if(PlayerData[playerid][pVip] < 3) return HataMesajGonder(playerid, "Bu aracý satýn alabilmek için Gold VIP olmalýsýnýz.");
					}
				}
			    new id = Arac_Olustur(PlayerData[playerid][pID],DealershipCars[bizid][carid][vehModel], 0, 0, -1, Isyeri[bizid][isyeriSpawn][0],Isyeri[bizid][isyeriSpawn][1],Isyeri[bizid][isyeriSpawn][2],Isyeri[bizid][isyeriSpawn][3],GetPVarInt(playerid, "aracrenk1"),strval(inputtext),4,0);
			    if(id != -1)
			    {
			        Isyeri[bizid][isyeriKasa] += price;
			        Isyeri_Kaydet(bizid);
			        ParaVer(playerid, -price);
			        MesajGonder(playerid,"Tebrikler, %s miktar para karþýlýðýnda araç satýn aldýnýz. Aracýnýz kapýnýn önüne park edildi.",FormatNumber(price));
		        	Log_Write("logs/arac-log.txt", "[%s] %s adli oyuncu %s model araci %s karsiliginda satin aldi.", ReturnDate(), ReturnName(playerid, 0), ReturnVehicleModelName(DealershipCars[bizid][carid][vehModel]), FormatNumber(price));
			    }
			    DeletePVar(playerid, "AracSatinAl");
			    DeletePVar(playerid, "aracrenk1");
			}

	}
	return 1;
}
stock ProxDetector(Float:radi, playerid, string[], color)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid,x,y,z);
    foreach(new i: Player)
    {
        if(IsPlayerInRangeOfPoint(i,radi,x,y,z))
        {
            SendClientMessage(i,color,string);
        }
    }
}
ProxDetector2(Float:radi, playerid, string[], col1, col2, col3, col4, col5)
{
    new Float:pPositionX[3], Float:oPositionX[3];
    GetPlayerPos(playerid, pPositionX[0], pPositionX[1], pPositionX[2]);
    foreach(Player, i)
    {
        GetPlayerPos(i, oPositionX[0], oPositionX[1], oPositionX[2]);
        if(IsPlayerInRangeOfPoint(i, radi / 16, pPositionX[0], pPositionX[1], pPositionX[2])) { SendClientMessage(i, col1, string); }
        else if(IsPlayerInRangeOfPoint(i, radi / 8, pPositionX[0], pPositionX[1], pPositionX[2])) { SendClientMessage(i, col2, string); }
        else if(IsPlayerInRangeOfPoint(i, radi / 4, pPositionX[0], pPositionX[1], pPositionX[2])) { SendClientMessage(i, col3, string); }
        else if(IsPlayerInRangeOfPoint(i, radi / 2, pPositionX[0], pPositionX[1], pPositionX[2])) { SendClientMessage(i, col4, string); }
        else if(IsPlayerInRangeOfPoint(i, radi, pPositionX[0], pPositionX[1], pPositionX[2])) { SendClientMessage(i, col5, string); }
    }
    return 1;
}
Car_GetCount(playerid)
{
	new
		count = 0;

	for (new i = 0; i != MAX_ARAC; i ++)
	{
		if (AracInfo[i][aracExists] && AracInfo[i][aracSahip] == PlayerData[playerid][pID])
   		{
   		    count++;
		}
	}
	return count;
}
Dialog:AracSil(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new id = -1;
        if((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1)
        {
		    new model = DealershipCars[id][GetPVarInt(playerid,"AracDuzenleID")][vehModel];
		    Isyeri_AracSil(id, model);

			BilgiMesajGonder(playerid, "Galeriden '%s' adlý araç silindi.", ReturnVehicleModelName(model));
			DeletePVar(playerid,"AracDuzenle");
			DeletePVar(playerid,"AracDuzenleID");
		}
	}
	return 1;
}
Isyeri_AracSil(bizid, modelid)
{
	static
	    query[128];
 	for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++) if (DealershipCars[bizid][i][vehModel] == modelid)
	{
		    DealershipCars[bizid][i][vehModel] = 0;
		    DealershipCars[bizid][i][vehPrice] = 0;

		    format(query, sizeof(query), "DELETE FROM `galeriaraclar` WHERE `ID` = '%d' AND `vehID` = '%d'", Isyeri[bizid][isyeriID], DealershipCars[bizid][i][vehID]);
			mysql_query(baglanti, query, false);

			return 1;
	}
	return 0;
}
Dialog:AracFiyatDegistir(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new id = -1;
	    if((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1)
	    {
		    if(isnull(inputtext)) return Dialog_Show(playerid,AracFiyatDegistir,DIALOG_STYLE_INPUT,"{2ECC71}Araç Fiyat Deðiþtir","Lütfen seçtiðiniz araç için yeni bir fiyat girin:","Deðiþtir","Kapat");
		    if(!IsNumeric(inputtext)) return Dialog_Show(playerid,AracFiyatDegistir,DIALOG_STYLE_INPUT,"{2ECC71}Araç Fiyat Deðiþtir","Lütfen seçtiðiniz araç için yeni bir fiyat girin:","Deðiþtir","Kapat");
		    new
	    	string[128];

			DealershipCars[id][GetPVarInt(playerid,"AracDuzenleID")][vehPrice] = strval(inputtext);

			format(string, sizeof(string), "UPDATE `galeriaraclar` SET `vehPrice` = '%d' WHERE `ID` = '%d' AND `vehID` = '%d'", strval(inputtext), Isyeri[id][isyeriID], DealershipCars[id][GetPVarInt(playerid,"AracDuzenleID")][vehID]);
			mysql_query(baglanti,string, false);

			BilgiMesajGonder(playerid,"'%s' model aracýn fiyatý {2ECC71}%s {FFFFFF}olarak deðiþtirildi.",ReturnVehicleModelName(DealershipCars[id][GetPVarInt(playerid,"AracDuzenleID")][vehModel]),FormatNumber(strval(inputtext)));
			DeletePVar(playerid,"AracDuzenle");
			DeletePVar(playerid,"AracDuzenleID");
		}
	}
	return 1;
}
Dialog:KiyafetAl(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    PlayerData[playerid][pSkin] = GetPVarInt(playerid,"AlinanSkin");
   		SetPlayerSkin(playerid, GetPVarInt(playerid,"AlinanSkin"));

		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s adlý kiþi %s ödeyerek bir kiyafet aldý.", ReturnName(playerid, 0), FormatNumber(GetPVarInt(playerid,"KiyafetPrice")));
		DeletePVar(playerid,"AlinanSkin");
		DeletePVar(playerid, "KiyafetPrice");
	}
	if(response)
	{
		HouseSelect(playerid);
	}
	return 1;
}
Dialog:EvSelect(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    PlayerData[playerid][pSkin] = GetPVarInt(playerid,"AlinanSkin");
   		SetPlayerSkin(playerid, GetPVarInt(playerid,"AlinanSkin"));

		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s adlý kiþi %s ödeyerek bir kiyafet aldý.", ReturnName(playerid, 0), FormatNumber(GetPVarInt(playerid,"KiyafetPrice")));
		DeletePVar(playerid,"AlinanSkin");
		DeletePVar(playerid, "KiyafetPrice");
	}
	if(response)
	{
	    new houseid = strval(inputtext);
	    if(house_info[houseid][evExists])
	    {
	        if(EvGetKiyafetCount(houseid) >= 5)
	        {
	            HataMesajGonder(playerid, "Bu evin gardolabýnda boþ yer yok.");
	            HouseSelect(playerid);
			}
			else
			{
			    for(new i; i<5; i++)
			    {
			        if(house_info[houseid][evKiyafetler][i] < 1)
			        {
			            house_info[houseid][evKiyafetler][i] = GetPVarInt(playerid, "AlinanSkin");
			            DeletePVar(playerid, "AlinanSkin");
			            DeletePVar(playerid, "KiyafetPrice");
			            MesajGonder(playerid, "Kiyafet evinize eklendi.");
			            break;
			        }
			    }
			}
	    }
	}
	return 1;
}
stock HouseSelect(playerid)
{
	new str[300], string[100];
	strcat(str, "{FF0000}ID\t{FF0000}Ev Adý\t{FF0000}Kiyafet Sayisi\n");
	for(new i; i<MAX_EV; i++)
	{
	    if(house_info[i][evExists])
	    {
	        if(house_info[i][evSahip] == PlayerData[playerid][pID] || house_info[i][evKiralayan] == PlayerData[playerid][pID])
	        {
	            format(string, sizeof(string), "{FFFFFF}%d\t{FFFFFF}%s\t{FFFFFF}%d/5", i, house_info[i][evIsim], EvGetKiyafetCount(i));
	            strcat(str, string);
	        }
	    }
	}
	Dialog_Show(playerid, EvSelect, DIALOG_STYLE_TABLIST_HEADERS, "Ev Seç", str, "Seç", "Iptal");
	return 1;
}
stock EvGetKiyafetCount(houseid)
{
    if(!house_info[houseid][evExists]) return 1;
	new count = 0;
	for(new i; i<5; i++)
	{
	    if(house_info[houseid][evKiyafetler][i] > 0)
	    {
	        count++;
	    }
	}
	return count;
}
public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
    if(PlayerData[playerid][pMuted] >= gettime())
	{
	    HataMesajGonder(playerid, "Sistem tarafýndan susturulmuþsunuz.");
	    return 0;
	}
    if(GetPVarInt(playerid,"KomutSure") > GetTickCount() && GetPVarInt(playerid,"KomutSayisi") >= 10)
	{
	    SetPVarInt(playerid, "KomutSayisi", 0);
		PlayerData[playerid][pMuted] = gettime()+3;
		BilgiMesajGonder(playerid, "Çok hýzlý komut yazdýðýnýz için sistem tarafýndan 3 saniye susturuldunuz.");
		return 0;
	}
	if(GetPVarInt(playerid, "KomutSure") + 2000 < GetTickCount())
	{
	    SetPVarInt(playerid, "KomutSayisi", 0);
	}
	SetPVarInt(playerid,"KomutSure",GetTickCount() + 1000);
	SetPVarInt(playerid,"KomutSayisi",GetPVarInt(playerid,"KomutSayisi")+1);
	return 1;
}
public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)
{
	if(result == -1)
	{
	    HataMesajGonder(playerid,"Geçersiz komut kullandýnýz, /yardim komutunu inceleyebilirsiniz.");
	}
	if(result == -1) Log_Write("logs/komut.log","%s Komut Kullandi: %s",ReturnName(playerid),cmd);
	return 1;
}
public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	if(response == EDIT_RESPONSE_CANCEL && CCTV_inEditing[playerid])
	{
	    CancelEditCCTV(playerid, CCTV_ID[playerid]);
	}
	if(response == EDIT_RESPONSE_FINAL && CCTV_inEditing[playerid])
	{
	    new id = CCTV_ID[playerid];

		SetObjectPos(objectid, fX, fY, fZ);
		SetObjectRot(objectid, fRotX, fRotY, fRotZ);

		CCTVInfo[id][cctv_X] = fX;
		CCTVInfo[id][cctv_Y] = fY;
		CCTVInfo[id][cctv_Z] = fZ;

		CCTVInfo[id][cctv_rotX] = fRotX;
		CCTVInfo[id][cctv_rotY] = fRotY;
		CCTVInfo[id][cctv_rotZ] = fRotZ;

		SaveCCTV(id);
		CCTV_inEditing[playerid] = 0;
		CCTV_ID[playerid] = -1;
	}
	return 1;
}
public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(response == EDIT_RESPONSE_FINAL)
	{
		if(DuzenleLabel[playerid] == true)
		{
			SetDynamicObjectPos(objectid, x, y, z);
			new labelid = DuzenleLabelID[playerid];
			Label[labelid][Pos][0] = x; Label[labelid][Pos][1] = y; Label[labelid][Pos][2] = z;
			if(IsValidDynamic3DTextLabel(Label[labelid][ID]))
				DestroyDynamic3DTextLabel(Label[labelid][ID]);

			Label[labelid][ID] = CreateDynamic3DTextLabel(Label[labelid][LabelAdi], Label[labelid][Renk], Label[labelid][Pos][0], Label[labelid][Pos][1], Label[labelid][Pos][2], Label[labelid][Mesafe], INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Label[labelid][VW], Label[labelid][Int], -1);
			MesajGonder(playerid, "Labeli düzenledin ID: %d - Label Adý: %s", labelid, Label[labelid][LabelAdi]);
			DuzenleLabelID[playerid] = -1;
			Label[labelid][Duzenleniyor] = 0;
			DuzenleLabel[playerid] = false;
			LabelGuncelle(labelid);
		}

 	}
	if(response == EDIT_RESPONSE_CANCEL)
	{
		if(DuzenleLabel[playerid] == true)
		{
			new labelid = DuzenleLabelID[playerid];
			SetDynamicObjectPos(objectid, Label[labelid][Pos][0], Label[labelid][Pos][1], Label[labelid][Pos][2]);
			MesajGonder(playerid, "Labeli düzenlemekten vazgeitin ID: %d - Label Adý: %s", labelid, Label[labelid][LabelAdi]);
			DuzenleLabelID[playerid] = -1;
			Label[labelid][Duzenleniyor] = 0;
			DuzenleLabel[playerid] = false;
			LabelGuncelle(labelid);
		}
 		return 1;
	}
	if (GetPVarInt(playerid, "GiseGate") != -1)
	{
	    if (response == EDIT_RESPONSE_FINAL)
	    {
	        new id = GetPVarInt(playerid, "GiseGate");

			DestroyDynamicObject(Gise[id][gs_GateObje]);
			DestroyDynamicObject(objectid);

			Gise[id][gs_GateBar][0] = x;
            Gise[id][gs_GateBar][1] = y;
            Gise[id][gs_GateBar][2] = z;

            Gise[id][gs_GateBar][3] = rx;
            Gise[id][gs_GateBar][4] = ry;
            Gise[id][gs_GateBar][5] = rz;

            Gise[id][gs_GateObje] = CreateDynamicObject(966, x, y, z, rx, ry, rz);
			Gise[id][gs_Obje] = CreateDynamicObject(968, x, y, z, 0.0, 0.0, 0.0);

			SetPVarInt(playerid, "GiseKapali", id);

			MesajGonder(playerid, "Þimdi giþenin kapalý halinnin pozisyonunu ayarlayýn.");

			EditDynamicObject(playerid, Gise[id][gs_Obje]);
			SetPVarInt(playerid, "GiseGate", -1);
		}
		return 1;
	}
	if (GetPVarInt(playerid, "GiseKapali") != -1)
	{
		if (response == EDIT_RESPONSE_FINAL)
		{
		    new id = GetPVarInt(playerid, "GiseKapali");

		    DestroyDynamicObject(Gise[id][gs_Obje]);
			DestroyDynamicObject(objectid);

			Gise[id][gs_Kapali][0] = x;
            Gise[id][gs_Kapali][1] = y;
            Gise[id][gs_Kapali][2] = z;

            Gise[id][gs_Kapali][3] = rx;
            Gise[id][gs_Kapali][4] = ry;
            Gise[id][gs_Kapali][5] = rz;

			Gise[id][gs_Obje] = CreateDynamicObject(968, x, y, z, 0.0, 0.0, 0.0);

			SetPVarInt(playerid, "GiseAcik", id);

			MesajGonder(playerid, "Þimdi giþenin açýk halinnin pozisyonunu ayarlayýn.");

			EditDynamicObject(playerid, Gise[id][gs_Obje]);
			SetPVarInt(playerid, "GiseKapali", -1);
		}
		return 1;
	}
	if (GetPVarInt(playerid, "GiseAcik") != -1)
	{
	    if (response == EDIT_RESPONSE_FINAL)
	    {
			new id = GetPVarInt(playerid, "GiseAcik");

		    DestroyDynamicObject(Gise[id][gs_Obje]);
			DestroyDynamicObject(objectid);

			Gise[id][gs_Acik][0] = x;
            Gise[id][gs_Acik][1] = y;
            Gise[id][gs_Acik][2] = z;

            Gise[id][gs_Acik][3] = rx;
            Gise[id][gs_Acik][4] = ry;
            Gise[id][gs_Acik][5] = rz;

			Gise[id][gs_Obje] = CreateDynamicObject(968, Gise[id][gs_Kapali][0], Gise[id][gs_Kapali][1], Gise[id][gs_Kapali][2], Gise[id][gs_Kapali][3], Gise[id][gs_Kapali][4], Gise[id][gs_Kapali][5]);

			MesajGonder(playerid, "Giþenin açýk/kapalý pozisyonlarý ayarlandý.");

            new str[256], Float:ortaKoord[2];

			GetXYInFrontOfToll(Gise[id][gs_GateObje], ortaKoord[0], ortaKoord[1], 3.5);

            format(str, sizeof str, "(%d) [Y tuþu]", Gise[id][gs_ID]);
			Gise[id][gs_id] = CreateDynamic3DTextLabel(str, 0xA5A5A5AA, Gise[id][gs_GateBar][0], Gise[id][gs_GateBar][1], Gise[id][gs_GateBar][2]+0.5, 7.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);

            Gise_Kaydet(id);

			SetPVarInt(playerid, "GiseAcik", -1);
	    }
        return 1;
	}
	if(GetPVarInt(playerid, "TaksiObje") == 1 && response == EDIT_RESPONSE_FINAL && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
     	new
     	Float:fPos[6],
     	Float:temp
		;
        GetVehiclePos(GetPlayerVehicleID(playerid), fPos[0], fPos[1], fPos[2]);
        GetVehicleRotationQuat(GetPlayerVehicleID(playerid), temp, fPos[3], fPos[4], fPos[5]);

        AttachDynamicObjectToVehicle(objectid, GetPlayerVehicleID(playerid), x-fPos[0], y-fPos[1], z-fPos[2], rx, ry, rz);
        DeletePVar(playerid, "TaksiObje");
	}
	if(PlayerData[playerid][pGraffiti] == 1 && GetPVarInt(playerid, "GraffitiEdit") != -1)
	{
	    if(response == EDIT_RESPONSE_FINAL)
	    {
		    new id = GetPVarInt(playerid, "GraffitiEdit");
		    PlayerData[playerid][pGraffiti] = 0;
		    format(PlayerData[playerid][pGraffitiYazi], 64, "");
	        SetPVarInt(playerid, "GraffitiEdit", -1);
		    GraffitiData[id][graffitiPos][0] = x;
		    GraffitiData[id][graffitiPos][1] = y;
		    GraffitiData[id][graffitiPos][2] = z;
		    GraffitiData[id][graffitiPos][3] = rx;
		    GraffitiData[id][graffitiPos][4] = ry;
		    GraffitiData[id][graffitiPos][5] = rz;

		    Graffiti_Refresh(id);
		    Graffiti_Save(id);
		    Streamer_Update(playerid, STREAMER_TYPE_OBJECT);
	    }
	    if(response == EDIT_RESPONSE_CANCEL)
	    {
	        new id = GetPVarInt(playerid, "GraffitiEdit");
	        Graffiti_Delete(id);
	        PlayerData[playerid][pGraffiti] = 0;
	        format(PlayerData[playerid][pGraffitiYazi], 64, "");
	        SetPVarInt(playerid, "GraffitiEdit", -1);
	    }
	}
    if(EditingTreeID[playerid] != -1 && Iter_Contains(Trees, EditingTreeID[playerid]))
	{
	    if(response == EDIT_RESPONSE_FINAL)
	    {
	        new id = EditingTreeID[playerid];
	        TreeData[id][treeX] = x;
	        TreeData[id][treeY] = y;
	        TreeData[id][treeZ] = z;
	        TreeData[id][treeRX] = rx;
	        TreeData[id][treeRY] = ry;
	        TreeData[id][treeRZ] = rz;

	        SetDynamicObjectPos(objectid, TreeData[id][treeX], TreeData[id][treeY], TreeData[id][treeZ]);
	        SetDynamicObjectRot(objectid, TreeData[id][treeRX], TreeData[id][treeRY], TreeData[id][treeRZ]);

			Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, TreeData[id][treeLabel], E_STREAMER_X, TreeData[id][treeX]);
			Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, TreeData[id][treeLabel], E_STREAMER_Y, TreeData[id][treeY]);
			Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, TreeData[id][treeLabel], E_STREAMER_Z, TreeData[id][treeZ] + 1.5);

		    stmt_bind_value(UpdateTree, 0, DB::TYPE_FLOAT, TreeData[id][treeX]);
		    stmt_bind_value(UpdateTree, 1, DB::TYPE_FLOAT, TreeData[id][treeY]);
		    stmt_bind_value(UpdateTree, 2, DB::TYPE_FLOAT, TreeData[id][treeZ]);
		    stmt_bind_value(UpdateTree, 3, DB::TYPE_FLOAT, TreeData[id][treeRX]);
		    stmt_bind_value(UpdateTree, 4, DB::TYPE_FLOAT, TreeData[id][treeRY]);
		    stmt_bind_value(UpdateTree, 5, DB::TYPE_FLOAT, TreeData[id][treeRZ]);
		    stmt_bind_value(UpdateTree, 6, DB::TYPE_INTEGER, id);
			stmt_execute(UpdateTree);

	        EditingTreeID[playerid] = -1;
	    }

	    if(response == EDIT_RESPONSE_CANCEL)
	    {
	        new id = EditingTreeID[playerid];
	        SetDynamicObjectPos(objectid, TreeData[id][treeX], TreeData[id][treeY], TreeData[id][treeZ]);
	        SetDynamicObjectRot(objectid, TreeData[id][treeRX], TreeData[id][treeRY], TreeData[id][treeRZ]);
	        EditingTreeID[playerid] = -1;
	    }
	}
    if (response == EDIT_RESPONSE_FINAL)
    {
        if (PlayerData[playerid][pEditGate] != -1 && GateData[PlayerData[playerid][pEditGate]][gateExists])
        {
            switch (PlayerData[playerid][pEditType])
	        {
	            case 1:
	            {
	                new id = PlayerData[playerid][pEditGate];

	                GateData[PlayerData[playerid][pEditGate]][gatePos][0] = x;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][1] = y;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][2] = z;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][3] = rx;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][4] = ry;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][5] = rz;

	                DestroyDynamicObject(GateData[id][gateObject]);
					GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

					Gate_Save(id);
					PlayerData[playerid][pEditGate] = -1;
					PlayerData[playerid][pEditType] = 0;
                    MesajGonder(playerid, "Gate ID %d pozisyonu düzenlendi.", id);
				}
				case 2:
	            {
	                new id = PlayerData[playerid][pEditGate];

	                GateData[PlayerData[playerid][pEditGate]][gateMove][0] = x;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][1] = y;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][2] = z;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][3] = rx;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][4] = ry;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][5] = rz;

	                DestroyDynamicObject(GateData[id][gateObject]);
					GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

					Gate_Save(id);
					PlayerData[playerid][pEditGate] = -1;
					PlayerData[playerid][pEditType] = 0;
                    MesajGonder(playerid, "Gate ID %d açýlýþ pozisyonu düzenlendi.", id);
				}
			}
        }
        else if (PlayerData[playerid][pEditFurniture] != -1 && Iter_Contains(Mobilyalar[GetPVarInt(playerid, "FurnitureHouse")], PlayerData[playerid][pEditFurniture]))
	    {
	        new id = House_Inside(playerid);

	        if (id != -1)
			{
			    FurnitureData[id][PlayerData[playerid][pEditFurniture]][furniturePos][0] = x;
			    FurnitureData[id][PlayerData[playerid][pEditFurniture]][furniturePos][1] = y;
			    FurnitureData[id][PlayerData[playerid][pEditFurniture]][furniturePos][2] = z;
                FurnitureData[id][PlayerData[playerid][pEditFurniture]][furnitureRot][0] = rx;
                FurnitureData[id][PlayerData[playerid][pEditFurniture]][furnitureRot][1] = ry;
                FurnitureData[id][PlayerData[playerid][pEditFurniture]][furnitureRot][2] = rz;
				Furniture_Save(PlayerData[playerid][pEditFurniture], id);
				SetDynamicObjectPos(objectid, x, y, z);
		        SetDynamicObjectRot(objectid, rx, ry, rz);
				PlayerData[playerid][pEditFurniture] = -1;
				MobilyaMenu(playerid, id);
			}
	    }
	    if(Iter_Contains(ATMs, EditingATMID[playerid]))
		{
		    if(response == EDIT_RESPONSE_FINAL)
		    {
		        new id = EditingATMID[playerid];
		        ATMData[id][atmX] = x;
		        ATMData[id][atmY] = y;
		        ATMData[id][atmZ] = z;
		        ATMData[id][atmRX] = rx;
		        ATMData[id][atmRY] = ry;
		        ATMData[id][atmRZ] = rz;

		        SetDynamicObjectPos(objectid, ATMData[id][atmX], ATMData[id][atmY], ATMData[id][atmZ]);
		        SetDynamicObjectRot(objectid, ATMData[id][atmRX], ATMData[id][atmRY], ATMData[id][atmRZ]);

		        #if defined ATM_USE_MAPICON
				Streamer_SetFloatData(STREAMER_TYPE_MAP_ICON, ATMData[id][atmIconID], E_STREAMER_X, ATMData[id][atmX]);
				Streamer_SetFloatData(STREAMER_TYPE_MAP_ICON, ATMData[id][atmIconID], E_STREAMER_Y, ATMData[id][atmY]);
				Streamer_SetFloatData(STREAMER_TYPE_MAP_ICON, ATMData[id][atmIconID], E_STREAMER_Z, ATMData[id][atmZ]);
				#endif

				Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, ATMData[id][atmLabel], E_STREAMER_X, ATMData[id][atmX]);
				Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, ATMData[id][atmLabel], E_STREAMER_Y, ATMData[id][atmY]);
				Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, ATMData[id][atmLabel], E_STREAMER_Z, ATMData[id][atmZ] + 0.85);

				new query[144];
				mysql_format(baglanti, query, sizeof(query), "UPDATE bank_atms SET PosX='%f', PosY='%f', PosZ='%f', RotX='%f', RotY='%f', RotZ='%f' WHERE ID=%d", x, y, z, rx, ry, rz, id);
				mysql_tquery(baglanti, query);

		        EditingATMID[playerid] = -1;
		    }

		    if(response == EDIT_RESPONSE_CANCEL)
		    {
		        new id = EditingATMID[playerid];
		        SetDynamicObjectPos(objectid, ATMData[id][atmX], ATMData[id][atmY], ATMData[id][atmZ]);
		        SetDynamicObjectRot(objectid, ATMData[id][atmRX], ATMData[id][atmRY], ATMData[id][atmRZ]);
		        EditingATMID[playerid] = -1;
		    }
		}
    }
  if(EditingCopObjectID[playerid] != -1)
	{
	    new id = EditingCopObjectID[playerid];

	    switch(response)
	    {
			case EDIT_RESPONSE_FINAL:
			{
			    CopObjectData[id][ObjX] = x;
				CopObjectData[id][ObjY] = y;
				CopObjectData[id][ObjZ] = z;
				CopObjectData[id][ObjRX] = rx;
				CopObjectData[id][ObjRY] = ry;
				CopObjectData[id][ObjRZ] = rz;
			    SetDynamicObjectPos(objectid, x, y, z);
	            SetDynamicObjectRot(objectid, rx, ry, rz);

	            Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, CopObjectData[id][ObjLabel], E_STREAMER_X, x);
	            Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, CopObjectData[id][ObjLabel], E_STREAMER_Y, y);
	            Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, CopObjectData[id][ObjLabel], E_STREAMER_Z, z + zOffsets[ CopObjectData[id][Type] ]);

	            if(IsValidDynamicArea(CopObjectData[id][ObjArea]))
	            {
	                Streamer_SetFloatData(STREAMER_TYPE_AREA, CopObjectData[id][ObjArea], E_STREAMER_X, x);
		            Streamer_SetFloatData(STREAMER_TYPE_AREA, CopObjectData[id][ObjArea], E_STREAMER_Y, y);
		            Streamer_SetFloatData(STREAMER_TYPE_AREA, CopObjectData[id][ObjArea], E_STREAMER_Z, z + zOffsets[ CopObjectData[id][Type] ]);
	            }
                Streamer_Update(playerid, STREAMER_TYPE_OBJECT);
                Streamer_Update(playerid, STREAMER_TYPE_3D_TEXT_LABEL);
				SaveObjectToDB(id);
			    EditingCopObjectID[playerid] = -1;
			}

	        case EDIT_RESPONSE_CANCEL:
	        {
	            SetDynamicObjectPos(objectid, CopObjectData[id][ObjX], CopObjectData[id][ObjY], CopObjectData[id][ObjZ]);
	            SetDynamicObjectRot(objectid, CopObjectData[id][ObjRX], CopObjectData[id][ObjRY], CopObjectData[id][ObjRZ]);
	            EditingCopObjectID[playerid] = -1;
	            Streamer_Update(playerid, STREAMER_TYPE_OBJECT);
                Streamer_Update(playerid, STREAMER_TYPE_3D_TEXT_LABEL);
	        }
	    }
	}
	return 1;
}
public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
{
   if(PlayerData[playerid][pSelectFurniture] == 1 && PlayerData[playerid][pSelectType] == 4)
    {
        foreach(new i: Mobilyalar[GetPVarInt(playerid, "FurnitureHouse")]) if(FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][i][furnitureObject] == objectid && FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][i][furnitureModel] == modelid)
        {
            PlayerData[playerid][pMateryalDuzenle] = i;
            PlayerData[playerid][pMateryalSlot] = 0;
            CancelEdit(playerid);
            PlayerData[playerid][pSelectFurniture] = 0;
            PlayerData[playerid][pSelectType] = 0;
            Dialog_Show(playerid, Materyal, DIALOG_STYLE_LIST, "Materyal Slotlarý", "{FFFFFF}Materyal Slotu 1\n{FFFFFF}Materyal Slotu 2\n{FFFFFF}Materyal Slotu 3\n{FFFFFF}Materyal Slotu 4\n{FFFFFF}Materyal Slotu 5\n{E74C3C}Tüm Materyal Slotlarýný Temizle", "Seç", "Kapat");
            break;
        }
	}
    if(PlayerData[playerid][pSelectFurniture] == 1 && PlayerData[playerid][pSelectType] == 3)
    {
        foreach(new i: Mobilyalar[GetPVarInt(playerid, "FurnitureHouse")]) if(FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][i][furnitureObject] == objectid && FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][i][furnitureModel] == modelid)
        {
	 		  SetPVarInt(playerid, "MobilyaKopyala", i);
	 		  CancelEdit(playerid);
			  Dialog_Show(playerid, MobilyaKopyala, DIALOG_STYLE_MSGBOX, "Mobilya Kopyala", "{FFFFFF}'%s' adlý mobilyayý {2ECC71}%s {FFFFFF}ödeyerek kopyalamak istiyor musunuz?", "Kopyala", "Iptal", FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][i][furnitureName], FormatNumber(FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][i][furniturePrice]));
			  break;
        }
    }
	if(PlayerData[playerid][pSelectFurniture] == 1 && PlayerData[playerid][pSelectType] == 2)
	{
	    foreach(new i: Mobilyalar[GetPVarInt(playerid, "FurnitureHouse")]) if(FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][i][furnitureObject] == objectid && FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][i][furnitureModel] == modelid)
	    {
	        SetPVarInt(playerid,"mobilyaid",i);
	        CancelEdit(playerid);
	        new str[150];
	        new fiyat = floatround(FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][i][furniturePrice]/2);
	        format(str,sizeof(str),"{FFFFFF}Seçtiðiniz {2ECC71}'%s' {FFFFFF}adlý mobilyayý {2ECC71}%s {FFFFFF}fiyatýna satmak istediðinize emin misiniz?",FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][i][furnitureName],FormatNumber(fiyat));
	        ShowPlayerDialog(playerid,45,DIALOG_STYLE_MSGBOX,"Mobilya Sat",str,"Evet","Hayýr");
	        break;
	    }
	}
	if(PlayerData[playerid][pSelectFurniture] == 1 && PlayerData[playerid][pSelectType] == 1)
	{
	    foreach(new i: Mobilyalar[GetPVarInt(playerid, "FurnitureHouse")]) if(FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][i][furnitureObject] == objectid && FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][i][furnitureModel] == modelid)
	    {
	        PlayerData[playerid][pEditFurniture] = i;
	        CancelEdit(playerid);
	        PlayerData[playerid][pSelectFurniture] = 0;
	        PlayerData[playerid][pSelectType] = 0;
	        EditDynamicObject(playerid,FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][i][furnitureObject]);
	        break;
	    }
	}
	return 1;
}
public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
    if(GetPVarInt(playerid, "davet") == 1)
    {
        new id = clickedplayerid;
        if(!OyundaDegil(id)) return 1;
        if(PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid,"Bir birlik üyesi deðilsiniz.");
        if(id == playerid) return HataMesajGonder(playerid,"Kendini birliðe davet edemezsin.");
        if(PlayerData[playerid][pFactionRutbe] != Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler] && Birlikler[PlayerData[playerid][pFaction]][birlikYetkilendirme][0] > PlayerData[playerid][pFactionRutbe]) return HataMesajGonder(playerid, "Bu iþlemi gerçekleþtirmek için yetkiniz yok.");
        if(PlayerData[playerid][pFaction] == PlayerData[id][pFaction] || PlayerData[id][pFaction] != -1) return HataMesajGonder(playerid,"Bu oyuncunun zaten birliði var.");
        PlayerData[id][pFactionDavet] = PlayerData[playerid][pFaction];
        PlayerData[id][pFactionDavetEden] = playerid;
        Dialog_Show(id,BirlikDaveti,DIALOG_STYLE_MSGBOX,"{72C425}Birlik Daveti","{FFFFFF}%s adlý kiþi, seni \"%s\" adlý birliðe davet ediyor. Kabul ediyor musun?","Evet","Hayýr",ReturnName(playerid,0),Birlik_GetName(playerid));
        BilgiMesajGonder(playerid,"%s adlý oyuncuyu birliðinize katýlmasý için davet yolladýnýz. Yanýtýný bekleyin.",ReturnName(id,0));
        DeletePVar(playerid,"davet");
    }
	return 1;
}
public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    if (IsPlayerInsideTaxi(playerid))
    {
        new driverid = GetVehicleDriver(GetPlayerVehicleID(playerid));
        SetPlayerCheckpoint(driverid, fX, fY, fZ, 5.0);
        MesajGonder(driverid, "%s yol tarifinde bulundu, haritadan belirtilen noktaya git.", ReturnName(playerid, 0));
        MesajGonder(playerid, "%s adlý þöföre yol tarifi iletildi, bekleyiniz.", ReturnName(driverid, 0));
        SetPVarInt(driverid, "AracBuluyor", 1);
        SetPVarInt(playerid, "AracBuluyor", 1);
        return 1;
    }
    if(PlayerData[playerid][pAdminDuty] == 1 && PlayerData[playerid][pAdmin] > 0)
    {
        SetPlayerPosFindZ(playerid, fX, fY, fZ);
    }
    return 1;
}
CMD:me(playerid, params[])
{
    if(PlayerData[playerid][pCCTV] != -1) return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýn.");
	if(GetPVarInt(playerid,"Logged") == 0) return HataMesajGonder(playerid,"Þu an komut kullanamazsýn.");
	if (isnull(params))
	    return BilgiMesajGonder(playerid, "/me [Emote]");

	new action[256];
    strdel(action, 0, 256);
	strcat(action, params);
    if(strfind(action, "\"", true, 1) != -1)
	{
			new ilkdenden = strfind(action, "\"", true, 1);
			new sonrakidenden = strfind(action, "\"", true, ilkdenden+1);
			strins(action, "{FFFFFF}", ilkdenden);
			strins(action, "{C2A2DA}", sonrakidenden+9);
	}
	Log_Write("logs/emote.log","%s %s",ReturnName(playerid, 0), trcar(action));
	if (strlen(action) > 120)
	{
 	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %.120s", ReturnName(playerid, 0), action); // ciyan
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "...%s", action[120]);
	}
	else
	{
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s", ReturnName(playerid, 0), action);
	}
	return 1;
}
CMD:do(playerid, params[])
{
    if(PlayerData[playerid][pCCTV] != -1) return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýn.");
    if(GetPVarInt(playerid,"Logged") == 0) return HataMesajGonder(playerid,"Þu an komut kullanamazsýn.");
	if (isnull(params))
	    return BilgiMesajGonder(playerid, "/do [Durum]");
    Log_Write("logs/emote.log","%s (( %s ))",trcar(params),ReturnName(playerid, 0));
	if (strlen(params) > 120) {
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %.120s", params);
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "...%s (( %s ))", params[120], ReturnName(playerid, 0));
	}
	else {
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s (( %s ))", params, ReturnName(playerid, 0));
	}
	return 1;
}
CMD:dene(playerid, params[])
{
    if(PlayerData[playerid][pCCTV] != -1) return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýn.");
	new gelensayi = RandomEx(1, 3), str[24];

	if(gelensayi == 1) format(str, sizeof(str), "{2E8B57}Baþarýlý");
	else if(gelensayi == 2) format(str, sizeof(str), "{8B0000} Baþarýsýz");
	SendNearbyMessage(playerid, 30.0, COLOR_YELLOW, "* %s. {FFFF00}(( %s ))", str, ReturnName(playerid, 0));
	return 1;
}
CMD:ame(playerid, params[])
{
    static
        string[128];
    if(PlayerData[playerid][pCCTV] != -1) return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýn.");
    if (isnull(params))
        return BilgiMesajGonder(playerid, "/ame [Hareket]");

    format(string, sizeof(string), "* %s %s", ReturnName(playerid, 0), params);
    SetPlayerChatBubble(playerid, string, COLOR_CYAN, 30.0, 10000);

    SendClientMessageEx(playerid, COLOR_CYAN, "* %s %s", ReturnName(playerid, 0), params);
    return 1;
}

CMD:ado(playerid, params[])
{
    static
        string[128];
    if(PlayerData[playerid][pCCTV] != -1) return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýn.");
    if (isnull(params))
        return BilgiMesajGonder(playerid, "/ado [Durum]");

    format(string, sizeof(string), "* %s (( %s ))", params, ReturnName(playerid, 0));
    SetPlayerChatBubble(playerid, string, COLOR_GREEN, 30.0, 10000);

    SendClientMessageEx(playerid, COLOR_GREEN, "* %s (( %s ))", params, ReturnName(playerid, 0));
    return 1;
}
CMD:s(playerid, params[])
{
    if(GetPVarInt(playerid,"Logged") == 0) return HataMesajGonder(playerid,"Þu an komut kullanamazsýn.");
    if(PlayerData[playerid][pCCTV] != -1) return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýn.");
	if (isnull(params))
	    return BilgiMesajGonder(playerid, "/s [Baðýrma]");
    Log_Write("logs/chat.log","%s Bagirir: %s",ReturnName(playerid, 0), trcar(params));
	if (strlen(params) > 64) {
	    SendNearbyMessage(playerid, 30.0, COLOR_WHITE, "%s baðýrýr: %.64s", ReturnName(playerid, 0), params);
	    SendNearbyMessage(playerid, 30.0, COLOR_WHITE, "...%s!", params[64]);

	}
	else {
	    SendNearbyMessage(playerid, 30.0, COLOR_WHITE, "%s baðýrýr: %s!", ReturnName(playerid, 0), params);
	}

	static id = -1;
	if((id = House_Nearest(playerid)) != -1)
 	{
		foreach(new i:Player) if(House_Inside(i) == id)
		{
		    SendClientMessageEx(i, -1, "{FFFFFF}[Dýþardaki Ses] %s baðýrýr: %s!", ReturnName(playerid, 0), params);
		}
	}
	return 1;
}

CMD:c(playerid, params[])
{

    if(GetPVarInt(playerid,"Logged") == 0) return HataMesajGonder(playerid,"Þu an komut kullanamazsýn.");
    if(PlayerData[playerid][pCCTV] != -1) return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýn.");
	if (isnull(params))
	    return BilgiMesajGonder(playerid, "/c [Kýsýk Ses]");
 	Log_Write("logs/chat.log","%s Sessizce: %s",ReturnName(playerid, 0), trcar(params));
	if (strlen(params) > 64) {
	    SendNearbyMessage(playerid, 5.0, COLOR_WHITE, "[Kýsýk Sesle] %s söyler: %.64s", ReturnName(playerid, 0), params);
	    SendNearbyMessage(playerid, 5.0, COLOR_WHITE, "...%s", params[64]);
	}
	else {
	    SendNearbyMessage(playerid, 5.0, COLOR_WHITE, "[Kýsýk Sesle] %s söyler: %s", ReturnName(playerid, 0), params);
	}
	return 1;
}
CMD:b(playerid, params[])
{
    if(GetPVarInt(playerid,"Logged") == 0) return HataMesajGonder(playerid,"Þu an komut kullanamazsýn.");
    if(PlayerData[playerid][pCCTV] != -1) return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýn.");
	if (isnull(params))
	    return BilgiMesajGonder(playerid, "/b [Mesaj]");
 	Log_Write("logs/chat.log","OOC: %s: %s",ReturnName(playerid, 0), trcar(params));
	if (strlen(params) > 64)
	{
		if(PlayerData[playerid][pAdminDuty] == 1 && PlayerData[playerid][pAdmin] >= 1)
		{
		    SendNearbyMessageEx(playerid, 20.0, COLOR_WHITE, "{FF0000}%s: {FFFFFF}(( %.64s", PlayerData[playerid][pAdminName], params);
		    SendNearbyMessageEx(playerid, 20.0, COLOR_WHITE, "...%s ))", params[64]);
	    }
        else if(PlayerData[playerid][pHelperDuty] == 1 && PlayerData[playerid][pHelper] >= 1)
	    {
	        SendNearbyMessageEx(playerid, 20.0, COLOR_WHITE, "{e4b400}%s: {FFFFFF}(( %.64s", PlayerData[playerid][pAdminName], params);
		    SendNearbyMessageEx(playerid, 20.0, COLOR_WHITE, "...%s ))", params[64]);
	    }
	    else
		{
		    if(PlayerData[playerid][pMaske] == false)
		    {
			    SendNearbyMessageEx(playerid, 20.0, COLOR_WHITE, "%s [%d]: (( %.64s", ReturnName(playerid, 0), playerid, params);
			    SendNearbyMessageEx(playerid, 20.0, COLOR_WHITE, "...%s ))", params[64]);
		    }
		    else
		    {
		        SendNearbyMessageEx(playerid, 20.0, COLOR_WHITE, "%s: (( %.64s", ReturnName(playerid, 0), params);
			    SendNearbyMessageEx(playerid, 20.0, COLOR_WHITE, "...%s ))", params[64]);
		    }
		}
	}
	else
	{
	    if(PlayerData[playerid][pAdminDuty] == 1 && PlayerData[playerid][pAdmin] >= 1)
	    {
	    	SendNearbyMessageEx(playerid, 20.0, COLOR_WHITE, "{FF0000}%s: {FFFFFF}(( %s ))", PlayerData[playerid][pAdminName], params);
	    }
	    else if(PlayerData[playerid][pHelperDuty] == 1 && PlayerData[playerid][pHelper] >= 1)
	    {
	    	SendNearbyMessageEx(playerid, 20.0, COLOR_WHITE, "{e4b400}%s: {FFFFFF}(( %s ))", PlayerData[playerid][pAdminName], params);
	    }
	    else
	    {
            if(PlayerData[playerid][pMaske] == false) SendNearbyMessageEx(playerid, 20.0, COLOR_WHITE, "%s [%d]: (( %s ))", ReturnName(playerid, 0), playerid, params);
            else SendNearbyMessageEx(playerid, 20.0, COLOR_WHITE, "%s: (( %s ))", ReturnName(playerid, 0), params);
	    }
	}
	return 1;
}
CMD:w(playerid, params[])
{
    if(GetPVarInt(playerid,"Logged") == 0) return HataMesajGonder(playerid,"Þu an komut kullanamazsýn.");
    if(PlayerData[playerid][pCCTV] != -1) return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýn.");
	new userid, text[128];

    if (sscanf(params, "us[128]", userid, text))
	    return BilgiMesajGonder(playerid, "/(w)hisper [ID/Isim] [Mesaj]");

	if (!OyundaDegil(userid) || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return HataMesajGonder(playerid, "Oyuncu oyunda deðil veya oyuncuya yakýn deðilsin.");

	if (userid == playerid)
		return HataMesajGonder(playerid, "Kendine fýsýldayamazsýn.");

	if(GetPlayerState(userid) == PLAYER_STATE_SPECTATING)
	    return HataMesajGonder(playerid, "Oyuncu oyunda deðil veya oyuncuya yakýn deðilsin.");

    if (strlen(text) > 64) {
        if(PlayerData[playerid][pMaske] == false)
        {
		    SendClientMessageEx(userid, COLOR_YELLOW, "** %s fýsýldadý (%d): %.64s", ReturnName(playerid, 0), playerid, text);
		    SendClientMessageEx(userid, COLOR_YELLOW, "...%s **", text[64]);
			if(PlayerData[userid][pMaske] == false)
			{
			    SendClientMessageEx(playerid, COLOR_YELLOW, "** %s'a fýsýldadýn (%d): %.64s", ReturnName(userid, 0), userid, text);
			    SendClientMessageEx(playerid, COLOR_YELLOW, "...%s **", text[64]);
		    }
		    else
		    {
		        SendClientMessageEx(playerid, COLOR_YELLOW, "** %s'a fýsýldadýn: %.64s", ReturnName(userid, 0), text);
			    SendClientMessageEx(playerid, COLOR_YELLOW, "...%s **", text[64]);
		    }
	    }
	    else
	    {
            SendClientMessageEx(userid, COLOR_YELLOW, "** %s fýsýldadý: %.64s", ReturnName(playerid, 0), text);
		    SendClientMessageEx(userid, COLOR_YELLOW, "...%s **", text[64]);

		    if(PlayerData[userid][pMaske] == false)
			{
			    SendClientMessageEx(playerid, COLOR_YELLOW, "** %s'a fýsýldadýn (%d): %.64s", ReturnName(userid, 0), userid, text);
			    SendClientMessageEx(playerid, COLOR_YELLOW, "...%s **", text[64]);
		    }
		    else
		    {
		        SendClientMessageEx(playerid, COLOR_YELLOW, "** %s'a fýsýldadýn: %.64s", ReturnName(userid, 0), text);
			    SendClientMessageEx(playerid, COLOR_YELLOW, "...%s **", text[64]);
		    }
	    }
	}
	else {
	    if(PlayerData[playerid][pMaske] == false)
	    {
	    	SendClientMessageEx(userid, COLOR_YELLOW, "** %s fýsýldadý (%d): %s **", ReturnName(playerid, 0), playerid, text);
	    	SendClientMessageEx(playerid, COLOR_YELLOW, "** %s'a fýsýldadýn (%d): %s **", ReturnName(userid, 0), userid, text);
	    }
	    else
	    {
	        SendClientMessageEx(userid, COLOR_YELLOW, "** %s fýsýldadý: %s **", ReturnName(playerid, 0), text);
	    	SendClientMessageEx(playerid, COLOR_YELLOW, "** %s'a fýsýldadýn: %s **", ReturnName(userid, 0), text);
	    }
	}
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s, %s'ýn kulaðýna yaklaþýr ve fýsýldar.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}
CMD:pm(playerid, params[])
{
	static
	    userid,
	    text[128];

	if (sscanf(params, "us[128]", userid, text))
	    return BilgiMesajGonder(playerid, "/pm [ID/Isim] [mesaj]");

	if(PlayerData[playerid][pAyarlar][1] == 1)
	    return HataMesajGonder(playerid, "PM alýmlarýný açmalýsýnýz. (/ayarlar)");

	if (!OyundaDegil(userid))
	    return HataMesajGonder(playerid, "Oyuncu oyunda deðil !");

	if (userid == playerid)
	    return HataMesajGonder(playerid, "Kendine özel mesaj yollayamazsýn.");

    if(PlayerData[userid][pAyarlar][1] == 1)
	    return HataMesajGonder(playerid, "Bu kiþi özel mesaj alýmlarýný kapatmýþ.");

	if(IsPlayerPause(userid)) BilgiMesajGonder(playerid, "Bu oyuncu AFK, mesajýnýza yanýt veremeyebilir.");
	ShowTextDrawMessage(playerid, "~y~PM kutuna yeni mesaj geldi!", TEXTDRAW_TYPE_MSG, 3000);
	PlayerPlaySound(userid, 1085, 0.0, 0.0, 0.0);
	SendClientMessageEx(userid, COLOR_YELLOW, "[PM] «« %s (%d): %s", ReturnName(playerid, 0), playerid, text);
	SendClientMessageEx(playerid, 0xdede02FF, "[PM] »» %s (%d): %s", ReturnName(userid, 0), userid, text);

	Log_Write("logs/pm-log.txt","[%s] %s >>> %s Mesaj: %s",ReturnDate(),ReturnName(playerid),ReturnName(userid),trcar(text));
	return 1;
}
CMD:apm(playerid, params[])
{
    static
	    userid,
	    text[128];
	if(PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
	if (sscanf(params, "us[128]", userid, text))
	    return BilgiMesajGonder(playerid, "/apm [ID/Isim] [mesaj]");

	if (!OyundaDegil(userid))
	    return HataMesajGonder(playerid, "Oyuncu oyunda deðil !");

	if (userid == playerid)
	    return HataMesajGonder(playerid, "Kendine özel mesaj yollayamazsýn.");

	if(IsPlayerPause(userid)) BilgiMesajGonder(playerid, "Bu oyuncu AFK, mesajýnýza yanýt veremeyebilir.");
 	ShowTextDrawMessage(userid, "~y~PM kutuna yeni mesaj geldi!", TEXTDRAW_TYPE_MSG, 3000);
	PlayerPlaySound(userid, 1085, 0.0, 0.0, 0.0);
	SendClientMessageEx(userid, COLOR_YELLOW, "[STAFF] «« %s: %s", PlayerData[playerid][pAdminName], text);
	SendClientMessageEx(playerid, 0xdede02FF, "[STAFF] »» %s (%d): %s", ReturnName(userid, 0), userid, text);

	return 1;
}
CMD:motor(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
    new id = Car_GetID(vehicleid);
    if(!IsEngineVehicle(vehicleid)) return HataMesajGonder(playerid,"Bu komutu sadece araçta kullanabilirsin.");
   	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid,"Sürücü deðilsin.");
   	if(AracInfo[id][aracBenzin] < 0.1) return HataMesajGonder(playerid,"Bu aracýn yakýtý bitmiþ.");
   	if(AracHasar(vehicleid) <= 300) return HataMesajGonder(playerid,"Bu araca çok fazla hasar verilmiþ, motor çalýþmýyor.");
   	if(UsingPumpID[playerid] != -1) return HataMesajGonder(playerid, "Þu an motoru çalýþtýramazsýnýz!");
   	if (Car_IsOwner(playerid, id) || Car_Birlik(playerid, id) ||  AracInfo[id][aracTip] == 2 || AracInfo[id][aracKiralayan] == PlayerData[playerid][pID] || Arac_AnahtarVar(playerid, id) || (PlayerData[playerid][pFaction] != -1 && GetFactionType(playerid) != BIRLIK_CETE && GetFactionType(playerid) != BIRLIK_MAFYA && GetFactionType(playerid) != BIRLIK_LEGAL && AracInfo[id][aracFactionType] == GetFactionType(playerid))
   	|| (AracInfo[id][aracTip] == 5 && PlayerData[playerid][pVip] > 0))
   	{
   	    switch (GetEngineStatus(vehicleid))
   	    {
   	        case false:
   	        {
   	            if(!spamProtect(playerid, "motor", 2))  return HataMesajGonder(playerid, "Bu komutu 2 saniyede bir kullanabilirsiniz.");
   	            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s anahtarý aracýn kontaðýna sokar ve çevirerek çalýþmasýný bekler.", ReturnName(playerid, 0));
   	            SetTimerEx("MotorCalistir", floatround(AracInfo[id][aracKM]*3), false, "ud", playerid, vehicleid);
				SetTimerEx("TextdrawAc", 200, false, "i", playerid);
				CreateTextdrawAnimation(playerid, Textdraw1[playerid], 25, "~g~", "\
		 		Motor Calistirildi");
			}
   	        case true:
   	        {
            	SetEngineStatus(vehicleid, false);
				SetTimerEx("TextdrawAc", 200, false, "i", playerid);
				CreateTextdrawAnimation(playerid, Textdraw1[playerid], 25, "~r~", "\
		 		Motor Kapatildi");
				SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s aracýn anahtarýný çevirerek motoru kapatýr.", ReturnName(playerid, 0));

   	        }
   	    }
   	}
   	else
   	{
   	    HataMesajGonder(playerid,"Bu aracýn anahtarý sizde bulunmuyor.");
   	}
	return 1;
}

CMD:bot(playerid,params[])
{
    new name[MAX_PLAYER_NAME],msg[128];
    GetPlayerName(playerid, name,sizeof(name));
    format(msg, sizeof(msg),"%s: %s",name,params);
    SendClientMessageToAll(-1,msg);
    replacespace(params);
    printf("[DEBUG]params after replacing space is %s",params);
    new inputtext[170];
    format(inputtext,sizeof(inputtext),"localhost:5000/respond/%d/",playerid);
    strcat(inputtext, params);
    HTTP(playerid, HTTP_GET, inputtext,"", "AskBot");
    return 1;
}

replacespace(str[])
{
	new i=-1;
	while(str[++i])
		if(str[i]==' ')
			str[i]='+';
}

CMD:afarlar(playerid)
{


    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return HataMesajGonder(playerid, "Sürücü deðilsin.");


	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsEngineVehicle(vehicleid))
		return HataMesajGonder(playerid, "Bu aracýn farlarý yok.");

	switch (GetLightStatus(vehicleid))
	{
	    case false:
	    {
	        SetLightStatus(vehicleid, true);
	        MesajGonder(playerid,"Aracýn farlarý açýldý.");
	       	SetTimerEx("TextdrawAc", 200, false, "i", playerid);
			CreateTextdrawAnimation(playerid, Textdraw1[playerid], 25, "~g~", "\
 			Farlar Acildi");
		}
		case true:
		{
		    SetLightStatus(vehicleid, false);
		    MesajGonder(playerid,"Aracýn farlarý kapatýldý.");
			SetTimerEx("TextdrawAc", 200, false, "i", playerid);
			CreateTextdrawAnimation(playerid, Textdraw1[playerid], 25, "~r~", "\
 			Farlar Kapatildi");
		}
	}
	return 1;
}

CMD:kaput(playerid)
{
	if(IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid,"Araçta bu komutu kullanamazsýn.");
	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && IsPlayerNearHood(playerid, i))
	{
	    if (!IsDoorVehicle(i))
	        return HataMesajGonder(playerid, "Bu aracýn kaputu yok.");

	    if (!GetHoodStatus(i))
		{
	        SetHoodStatus(i, true);

	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s elini kaputun altýna sokar ve mandalý çekerek kaputu açar.", ReturnName(playerid, 0));
		}
		else
		{
			SetHoodStatus(i, false);

	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s elini kaputun üzerine koyar ve kaputu kapatýr. ", ReturnName(playerid, 0));
		}
	    return 1;
	}
	HataMesajGonder(playerid, "Kaputunu açabileceðin araca yakýn deðilsin.");
	return 1;
}

CMD:acamlar(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araçta olmalýsýnýz.");
	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsWindowedVehicle(vehicleid))
		return HataMesajGonder(playerid, "Bu aracýn camý yok!");
	new carid = Car_GetID(vehicleid);
	switch (AracInfo[carid][aracCamlar])
	{
	    case true:
	    {
         	AracInfo[carid][aracCamlar] = false;
	        SetVehicleParamsCarWindows(vehicleid, 1, 1, 1, 1);
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s aracýn cam kapatma düðmesine basar ve camý kapatýr.", ReturnName(playerid, 0));
		}
		case false:
		{
		    AracInfo[carid][aracCamlar] = true;
		    SetVehicleParamsCarWindows(vehicleid, 0, 0, 0, 0);
		    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s aracýn cam açma düðmesine basar ve camý açar.", ReturnName(playerid, 0));
		}
	}
	return 1;
}
CMD:bagaj(playerid)
{
	new
	    id = -1;

	if ((id = Car_Nearest(playerid)) != -1)
	{
	    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 		return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	    if (IsVehicleImpounded(AracInfo[id][aracVehicle]))
	        return HataMesajGonder(playerid, "Bu araç baðlanmýþ.");

	    /*if(Arac_VergiGecikmismi(GetPlayerVehicleID(playerid)))
			return SendErrorMessage(playerid, "Bu aracýn vergi ödemesi gecikmiþ, o yüzden kullanamazsýnýz.");*/

	    if (IsPlayerInAnyVehicle(playerid))
	        return HataMesajGonder(playerid, "Önce araçtan inmen gereklidir.");

		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
		    return HataMesajGonder(playerid, "Bu komutu sadece ayakta kullanabilirsiniz.");

		if(PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Bunu þu an yapamazsýnýz.");
		if(!IsPlayerNearBoot(playerid, AracInfo[id][aracVehicle])) return HataMesajGonder(playerid, "Herhangi bir aracýn bagajýna yakýn deðilsiniz.");

		if (!IsDoorVehicle(AracInfo[id][aracVehicle]))
		    return HataMesajGonder(playerid, "Bu aracýn bagajý yok.");

		if (AracInfo[id][aracKilit])
		    return HataMesajGonder(playerid, "Bu araç kilitli.");

		if((GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_FBI) && (AracInfo[id][aracFactionType] == BIRLIK_LSPD || AracInfo[id][aracFactionType] == BIRLIK_FBI))
  		{
       		Car_LSPDTrunk(playerid, AracInfo[id][aracVehicle]);
       		return 1;
       	}
		if( Car_IsOwner(playerid, id) && (GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_FBI)) return HataMesajGonder(playerid, "Polisler bagaj özelliðini kullanamaz.");
	 	else if(Car_IsOwner(playerid, id) || ( !Car_IsOwner(playerid, id) && GetFactionType(playerid) == BIRLIK_LSPD))
	 	{
	 	    SetPVarInt(playerid, "AracBagaj", id);
	 	    Dialog_Show(playerid, Bagaj, DIALOG_STYLE_LIST, "Bagaj", "{FFFFFF}Uyuþturucular\n{FFFFFF}Silahlar", "Seç", "Kapat");
	 	}
	 	else HataMesajGonder(playerid, "Bu aracýn sahibi deðilsin.");
	}
	else HataMesajGonder(playerid, "Herhangi bir aracýn bagajýna yakýn deðilsiniz.");
	return 1;
}
CMD:arackirala(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
    new id = Car_GetID(vehicleid);
    if(!OyundaDegil(playerid)) return 1;
    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid,"Kiralýk araçta deðilsin.");
    if(AracInfo[id][aracKira] < 1) return HataMesajGonder(playerid,"Bu araç kiralýk deðil.");
    if(AracInfo[id][aracKiralayan] != -1) return HataMesajGonder(playerid,"Bu araç baþkasý tarafýndan kiralanmýþ.");
	if(AracKiraladi(playerid)) return HataMesajGonder(playerid, "Zaten kiraladýðýnýz araç var.");
    if(AracInfo[id][aracKira] > PlayerData[playerid][pCash]) return HataMesajGonder(playerid,"Yeterli paranýz yok.");
    AracInfo[id][aracKiralayan] = PlayerData[playerid][pID];
    AracInfo[id][aracKiraZaman] = 60;
    ParaVer(playerid,-AracInfo[id][aracKira]);
    MesajGonder(playerid,"Araç 1 saatliðine kiralandý.");
	return 1;
}
CMD:kapi(playerid)
{
    new id = Gate_Nearest(playerid);
    if(id != -1)
    {
            if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 			return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
            if(GateData[id][gateFaction] != -1 && PlayerData[playerid][pFaction] != GetFactionByID(GateData[id][gateFaction])) return HataMesajGonder(playerid,"Bu kapýyý açamazsýn.");
	        if (strlen(GateData[id][gatePass]))
	        {
	            ShowPlayerDialog(playerid,30,DIALOG_STYLE_INPUT,"{FFFFFF}Gate Þifre","Bu gate için þifre belirlenmiþ, lütfen þifreyi giriniz:","Aç","Kapat");
	        }
	        else
	        {
	            Gate_Operate(id);
	        }
    }
	return 1;
}
CMD:satinal(playerid)
{
    static
		id = -1;
    if(!OyundaDegil(playerid)) return 1;
	if ((id = House_Nearest(playerid)) != -1)
	{
	    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 		return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	    new maksev = 4;
	    switch(PlayerData[playerid][pVip])
	    {
	        case 1: maksev += 2;
	        case 2: maksev += 4;
	        case 3: maksev += 6;
	    }
	    if(Ev_GetCount(playerid) >= maksev) return HataMesajGonder(playerid,"En fazla %d eviniz olabilir.", maksev);
	    if(house_info[id][evSahip] != -1 && house_info[id][evSatilik] == 0) return HataMesajGonder(playerid,"Bu evin zaten sahibi var.");
	    if(house_info[id][evSahip] == PlayerData[playerid][pID]) return HataMesajGonder(playerid,"Bu evin sahibi sensin.");
	    if(PlayerData[playerid][pCash] < house_info[id][evFiyat]) return HataMesajGonder(playerid,"Yeterli paranýz yok.");
	    if(house_info[id][evSahip] != -1)
	    {
	        if(GetPlayerIDWithSQLID(house_info[id][evSahip]) != -1)
	        {
	            new pid = GetPlayerIDWithSQLID(house_info[id][evSahip]);
	            ParaVer(pid,house_info[id][evFiyat]);
	            MesajGonder(pid,"%s adlý kiþi evinizi {2ECC71}%s {FFFFFF}karþýlýðýnda satýn aldý.",ReturnName(playerid,0),FormatNumber(house_info[id][evFiyat]));
	        }
	        else
	        {
                new str[100];
	            format(str,sizeof(str),"%s adlý kiþi evinizi %s karþýlýðýnda satýn aldý.",ReturnName(playerid,0),FormatNumber(house_info[id][evFiyat]));
	            BildirimEkle(house_info[id][evSahip],str,"Sistem");
	            OfflineParaVer(house_info[id][evSahip],house_info[id][evFiyat]);
	        }
	    }
	    if(Ev_GetKeyCount(id) > 0)
		{
		    new query[100];
			format(query, sizeof(query), "DELETE FROM `anahtarlar` WHERE `sqlid` = '%d' AND `tip` = '1'",house_info[id][evID]);
			mysql_query(baglanti, query, false);
		}
	    house_info[id][evSahip] = PlayerData[playerid][pID];
	    house_info[id][evSatilik] = 0;
	    house_info[id][evKiralik] = 0;
	    house_info[id][evKiralayan] = -1;
	    house_info[id][evKiraUcret] = 0;
	    house_info[id][MobilyaYetki] = -1;
	    Ev_Yenile(id);
	    Ev_Kaydet(id);
	    house_info[id][evCash] = 0;
	    house_info[id][evUyusturucu] = 0;
	    for (new i = 0; i != 10; i++)
		{
		    if(i < 5)
		    {
		        house_info[id][evKiyafetler][i] = -1;
		    }
		    house_info[id][evSilahlar][i] = 0;
		    house_info[id][evMermiler][i] = 0;
		}
		ParaVer(playerid,-house_info[id][evFiyat]);
		MesajGonder(playerid,"Bu evi {2ECC71}%s {FFFFFF}karþýlýðýnda satýn aldýnýz.",FormatNumber(house_info[id][evFiyat]));
		Log_Write("logs/evlog.txt","%s(%d) Adli oyuncu %d ID'li evi %d karsiliginda satin aldi.",ReturnName(playerid),playerid,house_info[id][evID],house_info[id][evFiyat]);
		house_info[id][evFiyat] = house_info[id][evKendiFiyati];
	}
	else if ((id = Business_Nearest(playerid)) != -1)
	{
	    if(PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Bunu þu an yapamazsýnýz.");
	    new maksisyeri = 3;
	    switch(PlayerData[playerid][pVip])
	    {
	        case 1: maksisyeri += 2;
	        case 2: maksisyeri += 4;
	        case 3: maksisyeri += 6;
	    }
	    if(Isyeri_GetCount(playerid) >= maksisyeri) return HataMesajGonder(playerid,"En fazla %d iþyeriniz olabilir.", maksisyeri);
	    if((Isyeri[id][isyeriSahip] > 0 || Isyeri[id][isyeriSahip] == -99) && Isyeri[id][isyeriSatilik] == 0) return HataMesajGonder(playerid,"Bu iþyerin sahibi var.");
	    if(Isyeri[id][isyeriSahip] == PlayerData[playerid][pID]) return HataMesajGonder(playerid,"Bu iþyerin sahibi sensin.");
	    if(Isyeri[id][isyeriFiyat] > PlayerData[playerid][pCash]) return HataMesajGonder(playerid,"Yeterli paranýz yok.");
	    if(Isyeri[id][isyeriSahip] > 0 && Isyeri[id][isyeriSatilik] == 1 && Isyeri[id][isyeriSahip] != -99)
	    {
	        if(GetPlayerIDWithSQLID(Isyeri[id][isyeriSahip]) != -1)
	        {
	            ParaVer(GetPlayerIDWithSQLID(Isyeri[id][isyeriSahip]),Isyeri[id][isyeriFiyat]);
	            MesajGonder(GetPlayerIDWithSQLID(Isyeri[id][isyeriSahip]),"%s adlý kiþi iþyerinizi {2ECC71}%s {FFFFFF}karþýlýðýnda satýn aldý.",ReturnName(playerid,0),FormatNumber(Isyeri[id][isyeriFiyat]));
	        }
	        else
	        {
	            new str[100];
	            format(str,sizeof(str),"%s adlý kiþi iþyerinizi %s karþýlýðýnda satýn aldý.",ReturnName(playerid,0),FormatNumber(Isyeri[id][isyeriFiyat]));
	            BildirimEkle(Isyeri[id][isyeriSahip],str,"Sistem");
	            OfflineParaVer(Isyeri[id][isyeriSahip],Isyeri[id][isyeriFiyat]);
	        }
		}
		ParaVer(playerid,-Isyeri[id][isyeriFiyat]);
		MesajGonder(playerid,"Bu iþyerini {2ECC71}%s {FFFFFF}karþýlýðýnda satýn aldýnýz. (/isyeri)",FormatNumber(Isyeri[id][isyeriFiyat]));
		Isyeri[id][isyeriSahip] = PlayerData[playerid][pID];
		Isyeri[id][isyeriKasa] = 0;
		Isyeri[id][isyeriSatilik] = 0;
		Isyeri[id][isyeriFiyat] = Isyeri[id][isyeriKendiFiyati];
		Isyeri_Kaydet(id);
		Isyeri_Yenile(id);
	}
	else if ((id = Business_Inside(playerid)) != -1)
	{
	    if(PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Bunu þu an yapamazsýnýz.");
	    if (Isyeri[id][isyeriKilit] != 0)
		    return HataMesajGonder(playerid, "Bu iþyeri kilitli!");
	    if (Isyeri[id][isyeriTip] == 4) {
		    Isyeri_AracMenu(playerid, id);
		} else {
			Isyeri_Urun(playerid, id);
		}
	}
	else if ((id = Arsa_Inside(playerid)) != -1)
	{
	    if(PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Bunu þu an yapamazsýnýz.");
	    if(ArsaBilgi[id][arsaSahip] != -1) return HataMesajGonder(playerid, "Bu arsa satýlýk deðil.");
	    if(ArsaBilgi[id][arsaTip] != 1) return HataMesajGonder(playerid, "Bu arsayý kiralamak için (/arsakirala) komutunu kullanmalýsýnýz.");
	    if(ArsaBilgi[id][arsaFiyat] > PlayerData[playerid][pCash]) return HataMesajGonder(playerid, "Yeterli paranýz yok.");
	    ParaVer(playerid, -ArsaBilgi[id][arsaFiyat]);
	    ArsaBilgi[id][arsaSahip] = PlayerData[playerid][pID];
	    Arsa_Kaydet(id);
	    ArsaUpdate(id);
	    MesajGonder(playerid, "Arsa satýn alýndý, (/tohum) komutu ile arsaya tohum ekebilir ve toplayabilirsiniz.");
	}
	return 1;
}
CMD:arsakirala(playerid, params[])
{
    if(!OyundaDegil(playerid)) return 1;
    new id = Arsa_Inside(playerid);
    new kacsaat;
    if(id == -1) return HataMesajGonder(playerid, "Herhangi bir arsaya yakýn deðilsiniz.");
    if(ArsaBilgi[id][arsaTip] != 2) return HataMesajGonder(playerid, "Bu arsa kiralýk deðil.");
    if(ArsaBilgi[id][arsaSahip] != -1) return HataMesajGonder(playerid, "Bu arsa baþkasý tarafýndan kiralanmýþ.");
    if(sscanf(params, "i", kacsaat)) return BilgiMesajGonder(playerid, "/arsakirala [Saat] (1 saat = %s)", FormatNumber(ArsaBilgi[id][arsaFiyat]));
    if(kacsaat < 1 || kacsaat > 7) return HataMesajGonder(playerid, "En az 1, en fazla 7 saat girebilirsiniz.");
    if(PlayerData[playerid][pCash] < ArsaBilgi[id][arsaFiyat] * kacsaat) return HataMesajGonder(playerid, "Üzerinizde kirayý karþýlayacak paranýz yok. (%s)", FormatNumber(ArsaBilgi[id][arsaFiyat] * kacsaat));
    ParaVer(playerid, -ArsaBilgi[id][arsaFiyat] * kacsaat);
    ArsaBilgi[id][arsaSahip] = PlayerData[playerid][pID];
    ArsaBilgi[id][KiraSure] = gettime() + kacsaat*3600;
    Arsa_Kaydet(id);
    ArsaUpdate(id);
    MesajGonder(playerid, "Arsa %d saatliðine kiralandý, (/tohum) komutu ile arsaya tohum ekebilir ve toplayabilirsiniz.", kacsaat);
	return 1;
}
CMD:ev(playerid)
{
    static id = -1;
    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	if (!IsPlayerInAnyVehicle(playerid) && (id = (House_Inside(playerid) == -1) ? (House_Nearest(playerid)) : (House_Inside(playerid))) != -1)
	{
	    new string[1124], string2[400], durum[24],durum3[22];
	    if(house_info[id][evSahip] == PlayerData[playerid][pID])
	    {
	        strcat(string, "Ýþlem\tDurum\n");
	        if(house_info[id][evKilit] == 1) durum = "{E74C3C}Kilitli";
	        else durum = "{2ECC71}Açýk";
	        if(house_info[id][evSatilik] == 1) durum3 = "{2ECC71}Satýlýk";
	        else durum3 = "{E74C3C}Satýlýk deðil";
	        format(string2, sizeof(string2), "Kilit Durumu\t%s\n",durum);
	        strcat(string,string2);
	        format(string2, sizeof(string2), "Ev Ismi\t%s\n", house_info[id][evIsim]);
	        strcat(string, string2);
	        format(string2, sizeof(string2), "Ev Kasasý\t{2ECC71}%s\n",FormatNumber(house_info[id][evCash]));
	        strcat(string,string2);
	        format(string2, sizeof(string2), "Ev Gardolap\t{2ECC71}-\n" );
	        strcat(string,string2);
	        format(string2, sizeof(string2), "Ev Dekorasyon\t{2ECC71}-\n");
	        strcat(string,string2);
	        format(string2, sizeof(string2), "Evi Satýlýða Çýkar\t{2ECC71}%s\n",durum3);
	        strcat(string,string2);
	        format(string2, sizeof(string2), "Anahtarlar\t%d\n",Ev_GetKeyCount(id));
	        strcat(string,string2);
	        ShowPlayerDialog(playerid,31,DIALOG_STYLE_TABLIST_HEADERS,"Ev Ayarlarý",string,"Ayarla","Kapat");
	    }
	    if(house_info[id][evSahip] != PlayerData[playerid][pID] && house_info[id][evKiralayan] != PlayerData[playerid][pID] && Ev_AnahtarVar(playerid, id))
	    {
	         strcat(string, "Ýþlem\tDurum\n");
	         if(house_info[id][evKilit] == 1) durum = "{E74C3C}Kilitli";
    	     else durum = "{2ECC71}Açýk";
    	     format(string2, sizeof(string2), "Kilit Durumu\t%s{FFFFFF}\n",durum);
	         strcat(string,string2);
	         ShowPlayerDialog(playerid,65,DIALOG_STYLE_TABLIST_HEADERS,"Ev Ayarlarý",string,"Ayarla","Kapat");
		}
	}
	return 1;
}
CMD:mobilya(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    new id = House_Inside(playerid);
    if(id == -1) return HataMesajGonder(playerid, "Herhangi bir evin içerisinde deðilsiniz!");
    if(house_info[id][evSahip] != PlayerData[playerid][pID] && house_info[id][MobilyaYetki] != PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Mobilya düzenleme yetkiniz bulunmamaktadýr.");
    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
    MobilyaMenu(playerid, id);
	return 1;
}
CMD:zilcal(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	if(PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Bunu þu an yapamazsýnýz.");
	new id = House_Nearest(playerid);
	if(id == -1) return HataMesajGonder(playerid, "Herhangi bir eve yakýn deðilsiniz.");
	if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	if(!spamProtect(playerid, "ZilCal", 10)) return HataMesajGonder(playerid, "Tekrar zil çalmak için 10 saniye beklemelisiniz.");

	foreach (new i : Player) if (House_Inside(i) == id)
	{
	    SendClientMessage(i, COLOR_AQUA, "** Evin zili çalýyor...");
	    PlayerPlaySound(i, 20801, 0, 0, 0);
	}
	PlayerPlaySoundEx(playerid, 20801);
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s evin zilini çalar.", ReturnName(playerid, 0));
	return 1;
}
CMD:kapiyikir(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Bunu þu an yapamazsýnýz.");
    if(GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI) return HataMesajGonder(playerid, "Devlet memuru deðilsin.");
    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
    static id = -1;
    if((id = House_Nearest(playerid)) != -1)
    {
		if(!house_info[id][evKilit]) return HataMesajGonder(playerid, "Bu ev kilitli deðil.");

		ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);
		ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s evin kapýsýna sert bir tekme atar ve kapý kýrýlýr.", ReturnName(playerid, 0));
		house_info[id][evKilit] = 0;
		Ev_Yenile(id);

	}
	else if((id = Business_Nearest(playerid)) != -1)
	{
	    if(Isyeri[id][isyeriKilit] == 0) return HataMesajGonder(playerid, "Bu iþyeri kilitli deðil.");
	    ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);
	    ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s iþyerinin kapýsýna sert bir tekme atar ve kapý kýrýlýr.", ReturnName(playerid, 0));
		Isyeri[id][isyeriKilit] = 0;
		Isyeri_Yenile(id);
	}
	return 1;
}
CMD:admins(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Aktif yetkilileri görmeye yetkiniz yok.");
	new count = 0;
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	foreach(new i : Player) if(PlayerData[i][pAdmin] > 0)
	{
	    count++;
	    if(PlayerData[i][pAdminDuty])
	    {
	        SendClientMessageEx(playerid,COLOR_WHITE,"{2ECC71}%s (Yetki: %s) (Durum: {32CD32}Müsait)",PlayerData[i][pAdminName],GetAdminRank(i));
	    }
	    else
	    {
	        SendClientMessageEx(playerid,COLOR_WHITE,"{2ECC71}%s (Yetki: %s) (Durum: {FF0000}Meþgul)",PlayerData[i][pAdminName],GetAdminRank(i));
	    }
	}
	if(!count) SendClientMessage(playerid, COLOR_RED, "* Aktif yetkili yok.");
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}
CMD:helpers(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    new count = 0, str[1000];
    foreach(new i:Player) if(PlayerData[i][pHelper] >= 1)
    {
        count++;
        format(str, sizeof(str), "%s{BBFFEE}(Lv. %d) Helper %s (Durum: %s)\n", str, PlayerData[i][pHelper], PlayerData[i][pAdminName], (PlayerData[i][pHelperDuty] == 1) ? ("{02ef16}Müsait") : ("{ef0202}Meþgul"));

    }
    if(count == 0) return HataMesajGonder(playerid, "Aktif helper yok.");
    Dialog_Show(playerid, Helpers, DIALOG_STYLE_MSGBOX, "Helperler", str, "Kapat", "");
	return 1;
}
CMD:birlikkur(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	if(PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Bunu þu an yapamazsýnýz.");
	if(PlayerData[playerid][pFaction] != -1) return HataMesajGonder(playerid,"Zaten bir birliðiniz var.");
	if(PlayerData[playerid][pLevel] < 2) return HataMesajGonder(playerid,"Birlik kurmak için en az 5 seviye olmalýsýnýz.");
	ShowPlayerDialog(playerid,47,DIALOG_STYLE_INPUT,"Birlik Kur","{FFFFFF}Lütfen kurmak istediðiniz birliðin ismini girin:\n\n{FF9900}NOT: {FFFFFF}Birlik kurmak için {2ECC71}$20,000 {FFFFFF}ödemelisiniz.","Kur","Kapat");
	return 1;
}
CMD:birlik(playerid)
{
	new bid = PlayerData[playerid][pFaction];
	new rutbe = PlayerData[playerid][pFactionRutbe];
	if(bid == -1) return HataMesajGonder(playerid,"Bir birlik üyesi deðilsiniz.");
	new str[1000],string[250],durum[24];
	strcat(str,"Ýþlem\tDurum\n");
	new uyeler;
	foreach(new i : Player)
	{
	    if(bid == PlayerData[i][pFaction]) uyeler++;
	}
	if(Birlikler[bid][OOCDurum] == 1) durum = "{FFBF00}Açýk";
	else durum = "{AA3333}Kapalý";
	format(string,sizeof(string),"{CECEC2}» {F0F8FF}Çevrimiçi Üyeler\t{FF9900}%d\n",uyeler);
	strcat(str,string);
	format(string,sizeof(string),"{CECEC2}» {F0F8FF}Birlik Bilgileri\n");
	strcat(str,string);
	format(string,sizeof(string),"{CECEC2}» {F0F8FF}Birlikten Çýk\n");
	strcat(str,string);
	if(Birlikler[bid][birlikTip] >= 1 && Birlikler[bid][birlikTip] <= 4)
	{
	    format(string,sizeof(string),"{CECEC2}» {F0F8FF}Birlik Kasa\t{FF9900}%s\n",FormatNumber(Birlikler[bid][birlikKasaPara]));
		strcat(str,string);
	}
	if (PlayerData[playerid][pFactionRutbe] == Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler] || Birlikler[bid][birlikYetkilendirme][0] < rutbe)
	{
	    format(string,sizeof(string),"{CECEC2}» {F0F8FF}Üye Al\n");
		strcat(str,string);
	}
	if(Birlikler[bid][birlikYetkilendirme][1] <= rutbe)
	{
	    format(string,sizeof(string),"{CECEC2}» {F0F8FF}Üye At\n");
		strcat(str,string);
	}
	if(PlayerData[playerid][pFactionRutbe] > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler] - 1)
	{
	    format(string,sizeof(string),"{CECEC2}» {F0F8FF}Çevrimdýþý Üyeler\n");
		strcat(str,string);
	}
	if(Birlikler[PlayerData[playerid][pFaction]][birlikYetkilendirme][2] <= rutbe)
	{
	    format(string,sizeof(string),"{CECEC2}» {F0F8FF}Üye Rütbe Deðiþtir\n");
		strcat(str,string);
	}
	if(Birlikler[PlayerData[playerid][pFaction]][birlikYetkilendirme][3] <= rutbe && Birlikler[bid][birlikTip] != 1 && Birlikler[bid][birlikTip] != 2 && Birlikler[bid][birlikTip] != 3)
	{
	    format(string,sizeof(string),"{CECEC2}» {F0F8FF}Üye Divizyon Deðiþtir\n");
		strcat(str,string);
	}
	if (PlayerData[playerid][pFactionRutbe] > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler] - 1)
	{
	    format(string,sizeof(string),"{CECEC2}» {F0F8FF}Rütbe Adlarýný Düzenle\n");
		strcat(str,string);
	}
	if (PlayerData[playerid][pFactionRutbe] > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler] - 1 && Birlikler[bid][birlikTip] != 1 && Birlikler[bid][birlikTip] != 2 && Birlikler[bid][birlikTip] != 3)
	{
	    format(string,sizeof(string),"{CECEC2}» {F0F8FF}Divizyon Adlarýný Düzenle\n");
		strcat(str,string);
	}
	if(Birlikler[bid][birlikYetkilendirme][4] <= rutbe)
	{
	    format(string,sizeof(string),"{CECEC2}» {F0F8FF}Birlik Araçlarýný Spawnla\n");
		strcat(str,string);
	}
	if(Birlikler[bid][birlikYetkilendirme][5] <= rutbe)
	{
	    format(string,sizeof(string),"{CECEC2}» {F0F8FF}Birlik OOC Chat\t%s\n",durum);
		strcat(str,string);
	}
	if(PlayerData[playerid][pFactionRutbe] > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]-1)
	{
	    format(string,sizeof(string),"{CECEC2}» {F0F8FF}Rütbe Yetkilendirmeleri\n");
		strcat(str,string);
	}
	if(PlayerData[playerid][pFactionRutbe] > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]-1)
	{
	    format(string, sizeof(string), "{CECEC2}» {F0F8FF}Maksimum Rütbe Deðiþtir\n");
	    strcat(str, string);
	}
	if(Birlikler[bid][birlikTip] == BIRLIK_HABER && Birlikler[bid][birlikYetkilendirme][7] <= rutbe)
	{
	    format(string, sizeof(string), "{CECEC2}» {F0F8FF}Ajans Ayarlarý\n");
	    strcat(str, string);
	}
	if (PlayerData[playerid][pFactionRutbe] > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler] - 1)
	{
	    format(string,sizeof(string),"{CECEC2}» {F0F8FF}Birlik Duyurusu Deðiþtir\n");
		strcat(str,string);
	}

	Dialog_Show(playerid, BirlikDialog, DIALOG_STYLE_TABLIST_HEADERS, "Birlik", str, "Seç", "Iptal");
	return 1;
}
CMD:baliktut(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	if(BalikTimer[playerid] != -1) return HataMesajGonder(playerid,"Zaten balýk tutuyorsun.");
	new slot = -1;
	for(new i; i<10; i++)
	{
	    if(PlayerData[playerid][pBalikID][i] == -1)
	    {
	        slot = i;
	        break;
	    }
	}
	if(slot == -1) return HataMesajGonder(playerid,"En fazla 10 adet balýk tutabilirsin.");
	if(!IsPlayerNearWater(playerid)) return HataMesajGonder(playerid,"Balýkçý Ýskelesinde deðilsin.");
	if(!spamProtect(playerid,"BalikTut",5)) return HataMesajGonder(playerid,"Tekrar balýk tutmak için biraz beklemelisiniz.");
	SetPlayerArmedWeapon(playerid, 0);
	ClearAnimations(playerid);
	if(GetPVarInt(playerid, "IlkBalik") == 0)
	{
	    SetPVarInt(playerid, "IlkBalik", 1);
	    TogglePlayerControllable(playerid, false);
		ApplyAnimation(playerid, "SAMP", "FishingIdle", 4.1, 0, 1, 1, 1, 0);
	}
	else
	{
	    ApplyAnimation(playerid, "SAMP", "FishingIdle", 4.1, 0, 1, 1, 1, 0);
	}
	SetPVarInt(playerid, "OltaSlot", -1);
	for(new i; i < MAX_PLAYER_ATTACHED_OBJECTS; ++i)
	{
 		if(IsPlayerAttachedObjectSlotUsed(playerid, i)) continue;
  		SetPlayerAttachedObject(playerid, i, 18632, 6, 0.091496, 0.019614, 0.000000, 185.619995, 354.958374, 0.000000);
		SetPVarInt(playerid, "OltaSlot", i);
  		break;
	}
 	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s oltayý denize doðru sallar.", ReturnName(playerid, 0));
 	BalikTimer[playerid] = SetTimerEx("BalikTutma",RandomEx(8000, 15000),false,"i",playerid);
	return 1;
}
CMD:baliklarim(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	OyuncuBaliklari(playerid);
	return 1;
}
CMD:infernus(playerid)
{
	ShowActionForPlayer(playerid, ActionInfernus, "Ýnfernus spawn'lamak istermisin?", .action_time = 10000);

	return 1;
}
CMD:bildirimler(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	BildirimlerDialog(playerid);
	return 1;
}
CMD:isyeri(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	static id = -1;
	if (!IsPlayerInAnyVehicle(playerid) && (id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1)
	{
	    if(Isyeri[id][isyeriVergiSure] != 0 && Isyeri[id][isyeriVergi] >= IsyeriMaksVergi(id) && (PlayerData[playerid][pAdmin] < 2 || PlayerData[playerid][pAdminDuty] == 0)) return HataMesajGonder(playerid, "Bu iþyerinin vergisi ödenmediði için devlet tarafýndan kapatýlmýþ.");
	    new str[1000],string[500],durum[24],baslik[124];
	    if(Isyeri[id][isyeriSahip] == PlayerData[playerid][pID] || (PlayerData[playerid][pAdmin] >= 2 && PlayerData[playerid][pAdminDuty]== 1))
	    {
	        SetPVarInt(playerid,"IsyeriID",id);
	        strcat(str,"Ýþlem\tDurum\n");
	        if(Isyeri[id][isyeriKilit]) durum = "{FF0000}Kilitli";
	        else durum = "{2ECC71}Açýk";
	        format(string,sizeof(string),"Kilit Durumu\t%s\n",durum);
	        strcat(str,string);
	        format(string,sizeof(string),"Ýþyeri Kasasý\t{AFAFAF}%s\n",FormatNumber(Isyeri[id][isyeriKasa]));
	        strcat(str,string);
	        if(Isyeri[id][isyeriTip] != 4)
	        {
	            if(Isyeri[id][isyeriTip] != 7)
	            {
			        format(string,sizeof(string),"Ürün Al\n");
			        strcat(str,string);
		        }
	        }
	        else
	        {
	            if(Isyeri[id][isyeriTip] != 7)
	            {
		            format(string,sizeof(string),"Araç Ekle\n");
			        strcat(str,string);
		        }
	        }
	        format(string,sizeof(string),"Ýþyeri Adý\t{AFAFAF}%s\n",Isyeri[id][isyeriName]);
	        strcat(str,string);
	        format(string,sizeof(string),"Giriþ Ücreti\t{AFAFAF}%s\n",FormatNumber(Isyeri[id][isyeriGirisUcret]));
	        strcat(str,string);
	        format(string,sizeof(string),"Giriþ Mesajý\t{AFAFAF}%s\n",Isyeri[id][isyeriMesaj]);
	        strcat(str,string);
	        if(Isyeri[id][isyeriSatilik] == 1) durum = "{FF0000}Satýlýk";
	        else durum = "{2ECC71}Satýlýk Deðil";
	        format(string,sizeof(string),"Satýlýða Çýkar\t%s\n",durum);
	        strcat(str,string);
	        if(Isyeri[id][isyeriTip] == 6)
	        {
	            if(strlen(Isyeri[id][isyeriMuzik]) > 0) durum = "{2ECC71}Açýk";
	            else durum = "{FF0000}Kapalý";
	            format(string,sizeof(string),"Müzik Aç/Kapat\t%s\n",durum);
	        	strcat(str,string);
	        }
	        if(Isyeri[id][isyeriTip] != 4)
	        {
	            if(Isyeri[id][isyeriTip] != 7)
	            {
			        format(string,sizeof(string),"Ürün Fiyatlarýný Deðiþtir\n");
			        strcat(str,string);
		        }
	        }
	        else
	        {
	            if(Isyeri[id][isyeriTip] != 7)
	            {
		            format(string,sizeof(string),"Araç Düzenle\n");
			        strcat(str,string);
		        }
	        }
	        format(baslik,sizeof(baslik),"{E42020}Ýþyeri {FFFFFF}-{E42020} Vergi: %s/%s {FFFFFF}- {E42020}Saatlik Vergi: %s",FormatNumber(Isyeri[id][isyeriVergi]), FormatNumber(IsyeriMaksVergi(id)), FormatNumber(GetIsyeriVergi(id)));
			Dialog_Show(playerid,IsyeriDialog,DIALOG_STYLE_TABLIST_HEADERS,baslik,str,"Seç","Kapat");
		}
		else return HataMesajGonder(playerid,"Ýþyerinize yakýn deðilsiniz.");
	}
	else return HataMesajGonder(playerid,"Ýþyerinize yakýn deðilsiniz.");
	return 1;
}
CMD:su(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	if(IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid,"Araçta bu iþlemi yapamazsýn.");
	if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	if(PlayerData[playerid][pKelepce] == 1 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0) return HataMesajGonder(playerid,"Þuan bunu yapamazsýn.");
	if(PlayerData[playerid][pSu] <= 0) return HataMesajGonder(playerid,"Hiç suyunuz yok.");
	if(PlayerData[playerid][pDrinking] == 1) return HataMesajGonder(playerid,"Zaten içecek içiyorsun.");
	PlayerData[playerid][pSu]--;
	PlayerData[playerid][pDrinking] = 1;
	PlayerData[playerid][pDrinkBar] = CreatePlayerProgressBar(playerid, 572.00, 440.00, 56.50, 3.20, -1429936641, 100.0);
	ShowPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
 	SetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar], 0);

 	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
 	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s su þiþesini alýr ve açar.", ReturnName(playerid, 0));
 	MesajGonder(playerid,"Suyu içmek için {FF0000}'LMB' {FFFFFF}tuþuna basýnýz.");
	return 1;
}
CMD:aksesuar(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	AksesuarlariGoster(playerid,0);
	return 1;
}
CMD:araclarim(playerid)
{
	new string[1000],count;
	strcat(string,"ID\tModel\tPlaka\tDurum\n");
	for (new i = 0; i < MAX_ARAC; i ++) if(AracInfo[i][aracExists] && AracInfo[i][aracSahip] == PlayerData[playerid][pID])
	{
	    format(string, sizeof(string), "%s%d\t%s\t%s\t%s\n",string, AracInfo[i][aracVehicle], ReturnVehicleModelName(AracInfo[i][aracModel]),AracInfo[i][aracPlaka],(AracInfo[i][aracDisplay]) ? ("{2ECC71}Aktif") : ("{FF0000}Pasif"));
	    count++;
	}
	if (!count) return HataMesajGonder(playerid, "Sahip olduðunuz araç yok.");

	Dialog_Show(playerid, Araclarim, DIALOG_STYLE_TABLIST_HEADERS,  "{00FF80}Araçlarýnýz", string, "Deðiþtir", "Kapat");
	return 1;
}
CMD:aracimibul(playerid)
{
    new string[1000],count;
	strcat(string,"ID\tModel\tLokasyon\tDurum\n");
	new Float:vX,Float:vY,Float:vZ;
	for (new i = 0; i < MAX_ARAC; i ++) if(AracInfo[i][aracExists] && AracInfo[i][aracSahip] == PlayerData[playerid][pID])
	{
	    GetVehiclePos(AracInfo[i][aracVehicle],vX,vY,vZ);
	    format(string, sizeof(string), "%s%d\t%s\t%s\t%s\n",string, AracInfo[i][aracVehicle], ReturnVehicleModelName(AracInfo[i][aracModel]),GetLocation(vX,vY,vZ),(AracInfo[i][aracDisplay]) ? ("{2ECC71}Aktif") : ("{FF0000}Pasif"));
	    count++;
	}
	if (!count) return HataMesajGonder(playerid, "Sahip olduðunuz araç yok.");

	Dialog_Show(playerid, AracimiBul, DIALOG_STYLE_TABLIST_HEADERS,  "{00FF80}Araç Bul", string, "Deðiþtir", "Kapat");
	return 1;
}
CMD:kilit(playerid)
{
    new
	   id = -1;

    if ((id = Car_Nearest(playerid)) != -1)
	{
	    static
	        engine,
	        lights,
	        alarm,
	        doors,
	        bonnet,
	        boot,
	        objective;

	    GetVehicleParamsEx(AracInfo[id][aracVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
        if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 		return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
     	if(AracInfo[id][aracSahip] == PlayerData[playerid][pID] || (AracInfo[id][aracTip] == 5 && PlayerData[playerid][pVip] > 0) || Car_Birlik(playerid,id) || Arac_AnahtarVar(playerid, id) || AracInfo[id][aracKiralayan] == PlayerData[playerid][pID] || (PlayerData[playerid][pFaction] != -1 && GetFactionType(playerid) != BIRLIK_CETE && GetFactionType(playerid) != BIRLIK_MAFYA &&  GetFactionType(playerid) != BIRLIK_LEGAL && AracInfo[id][aracFactionType] == GetFactionType(playerid)))
	    {
			if (!AracInfo[id][aracKilit])
			{
				AracInfo[id][aracKilit] = true;
				Arac_Kaydet(id);

				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

				SetVehicleParamsEx(AracInfo[id][aracVehicle], engine, lights, alarm, 1, bonnet, boot, objective);
				SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s '%s' model aracý kilitler.", ReturnName(playerid, 0), ReturnVehicleModelName(AracInfo[id][aracModel]));
				SetTimerEx("TextdrawAc", 200, false, "i", playerid);
				CreateTextdrawAnimation(playerid, Textdraw1[playerid], 25, "~r~", "\
		 		Arac Kilitlendi");
			}
			else
			{
				AracInfo[id][aracKilit] = false;
				Arac_Kaydet(id);

				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s '%s' model aracýn kilidini açar.", ReturnName(playerid, 0), ReturnVehicleModelName(AracInfo[id][aracModel]));
				SetVehicleParamsEx(AracInfo[id][aracVehicle], engine, lights, alarm, 0, bonnet, boot, objective);
				SetTimerEx("TextdrawAc", 200, false, "i", playerid);
				CreateTextdrawAnimation(playerid, Textdraw1[playerid], 25, "~g~", "\
		 		Arac Kilidi Acildi");
			}
		}
		else HataMesajGonder(playerid, "Bu aracý kilitleyemezsin/açamazsýn !");
	}
	else HataMesajGonder(playerid, "Herhangi bir araca yakýn deðilsin.");
	return 1;
}
CMD:radyo(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "Sürücü deðilsiniz.");
    Dialog_Show(playerid, AracRadyo, DIALOG_STYLE_LIST, "Araç Radyo", "{FFFFFF}Radyo Kanallarý\n{FFFFFF}URL Gir\n{fc4817}Radyoyu Durdur", "Seç", "Kapat");
	return 1;
}
CMD:paraiade(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yetkiniz yok.");
	new miktar, name[32];
	if(sscanf(params, "s[32]d", name, miktar)) return BilgiMesajGonder(playerid, "/paraiade [Isim] [Miktar]");
	new query[100];
	format(query, 100, "SELECT * FROM `oyuncular` WHERE `Isim` = '%s'", name);
	mysql_query(baglanti, query);
	if(!cache_num_rows()) return HataMesajGonder(playerid, "Böyle bir oyuncu yok.");
	if(miktar < 1) return HataMesajGonder(playerid, "Miktar $1 den küçük olamaz.");
	new sqlid;
	cache_get_value_name_int(0, "ID", sqlid);
	new msj[200];
	format(msj, sizeof(msj), "%s adlý yetkili size %s miktar para iadesinde bulundu.", PlayerData[playerid][pAdminName], FormatNumber(miktar));
	BildirimEkle(sqlid, msj, "Sistem");
	OfflineParaVer(sqlid, miktar);
	MesajGonder(playerid, "%s(%d SQLID) oyuncusuna %s para iadesi yapýldý.", name, sqlid, FormatNumber(miktar));
	return 1;
}
CMD:modelid(playerid, params[]) return MesajGonder(playerid, "%d", GetVehicleModelByName(params));
CMD:myvw(playerid) return MesajGonder(playerid, "Virtual World: %d", GetPlayerVirtualWorld(playerid));
CMD:hizlimiti(playerid, args[])
{
	new Float:hizdeger;

	if (!IsPlayerInAnyVehicle(playerid))
	    return HataMesajGonder(playerid, "Bu komutu sadece araçta kullanabilirsiniz.");

	if (sscanf(args, "f", hizdeger))
	    return BilgiMesajGonder(playerid, "/hizlimiti [Limit] (0.0 limiti kapatýr)");

	if (hizdeger < 0.0)
	    return HataMesajGonder(playerid, "Hýz deðerini 0 dan düþük giremezsiniz.");

    g_fSpeedCap[ playerid ][ GetPlayerVehicleID(playerid) ] = hizdeger;

	BilgiMesajGonder(playerid, "Hýz limiti %0.4f olarak ayarlanmýþtýr.", g_fSpeedCap[ playerid ][ GetPlayerVehicleID(playerid) ] );
	return true;
}
CMD:arac(playerid)
{
	if (!OyundaDegil(playerid)) return 1;
	new str[1350],string[224],baslik[50];
	if (IsPlayerInAnyVehicle(playerid))
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		new id = Car_GetID(vehicleid);

	    if (id == -1)
			return HataMesajGonder(playerid, "Bir araçta deðilsiniz.");

		static
	        engine,
	        lights,
	        alarm,
	        doors,
	        bonnet,
	        boot,
	        objective;

	    GetVehicleParamsEx(AracInfo[id][aracVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
	    SetPVarInt(playerid, "CarID",id);

		format(baslik, 50, "{FF9900}ARAÇ: {ffffff}%s (%d)\n", ReturnVehicleModelName(AracInfo[id][aracModel]), AracInfo[id][aracModel]);
		if(AracInfo[id][aracTip] == 3 && AracInfo[id][aracKiralayan] == PlayerData[playerid][pID])
		{
			strcat(str, "Araç Bilgileri\t\t[Plaka, km..]\n");
			if(GetVehicleModel(AracInfo[id][aracVehicle]) != 481 && GetVehicleModel(AracInfo[id][aracVehicle]) != 509 && GetVehicleModel(AracInfo[id][aracVehicle]) != 510)
			{
				format(string, 224, "{ffffff}Motor\t\t\t{ffffff}[%s{ffffff}]\n", (!GetEngineStatus(AracInfo[id][aracVehicle])) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
				strcat(str, string);
			}
			if(IsDoorVehicle(vehicleid))
			{
				format(string, 224, "{ffffff}Kilit\t\t\t{ffffff}[%s{ffffff}]\n", (AracInfo[id][aracKilit] == 0) ? ("{22AF1D}Açýk") : ("{ff0000}Kapalý"));
				strcat(str, string);
			}
			format(string, 224, "{ffffff}Camlar\t\t\t{ffffff}[%s{ffffff}]\n", (AracInfo[id][aracCamlar] == false) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
			strcat(str, string);
			format(string, 224, "{ffffff}Farlar\t\t\t{ffffff}[%s{ffffff}]\n", (!GetLightStatus(AracInfo[id][aracVehicle])) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
			strcat(str, string);
			if(IsDoorVehicle(vehicleid))
			{
				format(string, 224, "{ffffff}Kaput\t\t\t{ffffff}[%s{ffffff}]\n", (!GetHoodStatus(AracInfo[id][aracVehicle])) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
				strcat(str, string);
			}
			strcat(str, "{bf3131}Birlik Aracý\n");
			strcat(str, "{bf3131}Parket\n");
			strcat(str, "{bf3131}Aracý Sat\n");
			strcat(str, "{bf3131}Anahtarlar\n");
			strcat(str, "{bf3131}Modifiye Kontrolü\n");
			strcat(str, "{ffffff}Piyasa Kontrolü\n");
			strcat(str, "{bf3131}Kanca Ýzni\t\t\t(Yok)");
			Dialog_Show(playerid,AracAyarlari,DIALOG_STYLE_LIST, baslik, str, "Seç", "Kapat");
		}
		else if(AracInfo[id][aracTip] == 3 && AracInfo[id][aracKiralayan] != PlayerData[playerid][pID])
		{
			strcat(str, "Araç Bilgileri\t\t[Plaka, km..]\n");
			if(GetVehicleModel(AracInfo[id][aracVehicle]) != 481 && GetVehicleModel(AracInfo[id][aracVehicle]) != 509 && GetVehicleModel(AracInfo[id][aracVehicle]) != 510)
			{
				format(string, 224, "{bf3131}Motor\t\t\t{ffffff}[%s{ffffff}]\n", (!GetEngineStatus(AracInfo[id][aracVehicle])) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
				strcat(str, string);
			}
			if(IsDoorVehicle(vehicleid))
			{
				format(string, 224, "{bf3131}Kilit\t\t\t{ffffff}[%s{ffffff}]\n", (AracInfo[id][aracKilit] == 0) ? ("{22AF1D}Açýk") : ("{ff0000}Kapalý"));
				strcat(str, string);
			}
			format(string, 224, "{bf3131}Camlar\t\t\t{ffffff}[%s{ffffff}]\n", (AracInfo[id][aracCamlar] == false) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
			strcat(str, string);
			format(string, 224, "{bf3131}Farlar\t\t\t{ffffff}[%s{ffffff}]\n", (!GetLightStatus(AracInfo[id][aracVehicle])) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
			strcat(str, string);
			if(IsDoorVehicle(vehicleid))
			{
				format(string, 224, "{bf3131}Kaput\t\t\t{ffffff}[%s{ffffff}]\n", (!GetHoodStatus(AracInfo[id][aracVehicle])) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
				strcat(str, string);
			}
			strcat(str, "{bf3131}Birlik Aracý\n");
			strcat(str, "{bf3131}Parket\n");
			strcat(str, "{bf3131}Aracý Sat\n");
			strcat(str, "{bf3131}Anahtarlar\n");
			strcat(str, "{bf3131}Modifiye Kontrolü\n");
			strcat(str, "{ffffff}Piyasa Kontrolü\n");
		  strcat(str, "{bf3131}Kanca Ýzni\t\t\t(Yok)");
			Dialog_Show(playerid,AracAyarlari,DIALOG_STYLE_LIST, baslik, str, "Seç", "Kapat");
		}
		if((AracInfo[id][aracTip] == 4 && AracInfo[id][aracSahip] == PlayerData[playerid][pID]) || (AracInfo[id][aracTip] == 4 && Arac_AnahtarVar(playerid, id)))
		{
			strcat(str, "Araç Bilgileri\t\t[Plaka, km..]\n");
			if(GetVehicleModel(AracInfo[id][aracVehicle]) != 481 && GetVehicleModel(AracInfo[id][aracVehicle]) != 509 && GetVehicleModel(AracInfo[id][aracVehicle]) != 510)
			{
				format(string, 224, "{ffffff}Motor\t\t\t[%s{ffffff}]\n", (!GetEngineStatus(AracInfo[id][aracVehicle])) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
				strcat(str, string);
			}
			if(IsDoorVehicle(vehicleid))
			{
				format(string, 224, "{ffffff}Kilit\t\t\t[%s{ffffff}]\n", (AracInfo[id][aracKilit] == 0) ? ("{22AF1D}Açýk") : ("{ff0000}Kapalý"));
				strcat(str, string);
			}
			format(string, 224, "{ffffff}Camlar\t\t\t[%s{ffffff}]\n", (AracInfo[id][aracCamlar] == false) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
			strcat(str, string);
			format(string, 224, "{ffffff}Farlar\t\t\t[%s{ffffff}]\n", (!GetLightStatus(AracInfo[id][aracVehicle])) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
			strcat(str, string);
			if(IsDoorVehicle(vehicleid))
			{
				format(string, 224, "{ffffff}Kaput\t\t\t[%s{ffffff}]\n", (!GetHoodStatus(AracInfo[id][aracVehicle])) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
				strcat(str, string);
			}
			new renk[15];
			if(AracInfo[id][aracSahip] != PlayerData[playerid][pID]) renk = "{bf3131}";
			if(AracInfo[id][aracSahip] == PlayerData[playerid][pID]) renk = "{ffffff}";
			format(string, 224, "%sBirlik Aracý\n", renk);
			strcat(str, string);
			format(string, 224, "%sParket\n", renk);
			strcat(str, string);
			format(string, 224, "%sAracý Sat\n", renk);
			strcat(str, string);
			format(string, 224, "%sAnahtarlar\n", renk);
			strcat(str, string);
			format(string, 224, "%sModifiye Kontrolü\n", renk);
			strcat(str, string);
			strcat(str, "{ffffff}Piyasa Kontrolü\n");
			new kanca = -1;
			for(new i = 0; i < MAX_ARAC; i++) if(AracInfo[i][aracID] == AracInfo[id][KancaIzin]) { kanca = Car_GetID(i); break; }
			new kancaisim[60];
			if(kanca != -1)
			{
				format(kancaisim, 60, "%s", ReturnVehicleModelName(AracInfo[kanca][aracModel]));
			}
			format(string, 224, "Kanca Ýzni\t\t\t(%s)", (kanca == -1) ? ("Yok") : (kancaisim));
			strcat(str, string);
			Dialog_Show(playerid,AracAyarlari,DIALOG_STYLE_LIST, baslik, str, "Seç", "Kapat");
		}
  		else if(AracInfo[id][aracTip] == 4 && AracInfo[id][aracSahip] != PlayerData[playerid][pID] && !Arac_AnahtarVar(playerid, id))
		{
			strcat(str, "Araç Bilgileri\t\t[Plaka, km..]\n");
			if(GetVehicleModel(AracInfo[id][aracVehicle]) != 481 && GetVehicleModel(AracInfo[id][aracVehicle]) != 509 && GetVehicleModel(AracInfo[id][aracVehicle]) != 510)
			{
				format(string, 224, "{bf3131}Motor\t\t\t{ffffff}[%s{ffffff}]\n", (!GetEngineStatus(AracInfo[id][aracVehicle])) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
				strcat(str, string);
			}
			if(IsDoorVehicle(vehicleid))
			{
				format(string, 224, "{bf3131}Kilit\t\t\t{ffffff}[%s{ffffff}]\n", (AracInfo[id][aracKilit] == 0) ? ("{22AF1D}Açýk") : ("{ff0000}Kapalý"));
				strcat(str, string);
			}
			format(string, 224, "{bf3131}Camlar\t\t\t{ffffff}[%s{ffffff}]\n", (AracInfo[id][aracCamlar] == false) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
			strcat(str, string);
			format(string, 224, "{bf3131}Farlar\t\t\t{ffffff}[%s{ffffff}]\n", (!GetLightStatus(AracInfo[id][aracVehicle])) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
			strcat(str, string);
			if(IsDoorVehicle(vehicleid))
			{
				format(string, 224, "{bf3131}Kaput\t\t\t{ffffff}[%s{ffffff}]\n", (!GetHoodStatus(AracInfo[id][aracVehicle])) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
				strcat(str, string);
			}
			strcat(str, "{bf3131}Birlik Aracý\n");
			strcat(str, "{bf3131}Parket\n");
			strcat(str, "{bf3131}Aracý Sat\n");
			strcat(str, "{bf3131}Anahtarlar\n");
			strcat(str, "{bf3131}Modifiye Kontrolü\n");
			strcat(str, "{ffffff}Piyasa Kontrolü\n");
			new kanca = -1;
			for(new i = 0; i < MAX_ARAC; i++) if(AracInfo[i][aracID] == AracInfo[id][KancaIzin]) { kanca = Car_GetID(i); break; }
			new kancaisim[60];
			if(kanca != -1)
			{
				format(kancaisim, 60, "%s", ReturnVehicleModelName(AracInfo[kanca][aracModel]));
			}
			format(string, 224, "Kanca Ýzni\t\t\t(%s)", (kanca == -1) ? ("Yok") : (kancaisim));
			strcat(str, string);
			Dialog_Show(playerid,AracAyarlari,DIALOG_STYLE_LIST, baslik, str, "Seç", "Kapat");
		}
		if(AracInfo[id][aracTip] == 1 && AracInfo[id][aracFaction] == PlayerData[playerid][pFaction])
		{
			strcat(str, "Araç Bilgileri\t\t[Plaka, km..]\n");
			if(GetVehicleModel(AracInfo[id][aracVehicle]) != 481 && GetVehicleModel(AracInfo[id][aracVehicle]) != 509 && GetVehicleModel(AracInfo[id][aracVehicle]) != 510)
			{
				format(string, 224, "{ffffff}Motor\t\t\t[%s{ffffff}]\n", (!GetEngineStatus(AracInfo[id][aracVehicle])) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
				strcat(str, string);
			}
			if(IsDoorVehicle(vehicleid))
			{
				format(string, 224, "{ffffff}Kilit\t\t\t[%s{ffffff}]\n", (AracInfo[id][aracKilit] == 0) ? ("{22AF1D}Açýk") : ("{ff0000}Kapalý"));
				strcat(str, string);
			}
			format(string, 224, "{ffffff}Camlar\t\t\t[%s{ffffff}]\n", (AracInfo[id][aracCamlar] == false) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
			strcat(str, string);
			format(string, 224, "{ffffff}Farlar\t\t\t[%s{ffffff}]\n", (!GetLightStatus(AracInfo[id][aracVehicle])) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
			strcat(str, string);
			if(IsDoorVehicle(vehicleid))
			{
				format(string, 224, "{ffffff}Kaput\t\t\t[%s{ffffff}]\n", (!GetHoodStatus(AracInfo[id][aracVehicle])) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
				strcat(str, string);
			}
			strcat(str, "{bf3131}Birlik Aracý\n");
			strcat(str, "{ffffff}Parket\n");
			strcat(str, "{bf3131}Aracý Sat\n");
			strcat(str, "{bf3131}Anahtarlar\n");
			strcat(str, "{bf3131}Modifiye Kontrolü\n");
			strcat(str, "{ffffff}Piyasa Kontrolü\n");
			new kanca = -1;
			for(new i = 0; i < MAX_ARAC; i++) if(AracInfo[i][aracID] == AracInfo[id][KancaIzin]) { kanca = Car_GetID(i); break; }
			new kancaisim[60];
			if(kanca != -1)
			{
				format(kancaisim, 60, "%s", ReturnVehicleModelName(AracInfo[kanca][aracModel]));
			}
			format(string, 224, "Kanca Ýzni\t\t\t(%s)", (kanca == -1) ? ("Yok") : (kancaisim));
			strcat(str, string);
			Dialog_Show(playerid,AracAyarlari,DIALOG_STYLE_LIST, baslik, str, "Seç", "Kapat");
		}
		else if(AracInfo[id][aracTip] == 1 && AracInfo[id][aracFaction] != PlayerData[playerid][pFaction])
		{
			strcat(str, "Araç Bilgileri\t\t[Plaka, km..]\n");
			if(GetVehicleModel(AracInfo[id][aracVehicle]) != 481 && GetVehicleModel(AracInfo[id][aracVehicle]) != 509 && GetVehicleModel(AracInfo[id][aracVehicle]) != 510)
			{
				format(string, 224, "{bf3131}Motor\t\t\t{ffffff}[%s{ffffff}]\n", (!GetEngineStatus(AracInfo[id][aracVehicle])) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
				strcat(str, string);
			}
			if(IsDoorVehicle(vehicleid))
			{
				format(string, 224, "{bf3131}Kilit\t\t\t{ffffff}[%s{ffffff}]\n", (AracInfo[id][aracKilit] == 0) ? ("{22AF1D}Açýk") : ("{ff0000}Kapalý"));
				strcat(str, string);
			}
			format(string, 224, "{bf3131}Camlar\t\t\t{ffffff}[%s{ffffff}]\n", (AracInfo[id][aracCamlar] == false) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
			strcat(str, string);
			format(string, 224, "{bf3131}Farlar\t\t\t{ffffff}[%s{ffffff}]\n", (!GetLightStatus(AracInfo[id][aracVehicle])) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
			strcat(str, string);
			if(IsDoorVehicle(vehicleid))
			{
				format(string, 224, "{bf3131}Kaput\t\t\t{ffffff}[%s{ffffff}]\n", (!GetHoodStatus(AracInfo[id][aracVehicle])) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
				strcat(str, string);
			}
			strcat(str, "{bf3131}Birlik Aracý\n");
			strcat(str, "{bf3131}Parket\n");
			strcat(str, "{bf3131}Aracý Sat\n");
			strcat(str, "{bf3131}Anahtarlar\n");
			strcat(str, "{bf3131}Modifiye Kontrolü\n");
			strcat(str, "{ffffff}Piyasa Kontrolü\n");
			new kanca = -1;
			for(new i = 0; i < MAX_ARAC; i++) if(AracInfo[i][aracID] == AracInfo[id][KancaIzin]) { kanca = Car_GetID(i); break; }
			new kancaisim[60];
			if(kanca != -1)
			{
				format(kancaisim, 60, "%s", ReturnVehicleModelName(AracInfo[kanca][aracModel]));
			}
			format(string, 224, "Kanca Ýzni\t\t\t(%s)", (kanca == -1) ? ("Yok") : (kancaisim));
			strcat(str, string);
			Dialog_Show(playerid,AracAyarlari,DIALOG_STYLE_LIST, baslik, str, "Seç", "Kapat");
		}
		if(AracInfo[id][aracTip] == 2)
		{
			strcat(str, "Araç Bilgileri\t\t[Plaka, km..]\n");
			if(GetVehicleModel(AracInfo[id][aracVehicle]) != 481 && GetVehicleModel(AracInfo[id][aracVehicle]) != 509 && GetVehicleModel(AracInfo[id][aracVehicle]) != 510)
			{
				format(string, 224, "{ffffff}Motor\t\t\t[%s{ffffff}]\n", (!GetEngineStatus(AracInfo[id][aracVehicle])) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
				strcat(str, string);
			}
			if(IsDoorVehicle(vehicleid))
			{
				format(string, 224, "{ffffff}Kilit\t\t\t[%s{ffffff}]\n", (AracInfo[id][aracKilit] == 0) ? ("{22AF1D}Açýk") : ("{ff0000}Kapalý"));
				strcat(str, string);
			}
			format(string, 224, "{ffffff}Camlar\t\t\t[%s{ffffff}]\n", (AracInfo[id][aracCamlar] == false) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
			strcat(str, string);
			format(string, 224, "{ffffff}Farlar\t\t\t[%s{ffffff}]\n", (!GetLightStatus(AracInfo[id][aracVehicle])) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
			strcat(str, string);
			if(IsDoorVehicle(vehicleid))
			{
				format(string, 224, "{ffffff}Kaput\t\t\t[%s{ffffff}]\n", (!GetHoodStatus(AracInfo[id][aracVehicle])) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
				strcat(str, string);
			}
			strcat(str, "{bf3131}Birlik Aracý\n");
			strcat(str, "{bf3131}Parket\n");
			strcat(str, "{bf3131}Aracý Sat\n");
			strcat(str, "{bf3131}Anahtarlar\n");
			strcat(str, "{bf3131}Modifiye Kontrolü\n");
			strcat(str, "{ffffff}Piyasa Kontrolü\n");
			strcat(str, "{bf3131}Kanca Ýzni\t\t\t(Yok)");
			Dialog_Show(playerid,AracAyarlari,DIALOG_STYLE_LIST, baslik, str, "Seç", "Kapat");
		}
		if(AracInfo[id][aracTip] == 5 && PlayerData[playerid][pVip] != 0)
		{
			strcat(str, "Araç Bilgileri\t\t[Plaka, km..]\n");
			if(GetVehicleModel(AracInfo[id][aracVehicle]) != 481 && GetVehicleModel(AracInfo[id][aracVehicle]) != 509 && GetVehicleModel(AracInfo[id][aracVehicle]) != 510)
			{
				format(string, 224, "{ffffff}Motor\t\t\t[%s{ffffff}]\n", (!GetEngineStatus(AracInfo[id][aracVehicle])) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
				strcat(str, string);
			}
			if(IsDoorVehicle(vehicleid))
			{
				format(string, 224, "{ffffff}Kilit\t\t\t[%s{ffffff}]\n", (AracInfo[id][aracKilit] == 0) ? ("{22AF1D}Açýk") : ("{ff0000}Kapalý"));
				strcat(str, string);
			}
			format(string, 224, "{ffffff}Camlar\t\t\t[%s{ffffff}]\n", (AracInfo[id][aracCamlar] == false) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
			strcat(str, string);
			format(string, 224, "{ffffff}Farlar\t\t\t[%s{ffffff}]\n", (!GetLightStatus(AracInfo[id][aracVehicle])) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
			strcat(str, string);
			if(IsDoorVehicle(vehicleid))
			{
				format(string, 224, "{ffffff}Kaput\t\t\t[%s{ffffff}]\n", (!GetHoodStatus(AracInfo[id][aracVehicle])) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
				strcat(str, string);
			}
			strcat(str, "{bf3131}Birlik Aracý\n");
			strcat(str, "{bf3131}Parket\n");
			strcat(str, "{bf3131}Aracý Sat\n");
			strcat(str, "{bf3131}Anahtarlar\n");
			strcat(str, "{bf3131}Modifiye Kontrolü\n");
			strcat(str, "{ffffff}Piyasa Kontrolü\n");
			strcat(str, "{bf3131}Kanca Ýzni\t\t\t(Yok)");
			Dialog_Show(playerid,AracAyarlari,DIALOG_STYLE_LIST, baslik, str, "Seç", "Kapat");
		}
		else if(AracInfo[id][aracTip] == 5 && PlayerData[playerid][pVip] == 0)
		{
			strcat(str, "Araç Bilgileri\t\t[Plaka, km..]\n");
			if(GetVehicleModel(AracInfo[id][aracVehicle]) != 481 && GetVehicleModel(AracInfo[id][aracVehicle]) != 509 && GetVehicleModel(AracInfo[id][aracVehicle]) != 510)
			{
				format(string, 224, "{bf3131}Motor\t\t\t{ffffff}[%s{ffffff}]\n", (!GetEngineStatus(AracInfo[id][aracVehicle])) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
				strcat(str, string);
			}
			if(IsDoorVehicle(vehicleid))
			{
				format(string, 224, "{bf3131}Kilit\t\t\t{ffffff}[%s{ffffff}]\n", (AracInfo[id][aracKilit] == 0) ? ("{22AF1D}Açýk") : ("{ff0000}Kapalý"));
				strcat(str, string);
			}
			format(string, 224, "{bf3131}Camlar\t\t\t{ffffff}[%s{ffffff}]\n", (AracInfo[id][aracCamlar] == false) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
			strcat(str, string);
			format(string, 224, "{bf3131}Farlar\t\t\t{ffffff}[%s{ffffff}]\n", (!GetLightStatus(AracInfo[id][aracVehicle])) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
			strcat(str, string);
			if(IsDoorVehicle(vehicleid))
			{
				format(string, 224, "{bf3131}Kaput\t\t\t{ffffff}[%s{ffffff}]\n", (!GetHoodStatus(AracInfo[id][aracVehicle])) ? ("{ff0000}Kapalý") : ("{22AF1D}Açýk"));
				strcat(str, string);
			}
			strcat(str, "{bf3131}Birlik Aracý\n");
			strcat(str, "{bf3131}Parket\n");
			strcat(str, "{bf3131}Aracý Sat\n");
			strcat(str, "{bf3131}Anahtarlar\n");
			strcat(str, "{bf3131}Modifiye Kontrolü\n");
			strcat(str, "{ffffff}Piyasa Kontrolü\n");
			strcat(str, "{bf3131}Kanca Ýzni\t\t\t(Yok)");
			Dialog_Show(playerid,AracAyarlari,DIALOG_STYLE_LIST, baslik, str, "Seç", "Kapat");
		}
	}
	else return HataMesajGonder(playerid, "Bir aracýn içinde deðilsiniz.");
	return 1;
}
CMD:anahtarver(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	Dialog_Show(playerid, AnahtarVer, DIALOG_STYLE_LIST, "{FFBF00}Anahtar Ver", "{FFFFFF}Ev\n{FFFFFF}Araç", "Seç", "Kapat");
	return 1;
}
CMD:anahtarlarim(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
    OyuncuAnahtarlar(playerid);
	return 1;
}
CMD:dolap(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	if(PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok.");
	if(IsPlayerInRangeOfPoint(playerid,2.5,1490.4556,-1703.0160,-70.0371) && (GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_FBI))
	{
	    Dialog_Show(playerid,LSPDDolap,DIALOG_STYLE_LIST,"{1394BF}LSPD Dolap","{1394BF}» {FFFFFF}Ýþbaþý\n{1394BF}» {FFFFFF}Üniformalar\n{1394BF}» {FFFFFF}Ekipmanlar\n{1394BF}» {FFFFFF}Silah Sýfýrla","Seç","Kapat");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2.5, 1163.4614,-1303.3339,-72.4000) && GetFactionType(playerid) == BIRLIK_LSMD)
	{
	    Dialog_Show(playerid, LSMDDolap, DIALOG_STYLE_LIST, "{FF8282}LSMD Dolap", "{FF8282}» {FFFFFF}Ýþbaþý\n{FF8282}» {FFFFFF}Üniformalar\n{FF8282}» {FFFFFF}Ekipmanlar", "Seç", "Kapat");
	}
	return 1;
}
CMD:f(playerid,params[])
{
    new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1) return HataMesajGonder(playerid, "Herhangi bir birlik üyesi deðilsin.");
 	if(Birlikler[factionid][OOCDurum] == 0) return HataMesajGonder(playerid,"Birlik yetkilisi tarafýndan birlik chat devre dýþý býrakýlmýþ.");
 	if (isnull(params)) return BilgiMesajGonder(playerid, "/f [Mesaj]");
 	SendBirlikMessage(factionid,0xBDF38BFF," (( %s %s: %s ))",Birlik_GetRutbe(playerid),ReturnName(playerid,0),params);
 	Log_Write("logs/birlik_chat.txt", "[%s] %s %s: %s", ReturnDate(),Birlik_GetRutbe(playerid),ReturnName(playerid),params);
	return 1;
}
CMD:tazer(playerid)
{
	if(!OyundaDegil(playerid) || GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return HataMesajGonder(playerid,"Þuanda bu komutu kullanamazsýnýz.");
	if(GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI) return HataMesajGonder(playerid,"Devlet memuru deðilsin.");
	if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	if (!PlayerData[playerid][pTazer])
	{
	    PlayerData[playerid][pTazer] = 1;
        GetPlayerWeaponData(playerid, 2, PlayerData[playerid][pSilahlar][2], PlayerData[playerid][pMermiler][2]);

		GivePlayerWeapon(playerid, 23, 20000);
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kýlýfýný açar ve þok tabancasýný eline alýr.", ReturnName(playerid, 0));
	}
	else
	{
	    PlayerData[playerid][pTazer] = 0;
		SetWeapons(playerid);

		SetPlayerArmedWeapon(playerid, PlayerData[playerid][pSilahlar][2]);
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s þok tabancasýný kýlýfýna koyar ve kýlýfý kapatýr.", ReturnName(playerid, 0));
	}
	return 1;
}
CMD:jammer(playerid, params[])
{
	if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI)
		return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");

	if (isnull(params))
 	{
	 	BilgiMesajGonder(playerid, "/jammer [ayar]");
  		SendClientMessage(playerid, 0xFFFF00FF, "[AYARLAR]:{FFFFFF} koy, kaldir, hepsinikaldir");
		return 1;
	}
	static
        Float:fX,
        Float:fY,
        Float:fZ,
        Float:fA;

    GetPlayerPos(playerid, fX, fY, fZ);
    GetPlayerFacingAngle(playerid, fA);

	if (!strcmp(params, "koy", true))
	{
	    if (IsPlayerInAnyVehicle(playerid))
	        return HataMesajGonder(playerid, "Araçta bunu yapamazsýnýz!");

	    for (new i = 0; i != MAX_JAMMERS; i ++) if (!JammerData[i][jammerExists])
	    {
			JammerData[i][jammerExists] = true;

			JammerData[i][jammerPos][0] = fX;
			JammerData[i][jammerPos][1] = fY;
			JammerData[i][jammerPos][2] = fZ;
			JammerData[i][jammerMenzil] = 70;

			new string[256];
			format(string, sizeof(string), "{E74C3C}[Jammer]\n{E74C3C}Yerleþtiren: {FFFFFF}%s\n{E74C3C}Menzil: {FFFFFF}%d m", ReturnName(playerid, 0), JammerData[i][jammerMenzil]);
			JammerData[i][jammerText3D] = CreateDynamic3DTextLabel(string, 0x2641FEFF, JammerData[i][jammerPos][0] + 0.5, JammerData[i][jammerPos][1] + 0.5, JammerData[i][jammerPos][2] - 0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

			JammerData[i][jammerObject] = CreateDynamicObject(363, fX+0.5, fY+0.5, fZ-0.5, 0.0, 0.0, fA);

			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s yere bir jammer yerleþtirir.", ReturnName(playerid, 0));
			SendBirlikMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "** (Telsiz) %s bir jammer yerleþtirdi. (Bölge: %s)", ReturnName(playerid, 0), GetLocation(fX, fY, fZ));

			return 1;
		}
		HataMesajGonder(playerid, "Sunucu maksimum jammer sayýsýna ulaþtý.");
	}
	else if (!strcmp(params, "kaldir", true))
	{
        for (new i = 0; i != MAX_JAMMERS; i ++) if (JammerData[i][jammerExists] && IsPlayerInRangeOfPoint(playerid, 3.0, JammerData[i][jammerPos][0], JammerData[i][jammerPos][1], JammerData[i][jammerPos][2]))
	    {
			JammerData[i][jammerExists] = 0;

			DestroyDynamicObject(JammerData[i][jammerObject]);
			DestroyDynamic3DTextLabel(JammerData[i][jammerText3D]);
			JammerData[i][jammerMenzil] = 0;

			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s jammerý yerinden kaldýrýr.", ReturnName(playerid, 0));
			SendBirlikMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "** (Telsiz) %s bir jammeri kaldýrdý. (Bölge: %s)", ReturnName(playerid, 0), GetLocation(fX, fY, fZ));
			return 1;
		}
		HataMesajGonder(playerid, "Yakýnýnýzda jammer yok.");
	}
	else if (!strcmp(params, "hepsinikaldir", true))
	{
		for (new i = 0; i != MAX_JAMMERS; i ++) if (JammerData[i][jammerExists])
		{
			JammerData[i][jammerExists] = 0;

			DestroyDynamicObject(JammerData[i][jammerObject]);
			DestroyDynamic3DTextLabel(JammerData[i][jammerText3D]);
		}
		SendBirlikMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "** (Telsiz) %s tüm jammerleri kaldýrdý.", ReturnName(playerid, 0));
	}
	return 1;
}
CMD:kelepcekir(playerid, params[])
{
	new id;
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pEsyalar][14] <= 0) return HataMesajGonder(playerid, "Yan keskiniz yok.");
    if(IsPlayerInAnyVehicle(playerid) || PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
 	if(PlayerData[playerid][pKelepceKir] > gettime()) return HataMesajGonder(playerid, "Tekrar kelepçe kýrmak için 30 saniye beklemelisiniz.");
 	if(sscanf(params, "u", id)) return BilgiMesajGonder(playerid, "/kelepcekir [ID/Isim]");
 	if(!OyundaDegil(id) || id == playerid) return HataMesajGonder(playerid, "Geçersiz oyuncu.");
 	if(!IsPlayerNearPlayer(playerid, id, 5.0)) return HataMesajGonder(playerid, "Kiþiye yeterince yakýn deðilsiniz!");
 	if(!PlayerData[id][pKelepce]) return HataMesajGonder(playerid, "Bu kiþi kelepçeli deðil.");
 	new rast = random(100);
 	if(rast < 50)
 	{
        PlayerData[id][pKelepce] = 0;
    	PlayerData[id][pDragged] = 0;
		PlayerData[id][pDraggedBy] = INVALID_PLAYER_ID;
		KillTimer(PlayerData[id][pDragTimer]);
    	SetPlayerCuffed(id, false);
    	TogglePlayerControllable(id,true);
    	PlayerData[playerid][pEsyalar][14]--;
    	PlayerData[playerid][pKelepceKir] = gettime()+30;
    	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s adlý kiþi %s adlý kiþinin kelepçelerini kýrmayý dener.", ReturnName(playerid, 0), ReturnName(id, 0));
    	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* Baþarýlý. (( %s ))", ReturnName(playerid, 0));

 	}
 	else
 	{
    	PlayerData[playerid][pKelepceKir] = gettime()+30;
    	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s adlý kiþi %s adlý kiþinin kelepçelerini kýrmayý dener.", ReturnName(playerid, 0), ReturnName(id, 0));
    	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* Baþarýsýz. (( %s ))", ReturnName(playerid, 0));
 	}
	return 1;
}
CMD:kelepce(playerid, params[])
{
    new
	    userid;

	if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI)
		return HataMesajGonder(playerid, "Devlet memuru deðilsin.");
    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	if (sscanf(params, "u", userid))
	    return BilgiMesajGonder(playerid, "/kelepce [ID/Isim]");

	if (!OyundaDegil(userid))
	    return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil.");

    if (userid == playerid)
	    return HataMesajGonder(playerid, "Kendinizi kelepçeleyemezsiniz.");

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return HataMesajGonder(playerid, "Kiþiye yakýn deðilsiniz.");

    if (!PlayerData[userid][pSoklandi] && GetPlayerSpecialAction(userid) != SPECIAL_ACTION_HANDSUP && !PlayerData[userid][pYereYatirildi])
	    return HataMesajGonder(playerid, "Oyuncu etkisiz halde veya ellerini kaldýrmýþ olmalýdýr.");

	if (GetPlayerState(userid) != PLAYER_STATE_ONFOOT)
	    return HataMesajGonder(playerid, "Kiþi ayakta olmalýdýr.");

    if (PlayerData[userid][pKelepce])
        return HataMesajGonder(playerid, "Kiþi zaten kelepçelenmiþ durumda.");

	if (PlayerData[userid][pDrinking])
	{
        SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);

		DestroyPlayerProgressBar(userid, PlayerData[userid][pDrinkBar]);
		PlayerData[userid][pDrinking] = 0;
	}
	PlayerData[userid][pSoklandi] = 0;
	ClearAnimations(userid);
	SetPlayerArmedWeapon(userid,0);
    PlayerData[userid][pKelepce] = 1;
    SetPlayerCuffed(userid, true);
	TogglePlayerControllable(userid, true);
	SendClientMessageEx(userid,COLOR_LIGHTBLUE,"%s adlý memur tarafýndan kelepçelendiniz.",ReturnName(playerid,0));

    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kelepçelerini kavrar ve %s adlý kiþinin bileklerine geçirerek kelepçeler.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}
CMD:kelepcecikar(playerid, params[])
{
    new
	    userid;

    if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI)
		return HataMesajGonder(playerid, "Devlet memuru deðilsin.");

    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");

	if (sscanf(params, "u", userid))
	    return BilgiMesajGonder(playerid, "/kelepcecikar [ID/Ýsim]");

	if (!OyundaDegil(userid))
	    return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil.");

    if (userid == playerid)
	    return HataMesajGonder(playerid, "Kendi kelepçeni çözemezsin.");

    if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return HataMesajGonder(playerid, "Kiþiye yakýn deðilsiniz.");

    if (!PlayerData[userid][pKelepce])
        return HataMesajGonder(playerid, "Oyuncu kelepçeli deðil.");

    PlayerData[userid][pKelepce] = 0;
    PlayerData[userid][pDragged] = 0;
	PlayerData[userid][pDraggedBy] = INVALID_PLAYER_ID;
	KillTimer(PlayerData[userid][pDragTimer]);
    SetPlayerCuffed(userid, false);
    TogglePlayerControllable(userid,true);

    SendClientMessageEx(userid,COLOR_LIGHTBLUE," %s adlý memur tarafýndan kelepçeniz çýkarýldý.",ReturnName(playerid,0));

    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s adlý memur %s adlý kiþinin kelepçelerini çýkarýr.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}
CMD:surukle(playerid, params[])
{
	new
	    userid;
    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");

    if (sscanf(params, "u", userid))
	    return BilgiMesajGonder(playerid, "/surukle [ID/Isim]");

	if (!OyundaDegil(userid))
	    return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil.");

    if (userid == playerid)
	    return HataMesajGonder(playerid, "Kendinizi sürükleyemezsiniz.");

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return HataMesajGonder(playerid, "Kiþiye yakýn deðilsiniz.");

    if (!PlayerData[userid][pKelepce] && !PlayerData[userid][pSoklandi] && GetPVarInt(userid, "IpBaglandi") == 0)
        return HataMesajGonder(playerid, "Kiþi kelepçeli ya da þok etkisinde deðil.");

	if (PlayerData[userid][pDragged])
	{
	    PlayerData[userid][pDragged] = 0;
	    PlayerData[userid][pDraggedBy] = INVALID_PLAYER_ID;

	    KillTimer(PlayerData[userid][pDragTimer]);
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s, %s adlý kiþiyi sürüklemeyi býrakýr.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	else
	{
	    PlayerData[userid][pDragged] = 1;
	    PlayerData[userid][pDraggedBy] = playerid;

	    PlayerData[userid][pDragTimer] = SetTimerEx("DragUpdate", 200, true, "dd", playerid, userid);
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s, %s adlý kiþiyi sürüklemeye baþlar.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	return 1;
}
CMD:sm(playerid)
{
	if(GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI) return HataMesajGonder(playerid, "Devlet memuru deðilsin.");
	ShowPlayerDialog(playerid, 66, DIALOG_STYLE_LIST, "{8D8DFF}Sesli Megafon", "{FFFFFF}Teslim ol, etrafýn sarýldý!\n{FFFFFF}Burada olduðunu biliyoruz!\n{FFFFFF}Hey Sen! Polis, dur!\n{FFFFFF}Los Santos Polis Departmaný, olduðun yerde kal!\n{FFFFFF}Dur! yoksa ateþ açacaðýz!\n{FFFFFF}Hadi! Hadi! Hadi!\n{FFFFFF}Polis, kýpýrdama!\n{FFFFFF}Ellerin baþýnýn üstüne araçtan in!", "Seç","Kapat");
	return 1;
}
CMD:m(playerid,params[])
{
	return callcmd::megafon(playerid,params);
}
CMD:megafon(playerid, params[])
{
	if(GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI && GetFactionType(playerid) != BIRLIK_LSMD)
		return HataMesajGonder(playerid, "Bu komutu kullanamazsin.");
	new mesaj[75];
    if(sscanf(params, "s[250]", mesaj)) return BilgiMesajGonder(playerid,"/megafon [Mesaj]");
    if(strlen(mesaj) > 75) return HataMesajGonder(playerid, "Mesaj 75 karakter uzunluðunu geçemez.");
    new str[250];
    if(IsPlayerInAnyVehicle(playerid))
    {
	    format(str, sizeof(str), "** [ARAÇ MEGAFON] %s: %s ***", ReturnName(playerid, 0), mesaj);
	    ProxDetector(15.0, playerid, str, COLOR_YELLOW);
    }
    else
    {
        format(str, sizeof(str), "** [EL MEGAFON] %s: %s ***", ReturnName(playerid, 0), mesaj);
	    ProxDetector(15.0, playerid, str, COLOR_YELLOW);
    }
    return 1;
}
CMD:t(playerid,params[])
{
	if(GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_LSMD && GetFactionType(playerid) != BIRLIK_FBI && GetFactionType(playerid) != BIRLIK_GOV)
	    return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok.");
    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");

	if (isnull(params))
	    return BilgiMesajGonder(playerid, "/t [Mesaj]");

	static
	    string[250];


	if (strlen(params) > 64)
	{
	    if(GetFactionType(playerid) == BIRLIK_LSPD)
	    {
		    format(string,sizeof(string),"** (Telsiz) %s %s: %.64s",Birlik_GetRutbe(playerid),ReturnName(playerid,0), params);
		    SendBirlikMessage(PlayerData[playerid][pFaction], COLOR_RADIO, string);
		    format(string, sizeof(string),"...%s **", params[64]);
		    SendBirlikMessage(PlayerData[playerid][pFaction], COLOR_RADIO, string);
	    }
	    if(GetFactionType(playerid) == BIRLIK_LSMD)
	    {
	        format(string,sizeof(string),"** (Telsiz) %s %s: %.64s",Birlik_GetRutbe(playerid),ReturnName(playerid,0), params);
		    SendBirlikMessage(PlayerData[playerid][pFaction], 0xFF8282AA, string);
		    format(string, sizeof(string),"...%s **", params[64]);
		    SendBirlikMessage(PlayerData[playerid][pFaction], 0xFF8282AA, string);
	    }
	    if(GetFactionType(playerid) == BIRLIK_GOV)
	    {
	       	format(string,sizeof(string),"** (Telsiz) %s %s: %.64s",Birlik_GetRutbe(playerid),ReturnName(playerid,0), params);
		    SendBirlikMessage(PlayerData[playerid][pFaction], 0xAFAFAFFF, string);
		    format(string, sizeof(string),"...%s **", params[64]);
		    SendBirlikMessage(PlayerData[playerid][pFaction], 0xAFAFAFFF, string);
	    }

	}
	else
	{
	    if(GetFactionType(playerid) == BIRLIK_LSPD)
	    {
		    format(string,sizeof(string),"** (Telsiz) %s %s: %s",Birlik_GetRutbe(playerid),ReturnName(playerid,0),params);
		    SendBirlikMessage(PlayerData[playerid][pFaction], COLOR_RADIO, string);
	    }
		if(GetFactionType(playerid) == BIRLIK_LSMD)
		{
		    format(string,sizeof(string),"** (Telsiz) %s %s: %s",Birlik_GetRutbe(playerid),ReturnName(playerid,0), params);
		    SendBirlikMessage(PlayerData[playerid][pFaction], 0xFF8282AA, string);
		}
		if(GetFactionType(playerid) == BIRLIK_GOV)
		{
		    format(string,sizeof(string),"** (Telsiz) %s %s: %s",Birlik_GetRutbe(playerid),ReturnName(playerid,0),params);
		    SendBirlikMessage(PlayerData[playerid][pFaction], 0xAFAFAFFF, string);
		}
	}
	return 1;
}
CMD:op(playerid, params[])
{
    if(GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI)
	    return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok.");
	if(Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]-3 > PlayerData[playerid][pFactionRutbe]) return HataMesajGonder(playerid, "Bu komutu kullanmak için yeterli rütbede deðilsiniz.");
	if(isnull(params)) return BilgiMesajGonder(playerid, "/op [Mesaj]");
	new str[224];
	if(strlen(params) > 64)
	{
	    format(str, sizeof(str), "** (Operatör) %.64s", params);
	    SendBirlikMessage(PlayerData[playerid][pFaction], COLOR_RADIO, str);
	    format(str, sizeof(str), "...%s **", params[64]);
	}
	else
	{
	    format(str, sizeof(str), "** (Operatör) %s", params);
	    SendBirlikMessage(PlayerData[playerid][pFaction], COLOR_RADIO, str);
	}
	return 1;
}
CMD:yt(playerid, params[])
{
    if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI && GetFactionType(playerid) != BIRLIK_LSMD)
		return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");

    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	if (isnull(params))
	    return BilgiMesajGonder(playerid, "/yt [Mesaj]");

	new Float:ppos[3], string[250];
	GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);
	foreach(new i: Player)
	{
	    if(IsPlayerInRangeOfPoint(i, 35.0, ppos[0], ppos[1], ppos[2]) && (GetFactionType(i) == BIRLIK_LSPD || GetFactionType(i) == BIRLIK_FBI || GetFactionType(i) == BIRLIK_LSMD) )
		{
		    format(string, sizeof(string),"** (Yakýn Telsiz) %s %s: %s **", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), params);
        	SendClientMessage(i, COLOR_LIGHTBLUE, string);
		}
	}
	return 1;
}
CMD:callsign(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), id = Car_GetID(vehicleid);

	new string[32];
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Bu komutu kullanmak için aracýn içinde olmanýz gerekmektedir.");

	if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI && GetFactionType(playerid) != BIRLIK_LSMD )
		return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");

	if (AracInfo[id][aracFactionType] != BIRLIK_LSMD && AracInfo[id][aracFactionType] != BIRLIK_FBI && AracInfo[id][aracFactionType] != BIRLIK_LSPD)
	    return HataMesajGonder(playerid, "Bu araç callsign koymak için uygun deðil.");

	if(vehiclecallsign[GetPlayerVehicleID(playerid)] == 1)
	{
 		DestroyDynamic3DTextLabel(vehicle3Dtext[vehicleid]);
	    vehiclecallsign[vehicleid] = 0;
	    format(vehicletext[vehicleid], 24, "");
	    BilgiMesajGonder(playerid, "Callsign kaldýrýldý.");
	    return 1;
	}
	if(sscanf(params, "s[32]",string)) return BilgiMesajGonder(playerid, "/callsign [Birim Kodu]");
	if(vehiclecallsign[GetPlayerVehicleID(playerid)] == 0)
	{
	    format(vehicletext[vehicleid], 24, string);
 		vehicle3Dtext[vehicleid] = CreateDynamic3DTextLabelEx(string, COLOR_WHITE, 0.0, -2.8, 0.0, 10.0, INVALID_PLAYER_ID, vehicleid, 1);
		vehiclecallsign[vehicleid] = 1;
	}
	return 1;
}
CMD:birimler(playerid)
{
    if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI &&  GetFactionType(playerid) != BIRLIK_LSMD)
		return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");

	new string[1024], sayi, durum[256];
    for (new i = 1; i != MAX_VEHICLES; i ++) if(vehiclecallsign[i] == 1)
	{
	    format(durum, sizeof(durum), "Araç ID %d -   %s - %s\n", i, vehicletext[i], ReturnVehicleModelName(GetVehicleModel(i)));
		strcat(string, durum);
		sayi++;
	}
	if(sayi == 0) return HataMesajGonder(playerid, "Aktif birim yok.");
	Dialog_Show(playerid, birimler, DIALOG_STYLE_LIST, "Birimler", string, "Tamam", "");
	return 1;
}
CMD:d(playerid, params[])
{
	if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI &&  GetFactionType(playerid) != BIRLIK_LSMD)
	    return HataMesajGonder(playerid, "Bu komutu kullanamazsin.");

    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");

	if (isnull(params))
	    return BilgiMesajGonder(playerid, "/d [Mesaj]");

	for (new i = 0; i != MAX_BIRLIK; i ++) if (Birlikler[i][birlikTip] == BIRLIK_LSPD || Birlikler[i][birlikTip] == BIRLIK_FBI || Birlikler[i][birlikTip] == BIRLIK_LSMD || Birlikler[i][birlikTip] == BIRLIK_GOV) {
		SendBirlikMessage(i, COLOR_DEPARTMENT, "[%s] %s %s: %s", GetInitials(Birlikler[i][birlikAd]), Birlik_GetRutbe(playerid), ReturnName(playerid, 0), params);
	}
	Log_Write("logs/birlik_chat.txt", "[departman][%s] %s %s: %s", ReturnDate(), Birlik_GetRutbe(playerid), ReturnName(playerid, 0), params);
	return 1;
}
CMD:aracaat(playerid, params[])
{
	new
		userid,
		vehicleid = GetNearestVehicle(playerid);

    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");

	if (sscanf(params, "u", userid))
	    return BilgiMesajGonder(playerid, "/aracaat [ID/Isim]");

	if (!OyundaDegil(userid))
	    return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil.");

    if (userid == playerid)
	    return HataMesajGonder(playerid, "Kendini araca atamazsýn.");

    if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return HataMesajGonder(playerid, "Kiþiye yakýn deðilsiniz.");

    if (!PlayerData[userid][pKelepce] && GetPVarInt(userid, "IpBaglandi") == 0)
        return HataMesajGonder(playerid, "Kiþi þu anda kelepçeli veya baðlý deðil.");

	if (vehicleid == INVALID_VEHICLE_ID)
	    return HataMesajGonder(playerid, "Herhangi bir aracýn yakýnýnda deðilsin.");

	if (GetVehicleMaxSeats(vehicleid) < 2)
  	    return HataMesajGonder(playerid, "Bu araç dolu.");

	if (IsPlayerInVehicle(userid, vehicleid))
	{
		if(PlayerData[userid][pKelepce] != 1) TogglePlayerControllable(userid, 0);
		else TogglePlayerControllable(userid, 1);
		RemovePlayerFromVehicle(userid);
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s aracýn kapýsýný açar ve %s'ý araçtan indirir .", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	else
	{
	    if(PlayerData[userid][pBaygin] == 1)
	    {
	        PlayerData[userid][pBaygin] = 0;
	        PlayerData[userid][pBayginSure] = 0;
	        ClearAnimations(userid);
	        StopLoopingAnim(userid);
	    }
		new seatid = GetAvailableSeat(vehicleid, 2);

		if (seatid == -1)
		    return HataMesajGonder(playerid, "Boþ koltuk yok.");

		TogglePlayerControllable(userid, 0);

		PlayerData[userid][pDragged] = 0;
		PlayerData[userid][pDraggedBy] = INVALID_PLAYER_ID;
		KillTimer(PlayerData[userid][pDragTimer]);
		ClearAnimations(userid);
		PutPlayerInVehicle(userid, vehicleid, seatid);
		if(PlayerData[userid][pKelepce] == 1) TogglePlayerControllable(userid, false);
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kapýyý açar ve %s'ý koltuða oturtur.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	return 1;
}
CMD:aracicek(playerid, params[]) {
    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");

 	if(GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_FBI)
 	{
   		if(IsPlayerInAnyVehicle(playerid))
     	{
			new
				carid = GetPlayerVehicleID(playerid);

			if(GetVehicleModel(carid) == 525)
			{
   				new
					closestcar = GetClosestCar(playerid, carid);

				foreach(new i:Player) {
					if(AracCekiyor[i] == closestcar || (GetPlayerVehicleID(i) == closestcar && GetPlayerState(i) == 2)) return HataMesajGonder(playerid, "Ayný anda 2 aracý birden çekemezsin.");
				}
				new Float:VehiclePos[3];
				GetVehiclePos(closestcar,VehiclePos[0],VehiclePos[1],VehiclePos[2]);
       			if(GetPlayerDistanceFromPoint(playerid,VehiclePos[0],VehiclePos[1],VehiclePos[2]) <= 8 && !IsTrailerAttachedToVehicle(carid) && GetVehicleModel(closestcar) != 509) {
					MesajGonder(playerid,"Þuanda '%s' model aracý çekiyorsunuz.",ReturnVehicleModelName(GetVehicleModel(closestcar)));
					AttachTrailerToVehicle(closestcar,carid);
					AracCekiyor[playerid] = closestcar;
					return 1;
     			}
			}
			else HataMesajGonder(playerid,"Çekici aracýnda deðilsiniz.");
   		}
     	else HataMesajGonder(playerid, "Çekici aracýnda deðilsiniz.");
	}
   	else HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok.");
   	return 1;
}
CMD:aracicekmeyibirak(playerid, params[])
{
    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	if(GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_FBI)
  	{
   		if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
     	{
      		MesajGonder(playerid,"Aracý çekmeyi býraktýn.");
			AracCekiyor[playerid] = INVALID_VEHICLE_ID;
			DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
     	}
      	else
       	{
        	HataMesajGonder(playerid,"Þuanda herhangi bir aracý çekmiyorsun.");
        }
  	}
   	else
	{
 		HataMesajGonder(playerid, "Bu komutu kullanmaya yetkin yok.");
	}
	return 1;
}
CMD:ekonomi(playerid)
{
	if(GetFactionType(playerid) != BIRLIK_GOV) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
	if(PlayerData[playerid][pFactionRutbe] != Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]) return HataMesajGonder(playerid, "Rütbeniz yeterli deðil.");
	Ekonomi_Menu(playerid);
	return 1;
}
CMD:gov(playerid, params[])
{
    if(GetFactionType(playerid) != BIRLIK_GOV && GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_LSMD && GetFactionType(playerid) != BIRLIK_FBI) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
	if(isnull(params)) return BilgiMesajGonder(playerid, "/gov [Duyuru]");
	if(strlen(params) > 64)
	{
	    if(GetFactionType(playerid) == BIRLIK_GOV)
	    {
	        SendClientMessageToAllEx(0xAFAFAFFF, "[GOV] %s %s: {FFFFFF}%.64s", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), params);
	        SendClientMessageToAllEx(0xFFFFFFFF, "...%s", params[64]);
	    }
	    if(GetFactionType(playerid) == BIRLIK_LSPD)
	    {
	        SendClientMessageToAllEx(0x8D8DFFFF, "[LSPD] %s %s: {FFFFFF}%.64s", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), params);
	        SendClientMessageToAllEx(0xFFFFFFFF, "...%s", params[64]);
	    }
	    if(GetFactionType(playerid) == BIRLIK_FBI)
	    {
	        SendClientMessageToAllEx(0x8D8DFFFF, "[FBI] %s %s: {FFFFFF}%.64s", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), params);
	        SendClientMessageToAllEx(0xFFFFFFFF, "...%s", params[64]);
	    }
	    if(GetFactionType(playerid) == BIRLIK_LSMD)
	    {
	        SendClientMessageToAllEx(0xFF8282FF, "[LSMD] %s %s: {FFFFFF}%.64s", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), params);
	        SendClientMessageToAllEx(0xFFFFFFFF, "...%s", params[64]);
	    }

	}
	else
	{
	    if(GetFactionType(playerid) == BIRLIK_GOV)
	    {
	        SendClientMessageToAllEx(0xAFAFAFFF, "[GOV] %s %s: {FFFFFF}%s", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), params);
	    }
	    if(GetFactionType(playerid) == BIRLIK_LSPD)
	    {
	        SendClientMessageToAllEx(0x8D8DFFFF, "[LSPD] %s %s: {FFFFFF}%s", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), params);
	    }
	    if(GetFactionType(playerid) == BIRLIK_FBI)
	    {
	        SendClientMessageToAllEx(0x8D8DFFFF, "[FBI] %s %s: {FFFFFF}%s", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), params);
	    }
	    if(GetFactionType(playerid) == BIRLIK_LSMD)
	    {
	        SendClientMessageToAllEx(0xFF8282FF, "[LSMD] %s %s: {FFFFFF}%s", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), params);
	    }
	}
	return 1;
}
CMD:rozet(playerid, params[])
{

	if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI && GetFactionType(playerid) != BIRLIK_LSMD && GetFactionType(playerid) != BIRLIK_HABER && GetFactionType(playerid) != BIRLIK_GOV)
		return HataMesajGonder(playerid, "Bu komutu kullanamazsýnýz.");
    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");

	if(PlayerData[playerid][pOnDuty])
	{
	    PlayerData[playerid][pOnDuty] = false;
	    SetPlayerColor(playerid, 0xFFFFFFFF);
		MesajGonder(playerid, "Rozetiniz gizlendi. /rozet komutunu kullanarak rozetinizi tekrar açabilirsiniz.");
	}
	else
	{
	    SetFactionColor(playerid);
	    PlayerData[playerid][pOnDuty] = true;
	    MesajGonder(playerid, "Rozet gösterildi.");
	}

    return 1;
}
CMD:kimlikgoster(playerid,params[])
{
    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
 	static userid;
 	if(sscanf(params, "u", userid)) return BilgiMesajGonder(playerid, "/kimlikgoster [ID/Isim]");
 	if (!OyundaDegil(userid) || !IsPlayerNearPlayer(playerid, userid, 5.0)) return HataMesajGonder(playerid, "Oyuncu giriþ yapmamýþ veya oyuncuya yakýn deðilsin.");
	SendClientMessage(userid, COLOR_GREY, "-----------------------------------------------------------");
	SendClientMessageEx(userid, -1, "{FFFFFF}» Ad - Soyad: {C2A2DA}%s",Player_GetName(playerid));
	SendClientMessageEx(userid, -1, "{FFFFFF}» Yaþ: {C2A2DA}%d",PlayerData[playerid][pYas]);
	SendClientMessageEx(userid, -1, "{FFFFFF}» Cinsiyet: {C2A2DA}%s",(PlayerData[playerid][pCinsiyet] == 2) ? ("Bayan") : ("Erkek"));
	SendClientMessageEx(userid, -1, "{FFFFFF}» Doðum Yeri: {C2A2DA}%s",PlayerData[playerid][pDogum]);
	SendClientMessageEx(userid, -1, "{FFFFFF}» Ten Rengi: {C2A2DA}%s",(PlayerData[playerid][pTen] == 1) ? ("Beyaz") : ("Siyah"));
	SendClientMessage(userid, COLOR_GREY, "-----------------------------------------------------------");
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kimliðini çýkarýr ve %s'e gösterir.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}
CMD:rozetgoster(playerid,params[])
{
    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");

    if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI && GetFactionType(playerid) != BIRLIK_LSMD && GetFactionType(playerid) != BIRLIK_HABER && GetFactionType(playerid) != BIRLIK_GOV) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok.");
    static
	    userid;

	if (sscanf(params, "u", userid))
	    return BilgiMesajGonder(playerid, "/rozetgoster [ID/Ýsim]");

	if (!OyundaDegil(userid) || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return HataMesajGonder(playerid, "Oyuncu giriþ yapmamýþ veya oyuncuya yakýn deðilsin.");

	SendClientMessage(userid, COLOR_GREY, "-----------------------------------------------------------");
	SendClientMessageEx(userid, -1, "{FFFFFF}» Ad/Soyad: {C2A2DA}%s",Player_GetName(playerid));
	SendClientMessageEx(userid, -1, "{FFFFFF}» Yaþ: {C2A2DA}%d",PlayerData[playerid][pYas]);
	SendClientMessageEx(userid, -1, "{FFFFFF}» Cinsiyet: {C2A2DA}%s",(PlayerData[playerid][pCinsiyet] == 2) ? ("Bayan") : ("Erkek"));
	SendClientMessageEx(userid, -1, "{FFFFFF}» Doðum Yeri: {C2A2DA}%s",PlayerData[playerid][pDogum]);
	SendClientMessageEx(userid, -1, "{FFFFFF}» Kurum: {C2A2DA}%s",Birlikler[PlayerData[playerid][pFaction]][birlikAd]);
	SendClientMessageEx(userid, -1, "{FFFFFF}» Rütbe: {C2A2DA}%s",Birlik_GetRutbe(playerid));
	SendClientMessage(userid, COLOR_GREY, "-----------------------------------------------------------");

	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s rozetini çýkartýr ve %s'e gösterir.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}
CMD:aracibagla(playerid, params[])
{
	new ceza;
    if(GetFactionType(playerid) != BIRLIK_LSPD) return HataMesajGonder(playerid, "Devlet memuru deðilsin.");
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1601.3522,-1608.1353,13.6452)) return HataMesajGonder(playerid, "Araç baðlama yerine yakýn deðilsiniz.");
    if(sscanf(params, "i", ceza)) return BilgiMesajGonder(playerid, "/aracibagla [Ceza]");
    if(ceza < 50 || ceza > 3000) return HataMesajGonder(playerid, "En az $50, en fazla $3000 girebilirsiniz.");
    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)) && AracCekiyor[playerid] != INVALID_VEHICLE_ID && GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
    {
        new aid = Car_GetID(AracCekiyor[playerid]);
        if(AracInfo[aid][aracExists] && AracInfo[aid][aracModel] != 509)
        {
            AracInfo[aid][aracBaglandi] = 1;
            AracInfo[aid][aracBaglandiCeza] = ceza;
            AracInfo[aid][aracDisplay] = false;
            Arac_Kaydet(aid);
            DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
            Arac_Spawn(aid);
            AracCekiyor[playerid] = INVALID_VEHICLE_ID;
            if(AracInfo[aid][aracSahip] != -1)
            {
                if(GetPlayerIDWithSQLID(AracInfo[aid][aracSahip]) != -1)
                {
                    BilgiMesajGonder(GetPlayerIDWithSQLID(AracInfo[aid][aracSahip]), "'%s' model aracýnýz %s adlý memur tarafýndan baðlandý. (Ceza: %s)", ReturnVehicleModelName(AracInfo[aid][aracModel]), ReturnName(playerid, 0), FormatNumber(ceza));
                    SendBirlikMessage(PlayerData[playerid][pFaction], 0x8D8DFFFF, "** (Telsiz) %s model araç %s adlý memur tarafýndan baðlandý. (Ceza: %s)", ReturnVehicleModelName(AracInfo[aid][aracModel]), ReturnName(playerid, 0),FormatNumber(ceza));
                }
                else
                {
                    new str[50];
                    format(str, sizeof(str), "%s model aracýnýz %s adlý memur tarafýndan baðlandý.",ReturnVehicleModelName(AracInfo[aid][aracModel]), ReturnName(playerid, 0));
                    BildirimEkle(AracInfo[aid][aracSahip], str, "LSPD");
                    SendBirlikMessage(PlayerData[playerid][pFaction], 0x8D8DFFFF, "** (Telsiz) %s model araç %s adlý memur tarafýndan baðlandý. (Ceza: %s)", ReturnVehicleModelName(AracInfo[aid][aracModel]), ReturnName(playerid, 0),FormatNumber(ceza));
                }
            }
            MesajGonder(playerid, "Araç baðlandý.");
        }
	}
	return 1;
}
CMD:flasor(playerid, params[])
{
    if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_LSMD)
        return HataMesajGonder(playerid, "Bu komutu kullanamazsýnýz.");

    new vehicleid = GetPlayerVehicleID(playerid);

    if (!IsPlayerInAnyVehicle(playerid))
        return HataMesajGonder(playerid, "Bir aracýn içinde olmalýsýn.");

    switch (Flasher[vehicleid])
    {
        case 0:
        {
            Flasher[vehicleid] = 1;
            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s aracýn flaþörünü açar.", ReturnName(playerid, 0));
        }
        case 1:
        {
            Flasher[vehicleid] = 0;
            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s aracýn flaþörünü kapatýr.", ReturnName(playerid, 0));
        }
    }
    return 1;
}
CMD:siren(playerid, params[])
{
	if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI)
	    return HataMesajGonder(playerid, "Devlet memuru deðilsin.");

	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid))
	    return HataMesajGonder(playerid, "Herhangi bir araçta deðilsin.");

	new id = Car_GetID(vehicleid);
	if(id == -1) return HataMesajGonder(playerid, "Bu araca siren takýlamaz.");
	switch (AracInfo[id][aracSirenAcik])
	{
	    case false:
	    {
			static
        		Float:fSize[3],
        		Float:fSeat[3];

		    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, fSize[0], fSize[1], fSize[2]); // need height (z)
    		GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, fSeat[0], fSeat[1], fSeat[2]); // need pos (x, y)

            AracInfo[id][aracSirenAcik] = true;
			AracInfo[id][SirenObject] = CreateDynamicObject(18646, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);

		    AttachDynamicObjectToVehicle(AracInfo[id][SirenObject], vehicleid, -fSeat[0], fSeat[1], fSize[2] / 2.0, 0.0, 0.0, 0.0);
			MesajGonder(playerid, "Araca siren takýldý.");
		}
		case 1:
		{
		    AracInfo[id][aracSirenAcik] = false;

			DestroyDynamicObject(AracInfo[id][SirenObject]);
			MesajGonder(playerid, "Siren kapatýldý.");
		}
	}
	return 1;
}
CMD:destekiste(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI) return HataMesajGonder(playerid, "Devlet memuru deðilsiniz.");
	if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	if(PlayerData[playerid][pDestek] > 0) return HataMesajGonder(playerid, "Zaten destek isteðiniz var, /destekkapat ile kapatabilirsiniz.");
	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	PlayerData[playerid][pDestek] = 180;
	SendBirlikMessageEx(GetFactionType(playerid), COLOR_RADIO, "** (Telsiz) %s adlý memur %s bölgesine destek istiyor.", ReturnName(playerid, 0), GetLocation(pos[0], pos[1], pos[2]));
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telsizin acil durum butonuna basar ve destek ister.", ReturnName(playerid, 0));
	MesajGonder(playerid, "Destek istediniz, desteði kapatmak için /destekkapat komutunu kullanabilirsiniz.");

	return 1;
}
CMD:destekkapat(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
	if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI) return HataMesajGonder(playerid, "Devlet memuru deðilsiniz.");
	if(PlayerData[playerid][pDestek] < 1) return HataMesajGonder(playerid, "Destek isteðiniz yok.");
	DestekKapat(playerid, 0);
	return 1;
}
CMD:cctv(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
    if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI) return HataMesajGonder(playerid, "Devlet memuru deðilsiniz.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1488.1561,-1691.2668,-70.0371) && PlayerData[playerid][pCCTV] == -1) return HataMesajGonder(playerid, "CCTV izleme noktasýnda deðilsin.");
    CCTVMenu(playerid);
	return 1;
}
CMD:cctvcik(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pCCTV] == -1) return HataMesajGonder(playerid, "CCTV izlemiyorsunuz.");
    PlayerCancelCCTV(playerid);
	return 1;
}
CMD:yereyatir(playerid, params[])
{
	new hedefid;
    if(!OyundaDegil(playerid)) return 1;
    if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI) return HataMesajGonder(playerid, "Devlet memuru deðilsiniz.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return HataMesajGonder(playerid, "Araçta bu komutu kullanamazsýnýz.");
    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PlayerData[playerid][pHapisSure] > 0 || GetPVarInt(playerid, "IpBaglandi") == 1) return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
    if(sscanf(params, "u", hedefid)) return BilgiMesajGonder(playerid, "/yereyatir [ID/Isim]");
    if(!OyundaDegil(hedefid)) return HataMesajGonder(playerid, "Oyuncu giriþ yapmamýþ.");
    if(hedefid == playerid) return HataMesajGonder(playerid, "Kendi kendini yere yatýramazsýn.");
    if(!IsPlayerNearPlayer(playerid, hedefid, 2.0) || GetPlayerState(hedefid) == PLAYER_STATE_SPECTATING) return HataMesajGonder(playerid, "Kiþiye yeterince yakýn deðilsiniz.");
    if(GetPlayerState(hedefid) != PLAYER_STATE_ONFOOT) return HataMesajGonder(playerid, "Araçta olan bir kiþiyi yere yatýramazsýnýz.");
    if(PlayerData[hedefid][pKelepce] > 0 || PlayerData[hedefid][pHapisSure] > 0 || PlayerData[hedefid][pSoklandi] > 0 || PlayerData[hedefid][pYereYatirildi] > 0 || PlayerData[hedefid][pBaygin] == 1 || PetKontrol[hedefid] != -1 || pbOda[hedefid] != -1)
 	return HataMesajGonder(playerid, "Bu kiþiyi yere yatýramazsýnýz.");

    //if(spamProtect(playerid, "YereYatir", 10)) return HataMesajGonder(playerid, "Tekrar yere yatýrmak için 10 saniye beklemelisiniz.");

    PlayerData[hedefid][pYereYatirildi] = 12;
    ApplyAnimation(hedefid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
    TogglePlayerControllable(hedefid, 0);
    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s %s'in üzerine atlar ve yere yatýrýr.", ReturnName(playerid, 0), ReturnName(hedefid, 0));
	return 1;
}
CMD:mdc(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI) return HataMesajGonder(playerid, "Devlet memuru deðilsiniz.");
    if(!IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Polis aracýnýn içerisinde olmalýsýnýz.");
    new id = Car_GetID(GetPlayerVehicleID(playerid));
    if(AracInfo[id][aracFactionType] != BIRLIK_LSPD && AracInfo[id][aracFactionType] != BIRLIK_FBI) return HataMesajGonder(playerid, "Polis aracýnýn içerisinde olmalýsýnýz.");

    MenuMVB(playerid);
	return 1;
}
CMD:hapseat(playerid, params[])
{
    if(!OyundaDegil(playerid)) return 1;
    if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI) return HataMesajGonder(playerid, "Devlet memuru deðilsiniz.");
    if(!IsPlayerNearArrest(playerid)) return HataMesajGonder(playerid, "Hapse atma noktasýnda deðilsiniz.");
    new userid, time;
    if(sscanf(params, "ui", userid, time)) return BilgiMesajGonder(playerid, "/hapseat [ID/Isim] [Dakika]");
    if(!OyundaDegil(userid)) return HataMesajGonder(playerid, "Oyuncu oyunda deðil.");
    if(!IsPlayerNearPlayer(playerid, userid, 4.0) || GetPlayerState(userid) == PLAYER_STATE_SPECTATING) return HataMesajGonder(playerid, "Kiþiye yeterince yakýn deðilsiniz.");
    if(time < 2 || time > 500) return HataMesajGonder(playerid, "Dakika 2 ve 500 arasýnda olmalýdýr.");
    if(PlayerData[userid][pAranma] < 1) return HataMesajGonder(playerid, "Bu kiþinin aranmasý yok.");

    PlayerData[userid][pHapis] = 1;
    PlayerData[userid][pHapisSure] = time*60;
    if (PlayerData[userid][pDragged])
	{
	    PlayerData[userid][pDragged] = 0;
		PlayerData[userid][pDraggedBy] = INVALID_PLAYER_ID;
		KillTimer(PlayerData[userid][pDragTimer]);
	}
	SetPlayerInPrison(userid);
	ResetWeapons(userid);
	PlayerData[userid][pKelepce] = 0;
	SetPlayerCuffed(userid, false);
	TogglePlayerControllable(userid, true);
	PlayerData[userid][pAranma] = 0;
	SetPlayerWantedLevel(userid, 0);
	DisablePlayerCheckpoint(userid);
	PlayerTextDrawShow(userid, HapisTD[playerid]);
	SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);
	SendBirlikMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "** (Telsiz) %s %s, %s adlý kiþiyi %d gün ((Dakika)) hapse attý.", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), ReturnName(userid, 0), time);
	MesajGonder(userid, "%s adlý memur tarafýndan %d dakika hapse atýldýnýz.", ReturnName(playerid, 0), time);
	return 1;
}
CMD:hasarlar(playerid, params[])
{
	static
	    userid, hasarsayi;

	if (sscanf(params, "u", userid))
	    return BilgiMesajGonder(playerid, "/hasarlar [ID/Isim]");

	if(!OyundaDegil(userid))
	    return HataMesajGonder(playerid, "Böyle bir oyuncu yok!");

	if(!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return HataMesajGonder(playerid, "Kiþiye yeterince yakýn deðilsiniz.");

    if (!PlayerData[userid][pBaygin])
	    return HataMesajGonder(playerid, "Bu oyuncu yaralý deðil!");

    static
		string[MAX_HASAR * 60];

	string[0] = 0;

	strcat(string, "Hasar\tBölge\tHasar Veren\tSilah\n");
	for (new i = 0; i < MAX_HASAR; i ++)
	{
		if (Hasarlar[userid][i][hasarVarmi]) {
			format(string, sizeof(string), "%s%.2f\t%s\t%s\t%s\n", string, Hasarlar[userid][i][hasarDeger], HasarBolge(Hasarlar[userid][i][hasarBolge]), (!IsPlayerConnected(Hasarlar[userid][i][hasarVeren])) ? ("Yok") : (ReturnName(Hasarlar[userid][i][hasarVeren], 0)), ReturnWeaponName(Hasarlar[userid][i][hasarSilah]));
			hasarsayi++;
		}
	}
	if(hasarsayi == 0) return HataMesajGonder(playerid, "Hiç hasarý yok.");
	Dialog_Show(playerid, Hasarlar, DIALOG_STYLE_TABLIST_HEADERS, ReturnName(userid, 0), string, "Tamam", "{FF6347}Iptal");
	return 1;
}
CMD:iyilestir(playerid, params[])
{
	new id;
	if(!OyundaDegil(playerid)) return 1;
	if (GetFactionType(playerid) != BIRLIK_LSMD) return HataMesajGonder(playerid, "LSMD üyesi deðilsiniz.");
	if(PlayerData[playerid][pIyilestiriyor] != -1) return HataMesajGonder(playerid, "Zaten þuanda birisini tedavi ediyorsun.");
	if(PlayerData[playerid][pBaygin] > 0 || PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pDrinking] > 0 || PlayerData[playerid][pHapisSure] > 0 || IsPlayerInAnyVehicle(playerid) || GetPVarInt(playerid, "IpBaglandi") == 1) return HataMesajGonder(playerid, "Þu an bunu yapamazsýnýz.");
	if(sscanf(params, "u", id)) return BilgiMesajGonder(playerid, "/iyilestir [ID/Isim]");
	if(!OyundaDegil(id)) return HataMesajGonder(playerid, "Böyle bir oyuncu yok!");
	if(!IsPlayerNearPlayer(playerid, id, 2.5)) return HataMesajGonder(playerid, "Kiþiye yeterince yakýn deðilsiniz.");
	if(id == playerid) return HataMesajGonder(playerid, "Kendini iyileþtiremezsin.");
	if(PlayerData[id][pBaygin] != 1) return HataMesajGonder(playerid, "Bu oyuncu yaralý deðil!");
	if(GetPVarInt(id, "Iyilestiriliyor") == 1) return HataMesajGonder(playerid, "Bu oyuncu zaten iyileþtiriliyor.");
	PlayerData[playerid][pIyilestiriyor] = id;
	PlayerData[playerid][pIyilestirmeSure] = 0;
	PlayerData[playerid][pLoopAnim] = true;
	SetPVarInt(id, "Iyilestiriliyor", 1);
	SetPlayerArmedWeapon(playerid, 0);
	new Float:pos[3];
	GetPlayerPos(id, pos[0], pos[1], pos[2]);
	SetPlayerLookAt(playerid, pos[0], pos[1]);
	TogglePlayerControllable(playerid, false);
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 1, 1, 0, 0, 1);
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 1, 1, 0, 0, 1);
	MesajGonder(playerid, "%s adlý kiþiyi tedavi ediyorsun, 15 saniye sonra bitecek.", ReturnName(id, 0));
	return 1;
}
CMD:yaralilar(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if (GetFactionType(playerid) != BIRLIK_LSMD) return HataMesajGonder(playerid, "LSMD üyesi deðilsiniz.");
   	if(PlayerData[playerid][pBaygin] > 0 || PlayerData[playerid][pHapisSure] > 0) return HataMesajGonder(playerid, "Bunu þu an yapamazsýn.");
    YaraliListesi(playerid);
	return 1;
}
CMD:yaracaat(playerid, params[])
{
    if(!OyundaDegil(playerid)) return 1;
    if (GetFactionType(playerid) != BIRLIK_LSMD) return HataMesajGonder(playerid, "LSMD üyesi deðilsiniz.");
    if(IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araçtan inmelisiniz.");
    new id, seatid;
    if(sscanf(params, "u", id)) return BilgiMesajGonder(playerid, "/yaracaat [ID/Isim]");
    if(!OyundaDegil(id) || !IsPlayerNearPlayer(playerid, id, 5.0)) return HataMesajGonder(playerid, "Böyle bir oyuncu yok veya kiþiye yeterince yakýn deðilsiniz.");
    if(id == playerid) return HataMesajGonder(playerid, "Kendinizi araca atamazsýnýz.");
    if(IsPlayerInAnyVehicle(id)) return HataMesajGonder(playerid, "Bu oyuncu zaten araçta.");
    if(PlayerData[id][pBaygin] != 1) return HataMesajGonder(playerid, "Bu oyuncu yaralý deðil!");
    for (new i = 0; i != MAX_VEHICLES; i ++) if (IsPlayerNearBoot(playerid, i) && (GetVehicleModel(i) == 416 || GetVehicleModel(i) == 487))
    {
        seatid = GetAvailableSeat(i, 2);

	    if (seatid == -1)
	        return HataMesajGonder(playerid, "Araçta boþ yer yok.");

	    ClearAnimations(id);
	    StopLoopingAnim(id);
	    CanAyarla(id, 100);
	    SetPVarInt(id, "AracaBindi", 1);
	    PutPlayerInVehicle(id, i, seatid);
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s, %s adlý kiþiyi sedyeye yerleþtirir ve emniyet kemerini baðlayarak araca bindirir.", ReturnName(playerid, 0), ReturnName(id, 0));
	    TogglePlayerControllable(id, false);
	    return 1;
    }
    HataMesajGonder(playerid, "Herhangi bir ambulans aracýna yakýn deðilsiniz.");
	return 1;
}
CMD:yteslim(playerid, params[])
{
    if(!OyundaDegil(playerid)) return 1;
    if (GetFactionType(playerid) != BIRLIK_LSMD) return HataMesajGonder(playerid, "LSMD üyesi deðilsiniz.");
    if(!IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araçta olmalýsýnýz.");
    if(!IsPlayerInRangeOfPoint(playerid, 7.0, 1142.4302,-1330.7209,13.5374)) return HataMesajGonder(playerid, "Yaralý teslim noktasýna yakýn deðilsiniz.");
    new userid;
    if (sscanf(params, "u", userid)) return BilgiMesajGonder(playerid, "/yteslim [ID/Isim]");
	if (!OyundaDegil(userid) || !IsPlayerInVehicle(playerid, GetPlayerVehicleID(playerid))) return HataMesajGonder(playerid, "Bu oyuncu sizin aracýnýzda deðil veya baðlantýsý kesildi.");
	if (userid == playerid) return HataMesajGonder(playerid, "Hastaneye kendinizi teslim edemezsiniz.");
	if(PlayerData[userid][pBaygin] != 1) return HataMesajGonder(playerid, "Bu oyuncu aðýr yaralý deðil.");
 	PlayerData[userid][pBaygin] = 0;
  	PlayerData[userid][pBayginSure] = 0;
  	PlayerData[userid][pTopallama] = false;
  	PlayerData[userid][pTopallamaSayac] = 0;
  	SetPVarInt(userid, "AracaBindi", 0);
   	SetPlayerPos(userid, 1173.6667,-1322.4286,15.1954);
    SetPlayerInterior(userid, 0);
    SetPlayerVirtualWorld(userid, 0);
    SetPlayerFacingAngle(userid, 267.3835);
    TogglePlayerControllable(userid, true);
    CanAyarla(userid, 100);
    ClearAnimations(userid);
    StopLoopingAnim(userid);
    ResetPlayerDamages(userid);
	if(GetFactionType(userid) == BIRLIK_LSPD || GetFactionType(userid) == BIRLIK_LSMD || GetFactionType(userid) == BIRLIK_FBI)
	{
 		SendClientMessage(userid, 0xFF8282AA, "Hastane masraflarý devlet tarafýndan ödendi, iyi günler.");
   		if(PlayerData[userid][pAranma] > 0)
    	{
     		SendBirlikMessageEx(BIRLIK_LSPD, COLOR_RADIO, "** (Telsiz) All Saints Hastanesi %s adlý kiþiyi aranan olarak bildirdi.",ReturnName(userid,0));
       		SendBirlikMessageEx(BIRLIK_FBI, COLOR_RADIO, "** (Telsiz) All Saints Hastanesi %s adlý kiþiyi aranan olarak bildirdi.",ReturnName(userid,0));
	    }
	}
	else
	{
 		ParaVer(userid, -150);
   		SendClientMessage(userid, 0xFF8282AA, "Hastane masraflarý için $150 ödediniz, iyi günler.");
	    ResetWeapons(userid);
	    if(PlayerData[userid][pAranma] > 0)
	    {
     		SendBirlikMessageEx(BIRLIK_LSPD, COLOR_RADIO, "** (Telsiz) All Saints Hastanesi %s adlý kiþiyi aranan olarak bildirdi.",ReturnName(userid,0));
       		SendBirlikMessageEx(BIRLIK_FBI, COLOR_RADIO, "** (Telsiz) All Saints Hastanesi %s adlý kiþiyi aranan olarak bildirdi.",ReturnName(userid,0));
	    }
	}
	EMSKabul[playerid] = INVALID_PLAYER_ID;
	ParaVer(playerid, 250);
	MesajGonder(playerid, "Yaralý teslim edildi, $250 kazandýnýz.");
	return 1;
}
forward TextdrawAc(playerid);
public TextdrawAc(playerid)
{
	PlayerTextDrawShow(playerid, Textdraw1[playerid]);
	SetTimerEx("TextdrawKapa", 1000, false, "i", playerid);
	return 1;
}

forward TextdrawKapa(playerid);
public TextdrawKapa(playerid)
{
	PlayerTextDrawHide(playerid, Textdraw1[playerid]);
	return 1;
}
stock Jammer_Near(playerid)
{
    for (new i = 0; i != MAX_JAMMERS; i ++) if (JammerData[i][jammerExists] && IsPlayerInRangeOfPoint(playerid, JammerData[i][jammerMenzil], JammerData[i][jammerPos][0], JammerData[i][jammerPos][1], JammerData[i][jammerPos][2]))
	{
		return 1;
	}
	return 0;
}
CMD:lsmdlobi(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if (GetFactionType(playerid) == BIRLIK_LSMD) return HataMesajGonder(playerid, "LSMD üyeleri bu komutu kullanamaz.");
    if(!IsPlayerInRangeOfPoint(playerid, 3.5, 1131.8615,-1321.4219,-77.5419)) return HataMesajGonder(playerid, "LSMD lobide deðilsiniz.");
    Dialog_Show(playerid, LSMDLobi, DIALOG_STYLE_LIST, "LSMD Lobi", "{FF8282}» {FFFFFF}Tedavi Ol\n{FF8282}» {FFFFFF}Doktor Çaðýr\n{FF8282}» {FFFFFF}Baðýmlýlýktan Kurtul", "Seç", "Kapat");
	return 1;
}
CMD:telefon(playerid)
{
	if(Jammer_Near(playerid)) return HataMesajGonder(playerid, "Sinyal yok.");
	if(PlayerData[playerid][pTelefon] == -1) return HataMesajGonder(playerid, "Telefonunuz yok.");
	if(PlayerData[playerid][pBaygin] > 0 || PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pDrinking] > 0 || PlayerData[playerid][pHapisSure] > 0 || pbOda[playerid] != -1 || PlayerData[playerid][pSoklandi] > 0 || PetKontrol[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1) return HataMesajGonder(playerid, "Telefonunuzu þu an kullanamazsýnýz.");
	Telefon_Menu(playerid);
	return 1;
}
CMD:cagrikabul(playerid)
{
	if(PlayerData[playerid][pTelefon] == -1) return HataMesajGonder(playerid, "Telefonunuz yok.");
	if(PlayerData[playerid][pAramada] != ARAMA_ARANIYOR) return HataMesajGonder(playerid, "Gelen çaðrý yok.");
	if(PlayerData[playerid][pBaygin] > 0 || PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pDrinking] > 0 || PlayerData[playerid][pHapisSure] > 0 || pbOda[playerid] != -1 || PetKontrol[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1) return HataMesajGonder(playerid, "Bunu þu an yapamazsýnýz.");
	if(!OyundaDegil(PlayerData[playerid][pCallLine]))
	{
		PlayerData[playerid][pAramada] = 0;
		PlayerData[playerid][pCallLine] = -1;
		BilgiMesajGonder(playerid, "Baðlantý kesildi.");
		return 1;
	}
	new target = PlayerData[playerid][pCallLine];
	PlayerData[playerid][pAramada] = ARAMA_KONUSUYOR;
	PlayerData[target][pAramada] = ARAMA_KONUSUYOR;
	MesajGonder(target, "Alýcý telefonu açtý, /cagrikapat ile çaðrýyý istediðiniz zaman sonlandýrabilirsiniz.");
	MesajGonder(playerid, "Telefonu açtýn, /cagrikapat ile çaðrýyý istediðiniz zaman sonlandýrabilirsiniz.");
	return 1;
}
CMD:cagrikapat(playerid)
{
	if(PlayerData[playerid][pTelefon] == -1) return HataMesajGonder(playerid, "Telefonunuz yok.");
	if(PlayerData[playerid][pAramada] == 0) return HataMesajGonder(playerid, "Herhangi bir aramada deðilsiniz.");
	CagriKapat(playerid);
	return 1;
}
CMD:frekans(playerid, params[])
{
	new frekans;
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pRadyo] != 1) return HataMesajGonder(playerid, "Portatif Radyonuz yok.");
    if(PlayerData[playerid][pBaygin] > 0 || PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || GetPVarInt(playerid, "IpBaglandi") == 1) return HataMesajGonder(playerid, "Bunu þu an yapamazsýnýz.");
    if(sscanf(params, "i", frekans)) return BilgiMesajGonder(playerid, "/frekans [Frekans] (0 yazarsanýz kapatýlýr)");
    if(frekans > 9999999 || frekans < -9999999) return HataMesajGonder(playerid, "Frekans -9999999 ile 9999999 arasýnda olmalý!");
    PlayerData[playerid][pFrekans] = frekans;
    MesajGonder(playerid, "Portatif Radyo frekansýnýzý %d kHz olarak ayarladýnýz.", frekans);
	return 1;
}
CMD:r(playerid, params[])
{
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pRadyo] != 1) return HataMesajGonder(playerid, "Portatif Radyonuz yok.");
    if(PlayerData[playerid][pBaygin] > 0 || PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || GetPVarInt(playerid, "IpBaglandi") == 1) return HataMesajGonder(playerid, "Bunu þu an yapamazsýnýz.");
    if(PlayerData[playerid][pFrekans] == 0) return HataMesajGonder(playerid, "Frekansýnýz henüz ayarlanmamýþ, /frekans ile ayarlayabilirsiniz.");
    if(isnull(params)) return BilgiMesajGonder(playerid, "/r [Mesaj]");
    new str[155];
    format(str, sizeof(str), "** (Portatif Radyo) %s: %s",ReturnName(playerid, 0), params);
    SendRadioMessage(PlayerData[playerid][pFrekans], 0x39D8EDFF, str);
	return 1;
}
CMD:boombox(playerid, params[])
{
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pBoombox] != 1) return HataMesajGonder(playerid, "Müzik kutunuz yok!");
    if(PlayerData[playerid][pBaygin] > 0 || PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || GetPVarInt(playerid, "IpBaglandi") == 1) return HataMesajGonder(playerid, "Bunu þu an yapamazsýnýz.");
    new type[24], string[128];
    if (sscanf(params, "s[24]S()[128]", type, string))
	{
	    BilgiMesajGonder(playerid, "/boombox [Parametre]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[PARAMETRELER]:{FFFFFF} koy, al, url");
	    return 1;
	}
	if (!strcmp(type, "koy", true))
	{
	    if (BoomboxData[playerid][boomboxPlaced])
	        return HataMesajGonder(playerid, "Zaten bir Boombox koymuþsun.");

		if (Boombox_Nearest(playerid) != INVALID_PLAYER_ID)
		    return HataMesajGonder(playerid, "Yakýnlarda müzik kutusu var, baþka bir yer seç.");

		if (IsPlayerInAnyVehicle(playerid))
		    return HataMesajGonder(playerid, "Bu komutu araçta kullanamazsýn.");

		if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0) return HataMesajGonder(playerid, "Ýnterior içerisine boombox koyamazsýn.");
		Boombox_Place(playerid);

		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bir müzik kutusu alýr ve yere koyar.", ReturnName(playerid, 0));
		MesajGonder(playerid, "Müzik kutusunu koydun. (/boombox)");
	}
	else if (!strcmp(type, "al", true))
	{
	    if (!BoomboxData[playerid][boomboxPlaced])
	        return HataMesajGonder(playerid, "Boombox koymamýþsýnýz!");

		if (!IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]))
		    return HataMesajGonder(playerid, "Müzik kutusunun yakýnýnda olmalýsýnýz!");

		Boombox_Destroy(playerid);
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s müzik kutusunu yerden alýr.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "url", true))
	{
	    if (sscanf(string, "s[128]", string))
	        return BilgiMesajGonder(playerid, "/boombox [url] [müzik url]");

        if (!BoomboxData[playerid][boomboxPlaced])
	        return HataMesajGonder(playerid, "Müzik kutusu koymamýþsýn.");

		if (!IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]))
		    return HataMesajGonder(playerid, "Müzik kutusunun yanýnda olmalýsýn.");

		Boombox_SetURL(playerid, string);
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s müzik kutusunu baþka bir radyo istasyonuna çevirir.", ReturnName(playerid, 0));
	}
	return 1;
}
CMD:yakital(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    new id = Pump_Closest(playerid);
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "Sürücü deðilsiniz!");
    if(UsingPumpID[playerid] != -1) return HataMesajGonder(playerid, "Zaten yakýt alýyorsunuz, /yakitiptal ile iptal edebilirsiniz.");
    if(id == -1) return HataMesajGonder(playerid, "Yakýt alma noktasýna yakýn deðilsiniz!");
    new vehicleid = GetPlayerVehicleID(playerid), vehid = Car_GetID(vehicleid);
    if(vehid == -1 || Vehicle_IsANoFuelVehicle(AracInfo[vehid][aracModel]) || AracInfo[vehid][aracBenzin] > 99.0) return HataMesajGonder(playerid, "Bu aracýn yakýta ihtiyacý yok!");
    if(OyundaDegil(PumpData[id][pumpUser])) return HataMesajGonder(playerid, "Bu gaz pompasý baþkasý tarafýndan kullanýlýyor, biraz bekleyiniz.");
    if(GetEngineStatus(vehicleid) == 1) return HataMesajGonder(playerid, "Aracýn motorunu kapatmalýsýnýz. (/motor)");
    if(PlayerData[playerid][pCash] < GetServerBilgi("BenzinFiyat")) return HataMesajGonder(playerid, "Yeterli paranýz yok!");
    UsingPumpID[playerid] = id;
    PumpData[id][pumpUser] = playerid;
	Pump_Update(id);
	PlayerTextDrawSetString(playerid, FuelText[playerid], "~b~~h~Dolduruluyor...~n~~n~~w~Fiyat: ~g~~h~$0 ~y~~h~(0 L)");
	PlayerTextDrawShow(playerid, FuelText[playerid]);
	RefuelTimer[playerid] = SetTimerEx("Refuel", 500, true, "ii", playerid, vehid);

	MesajGonder(playerid, "Yakýt dolduruluyor, /yakitiptal ile iptal edebilirsiniz!");
	return 1;
}
CMD:yakitiptal(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	if(UsingPumpID[playerid] == -1) return HataMesajGonder(playerid, "Yakýt doldurmuyorsun!");
	Fuel_ResetPlayer(playerid);
	return 1;
}
CMD:kumar(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    new id = Business_Inside(playerid);
    if(id == -1 || Isyeri[id][isyeriTip] != 7) return HataMesajGonder(playerid, "Kumarhane tipi iþyerinde deðilsiniz.");
    if(PlayerData[playerid][pLevel] < 2) return HataMesajGonder(playerid, "Kumar oynamak için en az 2 seviye olmalýsýnýz.");
    Dialog_Show(playerid, Kumarhane, DIALOG_STYLE_LIST, "Kumarhane", "{AA3333}» {FFFFFF}Singlepair (Tek/Çift)\n{AA3333}» {FFFFFF}SupremeNumber\n{AA3333}» {FFFFFF}Zar Düellosu", "Seç", "Kapat");
	return 1;
}
CMD:dinle(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	SetPVarInt(playerid, "AjansPage", 0);
	AjansListele(playerid);
	return 1;
}
CMD:yayin(playerid, params[])
{
	if(GetFactionType(playerid) != BIRLIK_HABER) return HataMesajGonder(playerid, "Yayýn ajansýna üye deðilsiniz.");
	if(Birlikler[PlayerData[playerid][pFaction]][yayinDurum] == 0) return HataMesajGonder(playerid, "Yayýn ajansýnýzýn yayýn durumu kapalý olduðu için yayýn yapamazsýnýz.");
	if (!IsNewsVehicle(GetPlayerVehicleID(playerid))) return HataMesajGonder(playerid, "Haber tipi bir araçta deðilsiniz.");
	if(isnull(params)) return BilgiMesajGonder(playerid, "/yayin [Yazý]");
	if(strlen(params) > 64)
	{
	    foreach (new i : Player) if((PlayerData[i][pDinle] == PlayerData[playerid][pFaction] || i == playerid) && PlayerData[i][pAyarlar][2] == 0)
	    {
	        SendClientMessageEx(i, 0x42f445FF, "[%s] %s: %.64s", Birlikler[PlayerData[playerid][pFaction]][birlikAd], ReturnName(playerid, 0), params);
		    SendClientMessageEx(i, 0x42f445FF, "...%s", params[64]);
	    }
	}
	else
	{
	    foreach (new i : Player) if((PlayerData[i][pDinle] == PlayerData[playerid][pFaction] || i == playerid) && PlayerData[i][pAyarlar][2] == 0)
	    {
	        SendClientMessageEx(i, 0x42f445FF, "[%s] %s: %s", Birlikler[PlayerData[playerid][pFaction]][birlikAd], ReturnName(playerid, 0), params);
	    }
	}
	return 1;
}
CMD:yayinmuzik(playerid, params[])
{
    if(GetFactionType(playerid) != BIRLIK_HABER) return HataMesajGonder(playerid, "Yayýn ajansýna üye deðilsiniz.");
    if(Birlikler[PlayerData[playerid][pFaction]][yayinDurum] == 0) return HataMesajGonder(playerid, "Yayýn ajansýnýzýn yayýn durumu kapalý olduðu için yayýn yapamazsýnýz. (/birlik)");
    if(Birlikler[PlayerData[playerid][pFaction]][yayinTipi] == 0) return HataMesajGonder(playerid, "Yayýn tipi haber olduðu için müzik açamazsýnýz. (/birlik)");
    if (!IsNewsVehicle(GetPlayerVehicleID(playerid))) return HataMesajGonder(playerid, "Haber tipi bir araçta deðilsiniz.");
    if(isnull(params)) return BilgiMesajGonder(playerid, "/yayinmuzik [URL]");
    foreach(new i:Player) if((PlayerData[i][pDinle] == PlayerData[playerid][pFaction] || i == playerid) && PlayerData[i][pAyarlar][2] == 0)
    {
        StopAudioStreamForPlayer(i);
        PlayAudioStreamForPlayer(i, params);
        SendClientMessageEx(i, 0x42f445FF, "[%s] %s yayýn müziðini deðiþtirdi.", Birlikler[PlayerData[playerid][pFaction]][birlikAd], ReturnName(playerid, 0));
    }
	return 1;
}
CMD:cekiliskatil(playerid)
{
	if(PlayerData[playerid][pDinle] == -1) return HataMesajGonder(playerid, "Herhangi bir yayýný dinlemiyorsunuz. (/dinle)");
	if(Birlikler[PlayerData[playerid][pDinle]][birlikExists] == 0 || Birlikler[PlayerData[playerid][pDinle]][birlikTip] != BIRLIK_HABER || Birlikler[PlayerData[playerid][pDinle]][CekilisBasladi] == false) return HataMesajGonder(playerid, "Dinlediðiniz yayýn ajansý çekiliþ baþlatmamýþ.");
	if (Iter_Contains(CekilisKatilimcilar[PlayerData[playerid][pDinle]], PlayerData[playerid][pID])) return HataMesajGonder(playerid, "Zaten bu çekiliþe katýlmýþsýnýz!");
	if (Iter_Count(CekilisKatilimcilar[PlayerData[playerid][pDinle]]) >= 300) return HataMesajGonder(playerid, "Çekiliþ katýlým limiti doldu.");
	Iter_Add(CekilisKatilimcilar[PlayerData[playerid][pDinle]], PlayerData[playerid][pID]);
	MesajGonder(playerid, "Çekiliþe katýldýnýz.");
	return 1;
}
CMD:reklamver(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	new id = Reklam_Nearest(playerid, 5.0);
	if(id == -1) return HataMesajGonder(playerid, "Herhangi bir ajansýn reklam noktasýna yakýn deðilsiniz.");
	if(Birlikler[id][ReklamAlimi] != 1) return HataMesajGonder(playerid, "Bu ajans reklam almýyor.");
	if(Birlikler[id][ReklamUcreti] > PlayerData[playerid][pCash]) return HataMesajGonder(playerid, "Reklam ücretini karþýlamýyorsunuz.");
	if(Birlik_AktifUye(id) <= 0) return HataMesajGonder(playerid, "Bu ajansýn aktif bir çalýþaný yok.");
	if(PlayerData[playerid][pFaction] == id) return HataMesajGonder(playerid, "Üyesi olduðunuz ajansa reklam veremezsiniz.");
	SetPVarInt(playerid, "ajansID", id);
	Dialog_Show(playerid, ReklamVer, DIALOG_STYLE_INPUT, "{42f445}Reklam", "{FFFFFF}Lütfen reklam metnini girin:", "Gönder", "Kapat");
	return 1;
}
CMD:reklamlar(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
	if(PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid, "Ajans üyesi deðilsiniz.");
	if(GetFactionType(playerid) != BIRLIK_HABER) return HataMesajGonder(playerid, "Ajans üyesi deðilsiniz.");
	new string[1700], sayi;
	strcat(string, "{FFFFFF}ID\t{FFFFFF}Gönderen\t{FFFFFF}Ýçerik\t{FFFFFF}Ýletiþim\n");
	for(new i; i<MAX_REKLAM; i++) if(Reklamlar[i][reklamExists] && Reklamlar[i][ajansID] == PlayerData[playerid][pFaction])
	{
	    sayi++;
	    format(string, sizeof(string), "%s%d\t%s\t%.40s\t%d\n", string, i, SQLName(Reklamlar[i][reklamGonderen], 0), Reklamlar[i][reklamIcerik], Reklamlar[i][reklamIletisim]);
	}
	if(!sayi) return HataMesajGonder(playerid, "Hiç bekleyen reklam yok.");
	Dialog_Show(playerid, Reklamlar, DIALOG_STYLE_TABLIST_HEADERS, "{42f445}Bekleyen Reklamlar", string, "Seç", "Kapat");
	return 1;
}
CMD:yayindavet(playerid, params[])
{
    if(!OyundaDegil(playerid)) return 1;
    if(GetFactionType(playerid) != BIRLIK_HABER) return HataMesajGonder(playerid, "Yayýn ajansýna üye deðilsiniz.");
    if(Birlikler[PlayerData[playerid][pFaction]][yayinDurum] == 0) return HataMesajGonder(playerid, "Yayýn ajansýnýzýn yayýn durumu kapalý.");
    if (!IsNewsVehicle(GetPlayerVehicleID(playerid))) return HataMesajGonder(playerid, "Haber tipi bir araçta deðilsiniz.");
    new id;
    if(sscanf(params, "u", id)) return BilgiMesajGonder(playerid, "/yayindavet [ID/Isim]");
    if(!OyundaDegil(id) || !IsPlayerNearPlayer(playerid, id, 5.0)) return HataMesajGonder(playerid, "Oyuncu oyunda deðil veya kiþiye yeterince yakýn deðilsiniz.");
    if(GetPlayerVehicleID(id) != GetPlayerVehicleID(playerid)) return HataMesajGonder(playerid, "Kiþi aracýnýzda deðil.");
    if(id == playerid) return HataMesajGonder(playerid, "Kendi ID'ni yazamazsýn!");
    if(PlayerData[id][yayinKonuk] != -1)
    {
        PlayerData[id][yayinKonuk] = -1;
        BilgiMesajGonder(id, "%s tarafýndan yayýndan çýkarýldýn.", ReturnName(playerid, 0));
        MesajGonder(playerid, "%s adlý kiþiyi yayýndan çýkarttýnýz.", ReturnName(id, 0));
    }
    else
    {
        PlayerData[id][yayinKonuk] = playerid;
        BilgiMesajGonder(id, "%s adlý kiþi seni yayýna konuk olarak ekledi.", ReturnName(playerid, 0));
        MesajGonder(playerid, "%s adlý kiþiyi yayýna konuk olarak eklediniz, /yayindavet komutunu kullanarak yayýndan çýkarabilirsiniz.", ReturnName(id, 0));
    }
	return 1;
}
CMD:zarat(playerid)
{
    if (!PlayerData[playerid][pEsyalar][0])
        return HataMesajGonder(playerid, "Zarýn yok.");

	new gelensayi = RandomEx(1, 7);


	SendNearbyMessage(playerid, 30.0, COLOR_YELLOW, "* Zar attý ve '%d' geldi. (( %s ))", gelensayi, ReturnName(playerid, 0));
	return 1;
}

CMD:zarcift(playerid)
{
    if (!PlayerData[playerid][pEsyalar][0])
        return HataMesajGonder(playerid, "Zarýn yok.");

	new gelensayi = RandomEx(1, 7);
	new gelensayi2 = RandomEx(1, 7);

	SendNearbyMessage(playerid, 30.0, COLOR_YELLOW, "* 1. zarý attý ve '%d' geldi. (( %s ))", gelensayi, ReturnName(playerid, 0));
	SendNearbyMessage(playerid, 30.0, COLOR_YELLOW, "* 2. zarý attý ve '%d' geldi. (( %s ))", gelensayi2, ReturnName(playerid, 0));
	return 1;
}
CMD:zarver(playerid, params[])
{
	new id;
    if(!PlayerData[playerid][pEsyalar][0]) return HataMesajGonder(playerid, "Zarýn yok.");
    if(sscanf(params, "u", id)) return BilgiMesajGonder(playerid, "/zarver [ID/Isim]");
    if(!OyundaDegil(id) || !IsPlayerNearPlayer(playerid, id, 5.0)) return HataMesajGonder(playerid, "Kiþi oyunda deðil veya yeterince yakýn deðilsiniz.");
    if(id == playerid) return HataMesajGonder(playerid, "Kendine zar veremezsin.");
    if(PlayerData[id][pEsyalar][0] != 0) return HataMesajGonder(playerid, "Bu oyuncunun zaten zarý bulunmakta.");

    PlayerData[id][pEsyalar][0] = 1;
    PlayerData[playerid][pEsyalar][0] = 0;

    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s, %s adlý kiþiye zar verir.", ReturnName(playerid, 0), ReturnName(id, 0));
	return 1;
}
CMD:sigara(playerid)
{

	if (PlayerData[playerid][pEsyalar][1] <= 0)
        return HataMesajGonder(playerid, "Sigaran yok.");

	if(!SigaraDurum[playerid])
	{
	    MesajGonder(playerid, "Tekrar (/sigara) komutunu kullanarak sigarayý býrakabilirsiniz.");
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s sigarayý dudaklarýnýn arasýna yerleþtirir ve ateþler. ", ReturnName(playerid, 0));
        SigaraDurum[playerid] = true;
        PlayerData[playerid][pEsyalar][1]--;
	}
	else if(SigaraDurum[playerid])
	{
        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s sigarayý dudaklarýnýn arasýndan alýr ve yere atar. ", ReturnName(playerid, 0));
        SigaraDurum[playerid] = false;
	}
	return 1;
}
CMD:ipbagla(playerid, params[])
{
	new id;
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pLevel] < 5) return HataMesajGonder(playerid, "Bu iþlemi gerçekleþtirmek için en az 5 seviye olmalýsýnýz.");
    if(PlayerData[playerid][pEsyalar][2] <= 0) return HataMesajGonder(playerid, "Ýpiniz yok.");
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Bu iþlemi gerçekleþtirmek için araçta olmalýsýnýz.");
	if(sscanf(params, "u", id)) return BilgiMesajGonder(playerid, "/ipbagla [ID/Isim]");
	if(!OyundaDegil(id) || !IsPlayerNearPlayer(playerid, id, 5.0)) return HataMesajGonder(playerid, "Kiþi oyunda deðil veya yeterince yakýn deðilsiniz.");
	if(GetPlayerVehicleID(id) != GetPlayerVehicleID(playerid)) return HataMesajGonder(playerid, "Bu oyuncu aracýnýzda deðil.");
	if(id == playerid) return HataMesajGonder(playerid, "Kendi kendini baðlayamazsýn.");
	if(GetPVarInt(id, "IpBaglandi") == 1) return HataMesajGonder(playerid, "Bu oyuncu zaten baðlý.");

 	SetPVarInt(id, "IpBaglandi", 1);
  	TogglePlayerControllable(id, false);
   	SetPlayerSpecialAction(id, SPECIAL_ACTION_CUFFED);
    SendNearbyMessage(id, 30.0, COLOR_CYAN, "** %s, %s'ý ip ile baðlar.", ReturnName(playerid, 0),  ReturnName(id, 0));
   	MesajGonder(playerid, "%s adlý kiþiyi ip ile baðladýnýz. (/ipcoz ile çözebilirsiniz)", ReturnName(id, 0));
    BilgiMesajGonder(id, "%s adlý kiþi tarafýndan baðlandýnýz, korku rolü yapmaktan kaçýnmayýn!", ReturnName(playerid, 0));
	return 1;
}
CMD:ipcoz(playerid, params[])
{
    new id;
    if(!OyundaDegil(playerid)) return 1;
    if(GetPVarInt(playerid, "IpBaglandi") == 1 || GetPVarInt(playerid, "GozBaglandi") == 1 || PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PlayerData[playerid][pSoklandi] > 0) return HataMesajGonder(playerid, "Bunu þu an yapamazsýnýz.");
    if(sscanf(params, "u", id)) return HataMesajGonder(playerid, "/ipcoz [ID/Isim]");
    if(!OyundaDegil(id) || !IsPlayerNearPlayer(playerid, id, 5.0)) return HataMesajGonder(playerid, "Kiþi oyunda deðil veya yeterince yakýn deðilsiniz.");
    if(id == playerid) return HataMesajGonder(playerid, "Kendi ipini çözemezsin.");
    if(GetPVarInt(id, "IpBaglandi") == 0) return HataMesajGonder(playerid, "Bu oyuncu baðlanmamýþ.");
    SetPVarInt(id, "IpBaglandi", 0);
    TogglePlayerControllable(id, true);
    SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
    MesajGonder(id, "%s adlý kiþi tarafýndan ipleriniz çözüldü.", ReturnName(playerid, 0));
    MesajGonder(playerid, "%s adlý kiþinin iplerini çözdünüz.", ReturnName(id, 0));
	return 1;
}
CMD:gozbagla(playerid, params[])
{
    new id;
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pLevel] < 5) return HataMesajGonder(playerid, "Bu iþlemi gerçekleþtirmek için en az 5 seviye olmalýsýnýz.");
    if(PlayerData[playerid][pEsyalar][3] <= 0) return HataMesajGonder(playerid, "Göz baðýnýz yok.");
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Bu iþlemi gerçekleþtirmek için araçta olmalýsýnýz.");
	if(sscanf(params, "u", id)) return BilgiMesajGonder(playerid, "/gozbagla [ID/Isim]");
	if(!OyundaDegil(id) || !IsPlayerNearPlayer(playerid, id, 5.0)) return HataMesajGonder(playerid, "Kiþi oyunda deðil veya yeterince yakýn deðilsiniz.");
	if(GetPlayerVehicleID(id) != GetPlayerVehicleID(playerid)) return HataMesajGonder(playerid, "Bu oyuncu aracýnýzda deðil.");
	if(id == playerid) return HataMesajGonder(playerid, "Kendi kendini baðlayamazsýn.");
	if(GetPVarInt(id, "GozBaglandi") == 1) return HataMesajGonder(playerid, "Bu oyuncunun gözleri zaten baðlý.");
 	SetPVarInt(id, "GozBaglandi", 1);
    MesajGonder(playerid, "%s adlý kiþinin gözlerini baðladýnýz. (/gozbagicoz ile çözebilirsiniz)", ReturnName(id, 0));
    BilgiMesajGonder(id, "%s adlý kiþi tarafýndan gözleriniz baðlandý, rolsel olarak hiçbir þey göremiyorsunuz.", ReturnName(playerid, 0));
	return 1;
}
CMD:gozbagicoz(playerid, params[])
{
    new id;
    if(!OyundaDegil(playerid)) return 1;
    if(GetPVarInt(playerid, "IpBaglandi") == 1 || GetPVarInt(playerid, "GozBaglandi") == 1 || PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PlayerData[playerid][pSoklandi] > 0) return HataMesajGonder(playerid, "Bunu þu an yapamazsýnýz.");
    if(sscanf(params, "u", id)) return HataMesajGonder(playerid, "/gozbagicoz [ID/Isim]");
    if(!OyundaDegil(id) || !IsPlayerNearPlayer(playerid, id, 5.0)) return HataMesajGonder(playerid, "Kiþi oyunda deðil veya yeterince yakýn deðilsiniz.");
    if(id == playerid) return HataMesajGonder(playerid, "Kendi göz baðýný çözemezsin.");
    if(GetPVarInt(id, "GozBaglandi") == 0) return HataMesajGonder(playerid, "Bu oyuncunun gözleri baðlanmamýþ.");
    SetPVarInt(id, "GozBaglandi", 0);
    MesajGonder(playerid, "%s adlý kiþinin göz baðýný çözdünüz.", ReturnName(id, 0));
    MesajGonder(id, "%s adlý kiþi tarafýndan göz baðýnýz çözüldü.", ReturnName(playerid, 0));
	return 1;
}
CMD:benzinkutusu(playerid)
{
    new vehicleid = GetNearestVehicle(playerid);
	new id = Car_GetID(vehicleid);
    if (IsPlayerInAnyVehicle(playerid) || vehicleid == INVALID_VEHICLE_ID)
        return HataMesajGonder(playerid, "Herhangi bir aracýn yanýnda deðilsin.");

    if (PlayerData[playerid][pEsyalar][5] <= 0)
        return HataMesajGonder(playerid, "Benzin bidonunuz yok.");

    if (GetEngineStatus(vehicleid))
        return HataMesajGonder(playerid, "Önce motoru kapatman gereklidir.");

    if (id == -1 || AracInfo[id][aracBenzin] >= 70 || Vehicle_IsANoFuelVehicle(AracInfo[id][aracModel]))
        return HataMesajGonder(playerid, "Bu aracýn yakýta ihtiyacý yok.");

    if (GetPVarInt(playerid, "BenzinDolduruyor") == 1)
        return HataMesajGonder(playerid, "Zaten yakýt kutusunu kullanýyorsunuz.");

    SetPVarInt(playerid, "BenzinDolduruyor", 1);
    TogglePlayerControllable(playerid, false);
    PlayerData[playerid][pEsyalar][5]--;
    ShowTextDrawMessage(playerid, "~r~Benzin Araca Dolduruluyor...", TEXTDRAW_TYPE_MSG, 5200);
    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s yakýt kutusunu açar ve araca doldurmaya baþlar.", ReturnName(playerid, 0));
    SetTimerEx("RefillUpdate", 5000, false, "dd", playerid, id);
	return 1;
}
CMD:barbeku(playerid, params[])
{
	if(!OyundaDegil(playerid)) return 1;
	if(PlayerData[playerid][pEsyalar][6] != 1) return HataMesajGonder(playerid, "Barbekünüz bulunmuyor.");
	if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || IsPlayerInAnyVehicle(playerid))
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
    new type[24], string[128];
    if (sscanf(params, "s[24]S()[128]", type, string))
	{
	    BilgiMesajGonder(playerid, "/barbeku [Parametre]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[PARAMETRELER]:{FFFFFF} koy, al, pisir");
	    return 1;
	}
	if (!strcmp(type, "koy", true))
	{
	    if(PlayerData[playerid][pMangalKuruldu] == true) return HataMesajGonder(playerid, "Zaten barbekü kurmuþsunuz.");
	    new Float:pos[3];
	    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	    PlayerData[playerid][pMangalKuruldu] = true;
	    PlayerData[playerid][pYemekPisiriliyor] = 0;
	    PlayerData[playerid][pPisirilenYemek] = 0;

	    PlayerData[playerid][pMangalObject][0] = CreateDynamicObject(19831, pos[0], pos[1]+1, pos[2]-1, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	    PlayerData[playerid][pMangalObject][1] = CreateDynamicObject(18688, pos[0], pos[1]+1, pos[2]-2, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

	    new str[100];
	    format(str, sizeof(str), "{FF9900}[Barbekü]\n\n{FFFFFF}Oluþturan: %s", ReturnName(playerid, 0));
	    PlayerData[playerid][MangalText] = CreateDynamic3DTextLabel(str, -1, pos[0], pos[1]+1, pos[2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

	    MesajGonder(playerid, "Barbekü baþarýyla kuruldu.");
	}
	if (!strcmp(type, "al", true))
	{
	    if(PlayerData[playerid][pMangalKuruldu] == false) return HataMesajGonder(playerid, "Barbekü kurmamýþsýnýz.");
	    new Float:pos[3];
        GetDynamicObjectPos(PlayerData[playerid][pMangalObject][0], pos[0], pos[1], pos[2]);
        if(!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return HataMesajGonder(playerid, "Yakýn deðilsiniz!");
	    PlayerData[playerid][pMangalKuruldu] = false;
	    PlayerData[playerid][pYemekPisiriliyor] = 0;
	    PlayerData[playerid][pPisirilenYemek] = 0;

	    DestroyDynamicObject(PlayerData[playerid][pMangalObject][0]);
	    DestroyDynamicObject(PlayerData[playerid][pMangalObject][1]);

	    DestroyDynamic3DTextLabel(PlayerData[playerid][MangalText]);

	    MesajGonder(playerid, "Barbekü kaldýrýldý.");
	}
	if(!strcmp(type, "pisir", true))
	{
	    if(PlayerData[playerid][pMangalKuruldu] == false) return HataMesajGonder(playerid, "Barbekü kurmamýþsýnýz.");
	    if(PlayerData[playerid][pPisirilenYemek] > 0) return HataMesajGonder(playerid, "Zaten yemek piþiriyorsunuz.");
	    new Float:pos[3];
	    GetDynamicObjectPos(PlayerData[playerid][pMangalObject][0], pos[0], pos[1], pos[2]);
	    if(!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return HataMesajGonder(playerid, "Barbekünüzün yakýnýnda deðilsiniz.");

	    Dialog_Show(playerid, BarbekuPisir, DIALOG_STYLE_LIST, "Et seçin:", "{FFFFFF}Köfte (%d adet)\n{FFFFFF}Tavuk Eti (%d adet)\n{FFFFFF}Dana Eti (%d adet)", "Piþir", "Kapat", PlayerData[playerid][pEsyalar][7], PlayerData[playerid][pEsyalar][8], PlayerData[playerid][pEsyalar][9]);
	}
	return 1;
}
CMD:cadir(playerid, params[])
{
    if(!OyundaDegil(playerid)) return 1;
	if(PlayerData[playerid][pEsyalar][11] != 1) return HataMesajGonder(playerid, "Portatif çadýrýnýz yok.");
	if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	new type[24], string[128];
    if (sscanf(params, "s[24]S()[128]", type, string))
	{
	    BilgiMesajGonder(playerid, "/cadir [Parametre]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[PARAMETRELER]:{FFFFFF} koy, al");
	    return 1;
	}
	if (!strcmp(type, "koy", true))
	{
	    if(CadirID(playerid) != -1) return HataMesajGonder(playerid, "Zaten çadýr kurmuþsunuz!");
	    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0) return HataMesajGonder(playerid, "Ýnterior içerisine çadýr koyamazsýnýz.");
	    if(IsPlayerInLosSantos(playerid)) return HataMesajGonder(playerid, "Çadýr koymak için Los Santos þehrinin dýþýnda olmalýsýnýz.");
	    new sonuc = Cadir_Kur(playerid);
	    if(sonuc != 1) return HataMesajGonder(playerid, "Sunucuda daha fazla çadýr oluþturulamaz.");
	    MesajGonder(playerid, "Çadýr oluþturuldu, (/cadirgir) ile girebilirsiniz.");
	}
	if (!strcmp(type, "al", true))
	{
	    new id = CadirID(playerid);
        if(id == -1) return HataMesajGonder(playerid, "Çadýr kurmamýþsýnýz!");
        if(!IsPlayerInRangeOfPoint(playerid, 5.0, CadirData[id][cadirPos][0], CadirData[id][cadirPos][1], CadirData[id][cadirPos][2])) return HataMesajGonder(playerid, "Çadýra yakýn deðilsiniz!");
        foreach(new i:Player) if(PlayerData[i][pCadir] == id)
        {
            SetPlayerPos(i, CadirData[id][cadirPos][0], CadirData[id][cadirPos][1], CadirData[id][cadirPos][2]);
            SetPlayerInterior(i, 0);
            SetPlayerVirtualWorld(i, 0);
            PlayerData[i][pCadir] = -1;
        }
        Cadir_Sil(playerid);
        MesajGonder(playerid, "Çadýrýnýz silindi.");
	}
	return 1;
}
CMD:cadirgir(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	new id = Cadir_Yakin(playerid);
	if(id == -1) return HataMesajGonder(playerid, "Herhangi bir çadýra yakýn deðilsiniz.");
	if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");

	SetPlayerPos(playerid, -94.3539,-28.7902,1017.2929);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, id+65);
	ObjelerYukleniyor(playerid);
	PlayerData[playerid][pCadir] = id;
	MesajGonder(playerid, "Çadýra girdiniz, (/cadircik) ile çýkabilirsiniz.");
	return 1;
}
CMD:cadircik(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pCadir] == -1) return HataMesajGonder(playerid, "Herhangi bir çadýrýn içerisinde deðilsiniz!");
    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
    new id = PlayerData[playerid][pCadir];
    SetPlayerPos(playerid, CadirData[id][cadirPos][0]+2, CadirData[id][cadirPos][1]+2, CadirData[id][cadirPos][2]);
    SetPlayerInterior(playerid, 0);
    SetPlayerVirtualWorld(playerid, 0);
    ObjelerYukleniyor(playerid);
    PlayerData[playerid][pCadir] = -1;
	return 1;
}
CMD:tamirkiti(playerid)
{
	if (PlayerData[playerid][pEsyalar][10] <= 0)
	    return HataMesajGonder(playerid, "Hiç tamir kitiniz yok.");

	if (IsPlayerInAnyVehicle(playerid))
	    return HataMesajGonder(playerid, "Aracýn içinde tamir edemezsin.");

	if (GetPVarInt(playerid, "TamirEdiyor") == 1)
	    return HataMesajGonder(playerid, "Zaten tamir ediyorsun!");

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && IsPlayerNearHood(playerid, i))
	{
	    if (!IsEngineVehicle(i))
	        return HataMesajGonder(playerid, "Bu aracý tamir edemezsin.");

	    if (!GetHoodStatus(i))
	        return HataMesajGonder(playerid, "Tamir etmek için aracýn kaputu açýk olmalý.");

		PlayerData[playerid][pEsyalar][10]--;
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);

        SetPVarInt(playerid, "TamirEdiyor", 1);
        SetTimerEx("RepairCar", 20000, false, "dd", playerid, i);

        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s aracý tamir etmeye baþlar.", ReturnName(playerid, 0));
  		ShowTextDrawMessage(playerid, "~g~Tamir ediliyor...~w~ Bekleyiniz...", TEXTDRAW_TYPE_MSG, 5500);
		return 1;
	}
	HataMesajGonder(playerid, "Aracýn kaputuna yakýn deðilsin.");
	return 1;
}
CMD:kampatesi(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");

    if(PlayerData[playerid][pKampAtesi] == false)
    {
        new Float:pos[3];
        GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
        PlayerData[playerid][pKampAtesi] = true;
        PlayerData[playerid][pKampAtesiObject] = CreateDynamicObject(19632, pos[0], pos[1], pos[2]-1, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
        MesajGonder(playerid, "Kamp Ateþi kuruldu, tekrar (/kampatesi) komutunu kullanarak kaldýrabilirsiniz.");
    }
    else
    {
        new Float:pos[3];
        GetDynamicObjectPos(PlayerData[playerid][pKampAtesiObject], pos[0], pos[1], pos[2]);
        if(!IsPlayerInRangeOfPoint(playerid, 3.0, pos[0], pos[1], pos[2])) return HataMesajGonder(playerid, "Kamp ateþine yakýn deðilsiniz!");
        PlayerData[playerid][pKampAtesi] = false;
        DestroyDynamicObject(PlayerData[playerid][pKampAtesiObject]);
        MesajGonder(playerid, "Kamp Ateþi kaldýrýldý.");
    }
	return 1;
}
CMD:silahlarim(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
    OyuncuSilahlar(playerid);
	return 1;
}
CMD:silahial(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");

    new id = -1;
    for(new i; i<MAX_DROPPED_WEAPONS; i++) if(DroppedWeapon[i][droppedExists] == true && IsPlayerInRangeOfPoint(playerid, 3.0, DroppedWeapon[i][droppedPos][0], DroppedWeapon[i][droppedPos][1], DroppedWeapon[i][droppedPos][2]))
    {
        id = i;
        break;
    }
    if(id == -1) return HataMesajGonder(playerid, "Yakýnýnýzda hiç yere atýlmýþ silah yok.");
	if(GetFactionType(playerid) != BIRLIK_LSPD && (PlayerHasWeapon(playerid, DroppedWeapon[id][droppedWeapon]) || PlayerData[playerid][pSilahlar][g_aWeaponSlots[DroppedWeapon[id][droppedWeapon]]] > 0)) return HataMesajGonder(playerid, "Bu silaha sahipsiniz veya bu tür silahýnýz var.");

	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s adlý kiþi %s model silahý yerden alýr.", ReturnName(playerid, 0), ReturnWeaponName(DroppedWeapon[id][droppedWeapon]));
	if(GetFactionType(playerid) != BIRLIK_LSPD)
	{
	 	GiveWeaponToPlayer(playerid, DroppedWeapon[id][droppedWeapon],  DroppedWeapon[id][droppedAmmo]);
	  	DropSil(id);
  	}
  	else
  	{
  	    DropSil(id);
  	}
	return 1;
}
CMD:sarjorver(playerid, params[])
{
	new id;
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
    if(GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_LSMD || GetFactionType(playerid) == BIRLIK_FBI) return HataMesajGonder(playerid, "Bu oluþum türü þarjör veremez.");
    if(PlayerData[playerid][pEsyalar] <= 0) return HataMesajGonder(playerid, "Hiç þarjörünüz yok.");
    if(sscanf(params, "u", id)) return BilgiMesajGonder(playerid, "/sarjorver [ID/Isim]");
    if(!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu oyunda deðil.");
    if(!IsPlayerNearPlayer(playerid, id, 5.0)) return HataMesajGonder(playerid, "Kiþiye yeterince yakýn deðilsiniz.");
    if(id == playerid) return HataMesajGonder(playerid, "Kendine þarjör veremezsin!");
    if(PlayerData[id][pEsyalar][13] > 0) return HataMesajGonder(playerid, "Bu oyuncunun zaten þarjörü var.");

    PlayerData[id][pEsyalar][13]++;
    PlayerData[playerid][pEsyalar][13]--;
    MesajGonder(playerid, "%s adlý kiþiye þarjör verdiniz.", ReturnName(id, 0));
    MesajGonder(id, "%s adlý kiþi sana þarjör verdi.", ReturnName(playerid, 0));
	return 1;
}
CMD:ukullan(playerid, params[])
{
    if(!OyundaDegil(playerid)) return 1;
	if(PlayerDrugData[playerid][DrugsCooldown] > gettime()) return HataMesajGonder(playerid,"Tekrar uyuþturucu kullanmak için biraz bekleyin.");
	new amount;
	if(sscanf(params, "i", amount)) return BilgiMesajGonder(playerid,"/ukullan [Gram]");
	if(!(0 < amount <= 10)) return HataMesajGonder(playerid,"En az 1, en fazla 10 gram kullanabilirsiniz.");
	if(amount > PlayerDrugData[playerid][Drugs]) return HataMesajGonder(playerid,  "O kadar uyuþturucunuz yok.");
	PlayerDrugData[playerid][DrugsCooldown] = gettime() + (10 * amount);
	PlayerDrugData[playerid][Drugs] -= amount;
	PlayerDrugData[playerid][TotalUsed] += amount;
	if(PlayerDrugData[playerid][TotalUsed] >= 6 && PlayerData[playerid][pBagimlilik] == 0) PlayerData[playerid][pBagimlilik] = 1;
	PlayerData[playerid][pBagimlilikSayac][0] = -750;
	PlayerData[playerid][pBagimlilikSayac][1] = 0;
	SetPlayerWeather(playerid, 234);
	RegenTimer[playerid] = SetTimerEx("RegenHealth", 500, false, "ii", playerid, (3 * amount));
	EffectTimer[playerid] = SetTimerEx("RemoveEffects", (2 * amount) * 1000, false, "i", playerid);
	MesajGonder(playerid, "%d gram uyuþturucu kullandýnýz.", amount);
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s adlý kiþi %d gram uyuþturucuyu burnuna doðru çeker.", ReturnName(playerid, 0), amount);
	return 1;
}

CMD:uver(playerid, params[])
{
    if(!OyundaDegil(playerid)) return 1;
	new id, amount;
    if(sscanf(params, "ui", id, amount)) return BilgiMesajGonder(playerid, "/uver [ID/Isim] [Gram]");
    if(id == playerid) return HataMesajGonder(playerid, "Kendine uyuþturucu veremezsin.");
    if(!OyundaDegil(id)) return HataMesajGonder(playerid,"Oyuncu oyunda deðil.");
	if(!IsPlayerNearPlayer(playerid, id, 5.0)) return HataMesajGonder(playerid, "Kiþiye yeterince yakýn deðilsiniz.");
    if(!(0 < amount <= 50)) return HataMesajGonder(playerid, "En az 1, en fazla 50 gram verebilirsiniz.");
    if(amount > PlayerDrugData[playerid][Drugs]) return HataMesajGonder(playerid, "O kadar uyuþturucunuz yok.");
    if(PlayerDrugData[id][Drugs] + amount > CARRY_LIMIT) amount = CARRY_LIMIT - PlayerDrugData[id][Drugs];
    PlayerDrugData[playerid][Drugs] -= amount;
    PlayerDrugData[playerid][TotalGiven] += amount;

	PlayerDrugData[id][Drugs] += amount;
    PlayerDrugData[id][TotalReceived] += amount;
	MesajGonder(playerid, "%s adlý kiþiye %d gram uyuþturucu verdiniz.", ReturnName(id, 0), amount);
	MesajGonder(id, "%s adlý kiþi size %d gram uyuþturucu verdi.", ReturnName(playerid, 0), amount);
    /*new string[96];
    format(string, sizeof(string), "DRUGS: {FFFFFF}%s(%d) gave you %d grams of drugs.", Player_GetName(playerid), playerid, amount);
	SendClientMessage(id, 0x3498DBFF, string);
	format(string, sizeof(string), "DRUGS: {FFFFFF}%d grams of drugs given to %s(%d).", amount, Player_GetName(id), id);
	SendClientMessage(playerid, 0x3498DBFF, string);*/
	return 1;
}

CMD:usat(playerid, params[])
{
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerDrugData[playerid][Drugs] < 1) return HataMesajGonder(playerid, "Uyuþturucunuz yok.");
	new id, price, gram;
    if(sscanf(params, "uii", id, gram, price)) return BilgiMesajGonder(playerid, "/usat [ID/Isim] [Gram] [Fiyat]");
    if(id == playerid) return HataMesajGonder(playerid, "Kendine uyuþturucu satamazsýn.");
    if(!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu oyunda deðil.");
    if(!IsPlayerNearPlayer(playerid, id, 5.0)) return HataMesajGonder(playerid, "Kiþiye yeterince yakýn deðilsiniz.");
	if(IsPlayerConnected(PlayerDrugData[id][DrugsOfferedBy])) return HataMesajGonder(playerid, "Bu kiþiye zaten uyuþturucu satma isteði gönderilmiþ.");
    if(!(0 < price <= 5000)) return HataMesajGonder(playerid, "Fiyat en az 1, en fazla $7,500 olmalýdýr.");
    if(gram > PlayerDrugData[playerid][Drugs]) return HataMesajGonder(playerid, "O kadar uyuþturucunuz yok.");
    if(PlayerDrugData[id][Drugs] >= CARRY_LIMIT) return HataMesajGonder(playerid, "Bu kiþi daha fazla uyuþturucu taþýyamaz.");
    if(PlayerDrugData[id][DrugsOfferCooldown] > gettime()) return HataMesajGonder(playerid,"Bu kiþiye uyuþturucu satmak için biraz bekleyin.");
    PlayerDrugData[id][DrugsOfferedBy] = playerid;
    PlayerDrugData[id][DrugsOfferedPrice] = price;
    PlayerDrugData[id][DrugsOfferedGram] = gram;
	PlayerDrugData[id][DrugsOfferCooldown] = gettime() + OFFER_COOLDOWN;

    new string[172];
    format(string, sizeof(string), "{FFFFFF}%s sana %d gram uyuþturucu satmak istiyor.\nFiyat: {2ECC71}%s\n\nSatýn almak ister misiniz?", ReturnName(playerid, 0), gram, FormatNumber(price));
    ShowPlayerDialog(id, DIALOG_DRUG_OFFER, DIALOG_STYLE_INPUT, "Uyuþturucu Satma Ýsteði", string, "Evet", "Hayýr");

    MesajGonder(playerid, "%s adlý kiþiye uyuþturucu satma isteði gönderildi...", ReturnName(id, 0));
	return 1;
}

CMD:ubilgi(playerid, params[])
{
    ShowDrugStats(playerid);
	return 1;
}
CMD:utohum(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araçta bu komutu kullanamazsýnýz.");
    if(isnull(params)) return BilgiMesajGonder(playerid, "/utohum [ek/topla]");

    if(!strcmp(params, "ek", true)) {
        /* -- planting -- */
        if(PlayerDrugData[playerid][Seeds] < 1) return HataMesajGonder(playerid, "Uyuþturucu tohumunuz yok.");
        if(Player_PlantCount(playerid) >= PLAYER_LIMIT) return HataMesajGonder(playerid, "En fazla %d tohum ekebilirsiniz.", PLAYER_LIMIT);
        if(GetClosestPlant(playerid) != -1) return HataMesajGonder(playerid, "Yakýnlarda zaten ekilmiþ uyuþturucu tohumu var.");
        new id = Iter_Free(Plants);
        if(id == -1) return HataMesajGonder(playerid, "Uyuþturucu tohumu oluþturulamadý, daha sonra tekrar deneyin.");
        PlantData[id][plantedBy] = PlayerData[playerid][pID];
        GetPlayerPos(playerid, PlantData[id][plantX], PlantData[id][plantY], PlantData[id][plantZ]);

        PlantData[id][plantGrowth] = 0;
        PlantData[id][plantObj] = CreateDynamicObject(2244, PlantData[id][plantX], PlantData[id][plantY], PlantData[id][plantZ] - 0.70, 0.0, 0.0, 0.0);
        SetDynamicObjectMaterial(PlantData[id][plantObj], 2, 19478, "signsurf", "sign", 0xFFFFFFFF);

        new label_string[128];
        format(label_string, sizeof(label_string), "Uyuþturucu Tohumu (%d)\n\n{FFFFFF}Yerleþtiren: %s\nBüyüme: {E74C3C}0%%\n\n{FFFFFF}/utohum topla", id, SQLName(PlantData[id][plantedBy], 0));
        PlantData[id][plantLabel] = CreateDynamic3DTextLabel(label_string, 0xF1C40FFF, PlantData[id][plantX], PlantData[id][plantY], PlantData[id][plantZ], 5.0);

        PlantData[id][plantTimer] = SetTimerEx("PlantGrowth", GROWTH_INTERVAL * 1000, true, "i", id);
        Iter_Add(Plants, id);

        PlayerDrugData[playerid][Seeds]--;
        PlayerDrugData[playerid][TotalPlanted]++;
        /* -- planting -- */
    }else if(!strcmp(params, "topla")) {
        /* -- harvesting -- */
        if(PlayerDrugData[playerid][Drugs] >= CARRY_LIMIT) return HataMesajGonder(playerid, "Daha fazla uyuþturucu taþýyamazsýnýz.");
        new id = GetClosestPlant(playerid);
        if(id == -1) return SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir uyuþturucu tohumuna yakýn deðilsiniz.");
        if(!PlantData[id][gotLeaves]) return HataMesajGonder(playerid, "Bu uyuþturucu tohumu büyümemiþ.");
        new harvested = PlantData[id][plantGrowth];
        if(PlayerDrugData[playerid][Drugs] + harvested > CARRY_LIMIT) harvested = CARRY_LIMIT - PlayerDrugData[playerid][Drugs];
        MesajGonder(playerid, "Uyuþturucu tohumundan %d gram uyuþturucu elde ettiniz.", harvested);

        PlayerDrugData[playerid][Drugs] += harvested;
        PlayerDrugData[playerid][TotalHarvestedPlants]++;
        PlayerDrugData[playerid][TotalHarvestedGrams] += harvested;

        new owner_id = GetPlayerIDWithSQLID(PlantData[id][plantedBy]);
        if(owner_id != -1 && owner_id != PlayerData[playerid][pID]) BilgiMesajGonder(owner_id, "Uyuþturucu tohumunuz baþkasý tarafýndan toplandý!");

        Plant_Destroy(id);
		/* -- harvesting -- */
	}else{
        BilgiMesajGonder(playerid, "/utohum [ek/topla]");
    }

	return 1;
}
CMD:tohum(playerid, params[])
{
    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	new id = ArsaNearest(playerid);
	if(id == -1) return HataMesajGonder(playerid, "Herhangi bir arsaya yakýn deðilsiniz.");
	if(ArsaBilgi[id][arsaSahip] != PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Arsanýn sahibi siz deðilsiniz.");
	new ayar[10], str[10];
	if(sscanf(params, "s[10]S()[10]", ayar, str)) return BilgiMesajGonder(playerid, "/tohum [ek/topla]");
	if(!strcmp(ayar, "ek", true))
	{
	    new tohumid;
	    if(sscanf(str, "d", tohumid)) return BilgiMesajGonder(playerid, "/tohum [ek] [1 - Portakal 2 - Elma 3 - Armut]");
	    if(tohumid < 1 || tohumid > 3) return HataMesajGonder(playerid, "Geçersiz tohum tipi. (1 - Portakal 2 - Elma 3 - Armut)");
		if(PlayerData[playerid][pTohumlar][tohumid-1] <= 0) return HataMesajGonder(playerid, "Tohumunuz yok.");
		if(TohumKontrol(playerid) != -1) return HataMesajGonder(playerid, "Baþka bir tohuma yakýnsýnýz.");
		if(Arsa_TohumSayisi(id) >= ArsaBilgi[id][arsaMaxTohum]) return HataMesajGonder(playerid, "Bu arsaya daha fazla tohum ekilemez.");
		new bool:tohumekildi;
		for(new i; i<MAX_TOHUM; i++) if(Tohumlar[i][tohumArsa] == -1)
		{
		    Tohumlar[i][tohumArsa] = id;
		    Tohumlar[i][tohumTip] = tohumid;
		    Tohumlar[i][tohumBuyume] = 0;
		    Tohumlar[i][tohumSayi] = 0;
		    GetPlayerPos(playerid, Tohumlar[i][tohumPos][0], Tohumlar[i][tohumPos][1], Tohumlar[i][tohumPos][2]);
		    TohumUpdate(i);
		    tohumekildi = true;
		    break;
		}
		if(tohumekildi == false) return HataMesajGonder(playerid, "Tohum ekme baþarýsýz.");
		PlayerData[playerid][pTohumlar][tohumid-1]--;
		MesajGonder(playerid, "Tohum ektiniz, 1 saat sonra toplayabilirsiniz.");
	}
	if(!strcmp(ayar, "topla", true))
	{
	    new arsaid = ArsaNearest(playerid);
		if(arsaid == -1) return HataMesajGonder(playerid, "Herhangi bir arsaya yakýn deðilsiniz.");
		if(ArsaBilgi[arsaid][arsaSahip] != PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Bu arsanýn sahibi deðilsiniz.");
		new tid = TohumKontrol(playerid);
	    if(tid == -1) return HataMesajGonder(playerid, "Herhangi bir tohuma yakýn deðilsiniz.");
	    if(Tohumlar[tid][tohumBuyume] < 60) return HataMesajGonder(playerid, "Yeterince büyümemiþ.");
	    if(TohumTutuyor[playerid] != -1) return HataMesajGonder(playerid, "Elinizde meyve dolu kasa bulunduðu için tohum toplayamazsýnýz.");
	    new vehicleid = PlayerData[playerid][pLastCar];
		if(GetVehicleModel(vehicleid) != 422) return HataMesajGonder(playerid, "Son bindiðiniz araç Bobcat olmalýdýr.");
		new Float:x, Float:y, Float:z;
		GetVehicleBoot(vehicleid, x, y, z);
		if(GetPlayerDistanceFromPoint(playerid, x, y, z) >= 20.0) return HataMesajGonder(playerid, "Aracýnýza çok uzaksýnýz.");
	    TohumTutuyor[playerid] = Tohumlar[tid][tohumTip]-1;
	    TohumSayisi[playerid] = Tohumlar[tid][tohumSayi];
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		SetPlayerAttachedObject(playerid, 4, 19636, 1, 0.058999, 0.428999, 0.000000, 92.900001, 88.399978, 1.699999, 1.000000, 1.000000, 1.000000);
		DestroyDynamicObject(Tohumlar[tid][tohumObject]);
		DestroyDynamic3DTextLabel(Tohumlar[tid][tohumLabel]);
		TohumCP[playerid] = CreateDynamicCP(x, y, z, 2.0, .playerid = playerid);
		Tohumlar[tid][tohumArsa] = -1;
	    Tohumlar[tid][tohumTip] = 0;
	    Tohumlar[tid][tohumBuyume] = 0;
	    Tohumlar[tid][tohumPos][0] = Tohumlar[tid][tohumPos][1] = Tohumlar[tid][tohumPos][2] = 0.0;

	}
	return 1;
}
CMD:objekoy(playerid, params[])
{
 	if(GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
 	if(IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araçta bu komutu kullanamazsýnýz.");
 	if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
 	ShowPlayerDialog(playerid, COPOBJECTS_DIALOG, DIALOG_STYLE_LIST, "Obje Kategorileri", "Barikatlar\nTabelalar\nOlay Yeri Þeridi\nÇivi\nHýz Kamerasý", "Seç", "Kapat");
	return 1;
}
CMD:objeduzenle(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 1 && GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
	if(EditingCopObjectID[playerid] != -1) return HataMesajGonder(playerid, "Zaten obje editliyorsunuz.");
	if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	if(isnull(params)) return BilgiMesajGonder(playerid, "/objeduzenle [id]");
	new id = strval(params[0]);
	if(!(0 <= id <= MAX_COP_OBJECTS - 1)) return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");
	if(!CopObjectData[id][ObjCreated]) return HataMesajGonder(playerid, "Böyle bir obje yok.");
	if(!IsPlayerInRangeOfPoint(playerid, 16.0, CopObjectData[id][ObjX], CopObjectData[id][ObjY], CopObjectData[id][ObjZ])) return HataMesajGonder(playerid, "Düzenlemek istediðiniz objeye yakýn deðilsiniz.");
    EditingCopObjectID[playerid] = id;
	EditDynamicObject(playerid, CopObjectData[id][ObjID]);
	return 1;
}

CMD:objesil(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 1 && GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
	if(isnull(params)) return BilgiMesajGonder(playerid, "/objesil [ID]");
	if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	new id = strval(params[0]);
	if(!(0 <= id <= MAX_COP_OBJECTS - 1)) return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");
	if(!CopObjectData[id][ObjCreated]) return HataMesajGonder(playerid, "Böyle bir obje yok.");
	if(EditingCopObjectID[playerid] == id) return HataMesajGonder(playerid, "Düzenlediðiniz objeyi silemezsiniz.");
	CopObjectData[id][ObjCreated] = false;
	DestroyDynamicObject(CopObjectData[id][ObjID]);
	DestroyDynamic3DTextLabel(CopObjectData[id][ObjLabel]);
	if(IsValidDynamicArea(CopObjectData[id][ObjArea])) DestroyDynamicArea(CopObjectData[id][ObjArea]);
	CopObjectData[id][ObjID] = -1;
	CopObjectData[id][ObjLabel] = Text3D: -1;
	CopObjectData[id][ObjArea] = -1;
	stmt_bind_value(RemoveObject, 0, DB::TYPE_INTEGER, id);
	stmt_execute(RemoveObject);

	MesajGonder(playerid, "Obje silindi.");
	return 1;
}
CMD:elkoy(playerid, params[])
{
	new id, isim[20];
	if(!OyundaDegil(playerid)) return 1;
	if(GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI) return HataMesajGonder(playerid, "Devlet memuru deðilsiniz.");
	if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	if(sscanf(params, "us[20]", id, isim))
	{
		BilgiMesajGonder(playerid, "/elkoy [ID/Isim] [Parametre]");
	    return SendClientMessage(playerid, COLOR_YELLOW, "[PARAMETRELER]:{FFFFFF} silah, uyusturucu, ehliyet");
	}
	if(!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu oyunda deðil.");
	if(!IsPlayerNearPlayer(playerid, id, 3.0)) return HataMesajGonder(playerid, "Kiþiye yeterince yakýn deðilsiniz.");
	if(id == playerid) return HataMesajGonder(playerid, "Kendi ID'ni yazamazsýn!");
	if(GetPlayerSpecialAction(id) != SPECIAL_ACTION_HANDSUP && PlayerData[id][pKelepce] == 0 && PlayerData[id][pYereYatirildi] < 1 && PlayerData[id][pSoklandi] < 1) return HataMesajGonder(playerid, "Bu kiþinin elleri havada deðil veya etkisiz hale getirilmemiþ.");
	if (!strcmp(isim, "silah", true))
	{
		ResetWeapons(id);
		MesajGonder(playerid, "%s adlý kiþinin üzerindeki silahlara el koydunuz.", ReturnName(id, 0));
		BilgiMesajGonder(id, "%s adlý memur tarafýndan silahlarýnýza el koyuldu.", ReturnName(playerid, 0));
		SendBirlikMessageEx(BIRLIK_LSPD, COLOR_RADIO, "** (Telsiz) %s %s, %s adlý kiþinin üzerindeki silahlara el koydu.", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), ReturnName(id, 0));
	}
	if (!strcmp(isim, "uyusturucu", true))
	{
	    if(PlayerDrugData[id][Drugs] < 1) return HataMesajGonder(playerid, "Bu oyuncunun üzerinde uyuþturucu yok.");
	    MesajGonder(playerid, "%s adlý kiþinin üzerinde bulunan uyuþturuculara el koydunuz. (%d gram uyuþturucu, %d tohum)", ReturnName(id, 0), PlayerDrugData[id][Drugs], PlayerDrugData[id][Seeds]);
	    BilgiMesajGonder(id, "%s adlý memur tarafýndan üzerinizdeki uyuþturuculara el koyuldu.", ReturnName(playerid, 0));
	    SendBirlikMessageEx(BIRLIK_LSPD, COLOR_RADIO, "** (Telsiz) %s %s, %s adlý kiþinin üzerindeki uyuþturuculara el koydu.", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), ReturnName(id, 0));
	    PlayerDrugData[id][Drugs] = 0;
	    PlayerDrugData[id][Seeds] = 0;
	}
    if (!strcmp(isim, "ehliyet", true))
    {
        if(PlayerData[id][pEhliyet] != 1) return HataMesajGonder(playerid, "Bu oyuncunun ehliyeti yok.");
        PlayerData[id][pEhliyet] = 0;
        MesajGonder(playerid, "%s adlý kiþinin ehliyetine el koydunuz.", ReturnName(id, 0));
		BilgiMesajGonder(id, "%s adlý memur tarafýndan ehliyetinize el koyuldu.", ReturnName(playerid, 0));
		SendBirlikMessageEx(BIRLIK_LSPD, COLOR_RADIO, "** (Telsiz) %s %s, %s adlý kiþinin ehliyetine el koydu.", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), ReturnName(id, 0));
    }
	return 1;
}
CMD:cop(playerid, params[])
{
    if(!OyundaDegil(playerid)) return 1;
	if(IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araçta bu komutu kullanamazsýnýz.");
	new vehicleid = PlayerData[playerid][pLastCar];
	if(GetVehicleModel(vehicleid) != 408) return HataMesajGonder(playerid, "Son bindiðiniz araç Çöp arabasý olmalý.");
    if(HasTrash[playerid]) return HataMesajGonder(playerid, "Zaten elinizde çöp torbasý var.");
	new id = Trash_Nearest(playerid);
	if(id == -1) return HataMesajGonder(playerid, "Herhangi bir çöp kutusuna yakýn deðilsiniz.");
	if(TrashData[id][TrashLevel] < 1) return HataMesajGonder(playerid, "Burada bir þey yok.");
    new Float: x, Float: y, Float: z;
    GetVehicleBoot(vehicleid, x, y, z);
    if(GetPlayerDistanceFromPoint(playerid, x, y, z) >= 30.0) return HataMesajGonder(playerid, "Çöp aracýnýza yakýn deðilsiniz.");
	TrashData[id][TrashLevel]--;
	KillTimer(TrashData[id][TrashTimer]);
    TrashData[id][TrashTimer] = SetTimerEx("FillTrash", REFILL_TIME * 1000, false, "i", id);
	TrashCP[playerid] = CreateDynamicCP(x, y, z, 3.0, .playerid = playerid);
	HasTrash[playerid] = true;
	ApplyAnimation(playerid, "CARRY", "liftup105", 4.1, 0, 0, 0, 0, 0);
	SetPlayerAttachedObject(playerid, ATTACHMENT_INDEX, 1264, 6, 0.222, 0.024, 0.128, 1.90, -90.0, 0.0, 0.5,0.5, 0.5);
	Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, TrashData[id][TrashLabel], E_STREAMER_COLOR, (TrashData[id][TrashLevel] == 0) ? 0xE74C3CFF : 0xF39C12FF);
	BilgiMesajGonder(playerid, "~k~~CONVERSATION_NO~ {FFFFFF}tuþuna basarak çöp torbasýný silebilirsin.");
	return 1;
}
CMD:copbul(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 408) return HataMesajGonder(playerid, "Çöp aracýnda deðilsiniz.");
	new id = Trash_Closest(playerid);
	if(id == -1) return HataMesajGonder(playerid, "Yakýnýnýzda hiç çöp kutusu bulunamadý.");
	SetPlayerCheckpoint(playerid, TrashData[id][TrashX], TrashData[id][TrashY], TrashData[id][TrashZ], 5.0);
	MesajGonder(playerid, "Çöp kutusu haritada iþaretlendi.");
	return 1;
}
CMD:testere(playerid, params[])
{
    if(!OyundaDegil(playerid)) return 1;
    if(IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araçta bu komutu kullanamazsýnýz.");
    if(!IsPlayerNearALogBuyer(playerid)) return HataMesajGonder(playerid, "Oduncuya yakýn deðilsiniz.");
	if(GetPlayerMoney(playerid) < CSAW_PRICE) return HataMesajGonder(playerid, "Yeterli paranýz yok. ($%d)", CSAW_PRICE);
    ParaVer(playerid, -CSAW_PRICE);
    GiveWeaponToPlayer(playerid, WEAPON_CHAINSAW, 1);
	MesajGonder(playerid, "{2ECC71}$%d {FFFFFF}ödeyerek testere satýn aldýnýz.", CSAW_PRICE);
	return 1;
}

CMD:odun(playerid, params[])
{
    if(!OyundaDegil(playerid)) return 1;
	if(IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araçta bu komutu kullanamazsýnýz.");
    if(isnull(params)) return BilgiMesajGonder(playerid, "/odun [al/sat]");

    if(!strcmp(params, "al")) {
		// taking from a cut tree
		if(CarryingLog[playerid]) return HataMesajGonder(playerid, "Zaten odun taþýyorsunuz.");
        new id = GetClosestTree(playerid);
        if(id == -1) return HataMesajGonder(playerid, "Aðaca yakýn deðilsiniz.");
        if(TreeData[id][treeSeconds] < 1) return HataMesajGonder(playerid, "Bu aðaç kesilmemiþ.");
        if(TreeData[id][treeLogs] < 1) return HataMesajGonder(playerid, "Bu aðaçta odun kalmamýþ.");
        TreeData[id][treeLogs]--;
        Tree_UpdateLogLabel(id);

        Player_GiveLog(playerid);
        MesajGonder(playerid, "Odun aðaçtan alýndý.");
        // done
    }else if(!strcmp(params, "sat")) {
        // selling a log
        if(!CarryingLog[playerid]) return HataMesajGonder(playerid, "Odun taþýmýyorsunuz.");
		if(!IsPlayerNearALogBuyer(playerid)) return HataMesajGonder(playerid, "Oduncuya yakýn deðilsiniz.");
		Player_RemoveLog(playerid);
		ParaVer(playerid, LOG_PRICE);
		MesajGonder(playerid, "Odun satýldý, alýnan; $%d", LOG_PRICE);
        // done
    }

	return 1;
}
CMD:acevher(playerid, params[])
{
    if(!OyundaDegil(playerid)) return 1;
    if(isnull(params)) return BilgiMesajGonder(playerid, "/acevher [cevherler/al]");
    if(!strcmp(params, "cevherler", true)) {
        new vehicleid = GetNearestVehicleEx(playerid);
        if(!IsValidVehicle(vehicleid)) return HataMesajGonder(playerid, "Herhangi bir araca yakýn deðilsiniz.");
        if(!Vehicle_IsMiningVehicle(vehicleid)) return HataMesajGonder(playerid, "Bu araç madenci aracý deðil.");
        new string[196], title[35];
		format(string, sizeof(string), "Ad\tMiktar\tFiyat\n");
        for(new i; i < MAX_ORE_TYPES; i++) format(string, sizeof(string), "%s%s\t%d\t{2ECC71}$%d\n", string, OreData[i][Name], LoadedOres[vehicleid][i], Vehicle_GetOreValueByType(vehicleid, i));
		format(title, sizeof(title), "Yüklenen Cevherler {E74C3C}(%d/%d)", Vehicle_LoadedOres(vehicleid), VEHICLE_LIMIT);
		ShowPlayerDialog(playerid, DIALOG_ORE_INFO, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Kapat", "");
    }else if(!strcmp(params, "al")) {
        if(IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araçta bu komutu kullanamazsýnýz.");
		if(MiningVein[playerid] != -1) return HataMesajGonder(playerid, "Zaten bir cevher çýkarýyorsunuz.");
		if(CarryingOre[playerid] != -1) return HataMesajGonder(playerid, "Zaten elinizde cevher var.");
		new id = GetNearestVehicleEx(playerid);
		if(!IsValidVehicle(id)) return HataMesajGonder(playerid, "Herhangi bir araca yakýn deðilsiniz.");
        if(!Vehicle_IsMiningVehicle(id)) return HataMesajGonder(playerid, "Bu araç madenci aracý deðil.");
		new Float: x, Float: y, Float: z;
		GetVehicleBoot(id, x, y, z);
		if(GetPlayerDistanceFromPoint(playerid, x, y, z) > 3.0) return HataMesajGonder(playerid, "Aracýn bagajýna yakýn deðilsiniz.");
        new string[196], title[35];
		format(string, sizeof(string), "Ad\tMiktar\n");
        for(new i; i < MAX_ORE_TYPES; i++) format(string, sizeof(string), "%s%s\t%d\n", string, OreData[i][Name], LoadedOres[id][i]);
		format(title, sizeof(title), "Yüklenen Cevherler {E74C3C}(%d/%d)", Vehicle_LoadedOres(id), VEHICLE_LIMIT);
		ShowPlayerDialog(playerid, DIALOG_ORE_TAKE, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Al", "Kapat");
    }

	return 1;
}

CMD:cevher(playerid, params[])
{
    if(!OyundaDegil(playerid)) return 1;
    if(isnull(params)) return BilgiMesajGonder(playerid, "/cevher [bilgi/cikar/al]");
    if(!strcmp(params, "bilgi", true)) {
		new id = Player_GetClosestVein(playerid);
		if(id == -1) return HataMesajGonder(playerid, "Damarlarýn yakýnýnda deðilsin.");
        new string[128], type = VeinData[id][Type], Float: time =(BAR_MAX / OreData[ VeinData[id][Type] ][Modifier]) * UPDATE_RATE/1000;
        format(string, sizeof(string), "Ad\t{%06x}%s\nFiyat\t{2ECC71}$%d\nDamar Fiyatý\t{2ECC71}$%d\nÇýkarma Süresi\t%.2f saniye", OreData[type][Color] >>> 8, OreData[type][Name], OreData[type][Value], (OreData[type][Value] * VeinData[id][Amount]), time);
		ShowPlayerDialog(playerid, DIALOG_ORE_INFO, DIALOG_STYLE_TABLIST, "Cevher Bilgi", string, "Close", "");
    }else if(!strcmp(params, "cikar")) {
        if(!Vehicle_IsMiningVehicle(PlayerData[playerid][pLastCar])) return HataMesajGonder(playerid, "En son bindiðiniz araç uygun deðil.");
		if(MiningVein[playerid] != -1) return HataMesajGonder(playerid, "Zaten bir cevher çýkarýyorsunuz.");
		if(CarryingOre[playerid] != -1) return HataMesajGonder(playerid, "Zaten elinizde cevher var.");
		new id = Player_GetClosestVein(playerid);
		if(id == -1) return HataMesajGonder(playerid, "Damarlarýn yakýnýnda deðilsin.");
		if(VeinData[id][BeingMined]) return HataMesajGonder(playerid,  "Bu damar baþkasý tarafýndan çýkarýlmýþ.");
		if(VeinData[id][Amount] < 1) return HataMesajGonder(playerid,  "Bu damar boþ.");
		new Float: x, Float: y, Float: z;
		GetVehicleBoot(PlayerData[playerid][pLastCar], x, y, z);
		if(GetPlayerDistanceFromPoint(playerid, x, y, z) > 60.0) return HataMesajGonder(playerid, "Son bindiðiniz araca çok uzaksýnýz.");
		MiningVein[playerid] = id;

		MiningTimer[playerid] = SetTimerEx("Player_Mine", UPDATE_RATE, true, "i", playerid);
		SetPlayerProgressBarColour(playerid, MiningBar[playerid], OreData[ VeinData[id][Type] ][Color]);
		SetPlayerProgressBarValue(playerid, MiningBar[playerid], 0.0);
		ShowPlayerProgressBar(playerid, MiningBar[playerid]);
		SetPlayerAttachedObject(playerid, ATTACH_INDEX, 19631, 6, 0.048, 0.029, 0.103, -80.0, 80.0, 0.0);
		TogglePlayerControllable(playerid, 0);
		SetPlayerArmedWeapon(playerid, 0);
		ApplyAnimation(playerid, "BASEBALL", "Bat_1", 4.1, 1, 0, 0, 1, 0, 1);

		new string[64], Float:oretime = (BAR_MAX / OreData[ VeinData[id][Type] ][Modifier]) * UPDATE_RATE;
		format(string, sizeof(string), "~n~~y~~h~Kaziliyor %s...", OreData[ VeinData[id][Type] ][Name]);
		ShowTextDrawMessage(playerid, string, TEXTDRAW_TYPE_MSG, floatround(oretime) + 1000);

		VeinData[id][BeingMined] = true;
		Vein_Update(id);
    }else if(!strcmp(params, "al")) {
        if(!Vehicle_IsMiningVehicle(PlayerData[playerid][pLastCar])) return HataMesajGonder(playerid, "En son bindiðiniz araç uygun deðil.");
		if(MiningVein[playerid] != -1) return HataMesajGonder(playerid, "Zaten bir cevher çýkarýyorsunuz.");
		if(CarryingOre[playerid] != -1) return HataMesajGonder(playerid, "Zaten elinizde cevher var.");
		new id = Player_GetClosestOre(playerid);
		if(id == -1) return HataMesajGonder(playerid, "Herhangi bir cevhere yakýn deðilsiniz.");
		new Float: x, Float: y, Float: z;
		GetVehicleBoot(PlayerData[playerid][pLastCar], x, y, z);
		if(GetPlayerDistanceFromPoint(playerid, x, y, z) > 60.0) return HataMesajGonder(playerid, "Son bindiðiniz araca çok uzaksýnýz.");
		Player_GiveOre(playerid, DroppedOres[id][Type]);
		Ore_Destroy(id);
    }

	return 1;
}
CMD:yukal(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "Yük almak için þöför olmalýsýnýz.");
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 414 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 455) return HataMesajGonder(playerid, "Bu araç taþýmacýlýk için uygun deðil.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2205.7734,-2663.9316,13.5469)) return HataMesajGonder(playerid, "Yük alma noktasýna yakýn deðilsiniz.");
	if(AracYuk[GetPlayerVehicleID(playerid)] == 1) return HataMesajGonder(playerid, "Bu araca zaten yük alýnmýþ.");
	AracYuk[GetPlayerVehicleID(playerid)] = 1;
	AracCP[GetPlayerVehicleID(playerid)] = 0;
	SetPlayerCheckpoint(playerid, KamyoncuCheckpoint[0][0],KamyoncuCheckpoint[0][1],KamyoncuCheckpoint[0][2], 5.0);
	MesajGonder(playerid, "Yük alýndý, checkpointleri takip edin.");
	return 1;
}
CMD:aracyukselt(playerid)
{
	if(IsVehicleBike(GetPlayerVehicleID(playerid))) return HataMesajGonder(playerid, "Bisikletlerin seviyesini yükseltemezsiniz.");
    if (IsPlayerNearPNS(playerid) == -1) return HataMesajGonder(playerid, "Tamirhane noktasýna yakýn deðilsiniz.");
    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "Þöför olmalýsýnýz.");
    new id = Car_GetID(GetPlayerVehicleID(playerid));
    if(AracInfo[id][aracSeviye] >= 5) return HataMesajGonder(playerid, "Bu araç zaten son seviye yükseltmeye sahip.");
    Dialog_Show(playerid, AracYukselt, DIALOG_STYLE_MSGBOX, "Araç Yükselt", "%s model aracýnýzý $%d karþýlýðýnda %d. seviyeye yükseltmek ister misiniz?", "Evet", "Hayýr", ReturnVehicleModelName(GetVehicleModel(GetPlayerVehicleID(playerid))), YukseltmeFiyat(AracInfo[id][aracSeviye] + 1), AracInfo[id][aracSeviye] + 1);
	return 1;
}

Dialog:AracYukselt(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if (IsPlayerNearPNS(playerid) == -1) return HataMesajGonder(playerid, "Tamirhane noktasýna yakýn deðilsiniz.");
	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "Þöför olmalýsýnýz.");
	    new id = Car_GetID(GetPlayerVehicleID(playerid));

	    new fiyat = YukseltmeFiyat(AracInfo[id][aracSeviye] + 1);

	    if(fiyat > PlayerData[playerid][pCash])
	    	return HataMesajGonder(playerid, "Yeterli paranýz yok.");

	    AracInfo[id][aracSeviye]++;
	    ParaVer(playerid, -fiyat);

	    MesajGonder(playerid, "Aracýnýza seviye yükseltmesi eklediniz.");
	}

	return 1;
}

stock YukseltmeFiyat(seviye)
{
	new fiyat = 2500;

	if(seviye >= 1)
		fiyat = seviye * 2500;

	return fiyat;
}

CMD:azirhlat(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "Þöför olmalýsýnýz.");
    new id = Car_GetID(GetPlayerVehicleID(playerid));
    if(id == -1 || AracInfo[id][aracTip] != 4 || AracInfo[id][aracSahip] <= 0 || AracInfo[id][aracModel] == 509) return HataMesajGonder(playerid, "Bu araca zýrh takýlamaz.");
    if(AracInfo[id][aracZirh] > 50) return HataMesajGonder(playerid, "Bu araç zaten zýrhlý.");
    Dialog_Show(playerid, AracZirhlat, DIALOG_STYLE_MSGBOX, "Araç Zýrhlat", "{2ECC71}$65,000 {FFFFFF}ödeyerek aracýnýzý zýrhlatmak istediðinize emin misiniz?", "Zýrhlat", "Kapat");
	return 1;
}
CMD:taksiplaka(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "Þöför olmalýsýnýz.");
    new vehicleid = GetPlayerVehicleID(playerid);
    new id = Car_GetID(vehicleid);
    if(id == -1 || AracInfo[id][aracTip] != 4 || AracInfo[id][aracSahip] <= 0 || !IsEngineVehicle(vehicleid) || IsVehicleBike(vehicleid) || GetVehicleMaxSeats(vehicleid) < 4) return HataMesajGonder(playerid, "Bu araca taksi plakasý takýlamaz.");
    if(AracInfo[id][TaksiPlaka] == 1) return HataMesajGonder(playerid, "Bu aracýn zaten taksi plakasý var.");
    Dialog_Show(playerid, TaksiPlaka, DIALOG_STYLE_MSGBOX, "Taksi Plakasý", "{2ECC71}$35,000 {FFFFFF}ödeyerek aracýnýza taksi plakasý taktýrmak istediðinize emin misiniz?", "Evet", "Hayýr");
	return 1;
}
CMD:garaj(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    new id = (Garage_Nearest(playerid) != -1) ? (Garage_Nearest(playerid)) : (Garage_Inside(playerid));
    if(id == -1) return HataMesajGonder(playerid, "Herhangi bir garaja yakýn veya içerisinde deðilsiniz!");
    if(GarageData[id][gSahip] != PlayerData[playerid][pID] && PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu garajýn sahibi deðilsin!");
   	new str[250], sifre[30];
    if(strcmp(GarageData[id][gSifre], "Yok", true) == 0) sifre = "-";
    else format(sifre, sizeof(sifre), GarageData[id][gSifre]);
    SetPVarInt(playerid, "GarajID", id);
    strcat(str, "Ýþlem\tDurum\n");
    format(str, sizeof(str), "%s{FFFFFF}Garaj Kilit Durumu\t%s\n{FFFFFF}Garaj Þifre\t{e5d60b}%s\n{FFFFFF}Garaj Park Durumu\t%s\n{FFFFFF}Park Edilen Araçlar",
	str, (GarageData[id][gKilit] == 1) ? ("{ff0000}Kilitli") : ("{83e50b}Açýk"), sifre, (GarageData[id][gParkDurum]) ? ("{83e50b}Açýk") : ("{ff0000}Kapalý"));
    Dialog_Show(playerid, GarajAyarlar, DIALOG_STYLE_TABLIST_HEADERS, "Garaj", str, "Seç", "Kapat");
	return 1;
}
CMD:petlerim(playerid)
{
	new string[500],sayi;
	strcat(string, "ID\tPet Adý\tDurum\n");
	foreach(new i: Petler)
	{
	    if(PetBilgi[i][petSahip] == PlayerData[playerid][pID])
	    {
	        format(string, sizeof(string), "%s%d\t%s\t%s\n",string,i,PetBilgi[i][petAdi], (PetBilgi[i][petDurum] == false) ? ("{ff0000}Gizli") : ("{00ff33}Aktif"));
	        sayi++;
	    }
	}
	if(sayi == 0) return HataMesajGonder(playerid, "Hiç petiniz yok.");
	ShowPlayerDialog(playerid, DIALOG_PETLERIM, DIALOG_STYLE_TABLIST_HEADERS, "Petleriniz", string,"Deðiþtir", "Kapat");
	return 1;
}
CMD:pet(playerid)
{
    if(PetKontrol[playerid] != -1)
	{
	    new Float:pos[4], Float:can;
	    GetPlayerHealth(playerid, can);
	    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	    GetPlayerFacingAngle(playerid, pos[3]);
	    FCNPC_SetPosition(PetBilgi[PetKontrol[playerid]][NPCID], pos[0], pos[1], pos[2]);
        FCNPC_SetAngle(PetBilgi[PetKontrol[playerid]][NPCID], pos[3]);
	    FCNPC_SetVirtualWorld(PetBilgi[PetKontrol[playerid]][NPCID], GetPlayerVirtualWorld(playerid));
	    FCNPC_SetInterior(PetBilgi[PetKontrol[playerid]][NPCID], GetPlayerInterior(playerid));
	    FCNPC_SetHealth(PetBilgi[PetKontrol[playerid]][NPCID], can);
	    FCNPC_SetInvulnerable(PetBilgi[PetKontrol[playerid]][NPCID], true);
	    SetPlayerSkin(playerid, GetPVarInt(playerid, "LastSkin"));
	    SetPlayerPos(playerid, LastPos[playerid][0], LastPos[playerid][1], LastPos[playerid][2]);
	    SetPlayerInterior(playerid, GetPVarInt(playerid, "LastInterior"));
	    SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "LastVw"));
	    SetPlayerHealth(playerid, GetPVarFloat(playerid, "LastHealth"));
	    SetPlayerArmour(playerid, GetPVarFloat(playerid, "LastArmour"));

	    DeletePVar(playerid, "LastSkin");
	    LastPos[playerid][0] = 0.0;
	    LastPos[playerid][1] = 0.0;
	    LastPos[playerid][2] = 0.0;
	    DeletePVar(playerid, "LastInterior");
	    DeletePVar(playerid, "LastVw");
	    DeletePVar(playerid, "LastHealth");
	    DeletePVar(playerid, "LastArmour");
        PetKontrol[playerid] = -1;
	    return 1;
	}
	if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || pbOda[playerid] != -1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	new id = PetYakin(playerid, 7.0);
	if(id == -1) return HataMesajGonder(playerid, "Yakýnýnýzda sahip olduðunuz pet yok.");
	PetDialog(playerid, id);
	return 1;
}
CMD:petolustur(playerid, params[])
{
	new petsahip, petturu, petcinsiyet;
	if(PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok!");
	if(sscanf(params, "uii", petsahip, petturu, petcinsiyet)) return BilgiMesajGonder(playerid, "/petolustur [Sahip] [Pet Türü 1-11] [Pet Cinsiyet 1- Erkek 2- Kadýn]");
	if(!OyundaDegil(petsahip)) return HataMesajGonder(playerid,"Oyuncu oyunda deðil.");
	if(petturu > 11) return HataMesajGonder(playerid,"Geçersiz pet türü.");
	if(petcinsiyet > 2) return HataMesajGonder(playerid,"Cinsiyet 1 veya 2 olmalýdýr. 1- erkek 2- kadýn");
	new id = Pet_Olustur(PlayerData[petsahip][pID], petturu, petcinsiyet);
	if(id == -1) return HataMesajGonder(playerid,"Pet oluþturulamadý.");
	MesajGonder(playerid, "Pet oluþturuldu. ID: %d", id);
	return 1;
}
CMD:petsil(playerid, params[])
{
	new id;
    if(PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok!");
    if(sscanf(params, "i", id)) return BilgiMesajGonder(playerid, "/petsil [ID]");
    if(!Iter_Contains(Petler, id)) return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");

    Pet_Sil(id);
    MesajGonder(playerid, "Pet silindi.");
	return 1;
}
CMD:petgizle(playerid, params[])
{
    new id;
    if(PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok!");
    if(sscanf(params, "i", id)) return BilgiMesajGonder(playerid, "/petgizle [ID]");
    if(!Iter_Contains(Petler, id)) return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");
    if(PetBilgi[id][petDurum] == false) return HataMesajGonder(playerid, "Bu pet zaten gizlenmiþ.");
    PetBilgi[id][petSaglik] = FCNPC_GetHealth(PetBilgi[id][NPCID]);
   	FCNPC_Destroy(PetBilgi[id][NPCID]);
    PetBilgi[id][petTakip] = -1;
    PetBilgi[id][NPCID] = -1;
    PetBilgi[id][petDurum] = false;
    DestroyDynamic3DTextLabel(PetBilgi[id][petText]);
	return 1;
}
CMD:oocmarket(playerid)
{
	if(!OyundaDegil(playerid)) return 1;

    mysql_tquery(baglanti, "SELECT * FROM `oocmarket`", "OOCMarket", "d", playerid);
	return 1;
}
CMD:vipmenu(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pVip] < 1) return HataMesajGonder(playerid, "V.I.P deðilsiniz. (/oocmarket)");
    VipMenu(playerid);
	return 1;
}
CMD:vipdolap(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pVip] < 1) return HataMesajGonder(playerid, "V.I.P deðilsiniz. (/oocmarket)");
    if(IsPlayerInRangeOfPoint(playerid, 100.0, 1377.7250,-2288.1245,-55.4695) || IsPlayerInRangeOfPoint(playerid, 100.0, 1411.1405,-2286.8162,-51.9696))
    {
        VipDolap(playerid);
    }
    else HataMesajGonder(playerid, "VIP Lounge'da deðilsin!");
	return 1;
}
CMD:maske(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
    if(PlayerData[playerid][pMaskeHakki] == 0 && PlayerData[playerid][pVip] < 2) return HataMesajGonder(playerid, "Maske kullaným hakkýnýz veya Silver VIP paketiniz yok. (/oocmarket)");
    if(PlayerData[playerid][pEsyalar][4] == 0) return HataMesajGonder(playerid, "Maskeniz yok.");
    if(PlayerData[playerid][pMaske] == false)
    {
        if(!PlayerData[playerid][pMaskeID]) PlayerData[playerid][pMaskeID] = random(90000) + 10000;
        PlayerData[playerid][pMaske] = true;
        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s maskeyi yüzüne takar.", ReturnName(playerid, 0));
    }
    else
    {
        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s yüzündeki maskeyi çýkartýr.", ReturnName(playerid, 0));
        PlayerData[playerid][pMaske] = false;
    }
	return 1;
}
CMD:ozelmodel(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
    OzelModelListele(playerid);
	return 1;
}
CMD:ayarlar(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    Dialog_Show(playerid, AyarlarGiris, DIALOG_STYLE_PASSWORD, "Ayarlar", "{FFFFFF}Ayarlar bölümüne eriþmek için karakterinizin þifresini girmelisiniz:", "Devam", "Kapat");
	return 1;
}
CMD:graffiti(playerid, params[])
{
    if(!OyundaDegil(playerid)) return 1;
    if(IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araçta bu komutu kullanamazsýnýz!");
    if(PlayerData[playerid][pFaction] == -1 || Birlikler[PlayerData[playerid][pFaction]][birlikOnaylar][3] == 0) return HataMesajGonder(playerid, "Graffiti onaylý bir birliðin üyesi deðilsiniz.");

    if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
        return HataMesajGonder(playerid, "Ýnterior içerisine graffiti oluþturamazsýn!");

    if(PlayerData[playerid][pGraffiti] == 1) return HataMesajGonder(playerid, "Zaten graffiti oluþturuyorsun!");

    PlayerData[playerid][pGraffiti] = 1;
    Dialog_Show(playerid, Graffiti, DIALOG_STYLE_INPUT, "Graffiti ~ Yazý", "{FFFFFF}Lütfen graffiti yazýsýný girin.\n{FFFFFF}Yazý içerisinde #renk ile renklendirme yapabilirsiniz. (#kirmizi, #mavi vs.)\n{FFBF00}[Ýnfo] {FFFFFF}Yazý 64 karakteri geçemez.", "Devam", "Kapat");
    return 1;
}
CMD:chattemizle(playerid, params[])
{
    for (new i = 0; i < 100; i ++) {
        SendClientMessage(playerid, -1, "");
    }
    return 1;
}
CMD:id(playerid, params[])
{
    if(!OyundaDegil(playerid)) return 1;
    if (isnull(params))
        return BilgiMesajGonder(playerid, "/id [ID/Isim]");

    if (strlen(params) < 3)
        return HataMesajGonder(playerid, "En az 3 karakter belirtmelisiniz.");

    new count;
 	foreach (new i : Player)
    {
        if (strfind(Player_GetName(i), params, true) != -1)
        {
            SendClientMessageEx(playerid, COLOR_WHITE, "** %s - ID: %d", Player_GetName(i), i);
            count++;
        }
    }
    if (!count)
        return HataMesajGonder(playerid, "Bu kriterlerde hiçbir oyuncu bulunamadý: \"%s\".", params);

    return 1;
}
CMD:duzkontak(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	if(PlayerData[playerid][pDuzkontak] != -1) return HataMesajGonder(playerid, "Zaten düzkontak yapýyorsunuz.");
	if(PlayerData[playerid][pKilitkir] != -1) return HataMesajGonder(playerid, "Kilit kýrarken düzkontak yapamazsýnýz.");
	if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1) return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	if(PlayerData[playerid][pLevel] < 10) return HataMesajGonder(playerid, "Mekanik sistemini kullanabilmek için en az 10 level olmalýsýnýz.");
	if(GetPlayerState(playerid) != 0 && !IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Sürücü koltuðunda olmalýsýnýz.");
	new vehicleid = GetPlayerVehicleID(playerid), vid = Car_GetID(vehicleid);
	if(GetEngineStatus(vehicleid)) return HataMesajGonder(playerid, "Bu aracýn motoru zaten açýk.");
	if(AracInfo[vid][aracGaraj] != -1) return HataMesajGonder(playerid, "Garajdaki araçlara yapamazsýnýz.");
	if(AracInfo[vid][aracFactionType] == BIRLIK_LSPD || AracInfo[vid][aracFactionType] == BIRLIK_LSMD || AracInfo[vid][aracFactionType] == BIRLIK_GOV || AracInfo[vid][aracFactionType] == BIRLIK_FBI) return HataMesajGonder(playerid, "Hükümet aracýný mekanik edemezsiniz.");
	if(AracInfo[vid][aracSahip] == PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Kendi aracýnýza düzkontak yapamazsýnýz.");
	GameTextForPlayer(playerid, "~b~duzkontak ~w~150", 1000, 4);
	GetPlayerPos(playerid, mekanikPos[playerid][0], mekanikPos[playerid][1], mekanikPos[playerid][2]);
	PlayerData[playerid][pDuzkontak] = 150;
	MekanikTimer[playerid] = SetTimerEx("DuzkontakYapiliyor", 1000, true, "d", playerid);
    new id = GetNearestCCTV(playerid);
	SetPVarInt(playerid, "CCTVKontrol", gettime()+10);
	if (id != -1 && CCTVInfo[id][cctvBildirim] < gettime())
	{
		CCTVInfo[id][cctvBildirim] = gettime()+100;
		SendBirlikMessageEx(BIRLIK_LSPD, COLOR_RED, "** DEPARTMAN: %s adlý CCTV'de düzkontak iþlemi yapýlýyor.",CCTVInfo[id][cctv_Name]);
	}
	return 1;
}
CMD:kilitkir(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	if(PlayerData[playerid][pDuzkontak] != -1) return HataMesajGonder(playerid, "Düzkontak yaparken kilit kýramazsýnýz.");
	if(PlayerData[playerid][pKilitkir] != -1) return HataMesajGonder(playerid, "Zaten kilit kýrýyorsunuz");
	if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1) return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	if(PlayerData[playerid][pLevel] < 10) return HataMesajGonder(playerid, "Mekanik sistemini kullanabilmek için en az 10 level olmalýsýnýz.");
	new vid = Car_Nearest(playerid);
	if(vid == -1) return HataMesajGonder(playerid, "Hiçbir araca yakýn deðilsiniz.");
	if(AracInfo[vid][aracGaraj] != -1) return HataMesajGonder(playerid, "Garajdaki araçlara yapamazsýnýz.");
	if(AracInfo[vid][aracKilit] == 0) return HataMesajGonder(playerid, "Bu aracýn kilidi zaten açýk.");
	if(AracInfo[vid][aracFactionType] == BIRLIK_LSPD || AracInfo[vid][aracFactionType] == BIRLIK_LSMD || AracInfo[vid][aracFactionType] == BIRLIK_GOV || AracInfo[vid][aracFactionType] == BIRLIK_FBI) return HataMesajGonder(playerid, "Hükümet aracýný mekanik edemezsiniz.");
	if(AracInfo[vid][aracSahip] == PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Kendi aracýnýza kilitkýr yapamazsýnýz.");
	new kilitsure = 0;
	switch(AracInfo[vid][aracSeviye])
	{
		case 0: kilitsure = 150;
		case 1: kilitsure = 170;
		case 2: kilitsure = 195;
		case 3: kilitsure = 220;
		case 4: kilitsure = 250;
		case 5: kilitsure = 300;
	}
	MesajGonder(playerid, "Kilit kýrmaya baþladýnýz, %d saniye içinde aracýn kilidi açýlacaktýr.", kilitsure);
	PlayAnimEx(playerid, "COP_AMBIENT", "Copbrowse_loop", 4.1, 1, 0, 0, 0, 0, 1);
	GetPlayerPos(playerid, mekanikPos[playerid][0], mekanikPos[playerid][1], mekanikPos[playerid][2]);
	PlayerData[playerid][pKilitkir] = kilitsure;
	MekanikTimer[playerid] = SetTimerEx("KilitKiriliyor", 1000, true, "d", playerid);
 	new id = GetNearestCCTV(playerid);
	SetPVarInt(playerid, "CCTVKontrol", gettime()+10);
	if (id != -1 && CCTVInfo[id][cctvBildirim] < gettime())
	{
		CCTVInfo[id][cctvBildirim] = gettime()+100;
		SendBirlikMessageEx(BIRLIK_LSPD, COLOR_RED, "** DEPARTMAN: %s adlý CCTV'de kilit kýrma iþlemi yapýlýyor.",CCTVInfo[id][cctv_Name]);
	}

	return 1;
}
CMD:mekanik(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 90.4013, -303.7245, 1.5781)) return HataMesajGonder(playerid, "Mekanik bölgesine yakýn deðilsiniz.");
	if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1) return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	if(PlayerData[playerid][pLevel] < 10) return HataMesajGonder(playerid, "Mekanik sistemini kullanabilmek için en az 10 level olmalýsýnýz.");
	if(GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_LSMD || GetFactionType(playerid) == BIRLIK_GOV || GetFactionType(playerid) == BIRLIK_FBI) return HataMesajGonder(playerid, "Devlet kurumlarý mekanikten faydalanamaz.");
	new string[300], mekanikoluyo = 1, aracmiktar[50], vehicleid = GetPlayerVehicleID(playerid), vid = Car_GetID(vehicleid);
	if(vid != -1)
	{
		if(AracInfo[vid][aracFactionType] >= 5 || AracInfo[vid][aracFactionType] <= 8) mekanikoluyo = 0;
		if(AracInfo[vid][aracSahip] == PlayerData[playerid][pID]) mekanikoluyo = 0;
		format(aracmiktar, 50, "N/A");
		if(mekanikoluyo) format(aracmiktar, 50, "%s", FormatNumber(GetGaleriFiyat(AracInfo[vid][aracModel])/8));
		format(string, 300, "Mekanik%s\t\t{38b838}($125.000)\n{%s}Aracý Hurdaya Çýkar\t\t%s", (PlayerData[playerid][pMekanik] == 0) ? (" Ol\t") : ("likten Ayrýl"), (mekanikoluyo == 0) ?  ("e12e2e") : ("ffffff"), aracmiktar);
		Dialog_Show(playerid, MekanikMenu, DIALOG_STYLE_LIST, "Mekanik", string, "Seç", "Kapat");
	}
	else
	{
		format(string, 300, "Mekanik%s\t\t{38b838}($125.000)\n{e12e2e}Aracý Hurdaya Çýkar\t\tN/A", (PlayerData[playerid][pMekanik] == 0) ? (" Ol\t") : ("likten Ayrýl"));
		Dialog_Show(playerid, MekanikMenu, DIALOG_STYLE_LIST, "Mekanik", string, "Seç", "Kapat");
	}
	return 1;
}
Dialog:MekanikDegisim(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(GetPVarInt(playerid, "OnayKOD") == strval(inputtext))
	    {
	        if(PlayerData[playerid][pMekanik] == 0)
	        {
	        	if(PlayerData[playerid][pCash] < 125000) return HataMesajGonder(playerid, "Mekanik olmak için $125.000 olmalýdýr.");
				PlayerData[playerid][pMekanik] = 1;
				MesajGonder(playerid, "Baþarýyla mekanik oldunuz.");
				ParaVer(playerid, -125000);
				return 1;
			}
			if(PlayerData[playerid][pMekanik] == 1)
			{
  				if(PlayerData[playerid][pCash] < 1000) return HataMesajGonder(playerid, "Mekanikten ayrýlmak için $10.000 olmalýdýr.");
				PlayerData[playerid][pMekanik] = 0;
				MesajGonder(playerid, "Baþarýyla mekanikten ayrýldýnýz.");
				ParaVer(playerid, -10000);
				return 1;
			}
		}
		SetPVarInt(playerid, "OnayKOD", RandomEx(111111, 999999));
	}
	return 1;
}
Dialog:MekanikMenu(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(listitem == 0)
	    {
	        SetPVarInt(playerid, "OnayKOD", RandomEx(111111, 999999));
	        if(PlayerData[playerid][pMekanik] == 1)
	            Dialog_Show(playerid, MekanikDegisim, DIALOG_STYLE_INPUT, "Mekanik Olmayý Onayla", "{ffffff} Mekanik mesleðinden ayrýlmak için yüklü miktarda para ödersiniz.\n Mekanik mesleðindeki kiþiler legal mesleklerden yararlanamaz.\n \nMekanik olmak için {35c735}$125.000 {ffffff}gerekmektedir, eðer onaylýyorsan {35c735}%d {ffffff}kodunu aþaðýya yaz.", "Kabul Et", "Geri", GetPVarInt(playerid, "OnayKOD"));
			if(PlayerData[playerid][pMekanik] == 0)
				Dialog_Show(playerid, MekanikDegisim, DIALOG_STYLE_INPUT, "Mekanik Ayrýlmayý Onayla", "{ffffff} Mekanik olmak için tekrardan yüklü miktarda para ödersiniz.\n \nMekanik mesleðinden ayrýlmak için {35c735}$125.000 {ffffff}gerekmektedir, eðer onaylýyorsan {35c735}%d {ffffff}kodunu aþaðýya yaz.", "Kabul Et", "Geri", GetPVarInt(playerid, "OnayKOD"));
	    }
	    if(listitem == 1)
	    {
			if(PlayerData[playerid][pMekanikSure] > gettime())
			{
			    new secs = PlayerData[playerid][pMekanikSure] - gettime();
			    new saat = floatround(secs/3600);
				return HataMesajGonder(playerid, "Mekanikleme hakkýnýz bulunmuyor, %d saat sonra mekanik yapabilirsiniz.", saat);
			}
	        new vehicleid = GetPlayerVehicleID(playerid), vid = Car_GetID(vehicleid);
			if(AracInfo[vid][aracFactionType] == BIRLIK_LSPD || AracInfo[vid][aracFactionType] == BIRLIK_LSMD || AracInfo[vid][aracFactionType] == BIRLIK_GOV || AracInfo[vid][aracFactionType] == BIRLIK_FBI) return HataMesajGonder(playerid, "Hükümet aracýný mekanik edemezsiniz.");
			if(AracInfo[vid][aracSahip] == PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Kendi aracýnýzý mekanik edemezsiniz.");
			if(!IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araçta olmalýsýnýz.");
			if(!IsDoorVehicle(vehicleid)) return HataMesajGonder(playerid, "Kapýsýz araçlara uygulanamaz.");
			if(AracInfo[vid][DuzKontak] == 0 && AracInfo[vid][KilitKir] == 0) return HataMesajGonder(playerid, "Bir aracý mekaniklemek için kilidinin kýrýlmýþ ve düz kontak yapýlmýþ olmalýdýr.");
			if(PlayerData[playerid][pMekanik] == 0) return HataMesajGonder(playerid, "Mekanik deðilsiniz.");
   			AracInfo[vid][aracBaglandi] = 1;
            AracInfo[vid][aracBaglandiCeza] = GetGaleriFiyat(AracInfo[vid][aracModel])/8;
            AracInfo[vid][aracDisplay] = false;
            ParaVer(playerid, GetGaleriFiyat(AracInfo[vid][aracModel])/8);
            Arac_Kaydet(vid);
			Arac_Spawn(vid);
			PlayerData[playerid][pMekanikSure] = gettime()+43200;
			if(PlayerData[playerid][pVip] == 3) PlayerData[playerid][pMekanikSure] = gettime()+86400;
			MesajGonder(playerid, "%s model aracý mekanikleyerek %s kazandýnýz.", ReturnVehicleModelName(GetVehicleModel(vehicleid)), FormatNumber(GetGaleriFiyat(AracInfo[vid][aracModel])/8));
			return 1;
		}
	}
	return 1;
}
CMD:renkler(playerid)
{
    new string[3098];
    for(new i = 0; i < sizeof(ColorList); i++)
	{
		format(string, sizeof(string), "%s%s", string, ColorList[i]);
	}
	Dialog_Show(playerid, renkler, DIALOG_STYLE_MSGBOX, "Renkler", string, "Tamam", "");
	return 1;
}
CMD:kancacoz(playerid)
{
	if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1) return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	new id = Car_GetID(GetPlayerVehicleID(playerid));
	if(id == -1) return HataMesajGonder(playerid, "Herhangi bir araçta deðilsiniz.");
	if(AracInfo[id][aracTip] == 2 || AracInfo[id][aracTip] == 3 || AracInfo[id][aracTip] == 6) return HataMesajGonder(playerid, "Bu araçla kanca iþlemi yapamazsýnýz.");
	if(!IsDoorVehicle(AracInfo[id][aracVehicle])) return HataMesajGonder(playerid, "Bu araca kanca takýlamaz.");
	if(AracInfo[id][aracSahip] != PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Sadece kendi aracýnýza uygulayabilirsiniz.");
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araçta deðilsiniz.");
	if(!GetEngineStatus(AracInfo[id][aracVehicle])) return HataMesajGonder(playerid, "Motorunuz açýk deðil.");
    if(!IsValidVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)))) return HataMesajGonder(playerid, "Herhangi bir araç takýlý deðil.");
    AracCekiyor[playerid] = INVALID_VEHICLE_ID;
    DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
    new yazi[60];
    format(yazi, 60, "çekici kamyonun kancasýný %s model araçtan çýkartýr.", ReturnVehicleModelName(GetVehicleModel(GetVehicleTrailer(GetPlayerVehicleID(playerid)))));
    callcmd::me(playerid, yazi);
	return 1;
}
CMD:kanca(playerid)
{
	if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1) return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	new id = Car_GetID(GetPlayerVehicleID(playerid));
	if(id == -1) return HataMesajGonder(playerid, "Herhangi bir araçta deðilsiniz.");
	if(AracInfo[id][aracTip] == 2 || AracInfo[id][aracTip] == 3 || AracInfo[id][aracTip] == 6) return HataMesajGonder(playerid, "Bu araçla kanca iþlemi yapamazsýnýz.");
	if(!IsDoorVehicle(AracInfo[id][aracVehicle])) return HataMesajGonder(playerid, "Bu araca kanca takýlamaz.");
	if(AracInfo[id][aracSahip] != PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Sadece kendi aracýnýza uygulayabilirsiniz.");
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araçta deðilsiniz.");
	if(!GetEngineStatus(AracInfo[id][aracVehicle])) return HataMesajGonder(playerid, "Motorunuz açýk deðil.");
	new closestcar = GetClosestCar(playerid, GetPlayerVehicleID(playerid));
	if(closestcar == -1) return HataMesajGonder(playerid, "Herhangi bir araca yakýn deðilsiniz.");
	new yid = Car_GetID(closestcar);
	if(AracInfo[yid][aracTip] == 2 || AracInfo[yid][aracTip] == 3 || AracInfo[yid][aracTip] == 6) return HataMesajGonder(playerid, "Bu aracý çekemezsiniz.");
	if(AracInfo[yid][KancaIzin] != AracInfo[id][aracID]) return HataMesajGonder(playerid, "Bu araç size kanca izni vermemiþ.");
	foreach (new i:Player) if (AracCekiyor[i] == closestcar || (GetPlayerVehicleID(i) == closestcar && GetPlayerState(i) == 2)) return HataMesajGonder(playerid, "Ayný anda 2 aracý birden çekemezsin.");
	new Float:VehiclePos[3];
	GetVehiclePos(closestcar,VehiclePos[0],VehiclePos[1],VehiclePos[2]);
	if (GetPlayerDistanceFromPoint(playerid,VehiclePos[0],VehiclePos[1],VehiclePos[2]) <= 8 && !IsTrailerAttachedToVehicle(AracInfo[id][aracVehicle]) && GetVehicleModel(closestcar) != 509)
	{
		new org[65];
		format(org, 65, "çekici kamyonun kancasýný %s model araca baðlar.", ReturnVehicleModelName(GetVehicleModel(closestcar)));
		callcmd::me(playerid, org);
		AttachTrailerToVehicle(closestcar,AracInfo[id][aracVehicle]);
		AracCekiyor[playerid] = yid;
	}
	return 1;
}
CMD:destek(playerid, params[])
{
    if(!OyundaDegil(playerid)) return 1;
    if(Talep_GetCount(playerid) >= 1) return HataMesajGonder(playerid, "Bakýlmasý beklenen 1 adet destek talebiniz var daha fazla destek yollayamazsýnýz! (/destekiptal)");
    if(isnull(params)) return BilgiMesajGonder(playerid, "/destek [Ýçerik]");
    new talepid = -1;
    if ((talepid = Talep_Add(playerid, params)) != -1)
    {

    	foreach (new i : Player)
        {
            if (PlayerData[i][pAdmin] > 0 || PlayerData[i][pHelper] > 0)
			{
			    if(strlen(params) > 64)
			    {
                	SendClientMessageEx(i, 0xd47626FF, "(Talep %d) %s (%d): %.64s", talepid, ReturnName(playerid, 0), playerid, params);
                	SendClientMessageEx(i, 0xd47626FF, "%s", params[64]);
                }
                else
                {
                    SendClientMessageEx(i, 0xd47626FF, "(Talep %d) %s (%d): %s", talepid, Player_GetName(playerid), playerid, params);
                }
            }
        }
        MesajGonder(playerid, "Destek talebiniz iletildi, lütfen sabýrlý ve anlayýþlý olun. Talep sýranýz: %d", talepid+1);
    }
    else
    {
        HataMesajGonder(playerid, "Destek talebin listesi dolu destek göndermek için lütfen biraz bekleyiniz.");
    }
	return 1;
}
CMD:destekiptal(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if(Talep_GetCount(playerid) <= 0) return HataMesajGonder(playerid, "Destek talebiniz yok.");
    for(new i; i<MAX_TALEP; i++) if(Talep[i][tExists] == true && Talep[i][tGonderen] == playerid)
  	{
  	    Talep[i][tExists] = false;
  	    format(Talep[i][tIcerik], 128, "");
  	    Talep[i][tGonderen] = -1;
  	    Talep[i][tIlgilenen] = -1;
  	}
  	MesajGonder(playerid, "Destek talebiniz silindi.");
	return 1;
}
CMD:karakter(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	ShowStats(playerid, playerid);
	return 1;
}
CMD:paraver(playerid, params[])
{
    static
        userid,
        amount;

    if(!OyundaDegil(playerid)) return 1;

    if (sscanf(params, "ud", userid, amount))
        return BilgiMesajGonder(playerid, "/paraver [id/isim] [miktar]");

    if (!OyundaDegil(userid) || !IsPlayerNearPlayer(playerid, userid, 5.0))
        return HataMesajGonder(playerid, "Oyuncu oyunda deðil veya sana yeterince yakýn deðil.");

    if(GetPlayerState(userid) == PLAYER_STATE_SPECTATING)
        return HataMesajGonder(playerid, "Oyuncu oyunda deðil veya sana uzak.");

    if (userid == playerid)
        return HataMesajGonder(playerid, "Kendine para veremezsin.");

    if (amount < 1)
        return HataMesajGonder(playerid, "En az $1 verebilirsin.");

    if (amount > 100 && PlayerData[playerid][pOynamaSaati] < 2)
        return HataMesajGonder(playerid, "Para verebilmek için 2 saat oynamalýsýn.");

    if (amount > PlayerData[playerid][pCash])
        return HataMesajGonder(playerid, "Bu kadar paran yok.");

    ParaVer(playerid, -amount);
    ParaVer(userid, amount);

    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cebinden %s miktar para çýkartýp %s adlý kiþiye verir.", ReturnName(playerid, 0), FormatNumber(amount), ReturnName(userid, 0));
    Log_Write("logs/pay_log.txt", "[%s] %s (%s), %s miktar parayi %s (%s) adli kisiye verir.", ReturnDate(), Player_GetName(playerid), GetIP(playerid), FormatNumber(amount), Player_GetName(userid), GetIP(userid));
    return 1;
}
CMD:gps(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "Sürücü olmalýsýnýz.");
	Dialog_Show(playerid, GPS, DIALOG_STYLE_LIST, "GPS", "{FFBF00}» {FFFFFF}Global Lokasyonlar\n{FFBF00}» {FFFFFF}Ev Bul\n{FFBF00}» {FFFFFF}Ýþyeri Bul\n{FFBF00}» {FFFFFF}Bina Bul", "Seç", "Geri");
	return 1;
}
CMD:cpsifirla(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && AracYuk[GetPlayerVehicleID(playerid)] == 1) return HataMesajGonder(playerid, "Bunu þu an yapamazsýnýz.");
	PlayerData[playerid][pTaksiKabul] = -1;
	DisablePlayerCheckpoint(playerid);
	AracYuk[GetPlayerVehicleID(playerid)] = 0;
	AracCP[GetPlayerVehicleID(playerid)] = -1;
	EMSKabul[playerid] = INVALID_PLAYER_ID;
	SetPVarInt(playerid, "EvBuluyor", -1);
	SetPVarInt(playerid, "IsyeriBuluyor", -1);
	SetPVarInt(playerid, "BinaBuluyor", -1);
	PlayerData[playerid][pGPS] = -1;
	DeletePVar(playerid, "AraciniBuluyor");
	SetPVarInt(playerid, "AracSakliyor", -1);
	PlayerTextDrawHide(playerid, MesafeTD[playerid]);
	DisablePlayerCheckpoint(playerid);
	MesajGonder(playerid, "Checkpoint sýfýrlandý.");
	return 1;
}
CMD:ustunuara(playerid, params[])
{
    static
        userid;

    if(!OyundaDegil(playerid)) return 1;

    if (sscanf(params, "u", userid))
        return BilgiMesajGonder(playerid, "/ustunuara [id/isim]");

    if (!OyundaDegil(userid) || !IsPlayerNearPlayer(playerid, userid, 6.0))
        return HataMesajGonder(playerid, "Belirtilen oyuncu aktif deðil ya da size yakýn deðil.");

    if (userid == playerid)
        return HataMesajGonder(playerid, "Kendi üstünü arayamazsýn.");

    PlayerData[userid][pFriskOffer] = playerid;

    MesajGonder(userid, "%s üstünü aramak istiyor. (\"/kabulet arama\").", ReturnName(playerid, 0));
    MesajGonder(playerid, "%s adlý oyuncuya üstünü arama isteði gönderildi.", ReturnName(userid, 0));
    return 1;
}
CMD:tokalas(playerid, params[])
{
    static
        userid,
        type;

    if(!OyundaDegil(playerid)) return 1;

    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");

    if (sscanf(params, "ud", userid, type))
        return BilgiMesajGonder(playerid, "/tokalas [id/isim] [tip]");

    if (!IsPlayerConnected(userid) || !IsPlayerNearPlayer(playerid, userid, 6.0))
        return HataMesajGonder(playerid, "Belirtilen oyuncu oyunda deðil veya size yakýn deðil.");

    if (userid == playerid)
        return HataMesajGonder(playerid, "Kendi elinle tokalaþamazsýn.");

    if(PlayerData[userid][pKelepce] > 0 || PlayerData[userid][pHapisSure] > 0 || PlayerData[userid][pSoklandi] > 0 || PlayerData[userid][pYereYatirildi] > 0 || PlayerData[userid][pBaygin] == 1 || PetKontrol[userid] != -1 || pbOda[userid] != -1 || GetPVarInt(userid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Bu kiþi ile tokalaþamazsýn!");

    if (type < 1 || type > 6)
        return HataMesajGonder(playerid, "Tip 1-6 arasýnda olmasý gerekir.");

    PlayerData[userid][pShakeOffer] = playerid;
    PlayerData[userid][pShakeType] = type;

    MesajGonder(userid, "%s seninle tokalaþmak istiyor. (\"/kabulet tokalasma\").", ReturnName(playerid, 0));
    MesajGonder(playerid, "%s adlý oyuncuya tokalaþma isteði yolladýn.", ReturnName(userid, 0));
    return 1;
}
CMD:kabulet(playerid, params[])
{
 	if (isnull(params))
    {
        BilgiMesajGonder(playerid, "/kabulet [adlar]");
        SendClientMessage(playerid, COLOR_YELLOW, "[ADLAR]:{FFFFFF} arama, tokalasma, evlilik, konum");
        return 1;
    }

    if (!strcmp(params, "konum", true) && GetPVarInt(playerid, "KonumKabul") != -1 && IsPlayerConnected(GetPVarInt(playerid, "KonumKabul")))
    {
    	new Float:pos[3];
    	GetPlayerPosEx(GetPVarInt(playerid, "KonumKabul"), pos[0], pos[1], pos[2]);
    	SetPlayerCheckpoint(playerid, pos[0], pos[1], pos[2], 3.0);
   	 	MesajGonder(playerid, "Kiþinin konumu haritada iþaretlendi.");
    	SetPVarInt(playerid, "KonumKabul", -1);
    	SetPVarInt(playerid, "AraciniBuluyor", 1);
    }
    if (!strcmp(params, "arama", true) && PlayerData[playerid][pFriskOffer] != INVALID_PLAYER_ID)
    {
		new
            targetid = PlayerData[playerid][pFriskOffer];

        if (!IsPlayerNearPlayer(playerid, targetid, 6.0))
            return HataMesajGonder(playerid, "Oyuncuya yakýn deðilsin.");

        SendClientMessage(targetid, -1, "{AFAFAF}-------------------------------");
        SendClientMessageEx(targetid, COLOR_WHITE, "Para: {2ECC71}%s", FormatNumber(PlayerData[playerid][pCash]));
        if(PlayerDrugData[playerid][Drugs] > 0) SendClientMessageEx(targetid, COLOR_WHITE, "Uyuþturucu: %d gram", PlayerDrugData[playerid][Drugs]);
        if(PlayerDrugData[playerid][Seeds] > 0) SendClientMessageEx(targetid, COLOR_WHITE, "Uyuþturucu Tohumu: %d adet", PlayerDrugData[playerid][Seeds]);
        if(PlayerData[playerid][pRadyo] > 0) SendClientMessageEx(targetid, COLOR_WHITE, "Portatif Radyo (frekans #%d khZ)", PlayerData[playerid][pFrekans]);
        if(PlayerData[playerid][pEhliyet] == 1) SendClientMessage(targetid, COLOR_WHITE, "Ehliyet.");
        new a;
		for(new i; i<13; i++) if(PlayerData[playerid][pSilahlar][i] > 0)
		{
	    	GetPlayerWeaponData(playerid, i, a, PlayerData[playerid][pMermiler][i]);
	    	SendClientMessageEx(targetid, COLOR_WHITE, "%s (%d mermi)", ReturnWeaponName(PlayerData[playerid][pSilahlar][i]), PlayerData[playerid][pMermiler][i]);
		}
		SendClientMessage(targetid, -1, "{AFAFAF}-------------------------------");
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s ellerini %s adlý kiþinin üzerinde gezdirir.", ReturnName(targetid, 0), ReturnName(playerid, 0));
        PlayerData[playerid][pFriskOffer] = INVALID_PLAYER_ID;
    }
    else if (!strcmp(params, "tokalasma", true) && PlayerData[playerid][pShakeOffer] != INVALID_PLAYER_ID)
    {
        new
            targetid = PlayerData[playerid][pShakeOffer],
            type = PlayerData[playerid][pShakeType];

        if (!IsPlayerNearPlayer(playerid, targetid, 6.0))
            return HataMesajGonder(playerid, "Oyuncuya yakýn deðilsin.");

        SetPlayerToFacePlayer(playerid, targetid);
        SetPlayerToFacePlayer(targetid, playerid);

        PlayerData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
        PlayerData[playerid][pShakeType] = 0;

        switch (type)
        {
            case 1:
            {
                ApplyAnimation(playerid, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(targetid, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
            }
            case 2:
            {
                ApplyAnimation(playerid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(targetid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
            }
            case 3:
            {
                ApplyAnimation(playerid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(targetid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
            }
            case 4:
            {
                ApplyAnimation(playerid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(targetid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
            }
            case 5:
            {
                ApplyAnimation(playerid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(targetid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
            }
            case 6:
            {
                ApplyAnimation(playerid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(targetid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0, 1);
            }
        }
        MesajGonder(playerid, "%s adlý kiþinin tokalaþma isteðini kabul ettiniz.", ReturnName(targetid, 0));
        MesajGonder(targetid, "%s tokalaþma isteðinizi kabul etti.", ReturnName(playerid, 0));
    }
    else if (!strcmp(params, "evlilik", true) && PlayerData[playerid][pPartnerTeklif] != INVALID_PLAYER_ID)
    {
        new
            partnerid = PlayerData[playerid][pPartnerTeklif];

        if (!IsPlayerNearPlayer(playerid, partnerid, 6.0))
            return HataMesajGonder(playerid, "Oyuncuya yakýn deðilsin.");

        if(PlayerData[playerid][pPartner] != 0 || PlayerData[partnerid][pPartner] != 0 )
            return HataMesajGonder(playerid, "Evlilik için iki çiftinde partneri olmamasý gereklidir.");

        PlayerData[playerid][pPartner] = PlayerData[partnerid][pID];
        PlayerData[partnerid][pPartner] = PlayerData[playerid][pID];

        SendClientMessageToAllEx(0x42f445FF, "KÝLÝSE: %s ile %s evlendi!", ReturnName(partnerid, 0), ReturnName(playerid, 0));
        Log_Write("logs/evlilik_log.txt", "[%s] %s, %s ile evlendi.", ReturnDate(), ReturnName(playerid, 0), ReturnName(partnerid , 0));

        PlayerData[playerid][pPartnerTeklif] = INVALID_PLAYER_ID;
    }
    return 1;
}
CMD:birlikler(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    ViewFactions(playerid);
	return 1;
}
CMD:birlikara(playerid, params[])
{
	if(!OyundaDegil(playerid)) return 1;
	if(isnull(params)) return BilgiMesajGonder(playerid, "/birlikara [Ad]");
	if(strlen(params) < 3) return HataMesajGonder(playerid, "En az üç harf girmelisiniz.");
	new tip[15], count;
	for(new i; i<MAX_BIRLIK; i++) if(Birlikler[i][birlikExists] == 1 && strfind(Birlikler[i][birlikAd], params, true) != -1)
	{
	    switch(Birlikler[i][birlikTip])
     	{
      		case 0: tip = "Belirlenmiyor";
      		case 1: tip = "Çete";
        	case 2: tip = "Mafya";
         	case 3: tip = "Yayýn Ajansý";
          	case 4: tip = "Legal";
           	default: tip = "Özel Kurum";
      	}
      	count++;
	    SendClientMessageEx(playerid, COLOR_WHITE, "%s (ID: %d | SQL ID: %d | Tip: %s | Üye Sayýsý: %d)", Birlikler[i][birlikAd], i, Birlikler[i][birlikID], tip, BirlikUyeSayisi(i));
	}
	if(!count) return HataMesajGonder(playerid, "Hiç birlik bulunamadý.");
	return 1;
}
CMD:hud(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pHUD] == true)
    {
        PlayerData[playerid][pHUD] = false;
        for(new i; i<9; i++)
        {
            PlayerTextDrawHide(playerid, TDEditor_TD[playerid][i]);
        }
        MesajGonder(playerid, "HUD kapatýldý, tekrar (/hud) komutunu kullanarak açabilirsiniz.");
    }
    else
    {
        PlayerData[playerid][pHUD] = true;
        for(new i; i<9; i++)
        {
            PlayerTextDrawShow(playerid, TDEditor_TD[playerid][i]);
        }
    }
	return 1;
}
CMD:ssmod(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if(GetPVarInt(playerid, "ssmod") == 0)
	{
	    for(new i; i<9; i++)
        {
            PlayerTextDrawHide(playerid, TDEditor_TD[playerid][i]);
        }
	    SetPVarInt(playerid, "ssmod", 1);
	    TextDrawShowForPlayer(playerid, Karanlik);
	}
	else
	{
	    for(new i; i<9; i++)
        {
            PlayerTextDrawShow(playerid, TDEditor_TD[playerid][i]);
        }
	    DeletePVar(playerid, "ssmod");
     	TextDrawHideForPlayer(playerid, Karanlik);
	}
	return 1;
}
CMD:mulklerim(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    Dialog_Show(playerid, Mulklerim, DIALOG_STYLE_LIST, "{0000BB}» {FFFFFF}Mülkleriniz", "{FFFFFF}Araçlar\n{FFFFFF}Evler\n{FFFFFF}Ýþyerleri\n{FFFFFF}Gateler\n{FFFFFF}Petler\n{FFFFFF}Garajlar", "Seç", "Kapat");
	return 1;
}
CMD:stand(playerid, params[])
{
	new opsiyon[10];
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
    if(sscanf(params, "s[10]", opsiyon)) return BilgiMesajGonder(playerid, "/stand [koy/al]");
    if(strcmp(opsiyon, "koy", true) == 0)
    {
        if(PlayerData[playerid][pStand] == true) return HataMesajGonder(playerid, "Zaten stand koymuþsunuz!");
        if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0) return HataMesajGonder(playerid, "Ýnterior içerisine stand koyamazsýnýz.");
        Dialog_Show(playerid, Standlar, DIALOG_STYLE_PREVMODEL, "Stand", "1341\n1342\n1340", "Sec", "Kapat");
    }
    else if(strcmp(opsiyon, "al", true) == 0)
    {
        if(PlayerData[playerid][pStand] == false) return HataMesajGonder(playerid, "Zaten stand koymamýþsýnýz!");
        new Float:objectPos[3];
        GetDynamicObjectPos(PlayerData[playerid][pStandObject], objectPos[0], objectPos[1], objectPos[2]);
        if(!IsPlayerInRangeOfPoint(playerid, 5.0, objectPos[0], objectPos[1], objectPos[2])) return HataMesajGonder(playerid, "Standýnýzýn yakýnýnda deðilsiniz.");
        PlayerData[playerid][pStand] = false;
        DestroyDynamicObject(PlayerData[playerid][pStandObject]);
        DestroyDynamic3DTextLabel(PlayerData[playerid][pStandText]);
    }
	return 1;
}
CMD:gise(playerid, params[])
{
    new id = Gise_Kontrol(playerid);

	//if (id == -1 && strcmp(params, "ben", true) != 0)
	if (id == -1)
	    return HataMesajGonder(playerid, "Herhangi bir giþenin yakýnýnda deðilsiniz.");

	if (PlayerData[playerid][pCash] < GetServerBilgi("GiseUcreti"))
	    return HataMesajGonder(playerid, "Paranýz yetersiz. {00FF00}%s", FormatNumber(GetServerBilgi("GiseUcreti")));

	if (AcilDurum == 1)
	    return HataMesajGonder(playerid, "Giþeler þu anda LSPD tarafýndan devre dýþý býrakýlmýþtýr.");

	if (Gise[id][gs_Durum] == GISE_KAPALI)
	{
		Gise[id][gs_Durum] = GISE_ACIK;

		BilgiMesajGonder(playerid, "Giþe açýldýktan sonra 5 saniye içinde kapanacaktýr.");

		ParaVer(playerid, -GetServerBilgi("GiseUcreti"));
		MoveDynamicObject(Gise[id][gs_Obje], Gise[id][gs_Acik][0], Gise[id][gs_Acik][1], Gise[id][gs_Acik][2], 5.0,  Gise[id][gs_Acik][3], Gise[id][gs_Acik][4], Gise[id][gs_Acik][5]);
	}
	return 1;
}

public OnDynamicObjectMoved(objectid)
{
	for (new i = 0; i < MAX_GISE; i++)
	{
	    if (Gise[i][gs_Exists])
	    {
	        if (objectid == Gise[i][gs_Obje])
	        {
	            if (Gise[i][gs_Durum] == GISE_ACIK)
	            {
	                SetTimerEx("GiseKapat", 5000, false, "d", i);
	            }
	        }
	    }
	}
	return 1;
}

forward GiseKapat(id);
public GiseKapat(id)
{
    Gise[id][gs_Durum] = GISE_KAPALI;
    MoveDynamicObject(Gise[id][gs_Obje], Gise[id][gs_Kapali][0], Gise[id][gs_Kapali][1], Gise[id][gs_Kapali][2], 2.5,  Gise[id][gs_Kapali][3], Gise[id][gs_Kapali][4], Gise[id][gs_Kapali][5]);
	return 1;
}

Gise_Kontrol(playerid)
{
	for (new i = 0; i < MAX_GISE; i++)
	{
		if (Gise[i][gs_Exists])
		{
			new Float:koordLar[2];

			GetXYInFrontOfToll(Gise[i][gs_GateObje], koordLar[0], koordLar[1], 3.5);

		    if (IsPlayerInRangeOfPoint(playerid, 7.5, koordLar[0], koordLar[1], Gise[i][gs_Kapali][2]))
      			return i;
		}
	}
	return -1;
}

stock GetXYInFrontOfToll(objectid, &Float:x, &Float:y, Float:distance)
{
    new Float:rot[3];

    GetDynamicObjectPos(objectid, x, y, rot[0]);
    GetDynamicObjectRot(objectid, rot[0], rot[1], rot[2]);

	x += (distance * floatsin(-rot[2]+270, degrees));
    y += (distance * floatcos(-rot[2]+270, degrees));
}

CMD:giseler(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI && PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Devlet memuru deðilsiniz.");
    GiseKontrolu(playerid);
	return 1;
}
CMD:paintball(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1170.9122,-1489.6418,22.7551)) return HataMesajGonder(playerid, "Paintball noktasýnda deðilsiniz.");
    Dialog_Show(playerid, Paintball, DIALOG_STYLE_LIST, "Paintball", "{AFAFAF}» {FFFFFF}Odaya Gir\n{AFAFAF}» {FFFFFF}Oda Kirala {2ECC71}(%s)", "Seç", "Kapat", FormatNumber(ODA_PARA));
	return 1;
}
CMD:pbcik(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    new id = OdasiVarmi(playerid);
    if(id != -1) return HataMesajGonder(playerid, "Oda size ait olduðu için çýkamazsýnýz. Çýkmak için odayý silmelisiniz.");
    if(pbOda[playerid] == -1) return HataMesajGonder(playerid, "Paintball'da deðilsiniz.");
    if(IsPlayerDying(playerid)) return HataMesajGonder(playerid, "Spawn olmadan bu komutu kullanamazsýnýz.");
    OdadanAt(playerid, 0);
	return 1;
}
CMD:pboda(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
	new id = OdasiVarmi(playerid);
	if(id == -1) return HataMesajGonder(playerid, "Oda kiralamamýþsýnýz.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1170.9122,-1489.6418,22.7551) && Paintball[pbOda[playerid]][odaDurum] != ODA_BASLADI) return HataMesajGonder(playerid, "Paintball noktasýnda deðilsiniz.");
	if(id != -1 && pbOda[playerid] == id)
	{
	    OdaAyarlari(playerid, id);
	}
	return 1;
}
CMD:evlen(playerid, params[])
{
    if(!OyundaDegil(playerid)) return 1;
    if (!IsPlayerInRangeOfPoint(playerid, 3.0, -2027.0787,1122.2255,53.9859))
        return HataMesajGonder(playerid, "Evlenmek için kilisede olmalýsýn.");

    static
        userid;

    if (sscanf(params, "u", userid))
        return BilgiMesajGonder(playerid, "/evlen [id/isim]");

    if (!IsPlayerConnected(userid) || !IsPlayerNearPlayer(playerid, userid, 5.0))
        return HataMesajGonder(playerid, "Oyuncu oyunda deðil veya sana yakýn deðil.");

    if(userid == playerid)
        return HataMesajGonder(playerid, "Kendinle evlenemezsin.");

    if(PlayerData[userid][pCinsiyet] == PlayerData[playerid][pCinsiyet]) return HataMesajGonder(playerid, "Bu oyuncu seninle ayný cinsiyette.");

    if(PlayerData[playerid][pPartner] != 0 || PlayerData[userid][pPartner] != 0 )
        return HataMesajGonder(playerid, "Evlilik için iki çiftinde partneri olmamasý gereklidir.");

    PlayerData[userid][pPartnerTeklif] = playerid;
    MesajGonder(playerid, "%s'a evlenme teklifi yolladýn, yanýtýný bekleyin.", ReturnName(userid, 0));
    MesajGonder(userid, "%s sana evlenme teklifi yolladý. (/kabulet evlilik)", ReturnName(playerid, 0));

    return 1;
}
CMD:taksi(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "Þöför olmalýsýnýz.");
    new vehicleid = GetPlayerVehicleID(playerid);
    new id = Car_GetID(vehicleid);
    if(id == -1 || AracInfo[id][aracTip] != 4 || (AracInfo[id][TaksiPlaka] == 0 && GetVehicleModel(vehicleid) != 420)) return HataMesajGonder(playerid, "Bu araç taksi aracý deðil.");
    if(IsValidDynamicObject(AracInfo[id][TaksiObje]))
    {
        Dialog_Show(playerid, TaksiMenu, DIALOG_STYLE_TABLIST, "Taksi Paneli", "{AFAFAF}» {FFFFFF}Taksi Modeli\t{FF9900}%s\n{AFAFAF}» {FFFFFF}Taksimetre\t%s\n{AFAFAF}» {FFFFFF}Oturum Kazancý\t{2ECC71}%s\n{AFAFAF}» {FFFFFF}Oturum Kazancýný Sýfýrla\n\
        {AFAFAF}» {FFFFFF}Taksimetre Ücretini Deðiþtir\t{2ECC71}%s\n{AFAFAF}» {FFFFFF}Taksi Objesini Kaldýr\n{AFAFAF}» {FFFFFF}Taksi Talepleri",
		"Seç", "Kapat", ReturnVehicleModelName(GetVehicleModel(vehicleid)), (PlayerData[playerid][pTaxiDuty] == false) ? ("{f44542}Kapalý") : ("{42f445}Açýk"),
        FormatNumber(AracInfo[id][OturumKazanci]), FormatNumber(AracInfo[id][Taksimetre]));

    }
    else
    {
        Dialog_Show(playerid, TaksiMenu, DIALOG_STYLE_TABLIST, "Taksi Paneli", "{AFAFAF}» {FFFFFF}Taksi Modeli\t{FF9900}%s\n{AFAFAF}» {FFFFFF}Taksimetre\t%s\n{AFAFAF}» {FFFFFF}Oturum Kazancý\t{2ECC71}%s\n{AFAFAF}» {FFFFFF}Oturum Kazancýný Sýfýrla\n\
        {AFAFAF}» {FFFFFF}Taksimetre Ücretini Deðiþtir\t{2ECC71}%s\n{AFAFAF}» {FFFFFF}Taksi Objesini Yerleþtir\n{AFAFAF}» {FFFFFF}Taksi Talepleri",
		"Seç", "Kapat", ReturnVehicleModelName(GetVehicleModel(vehicleid)), (PlayerData[playerid][pTaxiDuty] == false) ? ("{f44542}Kapalý") : ("{42f445}Açýk"),
        FormatNumber(AracInfo[id][OturumKazanci]), FormatNumber(AracInfo[id][Taksimetre]));
    }
	return 1;
}
CMD:taksiiptal(playerid, params[])
{
    if(PlayerData[playerid][pTaxiDuty] == false) return HataMesajGonder(playerid, "Taksi aracýnda olup iþbaþý yapmalýsýnýz.");

	if(PlayerData[playerid][pTaksiKabul] == -1) return HataMesajGonder(playerid, "Taksi kabul etmemiþsin.");

	BilgiMesajGonder(PlayerData[playerid][pTaksiKabul], "%s adlý taksi þöförü gelmekten vazgeçti tekrardan taksi çaðýrabilirsin.", ReturnName(playerid, 0));
	PlayerData[playerid][pTaksiKabul] = -1;
	DisablePlayerCheckpoint(playerid);
	return 1;
}
CMD:ara(playerid, params[])
{
	new number;
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
    if(PlayerData[playerid][pTelefon] == -1) return HataMesajGonder(playerid, "Telefonunuz yok.");
    if(PlayerData[playerid][pTelefonAyar][0] == 1) return HataMesajGonder(playerid, "Telefonunuz kapalý.");
    if(PlayerData[playerid][pAramada] != 0) return HataMesajGonder(playerid, "Þu an aramada olduðunuz için kimseyi arayamazsýnýz.");
    if(sscanf(params, "i", number)) return BilgiMesajGonder(playerid, "/ara [numara] (911 - Acil durum, 333 - Taksi, 555 - Tarifeci)");
    if(number == PlayerData[playerid][pTelefon]) return HataMesajGonder(playerid, "Kendinizi arayamazsýnýz.");
    if(number == 911)
    {
        if(!spamProtect(playerid, "AcilDurum", 120)) return HataMesajGonder(playerid, "Tekrar ihbar vermek için 2 dakika beklemelisiniz.");
        Dialog_Show(playerid, HizmetSecin, DIALOG_STYLE_LIST, "{FFFFFF}Operatör ~ Hizmet Seçin:", "{9189EF}Los Santos Polis Departmaný\n{FF8282}Los Santos Medical Department", "Seç", "Kapat");
        return 1;
    }
    if(number == 555)
    {
        new string[750], sayi;
   		for(new i; i<sizeof(Tarifeler); i++)
    	{
	    		sayi++;
	    		format(string, sizeof(string), "%s{FFFFFF}%s {FFBF00}(%s){FFFFFF} - %d dakika / %d SMS / %d MB\n", string, Tarifeler[i][TarifeAdi], FormatNumber(Tarifeler[i][TarifeFiyat]), Tarifeler[i][TarifeDakika], Tarifeler[i][TarifeSMS], Tarifeler[i][TarifeNet]);
    	}
    	if(sayi == 0) return HataMesajGonder(playerid, "Hiç tarife yok.");
    	Dialog_Show(playerid, Tarifeler, DIALOG_STYLE_LIST, "Tarifeci", string, "Seç", "Kapat");
    	return 1;
    }
    if(number == 333)
    {
        PlayerData[playerid][pTaxiCalled] = 1;
        PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s telefonunda bir kaç numara tuþlar.", ReturnName(playerid, 0));
        MesajGonder(playerid, "Taksi çaðýrdýnýz, lütfen bekleyin...");
        new Float:pos[3];
        GetPlayerPosEx(playerid, pos[0], pos[1], pos[2]);
        foreach(new i:Player) if(GetPlayerState(i) == PLAYER_STATE_DRIVER && PlayerData[i][pTaxiDuty] == true)
        {
            SendClientMessageEx(i, 0x42f445FF, "%s adlý kiþi %s bölgesine taksi talep ediyor.", ReturnName(playerid, 0), GetLocation(pos[0], pos[1], pos[2]));
        }
        return 1;
    }
    if(PlayerData[playerid][pTarife] == -1 || PlayerData[playerid][pTarifeKalan][0] == 0) return HataMesajGonder(playerid, "Tarifeniz yok veya tarifenizde dakika kalmamýþ.");
    new targetid = GetNumberOwner(number);
    if(targetid == INVALID_PLAYER_ID || targetid == playerid || PlayerData[targetid][pBaygin] > 0 || PlayerData[targetid][pKelepce] > 0 || PlayerData[targetid][pHapisSure] > 0 || PlayerData[targetid][pTelefonAyar][0] == 1 || PlayerData[targetid][pTelefonAyar][5] == 1 || Jammer_Near(targetid) == 1) return HataMesajGonder(playerid, "Aradýðýnýz numaraya þu anda ulaþýlamýyor, lütfen daha sonra tekrar deneyiniz.");
    if(PlayerData[targetid][pAramada] != 0) return HataMesajGonder(playerid, "Mesgul tonu aldýn...");
    if(PlayerData[targetid][pTelefonAyar][3] == 1 && !RehberdeVar(targetid, PlayerData[playerid][pTelefon])) return HataMesajGonder(playerid, "Bu numara bilinmeyen numaralarý engellemiþ.");
    PlayerData[playerid][pAramada] = ARAMA_ARIYOR;
    PlayerData[targetid][pAramada] = ARAMA_ARANIYOR;
    PlayerData[playerid][pCallLine] = targetid;
    PlayerData[targetid][pCallLine] = playerid;
    SetPVarInt(playerid, "Arayan", 1);
    MesajGonder(playerid, "Numara aranýyor, lütfen cevap vermesini bekleyin. /cagrikapat ile çaðrýyý bitirebilirsiniz.");
    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s telefonunda bir kaç numara tuþlar.", ReturnName(playerid, 0));
    BilgiMesajGonder(targetid, "Gelen Arama: %s  - /cagrikabul ile çaðrýyý kabul edebilir, /cagrikapat ile çaðrýyý kapatabilirsiniz.", TelNo(targetid, playerid));
    PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
    if(PlayerData[targetid][pTelefonAyar][1]) SendNearbyMessage(targetid, 30.0, COLOR_CYAN, "** Telefonu titremektedir. (( %s ))", ReturnName(targetid, 0));
    else
	{
		SendNearbyMessage(targetid, 30.0, COLOR_CYAN, "** Telefon çalmaktadýr. (( %s ))", ReturnName(targetid, 0));
  		PlayerPlaySoundEx(targetid, 23000);
	}
	return 1;
}
CMD:sms(playerid, params[])
{
    new number, mesaj[100];
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pTelefon] == -1) return HataMesajGonder(playerid, "Telefonunuz yok.");
    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
    if(PlayerData[playerid][pTelefonAyar][0] == 1) return HataMesajGonder(playerid, "Telefonunuz kapalý.");
    if(PlayerData[playerid][pTarife] == -1 || PlayerData[playerid][pTarifeKalan][1] == 0) return HataMesajGonder(playerid, "Tarifeniz yok veya SMS hakkýnýz bitmiþ.");
    if(sscanf(params, "is[100]", number, mesaj)) return BilgiMesajGonder(playerid, "/sms [numara] [mesaj]");
    if(number == 911 || number == 121 || number == 555) return HataMesajGonder(playerid, "Bu numaraya SMS gönderemezsiniz.");
    if(number < 3 || number > 100) return HataMesajGonder(playerid, "Mesaj uzunluðu 3 ile 100 karakter arasýnda olmalýdýr.");
    new targetid = GetNumberOwner(number);
    if(targetid == INVALID_PLAYER_ID || targetid == playerid || Jammer_Near(targetid) == 1) return HataMesajGonder(playerid, "Geçersiz numara girdiniz.");
    if(PlayerData[targetid][pTelefonAyar][0] == 1 || PlayerData[targetid][pTelefonAyar][4] == 1) return HataMesajGonder(playerid, "Bu numara SMS alýmlarýný kapatmýþ.");
    PlayerData[playerid][pTarifeKalan][1]--;
	SendClientMessageEx(targetid, COLOR_YELLOW, "[SMS]: %s - %s", mesaj, TelNo(targetid, playerid));
	SendClientMessageEx(playerid, COLOR_YELLOW, "[SMS]: %s - %s", mesaj, ReturnName(playerid, 0));

	PlayerPlaySoundEx(targetid, 21001);
	return 1;
}
CMD:animasyonlar(playerid, params[])
{
    SendClientMessage(playerid, COLOR_CLIENT, "--------------------------------------------------------");
    SendClientMessage(playerid, COLOR_CLIENT, "ANÝMASYON:{FFFFFF} /handsup /sarhos /bomb /rob /laugh /lookout /robman /crossarms /sit /siteat /hide /vomit /eat");
    SendClientMessage(playerid, COLOR_CLIENT, "ANÝMASYON:{FFFFFF} /wave /slapass /deal /taichi /crack /smoke /chat /dance /fucku /drinkwater /pedmove /bat");
    SendClientMessage(playerid, COLOR_CLIENT, "ANÝMASYON:{FFFFFF} /checktime /sleep /blob /opendoor /wavedown /shakehand /reload /cpr /dive /showoff /box /tag");
    SendClientMessage(playerid, COLOR_CLIENT, "ANÝMASYON:{FFFFFF} /goggles /cry /dj /cheer /throw /robbed /hurt /nobreath /bar /getjiggy /fallover /rap /piss");
    SendClientMessage(playerid, COLOR_CLIENT, "ANÝMASYON:{FFFFFF} /salute /crabs /washhands /signal /stop /gesture /jerkoff /idles /lowrider /carchat");
    SendClientMessage(playerid, COLOR_CLIENT, "ANÝMASYON:{FFFFFF} /blowjob /spank /sunbathe /kiss /snatch /sneak /copa /sexy /holdup /misc /bodypush");
    SendClientMessage(playerid, COLOR_CLIENT, "ANÝMASYON:{FFFFFF} /lowbodypush /headbutt /airkick /doorkick /leftslap /elbow /coprun /lean /wank");
    SendClientMessage(playerid, COLOR_CLIENT, "--------------------------------------------------------");
    return 1;
}
CMD:pedmove(playerid, params[])
{
	if(!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araçta bunu yapamazsýnýz.");
 	switch(strval(params))
  	{
        case 1: PlayAnimEx(playerid, "PED", "JOG_femaleA", 4.0, 1, 1, 1, 1, 1, 1);
        case 2: PlayAnimEx(playerid, "PED", "JOG_maleA", 4.0, 1, 1, 1, 1, 1, 1);
        case 3: PlayAnimEx(playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1, 1);
        case 4: PlayAnimEx(playerid, "PED", "run_fat", 4.0, 1, 1, 1, 1, 1, 1);
        case 5: PlayAnimEx(playerid, "PED", "run_fatold", 4.0, 1, 1, 1, 1, 1, 1);
        case 6: PlayAnimEx(playerid, "PED", "run_old", 4.0, 1, 1, 1, 1, 1, 1);
        case 7: PlayAnimEx(playerid, "PED", "Run_Wuzi", 4.0, 1, 1, 1, 1, 1, 1);
        case 8: PlayAnimEx(playerid, "PED", "swat_run", 4.0, 1, 1, 1, 1, 1, 1);
        case 9: PlayAnimEx(playerid, "PED", "WALK_fat", 4.0, 1, 1, 1, 1, 1, 1);
        case 10: PlayAnimEx(playerid, "PED", "WALK_fatold", 4.0, 1, 1, 1, 1, 1, 1);
        case 11: PlayAnimEx(playerid, "PED", "WALK_gang1", 4.0, 1, 1, 1, 1, 1, 1);
        case 12: PlayAnimEx(playerid, "PED", "WALK_gang2", 4.0, 1, 1, 1, 1, 1, 1);
        case 13: PlayAnimEx(playerid, "PED", "WALK_old", 4.0, 1, 1, 1, 1, 1, 1);
        case 14: PlayAnimEx(playerid, "PED", "WALK_shuffle", 4.0, 1, 1, 1, 1, 1, 1);
        case 15: PlayAnimEx(playerid, "PED", "woman_run", 4.0, 1, 1, 1, 1, 1, 1);
        case 16: PlayAnimEx(playerid, "PED", "WOMAN_runbusy", 4.0, 1, 1, 1, 1, 1, 1);
        case 17: PlayAnimEx(playerid, "PED", "WOMAN_runfatold", 4.0, 1, 1, 1, 1, 1, 1);
        case 18: PlayAnimEx(playerid, "PED", "woman_runpanic", 4.0, 1, 1, 1, 1, 1, 1);
        case 19: PlayAnimEx(playerid, "PED", "WOMAN_runsexy", 4.0, 1, 1, 1, 1, 1, 1);
        case 20: PlayAnimEx(playerid, "PED", "WOMAN_walkbusy", 4.0, 1, 1, 1, 1, 1, 1);
        case 21: PlayAnimEx(playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1, 1);
        case 22: PlayAnimEx(playerid, "PED", "WOMAN_walknorm", 4.0, 1, 1, 1, 1, 1, 1);
        case 23: PlayAnimEx(playerid, "PED", "WOMAN_walkold", 4.0, 1, 1, 1, 1, 1, 1);
        case 24: PlayAnimEx(playerid, "PED", "WOMAN_walkpro", 4.0, 1, 1, 1, 1, 1, 1);
        case 25: PlayAnimEx(playerid, "PED", "WOMAN_walksexy", 4.0, 1, 1, 1, 1, 1, 1);
        case 26: PlayAnimEx(playerid, "PED", "WOMAN_walkshop", 4.0, 1, 1, 1, 1, 1, 1);
        default: BilgiMesajGonder(playerid, "/pedmove [1-26]");
	}
    return 1;
}
CMD:doorkick(playerid, params[])
{
	if(!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araçta bunu yapamazsýnýz.");
    ApplyAnimation(playerid,"POLICE","Door_Kick",4.0,0,0,0,0,0);
    return 1;
}
CMD:airkick(playerid, params[])
{
	if(!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araçta bunu yapamazsýnýz.");
    ApplyAnimation(playerid,"FIGHT_C","FightC_M",4.0,0,0,0,0,0);
    return 1;
}
CMD:bodypush(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

    if(IsPlayerInAnyVehicle(playerid)) return 1;
    if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0);
    return 1;
}

CMD:lowbodypush(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

    if(IsPlayerInAnyVehicle(playerid)) return 1;
    if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"GANGS","shake_carSH",4.0,0,0,0,0,0);
    return 1;
}

CMD:headbutt(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

    if(IsPlayerInAnyVehicle(playerid)) return 1;
    if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"WAYFARER","WF_Fwd",4.0,0,0,0,0,0);
    return 1;
}

CMD:air_Kick(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

    if(IsPlayerInAnyVehicle(playerid)) return 1;
    if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"FIGHT_C","FightC_M",4.0,0,1,1,0,0);
    return 1;
}

CMD:door_Kick(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

    if(IsPlayerInAnyVehicle(playerid)) return 1;
    if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"POLICE","Door_Kick",4.0,0,0,0,0,0);
    return 1;
}

CMD:leftslap(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

    if(IsPlayerInAnyVehicle(playerid)) return 1;
    if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"PED","BIKE_elbowL",4.0,0,0,0,0,0);
    return 1;
}

CMD:elbow(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

    if(IsPlayerInAnyVehicle(playerid)) return 1;
    if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"FIGHT_D","FightD_3",4.0,0,1,1,0,0);
    return 1;
}

CMD:coprun(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

    if(IsPlayerInAnyVehicle(playerid)) return 1;
    if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"SWORD","sword_block",50.0,0,1,1,1,1);
    return 1;
}

CMD:handsup(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

    if(IsPlayerInAnyVehicle(playerid)) return 1;
    if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
    return 1;
}

CMD:piss(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

    if(IsPlayerInAnyVehicle(playerid)) return 1;
    if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    SetPlayerSpecialAction(playerid, 68);
    return 1;
}

CMD:sneak(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "PED", "Player_Sneak", 4.1, 1, 1, 1, 1, 1, 1);
    return 1;
}

CMD:sarhos(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "PED", "WALK_DRUNK", 4.0, 1, 1, 1, 1, 1, 1);
    return 1;
}

CMD:bomb(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:rob(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "ped", "ARRESTgun", 4.0, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:laugh(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "RAPPING", "Laugh_01", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:lookout(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnim(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:robman(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:hide(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:vomit(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "FOOD", "EAT_Vomit_P", 3.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:eat(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "FOOD", "EAT_Burger", 3.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:slapass(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnim(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:crack(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:fucku(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnim(playerid, "PED", "fucku", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:taichi(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "PARK", "Tai_Chi_Loop", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:drinkwater(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "BAR", "dnk_stndF_loop", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:checktime(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnim(playerid, "COP_AMBIENT", "Coplook_watch", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:sleep(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "CRACK", "crckdeth4", 4.0, 0, 1, 1, 1, 0, 1);
    return 1;
}

CMD:blob(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "CRACK", "crckidle1", 4.0, 0, 1, 1, 1, 0, 1);
    return 1;
}

CMD:opendoor(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnim(playerid, "AIRPORT", "thrw_barl_thrw", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:wavedown(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnim(playerid, "BD_FIRE", "BD_Panic_01", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:cpr(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnim(playerid, "MEDIC", "CPR", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:dive(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "DODGE", "Crush_Jump", 4.0, 0, 1, 1, 1, 0, 1);
    return 1;
}

CMD:showoff(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "Freeweights", "gym_free_celebrate", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:goggles(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnim(playerid, "goggles", "goggles_put_on", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:cry(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "GRAVEYARD", "mrnF_loop", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:throw(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnim(playerid, "GRENADE", "WEAPON_throw", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:robbed(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "SHOP", "SHP_Rob_GiveCash", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:hurt(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "SWAT", "gnstwall_injurd", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:box(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "GYMNASIUM", "GYMshadowbox", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:washhands(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "BD_FIRE", "wash_up", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:crabs(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "MISC", "Scratchballs_01", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:salute(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "ON_LOOKERS", "Pointup_loop", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:jerkoff(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "PAULNMAC", "wank_out", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:stop(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "PED", "endchat_01", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:rap(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
        case 1: PlayAnimEx(playerid, "RAPPING", "RAP_A_Loop", 4.0, 1, 0, 0, 0, 0, 1);
        case 2: PlayAnimEx(playerid, "RAPPING", "RAP_B_Loop", 4.0, 1, 0, 0, 0, 0, 1);
        case 3: PlayAnimEx(playerid, "RAPPING", "RAP_C_Loop", 4.0, 1, 0, 0, 0, 0, 1);
        default: BilgiMesajGonder(playerid, "/rap [1-3]");
    }
    return 1;
}

CMD:wank(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
        case 1: PlayAnimEx(playerid, "PAULNMAC", "wank_in", 4.0, 1, 0, 0, 0, 0, 1);
        case 2: PlayAnimEx(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 0, 0, 1);
        case 3: PlayAnimEx(playerid, "PAULNMAC", "wank_out", 4.0, 1, 0, 0, 0, 0, 1);
        default: BilgiMesajGonder(playerid, "/wank [1-3]");
    }
    return 1;
}

CMD:chat(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
        case 1: PlayAnimEx(playerid, "PED", "IDLE_CHAT", 4.0, 1, 0, 0, 0, 0, 1);
        case 2: PlayAnimEx(playerid, "GANGS", "prtial_gngtlkA", 4.0, 1, 0, 0, 0, 0, 1);
        case 3: PlayAnimEx(playerid, "GANGS", "prtial_gngtlkB", 4.0, 1, 0, 0, 0, 0, 1);
        case 4: PlayAnimEx(playerid, "GANGS", "prtial_gngtlkE", 4.0, 1, 0, 0, 0, 0, 1);
        case 5: PlayAnimEx(playerid, "GANGS", "prtial_gngtlkF", 4.0, 1, 0, 0, 0, 0, 1);
        case 6: PlayAnimEx(playerid, "GANGS", "prtial_gngtlkG", 4.0, 1, 0, 0, 0, 0, 1);
        case 7: PlayAnimEx(playerid, "GANGS", "prtial_gngtlkH", 4.0, 1, 0, 0, 0, 0, 1);
        default: BilgiMesajGonder(playerid, "/chat [1-7]");
    }
    return 1;
}

CMD:sit(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
        case 1: PlayAnimEx(playerid, "Attractors", "Stepsit_in", 4.0, 0, 0, 0, 1, 0, 1);
        case 2: PlayAnimEx(playerid, "CRIB", "PED_Console_Loop", 4.0, 1, 0, 0, 0, 0, 1);
        case 3: PlayAnimEx(playerid, "INT_HOUSE", "LOU_In", 4.0, 0, 0, 0, 1, 1, 1);
        case 4: PlayAnimEx(playerid, "MISC", "SEAT_LR", 4.0, 1, 0, 0, 0, 0, 1);
        case 5: PlayAnimEx(playerid, "MISC", "Seat_talk_01", 4.0, 1, 0, 0, 0, 0, 1);
        case 6: PlayAnimEx(playerid, "MISC", "Seat_talk_02", 4.0, 1, 0, 0, 0, 0, 1);
        case 7: PlayAnimEx(playerid, "ped", "SEAT_down", 4.0, 0, 0, 0, 1, 1, 1);
        default: BilgiMesajGonder(playerid, "/sit [1-7]");
    }
    return 1;
}

CMD:bat(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
        case 1: PlayAnimEx(playerid,"BASEBALL","Bat_IDLE",4.1, 0, 1, 1, 1, 1, 1);
        case 2: PlayAnimEx(playerid, "CRACK", "Bbalbat_Idle_01", 4.0, 1, 0, 0, 0, 0, 1);
        case 3: PlayAnimEx(playerid, "CRACK", "Bbalbat_Idle_02", 4.0, 1, 0, 0, 0, 0, 1);
        default: BilgiMesajGonder(playerid, "/bat [1-3]");
    }
    return 1;
}

CMD:lean(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
        case 1: PlayAnimEx(playerid, "GANGS", "leanIDLE", 4.0, 0, 0, 0, 1, 0, 1);
        case 2: PlayAnimEx(playerid, "MISC", "Plyrlean_loop", 4.0, 0, 0, 0, 1, 0, 1);
        default: BilgiMesajGonder(playerid, "/lean [1-2]");
    }
    return 1;
}

CMD:gesture(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
    case 1: PlayAnim(playerid, "GHANDS", "gsign1", 4.0, 0, 0, 0, 0, 0, 1);
    case 2: PlayAnim(playerid, "GHANDS", "gsign1LH", 4.0, 0, 0, 0, 0, 0, 1);
    case 3: PlayAnim(playerid, "GHANDS", "gsign2", 4.0, 0, 0, 0, 0, 0, 1);
    case 4: PlayAnim(playerid, "GHANDS", "gsign2LH", 4.0, 0, 0, 0, 0, 0, 1);
    case 5: PlayAnim(playerid, "GHANDS", "gsign3", 4.0, 0, 0, 0, 0, 0, 1);
    case 6: PlayAnim(playerid, "GHANDS", "gsign3LH", 4.0, 0, 0, 0, 0, 0, 1);
    case 7: PlayAnim(playerid, "GHANDS", "gsign4", 4.0, 0, 0, 0, 0, 0, 1);
    case 8: PlayAnim(playerid, "GHANDS", "gsign4LH", 4.0, 0, 0, 0, 0, 0, 1);
    case 9: PlayAnim(playerid, "GHANDS", "gsign5", 4.0, 0, 0, 0, 0, 0, 1);
    case 10: PlayAnim(playerid, "GHANDS", "gsign5", 4.0, 0, 0, 0, 0, 0, 1);
    case 11: PlayAnim(playerid, "GHANDS", "gsign5LH", 4.0, 0, 0, 0, 0, 0, 1);
    case 12: PlayAnim(playerid, "GANGS", "Invite_No", 4.0, 0, 0, 0, 0, 0, 1);
    case 13: PlayAnim(playerid, "GANGS", "Invite_Yes", 4.0, 0, 0, 0, 0, 0, 1);
    case 14: PlayAnim(playerid, "GANGS", "prtial_gngtlkD", 4.0, 0, 0, 0, 0, 0, 1);
    case 15: PlayAnim(playerid, "GANGS", "smkcig_prtl", 4.0, 0, 0, 0, 0, 0, 1);
    default: BilgiMesajGonder(playerid, "/gesture [1-15]");
    }
    return 1;
}

CMD:lay(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
    case 1: PlayAnimEx(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0, 1);
    case 2: PlayAnimEx(playerid, "BEACH", "Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0, 1);
    case 3: PlayAnimEx(playerid, "BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0, 1);
    case 4: PlayAnimEx(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0, 1);
    case 5: PlayAnimEx(playerid, "BEACH", "Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0, 1);
    case 6: PlayAnimEx(playerid, "BEACH", "ParkSit_W_loop", 4.0, 1, 0, 0, 0, 0, 1);
    case 7: PlayAnimEx(playerid, "BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0, 1);
    case 8: PlayAnimEx(playerid, "BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0, 1);
    default: BilgiMesajGonder(playerid, "/lay [1-8]");
    }
    return 1;
}

CMD:wave(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
    case 1: PlayAnimEx(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0, 1);
    case 2: PlayAnimEx(playerid, "KISSING", "gfwave2", 4.0, 1, 0, 0, 0, 0, 1);
    case 3: PlayAnimEx(playerid, "PED", "endchat_03", 4.0, 1, 0, 0, 0, 0, 1);
    default: BilgiMesajGonder(playerid, "/wave [1-3]");
    }
    return 1;
}

CMD:signal(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
    case 1: PlayAnimEx(playerid, "POLICE", "CopTraf_Come", 4.0, 1, 0, 0, 0, 0, 1);
    case 2: PlayAnimEx(playerid, "POLICE", "CopTraf_Stop", 4.0, 1, 0, 0, 0, 0, 1);
    default: BilgiMesajGonder(playerid, "/signal [1-2]");
    }
    return 1;
}

CMD:nobreath(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
    case 1: PlayAnimEx(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0, 1);
    case 2: PlayAnimEx(playerid, "PED", "IDLE_tired", 4.0, 1, 0, 0, 0, 0, 1);
    case 3: PlayAnimEx(playerid, "FAT", "IDLE_tired", 4.0, 1, 0, 0, 0, 0, 1);
    default: BilgiMesajGonder(playerid, "/nobreath [1-3]");
    }
    return 1;
}

CMD:fallover(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
    case 1: PlayAnimEx(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
    case 2: PlayAnimEx(playerid, "PED", "KO_shot_face", 4.0, 0, 1, 1, 1, 0, 1);
    case 3: PlayAnimEx(playerid, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0, 1);
    case 4: PlayAnimEx(playerid, "PED", "BIKE_fallR", 4.1, 0, 1, 1, 1, 0, 1);
    case 5: PlayAnimEx(playerid, "PED", "BIKE_fall_off", 4.1, 0, 1, 1, 1, 0, 1);
    default: BilgiMesajGonder(playerid, "/fallover [1-5]");
    }
    return 1;
}

CMD:myskin(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
    case 1: SetPlayerSkin(playerid,101);
    case 2: PlayAnimEx(playerid, "PED", "JOG_maleA", 4.0, 1, 1, 1, 1, 1, 1);
    case 3: PlayAnimEx(playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1, 1);
    case 4: PlayAnimEx(playerid, "PED", "run_fat", 4.0, 1, 1, 1, 1, 1, 1);
    case 5: PlayAnimEx(playerid, "PED", "run_fatold", 4.0, 1, 1, 1, 1, 1, 1);
    case 6: PlayAnimEx(playerid, "PED", "run_old", 4.0, 1, 1, 1, 1, 1, 1);
    case 7: PlayAnimEx(playerid, "PED", "Run_Wuzi", 4.0, 1, 1, 1, 1, 1, 1);
    case 8: PlayAnimEx(playerid, "PED", "swat_run", 4.0, 1, 1, 1, 1, 1, 1);
    case 9: PlayAnimEx(playerid, "PED", "WALK_fat", 4.0, 1, 1, 1, 1, 1, 1);
    case 10: PlayAnimEx(playerid, "PED", "WALK_fatold", 4.0, 1, 1, 1, 1, 1, 1);
    case 11: PlayAnimEx(playerid, "PED", "WALK_gang1", 4.0, 1, 1, 1, 1, 1, 1);
    case 12: PlayAnimEx(playerid, "PED", "WALK_gang2", 4.0, 1, 1, 1, 1, 1, 1);
    case 13: PlayAnimEx(playerid, "PED", "WALK_old", 4.0, 1, 1, 1, 1, 1, 1);
    case 14: PlayAnimEx(playerid, "PED", "WALK_shuffle", 4.0, 1, 1, 1, 1, 1, 1);
    case 15: PlayAnimEx(playerid, "PED", "woman_run", 4.0, 1, 1, 1, 1, 1, 1);
    case 16: PlayAnimEx(playerid, "PED", "WOMAN_runbusy", 4.0, 1, 1, 1, 1, 1, 1);
    case 17: PlayAnimEx(playerid, "PED", "WOMAN_runfatold", 4.0, 1, 1, 1, 1, 1, 1);
    case 18: PlayAnimEx(playerid, "PED", "woman_runpanic", 4.0, 1, 1, 1, 1, 1, 1);
    case 19: PlayAnimEx(playerid, "PED", "WOMAN_runsexy", 4.0, 1, 1, 1, 1, 1, 1);
    case 20: PlayAnimEx(playerid, "PED", "WOMAN_walkbusy", 4.0, 1, 1, 1, 1, 1, 1);
    case 21: PlayAnimEx(playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1, 1);
    case 22: PlayAnimEx(playerid, "PED", "WOMAN_walknorm", 4.0, 1, 1, 1, 1, 1, 1);
    case 23: PlayAnimEx(playerid, "PED", "WOMAN_walkold", 4.0, 1, 1, 1, 1, 1, 1);
    case 24: PlayAnimEx(playerid, "PED", "WOMAN_walkpro", 4.0, 1, 1, 1, 1, 1, 1);
    case 25: PlayAnimEx(playerid, "PED", "WOMAN_walksexy", 4.0, 1, 1, 1, 1, 1, 1);
    case 26: PlayAnimEx(playerid, "PED", "WOMAN_walkshop", 4.0, 1, 1, 1, 1, 1, 1);
    default: BilgiMesajGonder(playerid, "/pedmove [1-26]");
    }
    return 1;
}

CMD:getjiggy(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
    case 1: PlayAnimEx(playerid, "DANCING", "DAN_Down_A", 4.0, 1, 0, 0, 0, 0, 1);
    case 2: PlayAnimEx(playerid, "DANCING", "DAN_Left_A", 4.0, 1, 0, 0, 0, 0, 1);
    case 3: PlayAnimEx(playerid, "DANCING", "DAN_Loop_A", 4.0, 1, 0, 0, 0, 0, 1);
    case 4: PlayAnimEx(playerid, "DANCING", "DAN_Right_A", 4.0, 1, 0, 0, 0, 0, 1);
    case 5: PlayAnimEx(playerid, "DANCING", "DAN_Up_A", 4.0, 1, 0, 0, 0, 0, 1);
    case 6: PlayAnimEx(playerid, "DANCING", "dnce_M_a", 4.0, 1, 0, 0, 0, 0, 1);
    case 7: PlayAnimEx(playerid, "DANCING", "dnce_M_b", 4.0, 1, 0, 0, 0, 0, 1);
    case 8: PlayAnimEx(playerid, "DANCING", "dnce_M_c", 4.0, 1, 0, 0, 0, 0, 1);
    case 9: PlayAnimEx(playerid, "DANCING", "dnce_M_c", 4.0, 1, 0, 0, 0, 0, 1);
    case 10: PlayAnimEx(playerid, "DANCING", "dnce_M_d", 4.0, 1, 0, 0, 0, 0, 1);
    default: BilgiMesajGonder(playerid, "/getjiggy [1-10]");
    }
    return 1;
}

CMD:stripclub(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
    case 1: PlayAnimEx(playerid, "STRIP", "PLY_CASH", 4.0, 1, 0, 0, 0, 0, 1);
    case 2: PlayAnimEx(playerid, "STRIP", "PUN_CASH", 4.0, 1, 0, 0, 0, 0, 1);
    default: BilgiMesajGonder(playerid, "/stripclub [1-2]");
    }
    return 1;
}

CMD:smoke(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
    case 1: PlayAnim(playerid, "SMOKING", "M_smk_in", 4.0, 0, 0, 0, 0, 0, 1);
    case 2: PlayAnimEx(playerid, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0, 1);
    default: BilgiMesajGonder(playerid, "/smoke [1-2]");
    }
    return 1;
}

CMD:dj(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
        case 1: PlayAnimEx(playerid, "SCRATCHING", "scdldlp", 4.0, 1, 0, 0, 0, 0, 1);
        case 2: PlayAnimEx(playerid, "SCRATCHING", "scdlulp", 4.0, 1, 0, 0, 0, 0, 1);
        case 3: PlayAnimEx(playerid, "SCRATCHING", "scdrdlp", 4.0, 1, 0, 0, 0, 0, 1);
        case 4: PlayAnimEx(playerid, "SCRATCHING", "scdrulp", 4.0, 1, 0, 0, 0, 0, 1);
        default: BilgiMesajGonder(playerid, "/dj [1-4]");
    }
    return 1;
}

CMD:reload(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
    case 1: PlayAnim(playerid, "BUDDY", "buddy_reload", 4.0, 0, 0, 0, 0, 0, 1);
    case 2: PlayAnim(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 0, 1);
    default: BilgiMesajGonder(playerid, "/reload [1-2]");
    }
    return 1;
}

CMD:tag(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
    case 1: PlayAnimEx(playerid, "GRAFFITI", "graffiti_Chkout", 4.0, 1, 0, 0, 0, 0, 1);
    case 2: PlayAnimEx(playerid, "GRAFFITI", "spraycan_fire", 4.0, 1, 0, 0, 0, 0, 1);
    default: BilgiMesajGonder(playerid, "/tag [1-2]");
    }
    return 1;
}

CMD:deal(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
    case 1: PlayAnimEx(playerid, "DEALER", "DEALER_DEAL", 4.0, 1, 0, 0, 0, 0, 1);
    case 2: PlayAnimEx(playerid, "DEALER", "shop_pay", 4.0, 1, 0, 0, 0, 0, 1);
    default: BilgiMesajGonder(playerid, "/deal [1-2]");
    }
    return 1;
}

CMD:crossarms(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
        case 1: PlayAnimEx(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1, 1);
        case 2: PlayAnimEx(playerid, "DEALER", "DEALER_IDLE", 4.0, 1, 0, 0, 0, 0, 1);
        case 3: PlayAnimEx(playerid, "GRAVEYARD", "mrnM_loop", 4.0, 1, 0, 0, 0, 0, 1);
        case 4: PlayAnimEx(playerid, "GRAVEYARD", "prst_loopa", 4.0, 1, 0, 0, 0, 0, 1);
        case 5: PlayAnimEx(playerid, "DEALER", "DEALER_IDLE_01", 4.0, 1, 0, 0, 0, 0, 1);
        default: BilgiMesajGonder(playerid, "/crossarms [1-5]");
    }
    return 1;
}

CMD:cheer(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
    case 1: PlayAnimEx(playerid, "ON_LOOKERS", "shout_01", 4.0, 1, 0, 0, 0, 0, 1);
    case 2: PlayAnimEx(playerid, "ON_LOOKERS", "shout_02", 4.0, 1, 0, 0, 0, 0, 1);
    case 3: PlayAnimEx(playerid, "ON_LOOKERS", "shout_in", 4.0, 1, 0, 0, 0, 0, 1);
    case 4: PlayAnimEx(playerid, "RIOT", "RIOT_ANGRY_B", 4.0, 1, 0, 0, 0, 0, 1);
    case 5: PlayAnimEx(playerid, "RIOT", "RIOT_CHANT", 4.0, 1, 0, 0, 0, 0, 1);
    case 6: PlayAnimEx(playerid, "RIOT", "RIOT_shout", 4.0, 1, 0, 0, 0, 0, 1);
    case 7: PlayAnimEx(playerid, "STRIP", "PUN_HOLLER", 4.0, 1, 0, 0, 0, 0, 1);
    case 8: PlayAnimEx(playerid, "OTB", "wtchrace_win", 4.0, 1, 0, 0, 0, 0, 1);
    default: BilgiMesajGonder(playerid, "/cheer [1-8]");
    }
    return 1;
}

CMD:siteat(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
    case 1: PlayAnimEx(playerid, "FOOD", "FF_Sit_Eat3", 4.0, 1, 0, 0, 0, 0, 1);
    case 2: PlayAnimEx(playerid, "FOOD", "FF_Sit_Eat2", 4.0, 1, 0, 0, 0, 0, 1);
    default: BilgiMesajGonder(playerid, "/siteat [1-2]");
    }
    return 1;
}

CMD:bar(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
    case 1: PlayAnim(playerid, "BAR", "Barcustom_get", 4.0, 0, 1, 0, 0, 0, 1);
    case 2: PlayAnim(playerid, "BAR", "Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
    case 3: PlayAnim(playerid, "BAR", "Barserve_give", 4.0, 0, 0, 0, 0, 0, 1);
    case 4: PlayAnim(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 0, 0, 0, 0, 1);
    case 5: PlayAnimEx(playerid, "BAR", "BARman_idle", 4.0, 1, 0, 0, 0, 0, 1);
    default: BilgiMesajGonder(playerid, "/bar [1-5]");
    }
    return 1;
}

CMD:dance(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);

    switch(strval(params))
    {
        case 1: SetPlayerSpecialAction(playerid, 5);
        case 2: SetPlayerSpecialAction(playerid, 6);
        case 3: SetPlayerSpecialAction(playerid, 7);
        case 4: SetPlayerSpecialAction(playerid, 8);
        default: BilgiMesajGonder(playerid, "/dance [1-4]");
    }
    return 1;
}

CMD:spank(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
        case 1: PlayAnimEx(playerid, "SNM", "SPANKINGW", 4.1, 1, 0, 0, 0, 0, 1);
        case 2: PlayAnimEx(playerid, "SNM", "SPANKINGP", 4.1, 1, 0, 0, 0, 0, 1);
        case 3: PlayAnimEx(playerid, "SNM", "SPANKEDW", 4.1, 1, 0, 0, 0, 0, 1);
        case 4: PlayAnimEx(playerid, "SNM", "SPANKEDP", 4.1, 1, 0, 0, 0, 0, 1);
        default: BilgiMesajGonder(playerid, "/spank [1-4]");
    }
    return 1;
}

CMD:sexy(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
    case 1: PlayAnimEx(playerid, "STRIP", "strip_E", 4.1, 1, 0, 0, 0, 0, 1);
    case 2: PlayAnimEx(playerid, "STRIP", "strip_G", 4.1, 1, 0, 0, 0, 0, 1);
    case 3: PlayAnim(playerid, "STRIP", "STR_A2B", 4.1, 0, 0, 0, 0, 0, 1);
    case 4: PlayAnimEx(playerid, "STRIP", "STR_Loop_A", 4.1, 1, 0, 0, 0, 0, 1);
    case 5: PlayAnimEx(playerid, "STRIP", "STR_Loop_B", 4.1, 1, 0, 0, 0, 0, 1);
    case 6: PlayAnimEx(playerid, "STRIP", "STR_Loop_C", 4.1, 1, 0, 0, 0, 0, 1);
    default: BilgiMesajGonder(playerid, "/sexy [1-6]");
    }
    return 1;
}

CMD:holdup(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
    case 1: PlayAnimEx(playerid, "POOL", "POOL_ChalkCue", 4.1, 0, 1, 1, 1, 1, 1);
    case 2: PlayAnimEx(playerid, "POOL", "POOL_Idle_Stance", 4.1, 0, 1, 1, 1, 1, 1);
    default: BilgiMesajGonder(playerid, "/holdup [1-2]");
    }
    return 1;
}

CMD:stickjup(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    PlayAnimEx(playerid, "POOL", "POOL_Idle_Stance", 4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:copa(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
    case 1: PlayAnim(playerid, "POLICE", "CopTraf_Away", 4.1, 0, 0, 0, 0, 0, 1);
    case 2: PlayAnim(playerid, "POLICE", "CopTraf_Come", 4.1, 0, 0, 0, 0, 0, 1);
    case 3: PlayAnim(playerid, "POLICE", "CopTraf_Left", 4.1, 0, 0, 0, 0, 0, 1);
    case 4: PlayAnim(playerid, "POLICE", "CopTraf_Stop", 4.1, 0, 0, 0, 0, 0, 1);
    case 5: PlayAnimEx(playerid, "POLICE", "Cop_move_FWD", 4.1, 1, 1, 1, 1, 1, 1);
    case 6: PlayAnimEx(playerid, "POLICE", "crm_drgbst_01", 4.1, 0, 0, 0, 1, 5000, 1);
    case 7: PlayAnim(playerid, "POLICE", "Door_Kick", 4.1, 0, 1, 1, 1, 1, 1);
    case 8: PlayAnim(playerid, "POLICE", "plc_drgbst_01", 4.1, 0, 0, 0, 0, 5000, 1);
    case 9: PlayAnim(playerid, "POLICE", "plc_drgbst_02", 4.1, 0, 0, 0, 0, 0, 1);
    default: BilgiMesajGonder(playerid, "/copa [1-9]");
    }
    return 1;
}

CMD:misc(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
    case 1: PlayAnimEx(playerid, "CAR", "Fixn_Car_Loop", 4.1, 1, 0, 0, 0, 0, 1);
    case 2: PlayAnim(playerid, "CAR", "flag_drop", 4.1, 0, 0, 0, 0, 0, 1);
    case 3: PlayAnim(playerid, "PED", "bomber", 4.1, 0, 0, 0, 0, 0, 1);
    default: BilgiMesajGonder(playerid, "/misc [1-3]");
    }
    return 1;
}

CMD:snatch(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
    case 1: PlayAnim(playerid, "PED", "BIKE_elbowL", 4.1, 0, 0, 0, 0, 0, 1);
    case 2: PlayAnim(playerid, "PED", "BIKE_elbowR", 4.1, 0, 0, 0, 0, 0, 1);
    default: BilgiMesajGonder(playerid, "/snatch [1-2]");
    }
    return 1;
}

CMD:blowjob(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
    case 1: PlayAnimEx(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.1, 1, 0, 0, 0, 0, 1);
    case 2: PlayAnimEx(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_P", 4.1, 1, 0, 0, 0, 0, 1);
    default: BilgiMesajGonder(playerid, "/blowjob [1-2]");
    }
    return 1;
}

CMD:kiss(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
    case 1: PlayAnim(playerid, "KISSING", "Playa_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
    case 2: PlayAnim(playerid, "KISSING", "Playa_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
    case 3: PlayAnim(playerid, "KISSING", "Playa_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
    case 4: PlayAnim(playerid, "KISSING", "Grlfrd_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
    case 5: PlayAnim(playerid, "KISSING", "Grlfrd_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
    case 6: PlayAnim(playerid, "KISSING", "Grlfrd_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
    default: BilgiMesajGonder(playerid, "/kiss [1-6]");
    }
    return 1;
}

CMD:idles(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
    case 1: PlayAnimEx(playerid, "PLAYIDLES", "shift", 4.1, 1, 1, 1, 1, 1, 1);
    case 2: PlayAnimEx(playerid, "PLAYIDLES", "shldr", 4.1, 1, 1, 1, 1, 1, 1);
    case 3: PlayAnimEx(playerid, "PLAYIDLES", "stretch", 4.1, 1, 1, 1, 1, 1, 1);
    case 4: PlayAnimEx(playerid, "PLAYIDLES", "strleg", 4.1, 1, 1, 1, 1, 1, 1);
    case 5: PlayAnimEx(playerid, "PLAYIDLES", "time", 4.1, 1, 1, 1, 1, 1, 1);
    case 6: PlayAnimEx(playerid, "COP_AMBIENT", "Copbrowse_loop", 4.1, 1, 0, 0, 0, 0, 1);
    case 7: PlayAnimEx(playerid, "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 0, 0, 1);
    case 8: PlayAnimEx(playerid, "COP_AMBIENT", "Coplook_shake", 4.1, 1, 0, 0, 0, 0, 1);
    case 9: PlayAnimEx(playerid, "COP_AMBIENT", "Coplook_think", 4.1, 1, 0, 0, 0, 0, 1);
    case 10: PlayAnimEx(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 1, 0, 0, 0, 0, 1);
    case 11: PlayAnimEx(playerid, "PED", "roadcross", 4.1, 1, 0, 0, 0, 0, 1);
    case 12: PlayAnimEx(playerid, "PED", "roadcross_female", 4.1, 1, 0, 0, 0, 0, 1);
    case 13: PlayAnimEx(playerid, "PED", "roadcross_gang", 4.1, 1, 0, 0, 0, 0, 1);
    case 14: PlayAnimEx(playerid, "PED", "roadcross_old", 4.1, 1, 0, 0, 0, 0, 1);
    case 15: PlayAnimEx(playerid, "PED", "woman_idlestance", 4.1, 1, 0, 0, 0, 0, 1);
    default: BilgiMesajGonder(playerid, "/idles [1-15]");
    }
    return 1;
}

CMD:sunbathe(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
    case 1: PlayAnimEx(playerid, "SUNBATHE", "batherdown", 4.1, 0, 1, 1, 1, 1, 1);
    case 2: PlayAnimEx(playerid, "SUNBATHE", "batherup", 4.1, 0, 1, 1, 1, 1, 1);
    case 3: PlayAnimEx(playerid, "SUNBATHE", "Lay_Bac_in", 4.1, 0, 1, 1, 1, 1, 1);
    case 4: PlayAnimEx(playerid, "SUNBATHE", "Lay_Bac_out", 4.1, 0, 1, 1, 1, 1, 1);
    case 5: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_M_IdleA", 4.1, 0, 1, 1, 1, 1, 1);
    case 6: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_M_IdleB", 4.1, 0, 1, 1, 1, 1, 1);
    case 7: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_M_IdleC", 4.1, 0, 1, 1, 1, 1, 1);
    case 8: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_M_in", 4.1, 0, 1, 1, 1, 1, 1);
    case 9: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_M_out", 4.1, 0, 1, 1, 1, 1, 1);
    case 10: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_W_idleA", 4.1, 0, 1, 1, 1, 1, 1);
    case 11: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_W_idleB", 4.1, 0, 1, 1, 1, 1, 1);
    case 12: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_W_idleC", 4.1, 0, 1, 1, 1, 1, 1);
    case 13: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_W_in", 4.1, 0, 1, 1, 1, 1, 1);
    case 14: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_W_out", 4.1, 0, 1, 1, 1, 1, 1);
    case 15: PlayAnimEx(playerid, "SUNBATHE", "SBATHE_F_LieB2Sit", 4.1, 0, 1, 1, 1, 1, 1);
    case 16: PlayAnimEx(playerid, "SUNBATHE", "SBATHE_F_Out", 4.1, 0, 1, 1, 1, 1, 1);
    case 17: PlayAnimEx(playerid, "SUNBATHE", "SitnWait_in_W", 4.1, 0, 1, 1, 1, 1, 1);
    case 18: PlayAnimEx(playerid, "SUNBATHE", "SitnWait_out_W", 4.1, 0, 1, 1, 1, 1, 1);
    default: BilgiMesajGonder(playerid, "/sunbathe [1-18]");
    }
    return 1;
}

CMD:lowrider(playerid, params[])
{
    if (!AnimationCheck(playerid) && GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(!IsPlayerInAnyVehicle(playerid)) return 1;
    if(IsCLowrider(GetPlayerVehicleID(playerid)))
    {
        switch(strval(params))
        {
	        case 1: PlayAnim(playerid, "LOWRIDER", "lrgirl_bdbnce", 4.1, 0, 1, 1, 1, 1, 1);
	        case 2: PlayAnim(playerid, "LOWRIDER", "lrgirl_hair", 4.1, 0, 1, 1, 1, 1, 1);
	        case 3: PlayAnim(playerid, "LOWRIDER", "lrgirl_hurry", 4.1, 0, 1, 1, 1, 1, 1);
	        case 4: PlayAnim(playerid, "LOWRIDER", "lrgirl_idleloop", 4.1, 0, 1, 1, 1, 1, 1);
	        case 5: PlayAnim(playerid, "LOWRIDER", "lrgirl_idle_to_l0", 4.1, 0, 1, 1, 1, 1, 1);
	        case 6: PlayAnim(playerid, "LOWRIDER", "lrgirl_l0_bnce", 4.1, 0, 1, 1, 1, 1, 1);
	        case 7: PlayAnim(playerid, "LOWRIDER", "lrgirl_l0_loop", 4.1, 0, 1, 1, 1, 1, 1);
	        case 8: PlayAnim(playerid, "LOWRIDER", "lrgirl_l0_to_l1", 4.1, 0, 1, 1, 1, 1, 1);
	        case 9: PlayAnim(playerid, "LOWRIDER", "lrgirl_l12_to_l0", 4.1, 0, 1, 1, 1, 1, 1);
	        case 10: PlayAnim(playerid, "LOWRIDER", "lrgirl_l1_bnce", 4.1, 0, 1, 1, 1, 1, 1);
	        case 11: PlayAnim(playerid, "LOWRIDER", "lrgirl_l1_loop", 4.1, 0, 1, 1, 1, 1, 1);
	        case 12: PlayAnim(playerid, "LOWRIDER", "lrgirl_l1_to_l2", 4.1, 0, 1, 1, 1, 1, 1);
	        case 13: PlayAnim(playerid, "LOWRIDER", "lrgirl_l2_bnce", 4.1, 0, 1, 1, 1, 1, 1);
	        case 14: PlayAnim(playerid, "LOWRIDER", "lrgirl_l2_loop", 4.1, 0, 1, 1, 1, 1, 1);
	        case 15: PlayAnim(playerid, "LOWRIDER", "lrgirl_l2_to_l3", 4.1, 0, 1, 1, 1, 1, 1);
	        case 16: PlayAnim(playerid, "LOWRIDER", "lrgirl_l345_to_l1", 4.1, 0, 1, 1, 1, 1, 1);
	        case 17: PlayAnim(playerid, "LOWRIDER", "lrgirl_l3_bnce", 4.1, 0, 1, 1, 1, 1, 1);
	        case 18: PlayAnim(playerid, "LOWRIDER", "lrgirl_l3_loop", 4.1, 0, 1, 1, 1, 1, 1);
	        case 19: PlayAnim(playerid, "LOWRIDER", "lrgirl_l3_to_l4", 4.1, 0, 1, 1, 1, 1, 1);
	        case 20: PlayAnim(playerid, "LOWRIDER", "lrgirl_l4_bnce", 4.1, 0, 1, 1, 1, 1, 1);
	        case 21: PlayAnim(playerid, "LOWRIDER", "lrgirl_l4_loop", 4.1, 0, 1, 1, 1, 1, 1);
	        case 22: PlayAnim(playerid, "LOWRIDER", "lrgirl_l4_to_l5", 4.1, 0, 1, 1, 1, 1, 1);
	        case 23: PlayAnim(playerid, "LOWRIDER", "lrgirl_l5_bnce", 4.1, 0, 1, 1, 1, 1, 1);
	        case 24: PlayAnim(playerid, "LOWRIDER", "lrgirl_l5_loop", 4.1, 0, 1, 1, 1, 1, 1);
	        case 25: PlayAnim(playerid, "LOWRIDER", "prtial_gngtlkB", 4.1, 0, 1, 1, 1, 1, 1);
	        case 26: PlayAnim(playerid, "LOWRIDER", "prtial_gngtlkC", 4.1, 0, 1, 1, 1, 1, 1);
	        case 27: PlayAnim(playerid, "LOWRIDER", "prtial_gngtlkD", 4.1, 0, 1, 1, 1, 1, 1);
	        case 28: PlayAnim(playerid, "LOWRIDER", "prtial_gngtlkE", 4.1, 0, 1, 1, 1, 1, 1);
	        case 29: PlayAnim(playerid, "LOWRIDER", "prtial_gngtlkF", 4.1, 0, 1, 1, 1, 1, 1);
	        case 30: PlayAnim(playerid, "LOWRIDER", "prtial_gngtlkG", 4.1, 0, 1, 1, 1, 1, 1);
	        case 31: PlayAnim(playerid, "LOWRIDER", "prtial_gngtlkH", 4.1, 0, 1, 1, 1, 1, 1);
	        default: BilgiMesajGonder(playerid, "/lowrider [1-31]");
        }
    }
    else
    {
        HataMesajGonder(playerid, "Bu animasyonu kullanabilmek için lowrider aracýnda olmanýz gerekmektedir.");
    }
    return 1;
}

CMD:carchat(playerid, params[])
{
    if (!AnimationCheck(playerid) && GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    if(!IsPlayerInAnyVehicle(playerid)) return 1;
    switch(strval(params))
    {
	    case 1: PlayAnim(playerid, "CAR_CHAT", "carfone_in", 4.1, 0, 1, 1, 1, 1, 1);
	    case 2: PlayAnim(playerid, "CAR_CHAT", "carfone_loopA", 4.1, 0, 1, 1, 1, 1, 1);
	    case 3: PlayAnim(playerid, "CAR_CHAT", "carfone_loopA_to_B", 4.1, 0, 1, 1, 1, 1, 1);
	    case 4: PlayAnim(playerid, "CAR_CHAT", "carfone_loopB", 4.1, 0, 1, 1, 1, 1, 1);
	    case 5: PlayAnim(playerid, "CAR_CHAT", "carfone_loopB_to_A", 4.1, 0, 1, 1, 1, 1, 1);
	    case 6: PlayAnim(playerid, "CAR_CHAT", "carfone_out", 4.1, 0, 1, 1, 1, 1, 1);
	    case 7: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc1_BL", 4.1, 0, 1, 1, 1, 1, 1);
	    case 8: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc1_BR", 4.1, 0, 1, 1, 1, 1, 1);
	    case 9: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc1_FL", 4.1, 0, 1, 1, 1, 1, 1);
	    case 10: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc1_FR", 4.1, 0, 1, 1, 1, 1, 1);
	    case 11: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc2_FL", 4.1, 0, 1, 1, 1, 1, 1);
	    case 12: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc3_BR", 4.1, 0, 1, 1, 1, 1, 1);
	    case 13: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc3_FL", 4.1, 0, 1, 1, 1, 1, 1);
	    case 14: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc3_FR", 4.1, 0, 1, 1, 1, 1, 1);
	    case 15: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc4_BL", 4.1, 0, 1, 1, 1, 1, 1);
	    case 16: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc4_BR", 4.1, 0, 1, 1, 1, 1, 1);
	    case 17: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc4_FL", 4.1, 0, 1, 1, 1, 1, 1);
	    case 18: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc4_FR", 4.1, 0, 1, 1, 1, 1, 1);
	    case 19: PlayAnim(playerid, "CAR", "Sit_relaxed", 4.1, 0, 1, 1, 1, 1, 1);
	    default: BilgiMesajGonder(playerid, "/carchat [1-19]");
    }
    return 1;
}
CMD:meslekler(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	Dialog_Show(playerid, Meslekler, DIALOG_STYLE_LIST, "Meslekler", "{FFFFFF}Taþýmacýlýk\n{FFFFFF}Balýkçýlýk\n{FFFFFF}Çöpçülük\n{FFFFFF}Odunculuk\n{FFFFFF}Madencilik\n{FFFFFF}Temizlik Þöförlüðü", "Seç", "Kapat");
	return 1;
}
CMD:modifiyegarajlari(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    Dialog_Show(playerid, ModifiyeGarajlari, DIALOG_STYLE_LIST, "Modifiye Garajlarý", "{FFFFFF}LS Temple Transfender\n{FFFFFF}LS Willowfield Lowrider Transfender\n{FFFFFF}SF Wheel Arch Angels", "Seç", "Kapat");
	return 1;
}
CMD:yardim(playerid)
{
	new str[550];
	strcat(str, "{808080}  {FFFFFF}Genel Komutlar\n");
	strcat(str, "{808080}  {FFFFFF}Chat & Roleplay Komutlarý\n");
	strcat(str, " \n");
	strcat(str, "{808080}  {FFFFFF}Telefon\n");
	strcat(str, "{808080}  {FFFFFF}Araç\n");
	strcat(str, "{808080}  {FFFFFF}Uyuþturucu\n");
	strcat(str, "{808080}  {FFFFFF}Birlik\n");
	strcat(str, "{808080}  {FFFFFF}Meslekler\n");
	strcat(str, " \n");
	strcat(str, "{808080}  {FFFFFF}Yapýmcýlar\n");
	Dialog_Show(playerid, Yardim, DIALOG_STYLE_LIST, "{FFFFFF}Yardým: Kategoriler", str, "Seç", "{FF6347}Kapat");
	return 1;
}
CMD:soyun(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
 	if(PlayerData[playerid][pSoyun] == true)
 	{
 	    PlayerData[playerid][pSoyun] = false;
 	    SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
 	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s kiyafetlerini giyinir.", ReturnName(playerid, 0));
 	}
 	else
 	{
 	    if(PlayerData[playerid][pCinsiyet] == 1) Dialog_Show(playerid, Soyun, DIALOG_STYLE_PREVMODEL, "Skinler", "18\n45\n97\n154", "Sec", "Kapat");
 	    else Dialog_Show(playerid, Soyun, DIALOG_STYLE_PREVMODEL, "Skinler", "138\n139\n140", "Sec", "Kapat");

 	}
	return 1;
}
CMD:aractanat(playerid, params[])
{
	new id;
    if(!OyundaDegil(playerid)) return 1;
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "Sürücü olmalýsýnýz!");
    if(PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
 	if(sscanf(params, "u", id)) return BilgiMesajGonder(playerid, "/aractanat [ID/Isim]");
 	if(!OyundaDegil(id)) return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");
	if(GetPlayerVehicleID(id) != GetPlayerVehicleID(playerid)) return HataMesajGonder(playerid, "Bu kiþi aracýnýzda deðil.");
	if(id == playerid) return HataMesajGonder(playerid, "Kendinizi araçtan atamazsýnýz.");
	RemovePlayerFromVehicle(id);
	if(PlayerData[id][pKelepce] == 1) TogglePlayerControllable(id, true);
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adlý kiþiyi araçtan atar.", ReturnName(playerid, 0), ReturnName(id, 0));
	return 1;
}
CMD:ytag(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pYoutuber] != 1) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
    if(PlayerData[playerid][pYoutuberTag] == false)
    {
        PlayerData[playerid][pYoutuberTag] = true;
        MesajGonder(playerid, "Youtuber & Streamer tagý açýldý.");
    }
    else
    {
        PlayerData[playerid][pYoutuberTag] = false;
        MesajGonder(playerid, "Youtuber & Streamer tagý kapatýldý.");
    }
	return 1;
}
CMD:beanbag(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if(GetFactionType(playerid) != BIRLIK_LSPD) return HataMesajGonder(playerid, "Devlet memuru deðilsin.");
    if(!IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Polis aracýnda deðilsin!");
    new vehicleid = GetPlayerVehicleID(playerid);
    new id = Car_GetID(vehicleid);
    if(id == -1 || AracInfo[id][aracFactionType] != BIRLIK_LSPD) return HataMesajGonder(playerid, "Polis aracýnda deðilsin!");
    if(!PlayerData[playerid][pBeanbag])
    {
        if(Beanbag[vehicleid] != 1) return HataMesajGonder(playerid, "Bu araçta Beanbag yok.");
        PlayerData[playerid][pBeanbag] = 1;
        SaveWeapons(playerid);
        Beanbag[vehicleid] = 0;
        GivePlayerWeapon(playerid, 25, 100);
        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s aracýn orta panelinden beanbag tüfeðini eline alýr.", ReturnName(playerid, 0));
    }
    else
    {
        if(Beanbag[vehicleid] != 0) return HataMesajGonder(playerid, "Bu araçta zaten Beanbag var.");
        ResetPlayerWeapons(playerid);
        PlayerData[playerid][pBeanbag] = 0;
        SetWeapons(playerid);
        Beanbag[vehicleid] = 1;
        SetPlayerArmedWeapon(playerid, 0);
       	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s beanbag tüfeðini aracýn orta paneline yerleþtirir.", ReturnName(playerid, 0));
    }
	return 1;
}
CMD:ck(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pHapisSure] > 0 && PlayerData[playerid][pCK] == 1) return HataMesajGonder(playerid, "Karakteriniz zaten CK edilmiþ.");
    Dialog_Show(playerid, ckonay, DIALOG_STYLE_MSGBOX, "Character Kill Onay", "Karakterinizi öldürmek istediðinize emin misiniz? Eðer karakterinizi CK ederseniz, Ýsim Deðiþtirme Hakký satýn almadýðýnýz sürece\nkarakteriniz sýnýrsýz olarak mühürlenir ve bu karakterde rol yapamazsýnýz.", "Onayla", "Kapat");
	return 1;
}
CMD:ckunjail(playerid, params[])
{
	new id;
	if(PlayerData[playerid][pAdmin] < 5) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
	if(sscanf(params, "u", id)) return BilgiMesajGonder(playerid, "/ckunjail [ID/Isim]");
	if(!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu oyunda deðil.");
	if(PlayerData[id][pCK] == 0) return HataMesajGonder(playerid, "Bu karakter CK edilmemiþ.");
	format(PlayerData[id][pHapisSebep], 50, "");
	PlayerData[id][pCK] = 0;
	PlayerData[id][pHapisSure] = 1;

    MesajGonder(playerid, "%s adlý oyuncuyu hapisten çýkarttýnýz.", ReturnName(id, 0));
    BilgiMesajGonder(id, "%s adlý yetkili sizi hapisten çýkarttý.", PlayerData[playerid][pAdminName]);

    Log_Write("logs/jail_log.txt", "[%s] %s adli yetkili %s adli oyuncuyu hapisten cikartti. (CK unjail)", ReturnDate(), PlayerData[playerid][pAdminName], ReturnName(id, 0));
	return 1;
}
CMD:kupon(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    Dialog_Show(playerid, Kupon, DIALOG_STYLE_INPUT, "Kupon Kodu", "{FFFFFF}Lütfen kupon kodunu aþaðýya yazýn:", "Devam", "Kapat");
	return 1;
}
CMD:envanter(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pBaygin] > 0 || PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || pbOda[playerid] != -1 || PlayerData[playerid][pSoklandi] > 0 || PetKontrol[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1) return HataMesajGonder(playerid, "Envanterinizi þu an açamazsýnýz.");
    Envanter_Goster(playerid);
	return 1;
}
CMD:ikramiyeal(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pHediye] != 1) return HataMesajGonder(playerid, "Ýkramiye almak için %d maaþ daha almalýsýnýz.", 5-PlayerData[playerid][pHediyeSaat]);
    PlayerData[playerid][pHediye] = 0;
    PlayerData[playerid][pHediyeSaat] = 0;
    new rastpara = RandomEx(250, 4000);
    ParaVer(playerid, rastpara);
    MesajGonder(playerid, "Ýkramiye alma hakkýnýzý kullandýnýz ve {2ECC71}%s {FFFFFF}kazandýnýz.", FormatNumber(rastpara));
	return 1;
}
// ------------------------ ADMIN KOMUTLARI ------------------------------------
stock SilahiVarmi(playerid)
{
	for (new i; i <13; i++)
	{
		if (PlayerData[playerid][pSilahlar][i] > 0)
		    return 1;
 	}
	return 0;
}

stock Envanter_Goster(playerid)
{
	new str[2500], esyasayisi;
	strcat(str, "{FFFFFF}Eþya Adý\t{FFFFFF}Miktar\n");
	if(PlayerData[playerid][pSu] > 0) format(str, sizeof(str), "%s{FFFFFF}Su\t{FFFFFF}%d adet\n", str, PlayerData[playerid][pSu]), esyasayisi++;
	if(PlayerData[playerid][pTelefon] != -1) format(str, sizeof(str), "%s{FFFFFF}Telefon\t{FFFFFF}1 adet\n", str), esyasayisi++;
	if(PlayerData[playerid][pRadyo] > 0) format(str, sizeof(str), "%s{FFFFFF}Portatif Radyo\t{FFFFFF}1 adet\n", str), esyasayisi++;
	if(PlayerData[playerid][pEsyalar][0] > 0) format(str, sizeof(str), "%s{FFFFFF}Zar\t{FFFFFF}1 adet\n", str), esyasayisi++;
	if(PlayerData[playerid][pEsyalar][1] > 0) format(str, sizeof(str), "%s{FFFFFF}Sigara\t{FFFFFF}%d adet\n", str, PlayerData[playerid][pEsyalar][1]), esyasayisi++;
	if(PlayerData[playerid][pEsyalar][2] > 0) format(str, sizeof(str), "%s{FFFFFF}Ýp\t{FFFFFF}%d adet\n", str, PlayerData[playerid][pEsyalar][2]), esyasayisi++;
	if(PlayerData[playerid][pEsyalar][3] > 0) format(str, sizeof(str), "%s{FFFFFF}Göz Baðý\t{FFFFFF}%d adet\n", str, PlayerData[playerid][pEsyalar][3]), esyasayisi++;
	if(PlayerData[playerid][pEsyalar][4] > 0) format(str, sizeof(str), "%s{FFFFFF}Maske\t{FFFFFF}1 adet\n", str), esyasayisi++;
	if(PlayerData[playerid][pEsyalar][5] > 0) format(str, sizeof(str), "%s{FFFFFF}Benzin Bidonu\t{FFFFFF}%d adet\n", str, PlayerData[playerid][pEsyalar][5]), esyasayisi++;
	if(PlayerData[playerid][pEsyalar][6] > 0) format(str, sizeof(str), "%s{FFFFFF}Barbekü\t{FFFFFF}1 adet\n", str), esyasayisi++;
	if(PlayerData[playerid][pEsyalar][7] > 0) format(str, sizeof(str), "%s{FFFFFF}Köfte\t{FFFFFF}%d adet\n", str, PlayerData[playerid][pEsyalar][7]), esyasayisi++;
	if(PlayerData[playerid][pEsyalar][8] > 0) format(str, sizeof(str), "%s{FFFFFF}Tavuk Eti\t{FFFFFF}%d adet\n", str, PlayerData[playerid][pEsyalar][8]), esyasayisi++;
	if(PlayerData[playerid][pEsyalar][9] > 0) format(str, sizeof(str), "%s{FFFFFF}Dana Eti\t{FFFFFF}%d adet\n", str, PlayerData[playerid][pEsyalar][9]), esyasayisi++;
	if(PlayerData[playerid][pEsyalar][10] > 0) format(str, sizeof(str), "%s{FFFFFF}Tamir Kiti\t{FFFFFF}%d adet\n", str, PlayerData[playerid][pEsyalar][10]), esyasayisi++;
	if(PlayerData[playerid][pEsyalar][11] > 0) format(str, sizeof(str), "%s{FFFFFF}Portatif Çadýr\t{FFFFFF}1 adet\n", str), esyasayisi++;
	if(PlayerData[playerid][pEsyalar][12] > 0) format(str, sizeof(str), "%s{FFFFFF}Kamp Ateþi\t{FFFFFF}1 adet\n", str), esyasayisi++;
	if(PlayerData[playerid][pEsyalar][13] > 0) format(str, sizeof(str), "%s{FFFFFF}Þarjör\t{FFFFFF}1 adet\n", str), esyasayisi++;
	if(PlayerData[playerid][pEsyalar][14] > 0) format(str, sizeof(str), "%s{FFFFFF}Yan Keski\t{FFFFFF}%d adet\n", str, PlayerData[playerid][pEsyalar][14]), esyasayisi++;
  if(SilahiVarmi(playerid) == 1)
		format(str, sizeof(str), "%s{FFFFFF}Silahlarým", str);

	if(!esyasayisi) return HataMesajGonder(playerid, "Envanteriniz boþ.");
	Dialog_Show(playerid, Envanter, DIALOG_STYLE_TABLIST_HEADERS, "{E74C3C}Envanter", str, "Seç", "Kapat");
	return 1;
}
Dialog:Envanter(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(strfind(inputtext, "Silahlarým", true) != -1)
		{
			OyuncuSilahlar(playerid);
		}else{
		    new baslik[60];
		    format(EsyaAdi[playerid], 30, inputtext);
		    format(baslik, sizeof(baslik), "{E74C3C}Eþya: {FFFFFF}%s", inputtext);
		    Dialog_Show(playerid, EnvanterEtkilesim, DIALOG_STYLE_LIST, baslik, "{AFAFAF}» {FFFFFF}Eþyayý Kullan\n{AFAFAF}» {FFFFFF}Eþyayý Baþkasýna Ver", "Seç", "Geri");
		}
	}
	return 1;
}
Dialog:EnvanterEtkilesim(playerid, response, listitem, inputtext[])
{
	if(!response) return Envanter_Goster(playerid);
	if(response)
	{
	    if(listitem == 0)
	    {
	        if(strcmp(EsyaAdi[playerid], "Su", true) == 0)
	        {
	            callcmd::su(playerid);
	        }
	        else if(strcmp(EsyaAdi[playerid], "Telefon", true) == 0)
	        {
	            callcmd::telefon(playerid);
	        }
	        else if(strcmp(EsyaAdi[playerid], "Portatif Radyo", true) == 0)
	        {
	            callcmd::r(playerid, "");
	        }
	        else if(strcmp(EsyaAdi[playerid], "Zar", true) == 0)
	        {
	            callcmd::zarat(playerid);
	        }
	        else if(strcmp(EsyaAdi[playerid], "Sigara", true) == 0)
	        {
	            callcmd::sigara(playerid);
	        }
	        else if(strcmp(EsyaAdi[playerid], "Ýp", true) == 0)
	        {
	            callcmd::ipbagla(playerid, "");
	        }
	        else if(strcmp(EsyaAdi[playerid], "Göz Baðý", true) == 0)
	        {
	            callcmd::gozbagla(playerid, "");
	        }
	        else if(strcmp(EsyaAdi[playerid], "Maske", true) == 0)
	        {
	            callcmd::maske(playerid);
	        }
	        else if(strcmp(EsyaAdi[playerid], "Benzin Bidonu", true) == 0)
	        {
	            callcmd::benzinkutusu(playerid);
	        }
	        else if(strcmp(EsyaAdi[playerid], "Barbekü", true) == 0)
	        {
	            callcmd::barbeku(playerid, "koy");
	        }
	        else if(strcmp(EsyaAdi[playerid], "Tamir Kiti", true) == 0)
	        {
	            callcmd::tamirkiti(playerid);
	        }
	        else if(strcmp(EsyaAdi[playerid], "Portatif Çadýr", true) == 0)
	        {
	            callcmd::cadir(playerid, "koy");
	        }
	        else if(strcmp(EsyaAdi[playerid], "Kamp Ateþi", true) == 0)
	        {
	            callcmd::kampatesi(playerid);
	        }
	        else if(strcmp(EsyaAdi[playerid], "Þarjör", true) == 0)
	        {
	            callcmd::silahlarim(playerid);
	        }
	        else if(strcmp(EsyaAdi[playerid], "Yan Keski", true) == 0)
	        {
	            callcmd::kelepcekir(playerid, "");
	        }
	    }
		if(listitem == 1)
		{
		    if(strcmp(EsyaAdi[playerid], "Telefon", true) == 0 || strcmp(EsyaAdi[playerid], "Portatif Radyo", true) == 0 ) return HataMesajGonder(playerid, "Telefonunuzu veya Portatif radyonuzu baþkasýna veremezsiniz.");
		    Dialog_Show(playerid, EsyaVerID, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen eþyayý vermek istediðiniz oyuncunun ID'sini girin:", "Devam", "Kapat");
		}
    if (listitem == 16)
    {
      OyuncuSilahlar(playerid);
    }
	}
	return 1;
}

Dialog:EsyaVer(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new id = GetPVarInt(playerid, "EsyaVerID");
	    if(!OyundaDegil(id) || !IsPlayerNearPlayer(playerid, id, 5.0)) return 1;
	    if(isnull(inputtext)) return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	    if(strval(inputtext) < 1 || strval(inputtext) > 5)
	    {
	        HataMesajGonder(playerid, "En az 1, en fazla 5 girebilirsiniz.");
	        return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	    }
	    new miktar = strval(inputtext);
	    if(strcmp(EsyaAdi[playerid], "Su", true) == 0)
	    {
	        if(miktar > PlayerData[playerid][pSu])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar su yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        if(PlayerData[id][pSu] + miktar > 5)
	        {
	            HataMesajGonder(playerid, "Kiþi envanterinde en fazla 5 su taþýyabilir.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pSu] -= miktar;
	        PlayerData[id][pSu] += miktar;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adlý kiþiye %d su verir.", ReturnName(playerid, 0), ReturnName(id, 0), miktar);
	        MesajGonder(playerid, "%s adlý kiþiye %d su verdiniz.", ReturnName(id, 0), miktar);
	        MesajGonder(id, "%s adlý kiþi size %d su verdi.", ReturnName(playerid, 0), miktar);
	    }
	    else if(strcmp(EsyaAdi[playerid], "Zar", true) == 0)
	    {
	        if(miktar > PlayerData[playerid][pEsyalar][0])
	        {
	            HataMesajGonder(playerid, "O kadar zarýnýz yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        new idd[3];
	        format(idd, sizeof(idd), "%d", id);
	        callcmd::zarver(playerid, idd);
	    }
	    else if(strcmp(EsyaAdi[playerid], "Sigara", true) == 0)
	    {
	        if(miktar > PlayerData[playerid][pEsyalar][1])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar sigara yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        if(PlayerData[id][pEsyalar][1] + miktar > 5)
	        {
	            HataMesajGonder(playerid, "Kiþi envanterinde en fazla 5 sigara taþýyabilir.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][1] -= miktar;
	        PlayerData[id][pEsyalar][1] += miktar;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adlý kiþiye %d sigara verir.", ReturnName(playerid, 0), ReturnName(id, 0), miktar);
	        MesajGonder(playerid, "%s adlý kiþiye %d sigara verdiniz.", ReturnName(id, 0), miktar);
	        MesajGonder(id, "%s adlý kiþi size %d sigara verdi.", ReturnName(playerid, 0), miktar);
	    }
	    else if(strcmp(EsyaAdi[playerid], "Ýp", true) == 0)
	    {
	        if(miktar > PlayerData[playerid][pEsyalar][2])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar ip yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        if(PlayerData[id][pEsyalar][2] + miktar > 2)
	        {
	            HataMesajGonder(playerid, "Kiþi envanterinde en fazla 2 ip taþýyabilir.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][2] -= miktar;
	        PlayerData[id][pEsyalar][2] += miktar;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adlý kiþiye %d ip verir.", ReturnName(playerid, 0), ReturnName(id, 0), miktar);
	        MesajGonder(playerid, "%s adlý kiþiye %d ip verdiniz.", ReturnName(id, 0), miktar);
	        MesajGonder(id, "%s adlý kiþi size %d ip verdi.", ReturnName(playerid, 0), miktar);
	    }
	    else if(strcmp(EsyaAdi[playerid], "Göz Baðý", true) == 0)
	    {
	        if(miktar > PlayerData[playerid][pEsyalar][3])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar göz baðý yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        if(PlayerData[id][pEsyalar][3] + miktar > 2)
	        {
	            HataMesajGonder(playerid, "Kiþi envanterinde en fazla 2 göz baðý taþýyabilir.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][3] -= miktar;
	        PlayerData[id][pEsyalar][3] += miktar;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adlý kiþiye %d göz baðý verir.", ReturnName(playerid, 0), ReturnName(id, 0), miktar);
	        MesajGonder(playerid, "%s adlý kiþiye %d göz baðý verdiniz.", ReturnName(id, 0), miktar);
	        MesajGonder(id, "%s adlý kiþi size %d göz baðý verdi.", ReturnName(playerid, 0), miktar);
	    }
	    else if(strcmp(EsyaAdi[playerid], "Maske", true) == 0)
	    {
	        if(miktar > PlayerData[playerid][pEsyalar][4])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar maske yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        if(PlayerData[id][pEsyalar][4] != 0)
	        {
	            HataMesajGonder(playerid, "Bu kiþinin zaten maskesi var.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][4] = 0;
	        PlayerData[id][pEsyalar][3] = 1;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adlý kiþiye maske verir.", ReturnName(playerid, 0), ReturnName(id, 0));
	        MesajGonder(playerid, "%s adlý kiþiye maske verdiniz.", ReturnName(id, 0));
	        MesajGonder(id, "%s adlý kiþi size maske verdi.", ReturnName(playerid, 0));
	    }
	    else if(strcmp(EsyaAdi[playerid], "Benzin Bidonu", true) == 0)
	    {
	        if(miktar > PlayerData[playerid][pEsyalar][5])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar benzin bidonu yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        if(PlayerData[id][pEsyalar][5] + miktar > 3)
	        {
	            HataMesajGonder(playerid, "Kiþi envanterinde en fazla 3 benzin bidonu taþýyabilir.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][5] -= miktar;
	        PlayerData[id][pEsyalar][5] += miktar;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adlý kiþiye %d benzin bidonu verir.", ReturnName(playerid, 0), ReturnName(id, 0), miktar);
	        MesajGonder(playerid, "%s adlý kiþiye %d benzin bidonu verdiniz.", ReturnName(id, 0), miktar);
	        MesajGonder(id, "%s adlý kiþi size %d benzin bidonu verdi.", ReturnName(playerid, 0), miktar);
	    }
	    else if(strcmp(EsyaAdi[playerid], "Barbekü", true) == 0)
	    {
	        if(miktar > PlayerData[playerid][pEsyalar][6])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar barbekü yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        if(PlayerData[id][pEsyalar][6] != 0)
	        {
	            HataMesajGonder(playerid, "Bu kiþinin zaten barbekü adlý eþyasý var.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][6] = 0;
	        PlayerData[id][pEsyalar][6] = 1;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adlý kiþiye barbekü verir.", ReturnName(playerid, 0), ReturnName(id, 0));
	        MesajGonder(playerid, "%s adlý kiþiye barbekü verdiniz.", ReturnName(id, 0));
	        MesajGonder(id, "%s adlý kiþi size barbekü verdi.", ReturnName(playerid, 0));
	    }
	    else if(strcmp(EsyaAdi[playerid], "Barbekü", true) == 0)
	    {
	        if(miktar > PlayerData[playerid][pEsyalar][6])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar barbekü yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        if(PlayerData[id][pEsyalar][6] != 0)
	        {
	            HataMesajGonder(playerid, "Bu kiþinin zaten barbekü adlý eþyasý var.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][6] = 0;
	        PlayerData[id][pEsyalar][6] = 1;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adlý kiþiye barbekü verir.", ReturnName(playerid, 0), ReturnName(id, 0));
	        MesajGonder(playerid, "%s adlý kiþiye barbekü verdiniz.", ReturnName(id, 0));
	        MesajGonder(id, "%s adlý kiþi size barbekü verdi.", ReturnName(playerid, 0));
	    }
	    else if(strcmp(EsyaAdi[playerid], "Köfte", true) == 0)
	    {
	        if(miktar > PlayerData[playerid][pEsyalar][7])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar köfte yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        if(PlayerData[id][pEsyalar][7] + miktar > 5)
	        {
	            HataMesajGonder(playerid, "Kiþi envanterinde en fazla 5 köfte taþýyabilir.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][7] -= miktar;
	        PlayerData[id][pEsyalar][7] += miktar;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adlý kiþiye %d köfte verir.", ReturnName(playerid, 0), ReturnName(id, 0), miktar);
	        MesajGonder(playerid, "%s adlý kiþiye %d köfte verdiniz.", ReturnName(id, 0), miktar);
	        MesajGonder(id, "%s adlý kiþi size %d köfte verdi.", ReturnName(playerid, 0), miktar);
	    }
	    else if(strcmp(EsyaAdi[playerid], "Tavuk Eti", true) == 0)
	    {
	        if(miktar > PlayerData[playerid][pEsyalar][8])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar tavuk eti yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        if(PlayerData[id][pEsyalar][8] + miktar > 5)
	        {
	            HataMesajGonder(playerid, "Kiþi envanterinde en fazla 5 tavuk eti taþýyabilir.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][8] -= miktar;
	        PlayerData[id][pEsyalar][8] += miktar;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adlý kiþiye %d tavuk eti verir.", ReturnName(playerid, 0), ReturnName(id, 0), miktar);
	        MesajGonder(playerid, "%s adlý kiþiye %d tavuk eti verdiniz.", ReturnName(id, 0), miktar);
	        MesajGonder(id, "%s adlý kiþi size %d tavuk eti verdi.", ReturnName(playerid, 0), miktar);
	    }
	    else if(strcmp(EsyaAdi[playerid], "Dana Eti", true) == 0)
	    {
	        if(miktar > PlayerData[playerid][pEsyalar][9])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar dana eti yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        if(PlayerData[id][pEsyalar][9] + miktar > 5)
	        {
	            HataMesajGonder(playerid, "Kiþi envanterinde en fazla 5 dana eti taþýyabilir.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][9] -= miktar;
	        PlayerData[id][pEsyalar][9] += miktar;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adlý kiþiye %d dana eti verir.", ReturnName(playerid, 0), ReturnName(id, 0), miktar);
	        MesajGonder(playerid, "%s adlý kiþiye %d dana eti verdiniz.", ReturnName(id, 0), miktar);
	        MesajGonder(id, "%s adlý kiþi size %d dana eti verdi.", ReturnName(playerid, 0), miktar);
	    }
	    else if(strcmp(EsyaAdi[playerid], "Tamir Kiti", true) == 0)
	    {
	        if(miktar > PlayerData[playerid][pEsyalar][10])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar tamir kiti yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        if(PlayerData[id][pEsyalar][10] + miktar > 3)
	        {
	            HataMesajGonder(playerid, "Kiþi envanterinde en fazla 3 tamir kiti taþýyabilir.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][10] -= miktar;
	        PlayerData[id][pEsyalar][10] += miktar;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adlý kiþiye %d tamir kiti verir.", ReturnName(playerid, 0), ReturnName(id, 0), miktar);
	        MesajGonder(playerid, "%s adlý kiþiye %d tamir kiti verdiniz.", ReturnName(id, 0), miktar);
	        MesajGonder(id, "%s adlý kiþi size %d tamir kiti verdi.", ReturnName(playerid, 0), miktar);
	    }
	    else if(strcmp(EsyaAdi[playerid], "Portatif Çadýr", true) == 0)
	    {
	        if(miktar > PlayerData[playerid][pEsyalar][11])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar portatif çadýr yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        if(PlayerData[id][pEsyalar][11] + miktar > 1)
	        {
	            HataMesajGonder(playerid, "Kiþi envanterinde en fazla 1 portatif çadýr taþýyabilir.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][11] -= miktar;
	        PlayerData[id][pEsyalar][11] += miktar;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adlý kiþiye Portatif çadýr verir.", ReturnName(playerid, 0), ReturnName(id, 0));
	        MesajGonder(playerid, "%s adlý kiþiye Portatif Çadýr verdiniz.", ReturnName(id, 0));
	        MesajGonder(id, "%s adlý kiþi size Portatif Çadýr verdi.", ReturnName(playerid, 0));
	    }
	    else if(strcmp(EsyaAdi[playerid], "Kamp Ateþi", true) == 0)
	    {
	        if(miktar > PlayerData[playerid][pEsyalar][12])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar kamp ateþi yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        if(PlayerData[id][pEsyalar][12] + miktar > 1)
	        {
	            HataMesajGonder(playerid, "Kiþi envanterinde en fazla 1 kamp ateþi taþýyabilir.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][12] -= miktar;
	        PlayerData[id][pEsyalar][12] += miktar;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adlý kiþiye Kamp Ateþi verir.", ReturnName(playerid, 0), ReturnName(id, 0));
	        MesajGonder(playerid, "%s adlý kiþiye kamp ateþi verdiniz.", ReturnName(id, 0));
	        MesajGonder(id, "%s adlý kiþi size kamp ateþi verdi.", ReturnName(playerid, 0));
	    }
	    else if(strcmp(EsyaAdi[playerid], "Þarjör", true) == 0)
	    {
	        if(miktar > PlayerData[playerid][pEsyalar][13])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar þarjör yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        if(PlayerData[id][pEsyalar][13] + miktar > 1)
	        {
	            HataMesajGonder(playerid, "Kiþi envanterinde en fazla 1 þarjör taþýyabilir.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        new idd[3];
	        format(idd, sizeof(idd), "%d", id);
	        callcmd::sarjorver(playerid, idd);
	    }
	    else if(strcmp(EsyaAdi[playerid], "Yan Keski", true) == 0)
	    {
	        if(miktar > PlayerData[playerid][pEsyalar][14])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar yan keski yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        if(PlayerData[id][pEsyalar][14] + miktar > 1)
	        {
	            HataMesajGonder(playerid, "Kiþi envanterinde en fazla 1 yan keski taþýyabilir.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][14] = 0;
	        PlayerData[id][pEsyalar][14] = 1;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adlý kiþiye Yan Keski verir.", ReturnName(playerid, 0), ReturnName(id, 0));
	        MesajGonder(playerid, "%s adlý kiþiye yan keski verdiniz.", ReturnName(id, 0));
	        MesajGonder(id, "%s adlý kiþi size yan keski verdi.", ReturnName(playerid, 0));
	    }
	}
	return 1;
}
Dialog:EsyaVerID(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, EsyaVerID, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen eþyayý vermek istediðiniz oyuncunun ID'sini girin:", "Devam", "Kapat");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, EsyaVerID, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen eþyayý vermek istediðiniz oyuncunun ID'sini girin:", "Devam", "Kapat");
	    new id = strval(inputtext);
	    if(!OyundaDegil(id))
	    {
	        HataMesajGonder(playerid, "Geçersiz ID girdiniz.");
	        return Dialog_Show(playerid, EsyaVerID, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen eþyayý vermek istediðiniz oyuncunun ID'sini girin:", "Devam", "Kapat");
	    }
	    if(!IsPlayerNearPlayer(playerid, id, 5.0))
	    {
	        HataMesajGonder(playerid, "Kiþiye yeterince yakýn deðilsiniz.");
	        return Dialog_Show(playerid, EsyaVerID, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen eþyayý vermek istediðiniz oyuncunun ID'sini girin:", "Devam", "Kapat");
	    }
	    if(id == playerid)
	    {
	        HataMesajGonder(playerid, "Kendi kendinize eþya veremezsiniz.");
	        return Dialog_Show(playerid, EsyaVerID, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen eþyayý vermek istediðiniz oyuncunun ID'sini girin:", "Devam", "Kapat");
	    }
	    SetPVarInt(playerid, "EsyaVerID", id);
	    Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Eþya Ver", "{FFFFFF}Lütfen vermek istediðiniz miktarý girin:", "Ver", "Kapat");
	}
	return 1;
}
stock AracKiraladi(playerid)
{
	for(new i; i<MAX_ARAC; i++) if(AracInfo[i][aracExists] && AracInfo[i][aracTip] == 3 && AracInfo[i][aracKiralayan] == PlayerData[playerid][pID])
	{
	    return 1;
	}
	return 0;
}
stock Arsa_Sil(id)
{
	ArsaBilgi[id][arsaExists] = 0;
	ArsaBilgi[id][arsaSahip] = -1;
	ArsaBilgi[id][arsaTip] = 0;
	ArsaBilgi[id][arsaFiyat] = 0;
	ArsaBilgi[id][KiraSure] = 0;
	ArsaBilgi[id][arsaMaxTohum] = 0;
	ArsaBilgi[id][Metrekare] = 0;
	DestroyDynamicPickup(ArsaBilgi[id][arsaPickup]);
	DestroyDynamic3DTextLabel(ArsaBilgi[id][arsaLabel]);
	stmt_bind_value(RemoveArsa, 0, DB::TYPE_INTEGER, id);
	stmt_execute(RemoveArsa);
	for(new i; i<MAX_TOHUM; i++) if(Tohumlar[i][tohumArsa] == id)
	{
	    DestroyDynamicObject(Tohumlar[i][tohumObject]);
		DestroyDynamic3DTextLabel(Tohumlar[i][tohumLabel]);
		Tohumlar[i][tohumArsa] = -1;
  		Tohumlar[i][tohumTip] = 0;
  		Tohumlar[i][tohumBuyume] = 0;
    	Tohumlar[i][tohumPos][0] = Tohumlar[i][tohumPos][1] = Tohumlar[i][tohumPos][2] = 0.0;
	}
	return 1;
}
stock TohumUpdate(id)
{
	if(!IsValidDynamicObject(Tohumlar[id][tohumObject]))
	{
	    switch(Tohumlar[id][tohumBuyume])
	    {
	        case 0..19:
	        {
	            if(Tohumlar[id][tohumTip] != 4) Tohumlar[id][tohumObject] = CreateDynamicObject(19473, Tohumlar[id][tohumPos][0], Tohumlar[id][tohumPos][1], Tohumlar[id][tohumPos][2]-1, 0.0, 0.0, 0.0);
	            else Tohumlar[id][tohumObject] = CreateDynamicObject(2244, Tohumlar[id][tohumPos][0], Tohumlar[id][tohumPos][1], Tohumlar[id][tohumPos][2] - 0.70, 0.0, 0.0, 0.0);
	        }
	        case 20..39:
	        {
	            if(Tohumlar[id][tohumTip] != 4) Tohumlar[id][tohumObject] = CreateDynamicObject(681, Tohumlar[id][tohumPos][0], Tohumlar[id][tohumPos][1], Tohumlar[id][tohumPos][2]-1, 0.0, 0.0, 0.0);
	            else
	            {
	                Tohumlar[id][tohumObject] = CreateDynamicObject(2244, Tohumlar[id][tohumPos][0], Tohumlar[id][tohumPos][1], Tohumlar[id][tohumPos][2] - 0.70, 0.0, 0.0, 0.0);
	                SetDynamicObjectMaterial(Tohumlar[id][tohumObject], 2, 2, "plants_TABLETOP", "CJ_PLANT", 0xFF2ECC71);
	            }
	        }
	        case 40..60:
	        {
	            if(Tohumlar[id][tohumTip] != 4) Tohumlar[id][tohumObject] = CreateDynamicObject(737, Tohumlar[id][tohumPos][0], Tohumlar[id][tohumPos][1], Tohumlar[id][tohumPos][2]-1, 0.0, 0.0, 0.0);
	            else
	            {
	                Tohumlar[id][tohumObject] = CreateDynamicObject(2244, Tohumlar[id][tohumPos][0], Tohumlar[id][tohumPos][1], Tohumlar[id][tohumPos][2] - 0.70, 0.0, 0.0, 0.0);
	                SetDynamicObjectMaterial(Tohumlar[id][tohumObject], 2, 2, "plants_TABLETOP", "CJ_PLANT", 0xFFD35400);
	            }
	        }
	    }
	}
	new str[100], tohumtipi[15];
	switch(Tohumlar[id][tohumTip])
 	{
  		case 1: tohumtipi = "Portakal";
    	case 2: tohumtipi = "Elma";
     	case 3: tohumtipi = "Armut";
     	case 4: tohumtipi = "Uyuþturucu";
  	}
	if(!IsValidDynamic3DTextLabel(Tohumlar[id][tohumLabel]))
	{
	    if(Tohumlar[id][tohumBuyume] >= 60)
	    {
	        format(str, sizeof(str), "{BBFFEE}%s\n{BBFFEE}Kalan: Bitti\n{BBFFEE}%s Sayýsý: %d", tohumtipi, tohumtipi, Tohumlar[id][tohumSayi]);
	        Tohumlar[id][tohumLabel] = CreateDynamic3DTextLabel(str, -1, Tohumlar[id][tohumPos][0], Tohumlar[id][tohumPos][1], Tohumlar[id][tohumPos][2], 5.0);
	    }
	    else
	    {
	        format(str, sizeof(str), "{BBFFEE}%s\n{BBFFEE}Kalan: %d dakika", tohumtipi, 60-Tohumlar[id][tohumBuyume]);
	        Tohumlar[id][tohumLabel] = CreateDynamic3DTextLabel(str, -1, Tohumlar[id][tohumPos][0], Tohumlar[id][tohumPos][1], Tohumlar[id][tohumPos][2], 5.0);
	    }
	}
    if(Tohumlar[id][tohumBuyume] >= 60)
    {
    	format(str, sizeof(str), "{BBFFEE}%s\n{BBFFEE}Kalan: Bitti\n{BBFFEE}%s Sayýsý: %d", tohumtipi, tohumtipi, Tohumlar[id][tohumSayi]);
    }
    else
    {
    	format(str, sizeof(str), "{BBFFEE}%s\n{BBFFEE}Kalan: %d dakika", tohumtipi, 60-Tohumlar[id][tohumBuyume]);
    }
    UpdateDynamic3DTextLabelText(Tohumlar[id][tohumLabel], -1, str);
	return 1;
}
stock Arsa_TohumSayisi(id)
{
	new sayi;
	for(new i; i<MAX_TOHUM; i++) if(Tohumlar[i][tohumArsa] == id)
	{
	    sayi++;
	}
	return sayi;
}
stock TohumKontrol(playerid)
{
	for(new i; i<MAX_TOHUM; i++) if(Tohumlar[i][tohumArsa] != -1 && IsPlayerInRangeOfPoint(playerid, 2.0, Tohumlar[i][tohumPos][0], Tohumlar[i][tohumPos][1], Tohumlar[i][tohumPos][2]))
	{
	    return i;
	}
	return -1;
}
stock ArsaNearest(playerid)
{
	for(new i; i<MAX_ARSA; i++) if(ArsaBilgi[i][arsaExists] && IsPlayerInRangeOfPoint(playerid, ArsaBilgi[i][Metrekare], ArsaBilgi[i][arsaPos][0], ArsaBilgi[i][arsaPos][1], ArsaBilgi[i][arsaPos][2]))
	{
	    return i;
	}
	return -1;
}
stock Arsa_Inside(playerid)
{
	for(new i; i<MAX_ARSA; i++) if(ArsaBilgi[i][arsaExists] && IsPlayerInRangeOfPoint(playerid, 2.5, ArsaBilgi[i][arsaPos][0], ArsaBilgi[i][arsaPos][1], ArsaBilgi[i][arsaPos][2]))
	{
	    return i;
	}
	return -1;
}
stock Arsa_Olustur(playerid, tip, metrekare, fiyat, maxtohum)
{
	for(new i; i<MAX_ARSA; i++) if(!ArsaBilgi[i][arsaExists])
	{
	    ArsaBilgi[i][arsaExists] = 1;
	    ArsaBilgi[i][arsaSahip] = -1;
	    ArsaBilgi[i][arsaTip] = tip;
	    GetPlayerPos(playerid, ArsaBilgi[i][arsaPos][0], ArsaBilgi[i][arsaPos][1], ArsaBilgi[i][arsaPos][2]);
	    ArsaBilgi[i][arsaFiyat] = fiyat;
	    ArsaBilgi[i][arsaMaxTohum] = maxtohum;
	    ArsaBilgi[i][Metrekare] = metrekare;
	    ArsaBilgi[i][KiraSure] = 0;
	    stmt_bind_value(AddArsa, 0, DB::TYPE_INTEGER, i);
		stmt_bind_value(AddArsa, 1, DB::TYPE_INTEGER, -1);
	    stmt_bind_value(AddArsa, 2, DB::TYPE_FLOAT, ArsaBilgi[i][arsaPos][0]);
	    stmt_bind_value(AddArsa, 3, DB::TYPE_FLOAT, ArsaBilgi[i][arsaPos][1]);
	    stmt_bind_value(AddArsa, 4, DB::TYPE_FLOAT, ArsaBilgi[i][arsaPos][2]);
	    stmt_bind_value(AddArsa, 5, DB::TYPE_INTEGER, tip);
	    stmt_bind_value(AddArsa, 6, DB::TYPE_INTEGER, fiyat);
	    stmt_bind_value(AddArsa, 7, DB::TYPE_INTEGER, 0);
	    stmt_bind_value(AddArsa, 8, DB::TYPE_INTEGER, metrekare);
	    stmt_bind_value(AddArsa, 9, DB::TYPE_INTEGER, maxtohum);
		ArsaUpdate(i);
	    if(stmt_execute(AddArsa)) return i;
	    else return -1;

	}
	return -1;
}
stock Arsa_Kaydet(id)
{
	stmt_bind_value(UpdateArsa, 0, DB::TYPE_INTEGER, ArsaBilgi[id][arsaSahip]);
	stmt_bind_value(UpdateArsa, 1, DB::TYPE_FLOAT, ArsaBilgi[id][arsaPos][0]);
	stmt_bind_value(UpdateArsa, 2, DB::TYPE_FLOAT, ArsaBilgi[id][arsaPos][1]);
	stmt_bind_value(UpdateArsa, 3, DB::TYPE_FLOAT, ArsaBilgi[id][arsaPos][2]);
	stmt_bind_value(UpdateArsa, 4, DB::TYPE_INTEGER, ArsaBilgi[id][arsaTip]);
	stmt_bind_value(UpdateArsa, 5, DB::TYPE_INTEGER, ArsaBilgi[id][arsaFiyat]);
	stmt_bind_value(UpdateArsa, 6, DB::TYPE_INTEGER, ArsaBilgi[id][KiraSure]);
	stmt_bind_value(UpdateArsa, 7, DB::TYPE_INTEGER, ArsaBilgi[id][Metrekare]);
	stmt_bind_value(UpdateArsa, 8, DB::TYPE_INTEGER, ArsaBilgi[id][arsaMaxTohum]);
	stmt_bind_value(UpdateArsa, 9, DB::TYPE_INTEGER, id);
	stmt_execute(UpdateArsa);
	return 1;
}
stock ArsaUpdate(id)
{
	if(!IsValidDynamic3DTextLabel(ArsaBilgi[id][arsaLabel]))
	{
	    ArsaBilgi[id][arsaLabel] = CreateDynamic3DTextLabel("Arsa", -1, ArsaBilgi[id][arsaPos][0], ArsaBilgi[id][arsaPos][1], ArsaBilgi[id][arsaPos][2], ArsaBilgi[id][Metrekare], INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	}
	if(!IsValidDynamicPickup(ArsaBilgi[id][arsaPickup]))
	{
	    ArsaBilgi[id][arsaPickup] = CreateDynamicPickup(1239, 23, ArsaBilgi[id][arsaPos][0], ArsaBilgi[id][arsaPos][1], ArsaBilgi[id][arsaPos][2]);
	}
	new str[185];
	if(ArsaBilgi[id][arsaSahip] == -1)
	{
	    if(ArsaBilgi[id][arsaTip] == 1)
	    {
	        format(str, sizeof(str), "{00aeff}[Satýlýk Arsa (%d metrekare)]\n\n{E74C3C}Sahip: {FFFFFF}Yok\n{E74C3C}Fiyat: {FFFFFF}%s\n{E74C3C}Tohum Kapasitesi: {FFFFFF}%d\n{E74C3C}(/satinal)", ArsaBilgi[id][Metrekare], FormatNumber(ArsaBilgi[id][arsaFiyat]), ArsaBilgi[id][arsaMaxTohum]);
	    }
	    else
	    {
	        format(str, sizeof(str), "{00aeff}[Kiralýk Arsa (%d metrekare)]\n\n{E74C3C}Kiralayan: {FFFFFF}Yok\n{E74C3C}Saatlik Ücret: {FFFFFF}%s\n{E74C3C}Tohum Kapasitesi: {FFFFFF}%d\n{E74C3C}(/arsakirala)", ArsaBilgi[id][Metrekare], FormatNumber(ArsaBilgi[id][arsaFiyat]), ArsaBilgi[id][arsaMaxTohum]);
	    }
	}
	else
	{
	    if(ArsaBilgi[id][arsaTip] == 1)
	    {
	        format(str, sizeof(str), "{00aeff}[Arsa (%d metrekare)]\n\n{E74C3C}Sahip: {FFFFFF}%s\n{E74C3C}Tohum Kapasitesi: {FFFFFF}%d", ArsaBilgi[id][Metrekare], SQLName(ArsaBilgi[id][arsaSahip], 0), ArsaBilgi[id][arsaMaxTohum]);
	    }
	    else
	    {
	        new secs = ArsaBilgi[id][KiraSure] - gettime();
	    	new kalansaat = floatround(secs / 3600);
	        format(str, sizeof(str), "{00aeff}[Kiralýk Arsa (%d metrekare)]\n\n{E74C3C}Kiralayan: {FFFFFF}%s\n{E74C3C}Kalan: {FFFFFF}%d saat\n{E74C3C}Tohum Kapasitesi: {FFFFFF}%d", ArsaBilgi[id][Metrekare], SQLName(ArsaBilgi[id][arsaSahip], 0), kalansaat, ArsaBilgi[id][arsaMaxTohum]);
	    }
	}
	UpdateDynamic3DTextLabelText(ArsaBilgi[id][arsaLabel], -1, str);
	return 1;
}
Dialog:Kupon(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, Kupon, DIALOG_STYLE_INPUT, "Kupon Kodu", "{FFFFFF}Lütfen kupon kodunu aþaðýya yazýn:", "Devam", "Kapat");
	    new query[128];
		mysql_format(baglanti, query, sizeof(query), "SELECT * FROM `kuponlar` WHERE `kod` = '%e'", inputtext);
		new Cache:sawyer = mysql_query(baglanti, query);
		if(cache_num_rows())
		{
			new para;
			cache_get_value_name_int(0, "para", para);

			ParaVer(playerid, para);
			mysql_format(baglanti, query, sizeof(query), "DELETE FROM `kuponlar` WHERE `kod` = '%e'", inputtext);
			mysql_tquery(baglanti, query);
			MesajGonder(playerid, "Kupon kodunu kullanarak %s kazandýnýz.", FormatNumber(para));
			AdminMessage(COLOR_LIGHTRED, "*** %s adlý kiþi '%s' kupon kodunu kullanarak %s kazandý.", Player_GetName(playerid), inputtext, FormatNumber(para));
		}
		else
		{
			HataMesajGonder(playerid, "Geçersiz kupon kodu girdiniz.");
		}
		cache_delete(sawyer);
	}
	return 1;
}
Dialog:ckonay(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    ResetPlayer(playerid);
    	ResetWeapons(playerid);
    	ClearAnimations(playerid);
		PlayerTextDrawShow(playerid, HapisTD[playerid]);
		SetPlayerPos(playerid, 197.6346, 175.3765, 1003.0234);
    	SetPlayerInterior(playerid, 3);

    	SetPlayerVirtualWorld(playerid, (playerid + 100));
    	SetPlayerFacingAngle(playerid, 0.0);

    	SetCameraBehindPlayer(playerid);
    	PlayerData[playerid][pCK] = 1;
    	PlayerData[playerid][pHapisSure] = 9999999 * 60;
    	format(PlayerData[playerid][pHapisSebep], 50, "CK");
    	format(PlayerData[playerid][pHapiseAtan], 24, "Sistem");
    	PlayerData[playerid][pHapis] = 0;
    	MesajGonder(playerid, "Karakteriniz CK edildi.");
    	Oyuncu_Kaydet(playerid);
	}
	return 1;
}
Dialog:Soyun(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(PlayerData[playerid][pCinsiyet] == 1) SetPlayerSkin(playerid, 18);
	            else SetPlayerSkin(playerid, 138);
	        }
	        case 1:
	        {
	            if(PlayerData[playerid][pCinsiyet] == 1) SetPlayerSkin(playerid, 45);
	            else SetPlayerSkin(playerid, 139);
	        }
	        case 2:
	        {
	            if(PlayerData[playerid][pCinsiyet] == 1) SetPlayerSkin(playerid, 97);
	            else SetPlayerSkin(playerid, 140);
	        }
			case 3:
			{
			    if(PlayerData[playerid][pCinsiyet] == 1) SetPlayerSkin(playerid, 154);
			}
	    }
	    PlayerData[playerid][pSoyun] = true;
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s kiyafetlerini soyunur.", ReturnName(playerid, 0));
	}
	return 1;
}
Dialog:SistemSoru(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::yardim(playerid);
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, SistemSoru, DIALOG_STYLE_INPUT,"Sisteme Sor","{FFFFFF}Lütfen sorunuz hakkýnda bir anahtar kelime giriniz: \n\n{FFBF00}[Ýnfo] {FFFFFF}Anahtar kelimesi 3 ile 20 karakter arasýnda olmalýdýr.","Devam","Kapat");
	    if(strlen(inputtext) < 3 || strlen(inputtext) > 20) return Dialog_Show(playerid, SistemSoru, DIALOG_STYLE_INPUT,"Sisteme Sor","{FFFFFF}Lütfen sorunuz hakkýnda bir anahtar kelime giriniz: \n\n{FFBF00}[Ýnfo] {FFFFFF}Anahtar kelimesi 3 ile 20 karakter arasýnda olmalýdýr.","Devam","Kapat");
	    SoruListele(playerid,inputtext);
	}
	return 1;
}
stock SoruListele(playerid,anahtarkelime[])
{
	new str[2500],sayi;
	for(new i; i<MAX_SORU; i++)
	{
		if(SoruData[i][soruExists])
		{
			if(strfind(SoruData[i][Soru], anahtarkelime, true) != -1)
			{
				format(str,sizeof(str),"%s%s\n",str,SoruData[i][Soru]);
				SoruListeleme[playerid][sayi] = i;
				sayi++;
				if(sayi >= 45) break;
			}
		}
	}
	if(!sayi)
	{
	    HataMesajGonder(playerid, "Yazdýðýnýz anahtar kelimeye ait hiç soru bulunamadý.");
	    return Dialog_Show(playerid, SistemSoru, DIALOG_STYLE_INPUT,"Sisteme Sor","{FFFFFF}Lütfen sorunuz hakkýnda bir anahtar kelime giriniz: \n\n{FFBF00}[Ýnfo] {FFFFFF}Anahtar kelimesi 3 ile 20 karakter arasýnda olmalýdýr.","Devam","Kapat");
	}
	format(AnahtarKelime[playerid],20,anahtarkelime);
	Dialog_Show(playerid,Sorular,DIALOG_STYLE_LIST,"Sorular",str,"Görüntüle","Geri");
	return 1;
}
Dialog:Sorular(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::yardim(playerid), format(AnahtarKelime[playerid],20,"");
	if(response)
	{
	    new soruid = SoruListeleme[playerid][listitem];
     	if(SoruData[soruid][soruExists])
      	{
      	    SoruData[soruid][OkunmaSayisi]++;
       		new str[300];
         	format(str,sizeof(str),"%s\n\n{00FFBF}Ekleyen: %s | Tarih: %s | Okunma Sayýsý: %d",SoruData[soruid][SoruCevap],SoruData[soruid][Ekleyen],SoruData[soruid][EklenmeTarihi],SoruData[soruid][OkunmaSayisi]);
          	Dialog_Show(playerid,SoruGoster,DIALOG_STYLE_MSGBOX,"Soru",str,"Kapat","Geri");
            new query[124];
            format(query,sizeof(query),"UPDATE `sorular` SET `OkunmaSayisi` = '%d' WHERE `sid` = '%d'",SoruData[soruid][OkunmaSayisi],SoruData[soruid][soruID]);
            mysql_tquery(baglanti,query);
       	}
	}
	return 1;
}
Dialog:SoruGoster(playerid, response, listitem, inputtext[])
{
	if(!response) return SoruListele(playerid,AnahtarKelime[playerid]);
	format(AnahtarKelime[playerid],20,"");
	return 1;
}
stock SikcaSorulanSorular(playerid)
{
    new query[124],Cache:VeriCek;
    mysql_format(baglanti, query, sizeof(query), "SELECT `Soru`,`sid` FROM `sorular` ORDER BY `OkunmaSayisi` DESC LIMIT 10");
    VeriCek = mysql_query(baglanti, query);
    new rows = cache_num_rows();
    if(rows)
    {
        new list[1024],count = 1, sid, Question[50];
        for(new i = 0; i < rows; ++i)
        {
            cache_get_value_name(i, "Soru", Question, 50);
            cache_get_value_name_int(i, "sid", sid);
            SoruListeleme[playerid][count-1] = SoruIDBul(sid);
            format(list,sizeof(list),"%s{FF0000}%d){FFFFFF} %s\n", list, count, Question);
            count++;
        }
        Dialog_Show(playerid,top10soru,DIALOG_STYLE_LIST,"Sýkça Sorulan 10 Soru",list,"Görüntüle","{FF0000}Kapat");
    }
    cache_delete(VeriCek);
    return 1;
}
Dialog:top10soru(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::yardim(playerid);
	if(response)
 	{
  		new soruuid = SoruListeleme[playerid][listitem];
    	if(SoruData[soruuid][soruExists])
     	{
     	    SoruData[soruuid][OkunmaSayisi]++;
      		new str[300];
        	format(str,sizeof(str),"%s\n\n{00FFBF}Ekleyen: %s | Tarih: %s | Okunma Sayýsý: %d",SoruData[soruuid][SoruCevap],SoruData[soruuid][Ekleyen],SoruData[soruuid][EklenmeTarihi],SoruData[soruuid][OkunmaSayisi]);
         	Dialog_Show(playerid,top10soru2,DIALOG_STYLE_MSGBOX,"Soru",str,"Kapat","Geri");
           	new query[124];
            format(query,sizeof(query),"UPDATE `sorular` SET `OkunmaSayisi` = '%d' WHERE `sid` = '%d'",SoruData[soruuid][OkunmaSayisi],SoruData[soruuid][soruID]);
            mysql_query(baglanti,query, false);
      	}
  	}
	return 1;
}
Dialog:top10soru2(playerid, response, listitem, inputtext[])
{
	if(!response) return SikcaSorulanSorular(playerid);
	return 1;
}
stock SoruIDBul(questionid)
{
    for(new i; i<MAX_SORU; i++)
    {
        if(SoruData[i][soruExists] && SoruData[i][soruID] == questionid)
        {
            return i;
        }
    }
    return -1;
}
Dialog:Yardim(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new string[2056], baslik[50];
		format(baslik, sizeof(baslik), "Rose Roleplay - %s", inputtext);

		for (new i = 0; i != MAX_YARDIM_KOMUTLARI; i ++)
		{
	 		if (Komutlar[i][komutVarmi] && Komutlar[i][komutKatagori] == listitem && Komutlar[i][komutOlusum] == -1)
			{
				new komutstr[512];
				format(komutstr, sizeof(komutstr), "{808080}  {FFFFFF}{808080}[{FFFFFF}%s{808080}]{FFFFFF} {FFFFFF}%s\n", Komutlar[i][komutAd], Komutlar[i][komutTanim]);
				strcat(string, komutstr);
			}
		}
		Dialog_Show(playerid, YardimGeriTusu, DIALOG_STYLE_MSGBOX, baslik, string, "Tamam", "Geri");
	}
	return 1;
}
Dialog:YardimGeriTusu(playerid, response, listitem, inputtext[])
{
	if (!response) callcmd::yardim(playerid);
	return 1;
}
Dialog:ModifiyeGarajlari(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
	            SetPVarInt(playerid, "AraciniBuluyor", 1);
	            SetPlayerCheckpoint(playerid, 1041.0259,-1029.3878,32.1016, 5.0);
	            MesajGonder(playerid, "Modifiye garajý haritada iþaretlendi.");
	        }
	        case 1:
	        {
	            SetPVarInt(playerid, "AraciniBuluyor", 1);
	            SetPlayerCheckpoint(playerid, 2644.9888,-2034.6790,13.5540, 5.0);
	            MesajGonder(playerid, "Modifiye garajý haritada iþaretlendi.");
	        }
	        case 2:
	        {
	            SetPVarInt(playerid, "AraciniBuluyor", 1);
	            SetPlayerCheckpoint(playerid, -2712.9658,216.7289,4.2473, 5.0);
	            MesajGonder(playerid, "Modifiye garajý haritada iþaretlendi.");
	        }
	    }
	}
	return 1;
}
Dialog:Meslekler(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
	            SetPVarInt(playerid, "AraciniBuluyor", 1);
	            SetPlayerCheckpoint(playerid, 2209.8213,-2650.4768,13.5469, 5.0);
	            MesajGonder(playerid, "Meslek haritada iþaretlendi.");
	        }
	        case 1:
	        {
	            SetPVarInt(playerid, "AraciniBuluyor", 1);
	            SetPlayerCheckpoint(playerid, 2916.4280,-1963.1741,11.0894, 5.0);
	            MesajGonder(playerid, "Meslek haritada iþaretlendi.");
	        }
	        case 2:
	        {
	            SetPVarInt(playerid, "AraciniBuluyor", 1);
	            SetPlayerCheckpoint(playerid, 1624.1842,-1844.4020,13.5375, 5.0);
	            MesajGonder(playerid, "Meslek haritada iþaretlendi.");
	        }
	        case 3:
	        {
	            SetPVarInt(playerid, "AraciniBuluyor", 1);
	            SetPlayerCheckpoint(playerid, 1033.4139,-324.8149,73.9922, 5.0);
	            MesajGonder(playerid, "Meslek haritada iþaretlendi.");
	        }
	        case 4:
	        {
	            SetPVarInt(playerid, "AraciniBuluyor", 1);
	            SetPlayerCheckpoint(playerid, 808.7780,842.6378,9.7559, 5.0);
	            MesajGonder(playerid, "Meslek haritada iþaretlendi.");
	        }
	        case 5:
	        {
	            SetPVarInt(playerid, "AraciniBuluyor", 1);
	            SetPlayerCheckpoint(playerid, 2091.2358,-2014.5789,13.5469, 5.0);
	            MesajGonder(playerid, "Meslek haritada iþaretlendi.");
	        }
	    }
	}
	return 1;
}
IsCLowrider(carid)
{
    new Cars[] = { 536, 575, 567};
    for(new i = 0; i < sizeof(Cars); i++)
    {
        if(GetVehicleModel(carid) == Cars[i]) return 1;
    }
    return 0;
}
PlayAnim(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync)
{
    if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    PlayerData[playerid][pLoopAnim] = true;
    ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
    return 1;
}

PlayAnimEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync)
{
    if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    PlayerData[playerid][pLoopAnim] = true;
    ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
    return 1;
}
Dialog:TaksiMenu(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    new id = Car_GetID(vehicleid);
	    if(id == -1) return 1;
	    switch(listitem)
	    {
	        case 0, 2: callcmd::taksi(playerid);
	        case 1:
	        {
	            if(PlayerData[playerid][pTaxiDuty] == false)
	            {
	                PlayerData[playerid][pTaxiDuty] = true;
	                AracInfo[id][Taksimetre] = 30;
	                AracInfo[id][OturumKazanci] = 0;
	                foreach(new i:Player) if(PlayerData[i][pAyarlar][2] == 0)
	                {
	                    SendClientMessageEx(i, 0x42f445FF, "LS TAXI: %s plakalý taksi iþbaþý yaptý, '/ara 333' kullanarak taksi çaðýrabilirsin.", AracInfo[id][aracPlaka]);
	                }
	            }
	            else
	            {
	                PlayerTextDrawHide(playerid, TaxiTD[playerid][0]);
	                PlayerTextDrawHide(playerid, TaxiTD[playerid][1]);
	                foreach(new i: Player)
	                {
	                    if(IsPlayerInsideTaxi(i) && PlayerData[i][pTaxiPlayer] == playerid)
	                    {
							LeaveTaxi(i, playerid);

	                    }
	                }
	                PlayerData[playerid][pTaxiDuty] = false;
	                AracInfo[id][Taksimetre] = 30;
	                AracInfo[id][OturumKazanci] = 0;
	            }
	            callcmd::taksi(playerid);
	        }
	        case 3:
	        {
	            AracInfo[id][OturumKazanci] = 0;
	            callcmd::taksi(playerid);
	        }
	        case 4:
	        {
	            Dialog_Show(playerid, TaksimetreUcret, DIALOG_STYLE_INPUT, "Taksimetre Ücreti", "{FFFFFF}Lütfen yeni bir taksimetre ücretini girin:\n\n{f44542}NOT: {FFFFFF}En az $10, en fazla $300 girebilirsiniz.", "Deðiþtir", "Geri");
	        }
	        case 5:
	        {
	            if(IsValidDynamicObject(AracInfo[id][TaksiObje]))
	            {
	                DestroyDynamicObject(AracInfo[id][TaksiObje]);
	                callcmd::taksi(playerid);
	            }
	            else
	            {
					Dialog_Show(playerid, TaksiObje, DIALOG_STYLE_PREVMODEL, "Taksi Objeleri", "19308\n19309\n19310\n19311", "Sec", "Geri");
	            }
	        }
	        case 6:
	        {
	            if(PlayerData[playerid][pTaxiDuty] == false) return HataMesajGonder(playerid, "Taksimetre kapalý olduðu için taksi taleplerine bakamazsýnýz.");
	            new str[1000], count;
	            strcat(str, "#\tVatandaþ\tYer\n");
	            new Float:pos[3];
	            foreach(new i:Player) if(PlayerData[i][pTaxiCalled] == 1)
	            {
	                GetPlayerPosEx(i, pos[0], pos[1], pos[2]);
	                format(str, sizeof(str), "%s{FFFFFF}%d\t{FFFFFF}%s\t{FFFFFF}%s\n", str, i, ReturnName(i, 0), GetLocation(pos[0], pos[1], pos[2]));
	                count++;
	            }
	            if(count == 0) return HataMesajGonder(playerid, "Aktif taksi çaðrýsý bulunmuyor.");
	            Dialog_Show(playerid, TaksiTalepleri, DIALOG_STYLE_TABLIST_HEADERS, "Taksi Çaðrýlarý", str, "Kabul et", "Kapat");
	        }
	    }
	    if(listitem == 0 || listitem == 2) return callcmd::taksi(playerid);

	}
	return 1;
}
Dialog:TaksiTalepleri(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new id = strval(inputtext);
	    if(PlayerData[playerid][pTaksiKabul] != -1) return HataMesajGonder(playerid, "Zaten birisinin taksi çaðrýsýný kabul etmiþsin. (/cpsifirla)");
	    if(PlayerData[id][pTaxiCalled] == 0) return HataMesajGonder(playerid, "Bu oyuncunun çaðrýsý baþka bir taksi þoförü tarafýndan kabul edildi.");
	    if(PlayerData[id][pTaxiCalled] == 1 && OyundaDegil(id))
	    {
	        PlayerData[id][pTaxiCalled] = 0;
	        PlayerData[playerid][pTaksiKabul] = id;
	        MesajGonder(id, "%s adlý taksici çaðrýnýzý kabul etti, sabit kalmaya çalýþýn birazdan burada olur.", ReturnName(playerid, 0));
	        MesajGonder(playerid, "%s adlý kiþinin taksi çaðrýsýný kabul ettiniz, kiþinin yeri haritada iþaretlendi.", ReturnName(id, 0));
	        new Float:pos[3];
	        GetPlayerPosEx(id, pos[0], pos[1], pos[2]);
	        SetPlayerCheckpoint(playerid, pos[0], pos[1], pos[2], 5.0);
	    }
	}
	return 1;
}
Dialog: (playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::taksi(playerid);
	if(response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    new id = Car_GetID(vehicleid);
	    if(id == -1) return 1;
		new Float:pos[3];
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		AracInfo[id][TaksiObje] = CreateDynamicObject(19308+listitem, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0);

		SetPVarInt(playerid, "TaksiObje", 1);
		EditDynamicObject(playerid, AracInfo[id][TaksiObje]);
	}
	return 1;
}
Dialog:TaksimetreUcret(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::taksi(playerid);
	if(response)
	{
	    new id = Car_GetID(GetPlayerVehicleID(playerid));
	    if(id == -1) return 1;
	    if(isnull(inputtext)) return Dialog_Show(playerid, TaksimetreUcret, DIALOG_STYLE_INPUT, "Taksimetre Ücreti", "{FFFFFF}Lütfen yeni bir taksimetre ücretini girin:\n\n{f44542}NOT: {FFFFFF}En az $10, en fazla $300 girebilirsiniz.", "Deðiþtir", "Geri");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, TaksimetreUcret, DIALOG_STYLE_INPUT, "Taksimetre Ücreti", "{FFFFFF}Lütfen yeni bir taksimetre ücretini girin:\n\n{f44542}NOT: {FFFFFF}En az $10, en fazla $300 girebilirsiniz.", "Deðiþtir", "Geri");
	    if(strval(inputtext) < 10 || strval(inputtext) > 300) return Dialog_Show(playerid, TaksimetreUcret, DIALOG_STYLE_INPUT, "Taksimetre Ücreti", "{FFFFFF}Lütfen yeni bir taksimetre ücretini girin:\n\n{f44542}NOT: {FFFFFF}En az $10, en fazla $300 girebilirsiniz.", "Deðiþtir", "Geri");
	    AracInfo[id][Taksimetre] = strval(inputtext);
	    callcmd::taksi(playerid);
	}
	return 1;
}
Dialog:TaksiPlakasi(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        new vehicleid = GetPlayerVehicleID(playerid);
    		new id = Car_GetID(vehicleid);
    		if(!IsEngineVehicle(vehicleid) || IsVehicleBike(vehicleid) || id == -1 || GetVehicleMaxSeats(vehicleid) < 4 || AracInfo[id][aracTip] != 4 || GetVehicleModel(vehicleid) == 420) return HataMesajGonder(playerid, "Bu araca taksi plakasý alýnamaz.");
    		if(PlayerData[playerid][pCash] < 32000) return HataMesajGonder(playerid, "Yeterli paranýz yok. ($32,000)");
    		AracInfo[id][TaksiPlaka] = 1;
    		Arac_Kaydet(id);
    		MesajGonder(playerid, "{2ECC71}$32,000 {FFFFFF}ödeyerek aracýnýza taksi plakasý taktýrdýnýz. (/taksi)");
	    }
	}
	return 1;
}
MacBitir(id)
{
 	new str[135];
 	if(Paintball[id][odaOyunTuru] == 1 && Paintball[id][odaPuan][0] > Paintball[id][odaPuan][1])
 	{
	    format(str, sizeof(str), "{33EE33}PB: Maçý %s adlý takým kazandý.", Paintball[id][odaTakim1Ad]);
 	}
 	else if(Paintball[id][odaOyunTuru] == 1 && Paintball[id][odaPuan][1] > Paintball[id][odaPuan][0])
 	{
 	    format(str, sizeof(str), "{33EE33}PB: Maçý %s adlý takým kazandý.", Paintball[id][odaTakim2Ad]);
 	}
 	else if(Paintball[id][odaOyunTuru] == 1 && Paintball[id][odaPuan][0] == Paintball[id][odaPuan][1])
 	{
 	    format(str, sizeof(str), "{33EE33}PB: Maç berabere bitti.");
 	}
 	else if(Paintball[id][odaOyunTuru] == 2 && GetLiderOyuncu(id) != -1)
 	{
 	    format(str, sizeof(str), "{33EE33}PB: %s adlý kiþi %d öldürme, %d ölme ile maçý kazandý!",ReturnName(GetLiderOyuncu(id), 0), pbOldurme[GetLiderOyuncu(id)], pbOlme[GetLiderOyuncu(id)]);
 	}
 	SendPBMessage(id, -1, str);
    foreach(new p:Player)
    {
        if(pbOda[p] == id)
        {
			OdadanAt(p, 3);
        }
    }
    Paintball[id][odaExists] = false;
  	format(Paintball[id][odaIsim], 30, "");
   	format(Paintball[id][odaSifre], 30, "");
    Paintball[id][odaSahip] = -1;
    format(Paintball[id][odaTakim1Ad], 20, "");
    format(Paintball[id][odaTakim2Ad], 20, "");
    Paintball[id][odaZirh] = 0;
    Paintball[id][odaSure] = 0;
    Paintball[id][odaOyunTuru] = 1;
    Paintball[id][odaArena] = 1;
    Paintball[id][odaPuan][0] = 0;
    Paintball[id][odaPuan][1] = 0;
    Paintball[id][odaSayac] = 0;
    return 1;
}
OdadanAt(playerid, sebep)
{
    if(IsPlayerDying(playerid))
   	{
		SetPVarInt(playerid, "OdadanAt", 1);
		return 1;
   	}
	new str[100];
 	if(sebep == 0) format(str, sizeof(str), "{33EE33}PB: %s adlý kiþi odadan ayrýldý.", ReturnName(playerid, 0));
  	if(sebep == 1) format(str, sizeof(str), "{33EE33}PB: %s adlý kiþi odadan atýldý.", ReturnName(playerid, 0));
   	if(sebep <= 1)  SendPBMessage(pbOda[playerid], -1, str);
   	MesajGonder(playerid, "Maç boyunca %d kiþi öldürdünüz ve %d kere öldürüldünüz.", pbOldurme[playerid], pbOlme[playerid]);
   	SetPlayerPos(playerid, 1170.9122,-1489.6418,22.7551);
   	SetPlayerFacingAngle(playerid, 87.5724);
   	SetPlayerInterior(playerid, 0);
   	SetPlayerVirtualWorld(playerid, 0);
   	ObjelerYukleniyor(playerid);
   	SetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
   	SetPlayerArmour(playerid, PlayerData[playerid][pArmour]);
   	SetPlayerTeam(playerid, NO_TEAM);
   	ResetPlayerWeapons(playerid);
   	SetWeapons(playerid);
   	pbOda[playerid] = -1;
    pbTakim[playerid] = 0;
    pbOldurme[playerid] = 0;
    pbOlme[playerid] = 0;
    for(new i; i<9; i++)
    {
    	PlayerTextDrawHide(playerid, PaintballTD[playerid][i]);
	}
    return 1;
}
GetLiderOyuncu(oda)
{
	new PlayerID = -1, oldurme, olme;
	foreach(new i:Player)
	{
	    if(IsPlayerConnected(i) && pbOda[i] == oda)
	    {
	        if(pbOldurme[i] > oldurme || (pbOldurme[i] == oldurme && pbOlme[i] < olme))
	        {
				PlayerID = i;
				oldurme = pbOldurme[i];
				olme = pbOlme[i];
	        }
	    }
	}
	return PlayerID;
}
SendPBMessage(id, color, yazi[])
{
	foreach(new i:Player)
	{
	    if(pbOda[i] == id)
	    {
	        SendClientMessage(i, color, yazi);
	    }
	}
	return 1;
}
Takim1Sayi(pbid)
{
	new sayi = 0;
	foreach(new i:Player)
	{
	    if(IsPlayerConnected(i) && pbOda[i] == pbid && pbTakim[i] == 1)
	    {
	        sayi++;
		}
	}
	return sayi;
}
Takim2Sayi(pbid)
{
	new sayi = 0;
	foreach(new i:Player)
	{
	    if(IsPlayerConnected(i) && pbOda[i] == pbid && pbTakim[i] == 2)
	    {
	        sayi++;
		}
	}
	return sayi;
}
KatilimciDialog(playerid, id)
{
	new str[300], string[100];
    strcat(str, "ID\tIsim\n");
	foreach(new i:Player)
	{
	    if(IsPlayerConnected(i) && pbOda[i] == id)
	    {
	        format(string, sizeof(string), "{F21D1D}%d\t{F21D1D}%s\n", i, ReturnName(i, 0));
	        strcat(str, string);
	    }
	}
	format(string, sizeof(string), "{1DF21D}Katýlýmcý Sayýsý: %d", KatilimciSayisi(id));
	ShowPlayerDialog(playerid, ODA_AYARLARI_KATILIMCI, DIALOG_STYLE_TABLIST_HEADERS,string,str, "Seç", "Geri");
	return 1;
}
OdaAyarlari(playerid, id)
{
	if(!IsPlayerConnected(playerid) || !Paintball[id][odaExists]) return 0;
	new str[500], string[100], arena[20];
	strcat(str, "{FFFFFF}Ýþlem\t{FFFFFF}Durum\n");

	format(string, sizeof(string), "{AFAFAF}» Oda Adý:\t{F21D1D}%s\n", Paintball[id][odaIsim]);
	strcat(str, string);
	format(string, sizeof(string), "{AFAFAF}» Oda Þifre:\t{F21D1D}%s\n", Paintball[id][odaSifre]);
	strcat(str, string);
	if(Paintball[id][odaOyunTuru] == 1)
	{
		format(string, sizeof(string), "{AFAFAF}» Takým 1 Ad:\t{F21D1D}%s\n", Paintball[id][odaTakim1Ad]);
		strcat(str, string);
		format(string, sizeof(string), "{AFAFAF}» Takým 2 Ad:\t{F21D1D}%s\n", Paintball[id][odaTakim2Ad]);
		strcat(str, string);
		format(string, sizeof(string), "{AFAFAF}» Takým Dengeleme:\t{F21D1D}%s\n", (Paintball[id][TakimDengeleme] == true) ? ("{00FF6E}Açýk") : ("{FF0000}Kapalý"));
		strcat(str, string);
	}
	if(Paintball[id][odaDurum] == ODA_BEKLEME)
	{
	    format(string, sizeof(string), "{AFAFAF}» Oyun Türü:\t{F21D1D}%s\n", (Paintball[id][odaOyunTuru] == 1) ? ("TDM") : ("DM"));
	    strcat(str, string);
	}
	if(Paintball[id][odaDurum] == ODA_BEKLEME)
	{
	    switch(Paintball[id][odaArena])
	    {
	        case 1: arena = "Warehouse 1";
	        case 2: arena = "Warehouse 2";
	        case 3: arena = "RC Battlefield";
	        case 4: arena = "LV Police HQ";
	        case 5: arena = "LV Warehouse";
	        case 6: arena = "Crack Factory";
	        case 7: arena = "Jefferson Motel";
	        default: arena = "Bilinmiyor";
		}
	    format(string, sizeof(string), "{AFAFAF}» Maç Süresi:\t{F21D1D}%d dk.\n", Paintball[id][odaSure]);
		strcat(str, string);
		format(string, sizeof(string), "{AFAFAF}» Arena:\t{F21D1D}%s\n", arena);
		strcat(str, string);
	}
	format(string, sizeof(string), "{AFAFAF}» Baþlangýç Zýrhý:\t{F21D1D}%d\n", Paintball[id][odaZirh]);
	strcat(str, string);
	format(string, sizeof(string), "{AFAFAF}» Silah Ayarlarý\n");
	strcat(str, string);
	format(string, sizeof(string), "{AFAFAF}» Katýlýmcý Ayarlarý\t{F21D1D}%d katýlýmcý\n\n", KatilimciSayisi(id));
	strcat(str, string);
	if(Paintball[id][odaDurum] == ODA_BASLADI) strcat(str, "{F21D1D}» Maçý Bitir\n");
	else if(Paintball[id][odaDurum] == ODA_BEKLEME) strcat(str, "{1DF21D}» Maçý Baþlat\n");
	if(Paintball[id][odaDurum] == ODA_BEKLEME) strcat(str, "{F21D1D}» Odayý Sil");
	SetPVarInt(playerid, "OdaAyarID", id);
	ShowPlayerDialog(playerid, ODA_AYARLARI, DIALOG_STYLE_TABLIST_HEADERS, "{1DF21D}Oda Ayarlarý", str, "Seç", "Kapat");
	return 1;
}
KatilimciSayisi(odaid)
{
	new sayi = 0;
	foreach(new i:Player)
	{
	    if(IsPlayerConnected(i) && pbOda[i] == odaid)
	    {
	        sayi++;
		}
	}
	return sayi;
}
OdasiVarmi(playerid)
{
    for(new i=0; i != MAX_ODA; i++) if(Paintball[i][odaExists])
    {
        if(Paintball[i][odaSahip] == playerid) return i;
	}
	return -1;
}
TDYukle(playerid)
{
    PaintballTD[playerid][0] = CreatePlayerTextDraw(playerid, 570.475952, 118.833320, "mdl-2005:pbhud");
	PlayerTextDrawLetterSize(playerid, PaintballTD[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PaintballTD[playerid][0], 71.000000, 195.000000);
	PlayerTextDrawAlignment(playerid, PaintballTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, PaintballTD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, PaintballTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PaintballTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, PaintballTD[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, PaintballTD[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][0], 0);

	PaintballTD[playerid][1] = CreatePlayerTextDraw(playerid, 572.986816, 162.583328, "Takimadi1");
	PlayerTextDrawLetterSize(playerid, PaintballTD[playerid][1], 0.300000, 1.200000);
	PlayerTextDrawAlignment(playerid, PaintballTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, PaintballTD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, PaintballTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PaintballTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, PaintballTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, PaintballTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][1], 0);

	PaintballTD[playerid][2] = CreatePlayerTextDraw(playerid, 573.455383, 191.749984, "Takimadi2");
	PlayerTextDrawLetterSize(playerid, PaintballTD[playerid][2], 0.300000, 1.200000);
	PlayerTextDrawAlignment(playerid, PaintballTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, PaintballTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, PaintballTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PaintballTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, PaintballTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, PaintballTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][2], 0);

	PaintballTD[playerid][3] = CreatePlayerTextDraw(playerid, 587.979614, 176.000030, "10");
	PlayerTextDrawLetterSize(playerid, PaintballTD[playerid][3], 0.300000, 1.200000);
	PlayerTextDrawAlignment(playerid, PaintballTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, PaintballTD[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, PaintballTD[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PaintballTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, PaintballTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, PaintballTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][3], 0);

	PaintballTD[playerid][4] = CreatePlayerTextDraw(playerid, 591.727722, 205.750015, "9");
	PlayerTextDrawLetterSize(playerid, PaintballTD[playerid][4], 0.300000, 1.200000);
	PlayerTextDrawAlignment(playerid, PaintballTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, PaintballTD[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, PaintballTD[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PaintballTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, PaintballTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, PaintballTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][4], 0);

	PaintballTD[playerid][5] = CreatePlayerTextDraw(playerid, 573.455383, 232.000000, "lider_oyuncu");
	PlayerTextDrawLetterSize(playerid, PaintballTD[playerid][5], 0.200000, 1.200000);
	PlayerTextDrawAlignment(playerid, PaintballTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, PaintballTD[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, PaintballTD[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PaintballTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, PaintballTD[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, PaintballTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][5], 0);

	PaintballTD[playerid][6] = CreatePlayerTextDraw(playerid, 573.455383, 257.083343, "04:20");
	PlayerTextDrawLetterSize(playerid, PaintballTD[playerid][6], 0.200000, 1.200000);
	PlayerTextDrawAlignment(playerid, PaintballTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, PaintballTD[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, PaintballTD[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, PaintballTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, PaintballTD[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, PaintballTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][6], 0);

	PaintballTD[playerid][7] = CreatePlayerTextDraw(playerid, 606.720458, 278.083374, "8");
	PlayerTextDrawLetterSize(playerid, PaintballTD[playerid][7], 0.200000, 1.200000);
	PlayerTextDrawAlignment(playerid, PaintballTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, PaintballTD[playerid][7], -1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, PaintballTD[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, PaintballTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, PaintballTD[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, PaintballTD[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][7], 0);

	PaintballTD[playerid][8] = CreatePlayerTextDraw(playerid, 606.251953, 297.333404, "7");
	PlayerTextDrawLetterSize(playerid, PaintballTD[playerid][8], 0.200000, 1.200000);
	PlayerTextDrawAlignment(playerid, PaintballTD[playerid][8], 1);
	PlayerTextDrawColor(playerid, PaintballTD[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, PaintballTD[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, PaintballTD[playerid][8], 255);
	PlayerTextDrawFont(playerid, PaintballTD[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, PaintballTD[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][8], 0);
	return 1;
}
Dialog:Paintball(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(listitem == 0)
	    {
	        if(OdasiVarmi(playerid) != -1) return HataMesajGonder(playerid, "Paintball odanýz varken baþka odaya katýlamazsýnýz.");
			pbOdalari(playerid);
	    }
	    if(listitem == 1)
	    {
	        if(OdasiVarmi(playerid) != -1) return HataMesajGonder(playerid, "Zaten odanýz var, (/pboda) ile oda ayarlarýna eriþebilirsiniz.");
			if(PlayerData[playerid][pCash] < ODA_PARA) return HataMesajGonder(playerid, "Oda kurmak için yeterli paranýz yok.");
			for(new i=0; i != MAX_ODA; i++) if(!Paintball[i][odaExists])
			{
			    Paintball[i][odaExists] = true;
			    format(Paintball[i][odaIsim], 30, "Adsýz Oda");
			    format(Paintball[i][odaSifre], 30, "");
			    Paintball[i][odaSahip] = playerid;
			    format(Paintball[i][odaTakim1Ad], 20, "Takým 1");
			    format(Paintball[i][odaTakim2Ad], 20, "Takým 2");
			    Paintball[i][odaSilahlar][0] = 24;
			    Paintball[i][odaSilahlar][1] = 25;
			    Paintball[i][odaSilahlar][2] = 29;
			    Paintball[i][odaSilahlar][3] = 31;
			    Paintball[i][odaZirh] = 100;
			    Paintball[i][odaSure] = 5;
			    Paintball[i][odaSayac] = Paintball[i][odaSure]*60;
			    Paintball[i][odaOyunTuru] = 1;
			    Paintball[i][odaArena] = 1;
			    Paintball[i][odaPuan][0] = 0;
			    Paintball[i][odaPuan][1] = 0;
			    Paintball[i][TakimDengeleme] = true;
			    Paintball[i][odaDurum] = ODA_BEKLEME;
			    pbOda[playerid] = i;
			    break;
			}
			new str[100];
			if(pbOda[playerid] == -1) format(str, sizeof(str), "{FF0000}» {FFFFFF}Sunucuda en fazla %d Paintball odasý oluþturulabilir.", MAX_ODA);
			else format(str, sizeof(str), "{00FF11}» {FFFFFF}Odanýz baþarýyla oluþturuldu (ID: %d), (/pboda) ile odanýzý düzenleyebilirsiniz.", pbOda[playerid]), ParaVer(playerid, -ODA_PARA);
			SendClientMessage(playerid, -1, str);
	    }
	}
	return 1;
}
stock pbOdalari(playerid)
{
    new str[500], string[100], sayi = 0;
	strcat(str, "{FF0000}ID\t{FF0000}Ad\t{FF0000}Oyun Türü\t{FF0000}Maç Süresi\n");
	for(new i=0; i != MAX_ODA; i++) if(Paintball[i][odaExists])
	{
	    format(string, sizeof(string), "{58D67A}%d\t{58D67A}%s\t{58D67A}%s\t{58D67A}%d dk\n", i, Paintball[i][odaIsim], (Paintball[i][odaOyunTuru] == 1) ? ("TDM") : ("DM"), Paintball[i][odaSure]);
	    strcat(str, string);
	    sayi++;
	}
	if(sayi == 0) return HataMesajGonder(playerid, "Hiç oda yok.");
	format(string, sizeof(string), "{1DF21D}Odalar: %d", sayi);
	ShowPlayerDialog(playerid, DIALOG_KATIL, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Katýl", "Iptal");
	return 1;
}
stock GiseKontrolu(playerid)
{
	new str[128];

	format(str, sizeof(str), "{FFFFFF}Giþeler: \t%s\n", (AcilDurumMu() == 1) ? ("{f72e2e}Kapalý") : ("{7bf72d}Açýk"));

	Dialog_Show(playerid, Giseler, DIALOG_STYLE_TABLIST, "Giþeler", str, "Seç", "Kapat");
	return 1;
}

Dialog:Giseler(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (!AcilDurumMu())
	            {
		            AcilDurum = 1;

		            SendBirlikMessageEx(BIRLIK_LSPD, COLOR_DEPARTMENT, "* DEPARTMAN: Memur %s tarafýndan bütün giþeler kilitlendi.", ReturnName(playerid, 0));
		            SendBirlikMessageEx(BIRLIK_FBI, COLOR_DEPARTMENT, "* DEPARTMAN: Memur %s tarafýndan bütün giþeler kilitlendi.", ReturnName(playerid, 0));
	            }
	            else
	            {
	                AcilDurum = 0;

		            SendBirlikMessageEx(BIRLIK_LSPD, COLOR_DEPARTMENT, "* DEPARTMAN: Memur %s tarafýndan bütün giþeler açýldý.", ReturnName(playerid, 0));
		            SendBirlikMessageEx(BIRLIK_FBI, COLOR_DEPARTMENT, "* DEPARTMAN: Memur %s tarafýndan bütün giþeler açýldý.", ReturnName(playerid, 0));
	            }
	        }
	    }
	    GiseKontrolu(playerid);
	}
	return 1;
}

stock AcilDurumMu()
{
	if (AcilDurum == 1)
	    return true;

	return false;
}
Dialog:Standlar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new Float:pos[4], str[100];
     	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
     	GetPlayerFacingAngle(playerid, pos[3]);
      	pos[0] += (2 * floatsin(-pos[3], degrees));
   		pos[1] += (2 * floatcos(-pos[3], degrees));
	    switch(listitem)
	    {
	        case 0:
	        {
	            PlayerData[playerid][pStand] = true;
	            PlayerData[playerid][pStandObject] = CreateDynamicObject(1341, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				format(str, sizeof(str), "{a4f237}Stand\n{FFFFFF}Sahip: %s", ReturnName(playerid, 0));
				PlayerData[playerid][pStandText] = CreateDynamic3DTextLabel(str, -1, pos[0], pos[1], pos[2]+1.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				MesajGonder(playerid, "Stand koydunuz, (/stand) komutunu kullanarak kaldýrabilirsiniz.");
	        }
	        case 1:
	        {
	            PlayerData[playerid][pStand] = true;
	            PlayerData[playerid][pStandObject] = CreateDynamicObject(1342, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				format(str, sizeof(str), "{a4f237}Stand\n{FFFFFF}Yerleþtiren: %s", ReturnName(playerid, 0));
				PlayerData[playerid][pStandText] = CreateDynamic3DTextLabel(str, -1, pos[0], pos[1], pos[2]+1.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				MesajGonder(playerid, "Stand koydunuz, (/stand) komutunu kullanarak kaldýrabilirsiniz.");
	        }
	        case 2:
	        {
	            PlayerData[playerid][pStand] = true;
	            PlayerData[playerid][pStandObject] = CreateDynamicObject(1340, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				format(str, sizeof(str), "{a4f237}Stand\n{FFFFFF}Yerleþtiren: %s", ReturnName(playerid, 0));
				PlayerData[playerid][pStandText] = CreateDynamic3DTextLabel(str, -1, pos[0], pos[1], pos[2]+1.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				MesajGonder(playerid, "Stand koydunuz, (/stand) komutunu kullanarak kaldýrabilirsiniz.");
	        }
	    }
	}
	return 1;
}
Dialog:Mulklerim(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
	            callcmd::araclarim(playerid);
	        }
	        case 1:
	        {
	            EvListele(playerid, playerid);
	        }
	        case 2:
	        {
	            IsyeriListele(playerid, playerid);
	        }
	        case 3:
	        {
	            GateListele(playerid, playerid);
	        }
	        case 4:
	        {
	            callcmd::petlerim(playerid);
	        }
	        case 5:
	        {
	            GarajListele(playerid, playerid);
	        }
	    }
	}
	return 1;
}
stock GarajListele(playerid, id)
{
	new str[750], count;
	strcat(str, "ID\tTip\tPark Durumu\tAraç Limiti\n");
	for(new i; i<MAX_GARAGE; i++) if(GarageData[i][gExists] && GarageData[i][gSahip] == PlayerData[id][pID])
	{
	    count++;
	    format(str, sizeof(str), "%s{FFFFFF}%d\t{FFFFFF}%s\t%s\t{FFFFFF}%d\n", str, i, GarageData[i][gTip], (GarageData[id][gParkDurum]) ? ("{83e50b}Açýk") : ("{ff0000}Kapalý"), GarageData[id][gAracLimit]);
	}
	if(!count) return HataMesajGonder(playerid, "Hiç garaj yok.");
	Dialog_Show(playerid, Garajlarim, DIALOG_STYLE_TABLIST_HEADERS, "Garajlar", str, "Geri", "");
	return 1;
}
stock GateListele(playerid, id)
{
	new str[500], count;
	strcat(str, "ID\tAdres\n");
	for(new i; i<MAX_GATES; i++) if(GateData[i][gateExists] && GateData[i][gateOwner] == PlayerData[id][pID])
	{
	    count++;
	    format(str, sizeof(str), "%s%d\t%s, %s\n", str, i, GetLocation(GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2]), GetCityName(GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2]));
	}
	if(!count) return HataMesajGonder(playerid, "Hiç gate yok.");
	Dialog_Show(playerid, Evlerim, DIALOG_STYLE_TABLIST_HEADERS, "Gateleriniz", str, "Geri", "");
	return 1;
}
stock IsyeriListele(playerid, id)
{
	new str[500], count, tip[20];
	strcat(str, "ID\tAd\tAdres\tTip\n");
	for(new i; i<MAX_ISYERI; i++) if(Isyeri[i][isyeriExists] && Isyeri[i][isyeriSahip] == PlayerData[id][pID])
	{
	    count++;
	    switch(Isyeri[i][isyeriTip])
		{
		    case 1: tip = "Market";
		    case 2: tip = "Kiyafet Maðazasý";
		    case 3: tip = "Fast Food";
		    case 4: tip = "Araç Galerisi";
		    case 5: tip = "Elektronik";
		    case 6: tip = "Bar/Pub";
		    case 7: tip = "Kumarhane";
		}
	    format(str, sizeof(str), "%s%d\t%s\t%s, %s\t%s", str, i, Isyeri[i][isyeriName], GetLocation(Isyeri[i][isyeriPos][0], Isyeri[i][isyeriPos][1], Isyeri[i][isyeriPos][2]), GetCityName(Isyeri[i][isyeriPos][0], Isyeri[i][isyeriPos][1], Isyeri[i][isyeriPos][2]), tip);
	}
	if(!count) return HataMesajGonder(playerid, "Hiç iþyeri yok.");
	Dialog_Show(playerid, Evlerim, DIALOG_STYLE_TABLIST_HEADERS, "Ýþyerleriniz", str, "Geri", "");
	return 1;
}
stock EvListele(playerid, id)
{
	new str[1000], count;
	strcat(str, "ID\tAd\tAdres\n");
	for(new i; i<MAX_EV; i++) if(house_info[i][evExists] && house_info[i][evSahip] == PlayerData[id][pID])
	{
	    count++;
	    format(str, sizeof(str), "%s%d\t%s\t%s, %s\n", str, i, house_info[i][evIsim], GetLocation(house_info[i][evPos][0], house_info[i][evPos][1], house_info[i][evPos][2]), GetCityName(house_info[i][evPos][0], house_info[i][evPos][1], house_info[i][evPos][2]));
	}
	if(!count) return HataMesajGonder(playerid, "Hiç ev yok.");
	Dialog_Show(playerid, Evlerim, DIALOG_STYLE_TABLIST_HEADERS, "Evleriniz", str, "Geri", "");
	return 1;
}
Dialog:Evlerim(playerid, response, listitem, inputtext[])
{
	if(response) return callcmd::mulklerim(playerid);
	return 1;
}
CMD:kodekle(playerid, params[])
{
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
	new kod[20], para;
	if(sscanf(params, "is[20]", para, kod)) return BilgiMesajGonder(playerid, "/kodekle [Para] [Kod]");
	new query[128];
	mysql_format(baglanti, query, sizeof(query), "SELECT * FROM `kuponlar` WHERE `kod` = '%e'", kod);
	new Cache:sawyer = mysql_query(baglanti, query);
	if(cache_num_rows())
	{
		HataMesajGonder(playerid, "Bu kupon kodu zaten bulunuyor.");
	}
	else
	{
		mysql_format(baglanti, query, sizeof(query), "INSERT INTO `kuponlar` (`kod`, `para`) VALUES ('%e', '%d')", kod, para);
		mysql_tquery(baglanti, query);
		MesajGonder(playerid, "Kupon kodu oluþturuldu.");
	}
	cache_delete(sawyer);
	return 1;
}
CMD:kodsil(playerid, params[])
{
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
	new kod[20];
	if(sscanf(params, "s[20]", kod)) return BilgiMesajGonder(playerid, "/kodsil [Kod]");
	new query[128];
	mysql_format(baglanti, query, sizeof(query), "SELECT * FROM `kuponlar` WHERE `kod` = '%e'", kod);
	new Cache:sawyer = mysql_query(baglanti, query);
	if(cache_num_rows())
	{
		mysql_format(baglanti, query, sizeof(query), "DELETE FROM `kuponlar` WHERE `kod` = '%e'", kod);
		mysql_tquery(baglanti, query);
		MesajGonder(playerid, "Hediye kuponu silindi.");
	}else
	{
		HataMesajGonder(playerid, "Böyle bir kod yok.");
	}
	cache_delete(sawyer);
	return 1;
}
CMD:setadmin(playerid,params[])
{
	new id,level;
	if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pAdmin] < 0) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok!");
    if(sscanf(params,"ui",id,level)) return BilgiMesajGonder(playerid,"/setadmin [ID/Isim] [Level]");
    if(!OyundaDegil(id)) return HataMesajGonder(playerid,"Oyuncu giriþ yapmamýþ.");
    if(level < 0 || level > 5) return HataMesajGonder(playerid,"Level 0'dan küçük, 5'den fazla olamaz.");
    SendAdminAction(id,"%s Adlý yetkili tarafýndan %d seviye yetkili oldunuz.",PlayerData[playerid][pAdminName],level);
    SendAdminAction(playerid,"%s Adlý oyuncuyu %d seviye yetkili yaptýnýz.",ReturnName(id),level);
    if(level == 0)
    {
        if(PlayerData[id][pAdminDuty] == 1)
        {
            callcmd::aduty(id);
        }
	}
    PlayerData[id][pAdmin] = level;
    PlayerData[id][pHelper] = 0;
    Log_Write("logs/admin-log.log","[%s] %s Adli Admin %s Adli oyuncuyu %d seviye yetkili yapti.",ReturnDate(),ReturnName(playerid),ReturnName(id),level);
	return 1;
}
CMD:setyoutuber(playerid, params[])
{
	new id;
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pAdmin] < 5) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok!");
    if(sscanf(params,"u",id)) return BilgiMesajGonder(playerid,"/setyoutuber [ID/Isim]");
    if(!OyundaDegil(id)) return HataMesajGonder(playerid,"Oyuncu giriþ yapmamýþ.");
    if(PlayerData[id][pYoutuber] == 0)
    {
        PlayerData[id][pYoutuber] = 1;
        MesajGonder(playerid, "%s adlý kiþiye Youtuber & Streamer yetkisi verdiniz.", Player_GetName(id));
        BilgiMesajGonder(id, "%s adlý yetkili size Youtuber & Streamer yetkisi verdi. (/ytag)", PlayerData[playerid][pAdminName]);
    }
    else
    {
        PlayerData[id][pYoutuber] = 0;
        PlayerData[id][pYoutuberTag] = false;
        MesajGonder(playerid, "%s adlý kiþinin Youtuber & Streamer yetkisini sildiniz.", Player_GetName(id));
        BilgiMesajGonder(id, "%s adlý yetkili tarafýndan Youtuber & Streamer yetkiniz silindi.", PlayerData[playerid][pAdminName]);
	}
	return 1;
}
CMD:sethelper(playerid,params[])
{
	new id,level;
	if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok!");
    if(sscanf(params,"ui",id,level)) return BilgiMesajGonder(playerid,"/sethelper [ID/Isim] [Level]");
    if(!OyundaDegil(id)) return HataMesajGonder(playerid,"Oyuncu giriþ yapmamýþ.");
    if(level < 0 || level > 5) return HataMesajGonder(playerid,"Level 0'dan küçük, 5'den fazla olamaz.");
    SendAdminAction(id,"%s Adlý yetkili tarafýndan %d seviye helper oldunuz.",PlayerData[playerid][pAdminName],level);
    SendAdminAction(playerid,"%s Adlý oyuncuyu %d seviye helper yaptýnýz.",ReturnName(id),level);
    if(level == 0)
    {
        if(PlayerData[id][pHelperDuty] == 1)
        {
            callcmd::hduty(id);
        }
	}
    PlayerData[id][pHelper] = level;
    PlayerData[id][pAdmin] = 0;
    Log_Write("logs/admin-log.log","[%s] %s Adli Admin %s Adli oyuncuyu %d seviye helper yapti.",ReturnDate(),ReturnName(playerid),ReturnName(id),level);
	return 1;
}
CMD:binaekle(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");

    if (isnull(params) || strlen(params) > 32)
        return BilgiMesajGonder(playerid, "/binaekle [ad]");

    new id = Entrance_Create(playerid, params);

    if (id == -1)
        return HataMesajGonder(playerid, "Sunucu bina sýnýrýna ulaþmýþtýr.");

    MesajGonder(playerid, "Baþarýyla bina oluþturdun, ID: %d.", id);
    return 1;
}
CMD:arsaolustur(playerid, params[])
{
	new tip, metrekare, fiyat, maxtohum;
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
    if(sscanf(params, "iiii", tip, metrekare, fiyat, maxtohum)) return BilgiMesajGonder(playerid, "/arsaolustur [Tip 1 - Satýlýk 2 - Kiralýk] [Metrekare] [Fiyat] [Max Tohum]");
    if(tip < 1 || tip > 2) return HataMesajGonder(playerid, "Geçersiz tip girdiniz, 1 veya 2 olmalýdýr.");
    if(metrekare < 10 || metrekare > 100) return HataMesajGonder(playerid, "Metrekare 10 ile 100 arasýnda olmalýdýr.");

    new id = Arsa_Olustur(playerid, tip, metrekare, fiyat, maxtohum);
    if(id == -1) return HataMesajGonder(playerid, "Sunucuda daha fazla arsa oluþturulamaz.");
    MesajGonder(playerid, "Arsa oluþturuldu, ID: %d.", id);
	return 1;
}
CMD:arsasil(playerid, params[])
{
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
    new id;
    if(sscanf(params, "i", id)) return BilgiMesajGonder(playerid, "/arsasil [ID]");
    if ((id < 0 || id >= MAX_ARSA) || !ArsaBilgi[id][arsaExists]) return HataMesajGonder(playerid, "Geçersiz ID.");
    Arsa_Sil(id);
    MesajGonder(playerid, "Arsa silindi");
	return 1;
}
CMD:arsaduzenle(playerid, params[])
{
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
    static
        id,
        type[24],
        string[128];

    if (sscanf(params, "ds[24]S()[128]", id, type, string))
    {
        BilgiMesajGonder(playerid, "/arsaduzenle [ID] [Ayar]");
        return SendClientMessage(playerid, COLOR_YELLOW, "[AYARLAR]: {FFFFFF}tip, pozisyon, fiyat, maxtohum, metrekare");
    }
    if ((id < 0 || id >= MAX_ARSA) || !ArsaBilgi[id][arsaExists]) return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");
    if(!strcmp(type, "tip", true))
    {
        if(isnull(string)) return BilgiMesajGonder(playerid, "/arsaduzenle [ID] [tip] [1 - Satýlýk 2 - Kiralýk]");
        if(strval(string) < 1 || strval(string) > 2) return HataMesajGonder(playerid, "Geçersiz tip.");
        ArsaBilgi[id][arsaTip] = strval(string);
        Arsa_Kaydet(id);
        ArsaUpdate(id);
        return 1;
    }
    if(!strcmp(type, "pozisyon", true))
    {
        GetPlayerPos(playerid, ArsaBilgi[id][arsaPos][0], ArsaBilgi[id][arsaPos][1], ArsaBilgi[id][arsaPos][2]);
        Arsa_Kaydet(id);
        ArsaUpdate(id);
        return 1;
    }
    if(!strcmp(type, "fiyat", true))
    {
        if(isnull(string)) return BilgiMesajGonder(playerid, "/arsaduzenle [ID] [fiyat] [Fiyat]");
        ArsaBilgi[id][arsaFiyat] = strval(string);
        Arsa_Kaydet(id);
        ArsaUpdate(id);
        return 1;
    }
    if(!strcmp(type, "maxtohum", true))
    {
        if(isnull(string)) return BilgiMesajGonder(playerid, "/arsaduzenle [ID] [maxtohum] [Tohum Kapasitesi]");
        ArsaBilgi[id][arsaMaxTohum] = strval(string);
        Arsa_Kaydet(id);
        ArsaUpdate(id);
        return 1;
    }
    if(!strcmp(type, "metrekare", true))
    {
        if(isnull(string)) return BilgiMesajGonder(playerid, "/arsaduzenle [ID] [metrekare] [Metrekare]");
        ArsaBilgi[id][Metrekare] = strval(string);
        Arsa_Kaydet(id);
        ArsaUpdate(id);
        return 1;
    }
	return 1;
}
CMD:npcekle(playerid)
{
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
    for(new i; i<MAXIMUM_NPC; i++) if(NPCBilgi[i][npcExists] == false)
    {
        NPCBilgi[i][npcExists] = true;
        format(NPCBilgi[i][npcAd], 24, "Yok");
        NPCBilgi[i][npcSkin] = 1;
        GetPlayerPos(playerid, NPCBilgi[i][npcPos][0], NPCBilgi[i][npcPos][1], NPCBilgi[i][npcPos][2]);
        GetPlayerFacingAngle(playerid, NPCBilgi[i][npcPos][3]);
        NPCBilgi[i][npcVw] = GetPlayerVirtualWorld(playerid);
        NPCSecenekler[i][0] = "Yok";
        NPCSecenekler[i][1] = "Yok";
        NPCSecenekler[i][2] = "Yok";
        NPCSecenekler[i][3] = "Yok";
        NPCSecenekler[i][4] = "Yok";
        NPCSecenekCevaplar[i][0] = "Yok";
        NPCSecenekCevaplar[i][1] = "Yok";
        NPCSecenekCevaplar[i][2] = "Yok";
        NPCSecenekCevaplar[i][3] = "Yok";
        NPCSecenekCevaplar[i][4] = "Yok";
        NPC_Refresh(i);
        mysql_tquery(baglanti, "INSERT INTO `npcler` (`npcSkin`) VALUES (1)","OnNPCCreated", "d", i);
        MesajGonder(playerid, "NPC Eklendi, (/npcduzenle) komutu ile düzenleyebilirsiniz. (ID: %d)", i);
        return 1;
    }
    HataMesajGonder(playerid, "Sunucu maksimum NPC limitine ulaþmýþtýr.");
	return 1;
}
CMD:npcduzenle(playerid, params[])
{
    static
        id,
        type[24],
        string[128];

    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
    if (sscanf(params, "ds[24]S()[128]", id, type, string))
    {
        BilgiMesajGonder(playerid, "/npcduzenle [ID] [Ayar]");
        return SendClientMessage(playerid, COLOR_YELLOW, "[AYARLAR]: {FFFFFF}ad, pozisyon, skin, secenekler");
    }
    if ((id < 0 || id >= MAXIMUM_NPC) || !NPCBilgi[id][npcExists]) return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");
    if(!strcmp(type, "ad", true))
    {
        new name[32];

        if (sscanf(string, "s[32]", name))
            return BilgiMesajGonder(playerid, "/npcduzenle [id] [ad] [yeni ad]");

        format(NPCBilgi[id][npcAd], 24, name);

        NPC_Refresh(id);
        NPC_Save(id);
    }
    if(!strcmp(type, "pozisyon", true))
    {
        GetPlayerPos(playerid, NPCBilgi[id][npcPos][0], NPCBilgi[id][npcPos][1], NPCBilgi[id][npcPos][2]);
        GetPlayerFacingAngle(playerid, NPCBilgi[id][npcPos][3]);
        NPCBilgi[id][npcVw] = GetPlayerVirtualWorld(playerid);

        NPC_Refresh(id);
        NPC_Save(id);
    }
    if(!strcmp(type, "skin", true))
    {
        new skin;
        if (sscanf(string, "d", skin)) return BilgiMesajGonder(playerid, "/npcduzenle [id] [skin] [Skin ID]");
        if(skin < 1 || skin > 311) return HataMesajGonder(playerid, "Geçersiz Skin ID.");
        NPCBilgi[id][npcSkin] = skin;
        NPC_Refresh(id);
        NPC_Save(id);
    }
    if(!strcmp(type, "secenekler", true))
    {
        NPC_Secenekler(playerid, id);
    }
	return 1;
}
CMD:npcsil(playerid, params[])
{
	new id;
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
    if(sscanf(params, "i", id)) return BilgiMesajGonder(playerid, "/npcsil [ID]");
    if ((id < 0 || id >= MAXIMUM_NPC) || NPCBilgi[id][npcExists] == false) return HataMesajGonder(playerid, "Geçersiz ID.");
    DestroyDynamic3DTextLabel(NPCBilgi[id][npcLabel]);
    DestroyDynamicActor(NPCBilgi[id][npcActor]);
    new query[124];
    format(query, sizeof(query), "DELETE FROM `npcler` WHERE `npcID` = '%d'", NPCBilgi[id][npcID]);
    mysql_query(baglanti, query, false);
    MesajGonder(playerid, "NPC Silindi, ID: %d", id);
	return 1;
}
CMD:labelyarat(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok");
	new labeladi[90], labelid;
	if(sscanf(params, "s[90]", labeladi))
		return BilgiMesajGonder(playerid, "/labelyarat [label adý]");
	if(!(1 <= strlen(labeladi) <= MAX_LABEL_ADI))
		return HataMesajGonder(playerid, "Labellerin adý 1 ve "#MAX_LABEL_ADI" arasýnda olmalýdýr.");

	labelid = BosLabelID();
	if(labelid == -1)
		return HataMesajGonder(playerid, "Label sýnýrýna ulaþtýnýz veya farklý bir sorun var.");

	GetPlayerPos(playerid, Label[labelid][Pos][0], Label[labelid][Pos][1], Label[labelid][Pos][2]);

	DuzenleLabelID[playerid] = labelid;
	DuzenleLabel[playerid] = true;

	Label[labelid][Duzenleniyor] = 1;
	Label[labelid][VW] = GetPlayerVirtualWorld(playerid);
	Label[labelid][Int] = GetPlayerInterior(playerid);
	Label[labelid][Mesafe] = 20.0;
	Label[labelid][Renk] = 0xFFFFFFFF;
 	strcpy(Label[labelid][LabelAdi], labeladi, 90);
	Label[labelid][objeID] = CreateDynamicObject(19482, Label[labelid][Pos][0]+1.0, Label[labelid][Pos][1]-1.0, Label[labelid][Pos][2], 0.0, 0.0, 0.0, Label[labelid][VW], Label[labelid][Int]);
	Label[labelid][ID] = CreateDynamic3DTextLabel(Label[labelid][LabelAdi], Label[labelid][Renk], Label[labelid][Pos][0]+1.0, Label[labelid][Pos][1]-1.0, Label[labelid][Pos][2], Label[labelid][Mesafe], INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Label[labelid][VW], Label[labelid][Int], -1);
 	MesajGonder(playerid, "Label yarattýn ID: %d - Label Adý: %s", labelid, labeladi);
	LabelYarat(labelid, labeladi, Label[labelid][Renk], Label[labelid][VW], Label[labelid][Int], Label[labelid][Pos][0], Label[labelid][Pos][1], Label[labelid][Pos][2], Label[labelid][Mesafe]);
	EditDynamicObject(playerid, Label[labelid][objeID]);
	return 1;
}

CMD:labelduzenle(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok");
	new labelid, secim[25], miktar[90];
	if(sscanf(params, "ds[25]S(-1)[90]", labelid, secim, miktar))
	{
		BilgiMesajGonder(playerid, "/labelduzenle [label ID] [Seçenek] [miktar]");
		BilgiMesajGonder(playerid, "Seçenek: labeladi - pos - mesafe - renk");
		return 1;
	}
	if(!(0 <= labelid <= MAX_LABEL))
		return HataMesajGonder(playerid, "Label idleri 0-"#MAX_LABEL" arasýndadýr.");

	if(fexist(LabelDosya(labelid)))
	{
		if(strcmp(secim, "labeladi", true) == 0)
		{
			if(strval(miktar) == -1)
			{
				BilgiMesajGonder(playerid, "/labelduzenle [label ID] [Seçenek] [deðer]");
				BilgiMesajGonder(playerid, "Seçenek: labeladi - pos - mesafe - renk");
				return 1;
			}
			if(!(1 <= strlen(miktar) <= MAX_LABEL_ADI))
				return MesajGonder(playerid, "Labellerin adý 1 ve "#MAX_LABEL_ADI" arasýnda olmalýdýr.");
			MesajGonder(playerid, "ID: %d - Labelin adýný %s yaptýn.", labelid, miktar);
			strcpy(Label[labelid][LabelAdi], miktar, 90);
			UpdateDynamic3DTextLabelText(Label[labelid][ID], Label[labelid][Renk], Label[labelid][LabelAdi]);
			LabelGuncelle(labelid);
		}
		if(strcmp(secim, "pos", true) == 0)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 10, Label[labelid][Pos][0], Label[labelid][Pos][1], Label[labelid][Pos][2]))
				return HataMesajGonder(playerid, "Labele yakýn deðilsin.");
			if(Label[labelid][Duzenleniyor] == 1)
				return HataMesajGonder(playerid, "Bu label düzenleniyor.");

			DuzenleLabelID[playerid] = labelid;
			DuzenleLabel[playerid] = true;
			Label[labelid][Duzenleniyor] = 1;
			MesajGonder(playerid, "ID: %d - Labeli düzenledin.", labelid);
		   	EditDynamicObject(playerid, Label[labelid][objeID]);
		}
		if(strcmp(secim, "mesafe", true) == 0)
		{
			if(strval(miktar) == -1)
			{
				BilgiMesajGonder(playerid, "/labelduzenle [label ID] [Seçenek] [deðer]");
				BilgiMesajGonder(playerid, "[Seçenek]: labeladi - pos - mesafe - renk");
				return 1;
			}
			if(!(1 <= strval(miktar) <= MAX_LABEL_MESAFE))
				return HataMesajGonder(playerid, "Labellerin mesafesi 1.0 ve "#MAX_LABEL_MESAFE" arasýnda olmalýdýr.");
			Label[labelid][Mesafe] = floatstr(miktar);
			MesajGonder(playerid, "ID: %d - Labelin mesafesini %f yaptýn.", labelid, Label[labelid][Mesafe]);
			if(IsValidDynamic3DTextLabel(Label[labelid][ID]))
				DestroyDynamic3DTextLabel(Label[labelid][ID]);
			Label[labelid][ID] = CreateDynamic3DTextLabel(Label[labelid][LabelAdi], Label[labelid][Renk], Label[labelid][Pos][0], Label[labelid][Pos][1], Label[labelid][Pos][2], Label[labelid][Mesafe], INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Label[labelid][VW], Label[labelid][Int], -1);
			LabelGuncelle(labelid);
		}
		if(strcmp(secim, "renk", true) == 0)
		{
			if(strval(miktar) == -1)
			{
				BilgiMesajGonder(playerid, "/labelduzenle [label ID] [Seçenek] [deðer]");
				BilgiMesajGonder(playerid, "[Seçenek]: labeladi - pos - mesafe - renk");
				return 1;
			}
			if(strlen(miktar) != 10)
				return HataMesajGonder(playerid, "Labellerin rengi þu þekilde olmalýdýr: 0xFFFFFFFF");

			new cikti, renk[50];
			format(renk, sizeof(renk), "%s", miktar);
			sscanf(renk, "x", cikti);
			Label[labelid][Renk] = cikti;
			MesajGonder(playerid, "ID: %d - Label rengini %s yaptýn.", labelid, renk);
			UpdateDynamic3DTextLabelText(Label[labelid][ID], Label[labelid][Renk], Label[labelid][LabelAdi]);
			LabelGuncelle(labelid);
		}
	}
	else
	{
		MesajGonder(playerid, " %d idli label yok.", labelid);
	}
	return 1;
}

CMD:labelsil(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok");
	new labelid;
	if(sscanf(params, "d", labelid))
		return BilgiMesajGonder(playerid, "/labelsil [label ID]");

	if(!(0 <= labelid <= MAX_LABEL))
		return HataMesajGonder(playerid, "Label idleri 0-"#MAX_LABEL" arasýndadýr.");

	if(fexist(LabelDosya(labelid)))
	{
		DestroyDynamicObject(Label[labelid][objeID]);
		DestroyDynamic3DTextLabel(Label[labelid][ID]);
		Label[labelid][ID] = Text3D: INVALID_3DTEXT_ID;
		Label[labelid][Pos][0] = Label[labelid][Pos][1] = Label[labelid][Pos][2] = 0.0;
		strcpy(Label[labelid][LabelAdi], "-", MAX_LABEL_ADI);
		MesajGonder(playerid, " %d idli labeli sildin.", labelid);
		fremove(LabelDosya(labelid));
	}
	else
	{
		MesajGonder(playerid, " %d idli label yok.", labelid);
	}
	return 1;
}

CMD:labelgit(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok");
	new labelid;
	if(sscanf(params, "d", labelid))
		return BilgiMesajGonder(playerid, "/labelgit [label ID]");

	if(!(0 <= labelid <= MAX_LABEL))
		return HataMesajGonder(playerid, "Label idleri 0-"#MAX_LABEL" arasýndadýr.");

	if(fexist(LabelDosya(labelid)))
	{
		SetPlayerPos(playerid, Label[labelid][Pos][0], Label[labelid][Pos][1], Label[labelid][Pos][2]+0.5);
		SetPlayerInterior(playerid, Label[labelid][Int]);
		SetPlayerVirtualWorld(playerid, Label[labelid][VW]);
		MesajGonder(playerid, " %d idli labele ýþýnlandýn.", labelid);
	}
	else
	{
		MesajGonder(playerid, " %d idli label yok.", labelid);
	}
	return 1;
}

CMD:labelyakin(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok");
	BilgiMesajGonder(playerid, "Yakýnýndaki labellerin listesi:");
	for(new labelid = 0; labelid < MAX_LABEL; labelid++)
	{
		if(Label[labelid][Pos][0] >= 1)
		{
	 		if(IsPlayerInRangeOfPoint(playerid, 20, Label[labelid][Pos][0], Label[labelid][Pos][1], Label[labelid][Pos][2]))
			{
				MesajGonder(playerid, "Label ID: %d - Label Adý: %s", labelid, Label[labelid][LabelAdi]);
			}
		}
	}
	return 1;
}
CMD:gotopos(playerid,params[])
{
	new intid,Float:pos[3];
	if(!OyundaDegil(playerid)) return 1;
	if(PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok");
	if(PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Bunu þu an yapamazsýnýz.");
	if(sscanf(params,"ifff",intid,pos[0],pos[1],pos[2])) return BilgiMesajGonder(playerid,"/gotopos [INT ID] [X] [Y] [Z]");
	SetPlayerInterior(playerid,intid);
	SetPlayerPos(playerid,pos[0],pos[1],pos[2]);
	return 1;
}
CMD:x(playerid, params[])
{
    new Float:posx, Float:posy, Float:posz, Float:npos;
    if(PlayerData[playerid][pAdmin] >= 1)
    {
        if(sscanf(params, "f", npos)) return BilgiMesajGonder(playerid, "/x [Kordinat]");
        GetPlayerPos(playerid, posx, posy, posz);
        SetPlayerPos(playerid, posx+npos, posy, posz);
        return 1;
    }
    else return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
}
CMD:y(playerid, params[])
{
    new Float:posx, Float:posy, Float:posz, Float:npos;
    if(PlayerData[playerid][pAdmin] >= 1)
    {
        if(sscanf(params, "f", npos)) return BilgiMesajGonder(playerid, "/y [Kordinat]");
        GetPlayerPos(playerid, posx, posy, posz);
        SetPlayerPos(playerid, posx, posy+npos, posz);
        return 1;
    }
    else return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
}
CMD:z(playerid, params[])
{
    new Float:posx, Float:posy, Float:posz, Float:npos;
    if(PlayerData[playerid][pAdmin] >= 1)
    {
        if(sscanf(params, "f", npos)) return BilgiMesajGonder(playerid, "/z [Kordinat]");
        GetPlayerPos(playerid, posx, posy, posz);
        SetPlayerPos(playerid, posx, posy, posz+npos);
        return 1;
    }
    else return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
}
CMD:binaduzenle(playerid, params[])
{
    static
        id,
        type[24],
        string[128];

    if (PlayerData[playerid][pAdmin] < 3)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "ds[24]S()[128]", id, type, string))
    {
        BilgiMesajGonder(playerid, "/binaduzenle [id] [Parametre]");
        SendClientMessage(playerid, COLOR_YELLOW, "[PARAMETRELER]:{FFFFFF} pozisyon, interior, sifre, isim, kilit, mapicon, vw, garajbaglanti");
        return 1;
    }
    if ((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
        return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");

	if(!strcmp(type, "vw", true))
	{
	    new vw;
	    if (sscanf(string, "d", vw))
            return BilgiMesajGonder(playerid, "/binaduzenle [id] [vw] [Vw] (-1 yazarsanýz otomatik virtual world ayarlanýr)");

        EntranceData[id][entranceInteriorVw] = vw;
        Entrance_Save(id);
	}
	if(!strcmp(type, "garajbaglanti", true))
	{
	    new garaj;
	    if (sscanf(string, "d", garaj))
            return BilgiMesajGonder(playerid, "/binaduzenle [id] [garajbaglanti] [Garaj ID] (-1 yazarsanýz hiçbir garaj ile baðlantýsý olmaz)");
        if ((garaj < 0 || garaj >= MAX_GARAGE) || !GarageData[garaj][gExists])
	    return HataMesajGonder(playerid, "Hatalý garaj ID girdiniz.");

        EntranceData[id][entranceBaglanti] = garaj;
        Entrance_Save(id);
	}
    if (!strcmp(type, "pozisyon", true))
    {
        GetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
        GetPlayerFacingAngle(playerid, EntranceData[id][entrancePos][3]);

        EntranceData[id][entranceExterior] = GetPlayerInterior(playerid);
        EntranceData[id][entranceExteriorVW] = GetPlayerVirtualWorld(playerid);

        Entrance_Refresh(id);
        Entrance_Save(id);

        AdminMessage(COLOR_LIGHTRED, "*** %s adlý yetkili %d ID'li binanýn pozisyonunu deðiþtirdi.", PlayerData[playerid][pAdminName], id);
    }
    else if (!strcmp(type, "interior", true))
    {
        GetPlayerPos(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
        GetPlayerFacingAngle(playerid, EntranceData[id][entranceInt][3]);

        EntranceData[id][entranceInterior] = GetPlayerInterior(playerid);
        Entrance_Save(id);
        AdminMessage(COLOR_LIGHTRED, "*** %s adlý yetkili %d ID'li binanýn interiorunu deðiþtirdi.", PlayerData[playerid][pAdminName], id);
    }
    else if (!strcmp(type, "mapicon", true))
    {
        new icon;

        if (sscanf(string, "d", icon))
            return BilgiMesajGonder(playerid, "/binaduzenle [id] [mapicon] [map icon]");

        if (icon < 0 || icon > 63)
            return HataMesajGonder(playerid, "Geçersiz Map Icon ID.");

        EntranceData[id][entranceIcon] = icon;

        Entrance_Refresh(id);
        Entrance_Save(id);

        AdminMessage(COLOR_LIGHTRED, "*** %s adlý yetkili %d ID'li binanýn mapiconunu %d olarak ayarladý.", PlayerData[playerid][pAdminName], id, icon);
    }
    else if (!strcmp(type, "sifre", true))
    {
        new password[32];

        if (sscanf(string, "s[32]", password))
            return BilgiMesajGonder(playerid, "/binaduzenle [id] [sifre] [Þifre] (Kapatmak için 'yok' yazýn)");

        if (!strcmp(password, "yok", true)) {
            EntranceData[id][entrancePass][0] = 0;
        }
        else {
            format(EntranceData[id][entrancePass], 32, password);
        }
        Entrance_Save(id);
        AdminMessage(COLOR_LIGHTRED, "*** %s adlý yetkili %d ID'li býnanýn þifresini deðiþtirdi.", PlayerData[playerid][pAdminName], id);
    }
    else if (!strcmp(type, "kilit", true))
    {
		if(EntranceData[id][entranceLocked] == 1)
		{
		    EntranceData[id][entranceLocked] = 0;
		    AdminMessage(COLOR_LIGHTRED, "*** %s adlý yetkili tarafýndan %d ID'li býnanýn kilidi açýldý.", PlayerData[playerid][pAdminName], id);
		}
		else
		{
		    EntranceData[id][entranceLocked] = 1;
		    AdminMessage(COLOR_LIGHTRED, "*** %s adlý yetkili tarafýndan %d ID'li bina kilitlendi.", PlayerData[playerid][pAdminName], id);
		}
        Entrance_Save(id);
    }
    else if (!strcmp(type, "isim", true))
    {
        new name[32];

        if (sscanf(string, "s[32]", name))
            return BilgiMesajGonder(playerid, "/binaduzenle [id] [isim] [yeni isim]");

        format(EntranceData[id][entranceName], 32, name);

        Entrance_Refresh(id);
        Entrance_Save(id);

        AdminMessage(COLOR_LIGHTRED, "*** %s adlý yetkili %d ID'li binanýn ismini %s olarak ayarladý.", PlayerData[playerid][pAdminName], id, name);
    }
    return 1;
}
CMD:binasil(playerid, params[])
{
    static
        id = 0;

    if (PlayerData[playerid][pAdmin] < 3)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "d", id))
        return BilgiMesajGonder(playerid, "/binasil [bina id]");

    if ((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
        return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");

    Entrance_Delete(id);
    MesajGonder(playerid, "Bina silindi, ID: %d", id);
    return 1;
}

CMD:a(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok");

	if (isnull(params))
	    return BilgiMesajGonder(playerid, "/a [Mesaj]");

	foreach(new i:Player) if(PlayerData[i][pAdmin] >= 1 && PlayerData[i][pAyarlar][6] == 0)
	{
	    if(strlen(params) > 64)
	    {
	        SendClientMessageEx(i, COLOR_ADMINCHAT, "** %s %s: {FFFFFF}%.64s", GetAdminRank(playerid), PlayerData[playerid][pAdminName], params);
	        SendClientMessageEx(i, COLOR_ADMINCHAT, "{FFFFFF}...%s", params[64]);
	    }
	    else
	    {
	        SendClientMessageEx(i, COLOR_ADMINCHAT, "** %s %s: {FFFFFF}%s **", GetAdminRank(playerid), PlayerData[playerid][pAdminName], params);
	    }
	}
 	Log_Write("logs/admin-log.log","[ADMIN CHAT] %s: %s",ReturnName(playerid, 0), trcar(params));
	return 1;
}
CMD:setstaffname(playerid,params[])
{
	new id,name[24];
	if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok");
	if(sscanf(params,"us[24]",id,name)) return BilgiMesajGonder(playerid,"/setstaffname [ID/Isim] [Isim]");
	if(!OyundaDegil(id)) return HataMesajGonder(playerid,"Oyuncu giriþ yapmamýþ.");
	if(strlen(name) < 3 || strlen(name) > 24) return HataMesajGonder(playerid,"Ýsim 3 ile 24 karakter arasýnda olmalýdýr.");
	if(TurkceKarakter(name)) return HataMesajGonder(playerid,"Ýsim özel karakterler ve türkçe karakterler içeremez.");
	format(PlayerData[id][pAdminName],24,name);
	//SendAdminAction(id,"%s Adlý yetkili Admin adýnýzý '%s' olarak ayarladý.",ReturnName(playerid),name);
	SendAdminAction(playerid,"%s Adlý oyuncunun Admin adýný '%s' olarak ayarladýn.",ReturnName(id),name);
	Log_Write("logs/admin-log.log","[%s] %s Adli Admin %s Adli oyuncunun admin adini %s yapti.",ReturnDate(),ReturnName(playerid),ReturnName(id),name);
	return 1;
}
CMD:aduty(playerid)
{
    if(PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok!");
    if(!PlayerData[playerid][pAdminDuty])
    {
        PlayerData[playerid][pAdminDuty] = 1;
        MesajGonder(playerid,"Ýþbaþý yaptýnýz.");
    }
    else
    {
        PlayerData[playerid][pAdminDuty] = 0;
        PlayerData[playerid][pGOD] = false;
        SetPlayerHealth(playerid, 100);
        MesajGonder(playerid,"Ýþbaþýndan çýktýnýz.");
	}
	return 1;
}
CMD:apark(playerid, params[])
{
	new id, garajid;
    if(PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok!");
    if(sscanf(params, "ii", id, garajid)) return BilgiMesajGonder(playerid, "/apark [Araç ID] [Garaj ID] (garajda deðilse -1 yaz)");
	if(!IsValidVehicle(id)) return HataMesajGonder(playerid, "Geçersiz Araç ID.");
	new vehicleid = Car_GetID(id);
	if(vehicleid == -1) return HataMesajGonder(playerid, "Geçersiz Araç ID.");
	GetVehiclePos(AracInfo[vehicleid][aracVehicle], AracInfo[vehicleid][aracPos][0],AracInfo[vehicleid][aracPos][1], AracInfo[vehicleid][aracPos][2]);
	GetVehicleZAngle(AracInfo[vehicleid][aracVehicle], AracInfo[vehicleid][aracPos][3]);
	AracInfo[vehicleid][aracGaraj] = garajid;
	AracInfo[vehicleid][aracInterior] = CarInterior[id];
	AracInfo[vehicleid][aracWorld] = GetVehicleVirtualWorld(id);
	Arac_Kaydet(vehicleid);
	Arac_Spawn(vehicleid);
	MesajGonder(playerid, "Araç park edildi.");
	return 1;
}
CMD:hduty(playerid)
{
    if(PlayerData[playerid][pHelper] < 1) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok!");
    if(!PlayerData[playerid][pHelperDuty])
    {
        PlayerData[playerid][pHelperDuty] = 1;
        MesajGonder(playerid,"Ýþbaþý yaptýnýz.");
    }
    else
    {
        PlayerData[playerid][pHelperDuty] = 0;
        MesajGonder(playerid,"Ýþbaþýndan çýktýnýz.");
	}
	return 1;
}
CMD:aracolustur(playerid,params[])
{
	new model,color1,color2,tip,id = -1, idx;
	if(PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok");
	if(sscanf(params,"iiiii",model,color1,color2,tip,idx))
	{
	    BilgiMesajGonder(playerid,"/aracolustur [Model ID] [Renk 1] [Renk 2] [Tip] [Faction ID/Kira Ucret/Fiyat]");
	    SendClientMessage(playerid,-1,"{00FF15}[TIP]: {FFFFFF}1: Birlik Aracý 2: Meslek Aracý 3: Kiralýk 4: Normal Araç 5: VIP Aracý");
	    return 1;
 	}
 	if(!IsValidVehicleModel(model)) return HataMesajGonder(playerid,"Hatalý Model ID");
 	if(tip < 1 || tip > 5) return HataMesajGonder(playerid,"Tip 1 ile 5 arasýnda olmalýdýr.");
    static
	    Float:x,
		Float:y,
		Float:z,
		Float:angle;

    GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);
	id = Arac_Olustur(-1,model,GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), Garage_Inside(playerid), x,y,z,angle,color1,color2,tip,idx);
	if(id == -1) return HataMesajGonder(playerid,"Sunucu maksimum araç sayýsýna ulaþmýþtýr.");
	AracInfo[id][aracDisplay] = true;
	SetVehicleVirtualWorld(AracInfo[id][aracVehicle], GetPlayerVirtualWorld(playerid));
	SetPlayerPos(playerid,x,y,z+2);
	MesajGonder(playerid, "Araç oluþturuldu, ID: %d.", AracInfo[id][aracVehicle]);
	return 1;
}
CMD:aracsil(playerid,params[])
{
	new id = 0;
	if(PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok");
	if (sscanf(params, "d", id))
 	{
	 	if (IsPlayerInAnyVehicle(playerid))
		 	id = GetPlayerVehicleID(playerid);

		else return BilgiMesajGonder(playerid, "/aracsil [Araç ID]");
	}
	if (!IsValidVehicle(id) || Car_GetID(id) == -1) return HataMesajGonder(playerid, "Hatalý Araç ID.");
	Arac_Sil(Car_GetID(id));
	MesajGonder(playerid, "Araç silindi, ID: %d.", id);
	return 1;
}
CMD:gateolustur(playerid)
{
	static id = -1;
	if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok");
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;
 	GetPlayerPos(playerid,x,y,z);
  	GetPlayerFacingAngle(playerid,angle);
	id = Gate_Create(x,y,z,angle,GetPlayerInterior(playerid),GetPlayerVirtualWorld(playerid));
	if(id == -1) return HataMesajGonder(playerid,"Sunucu maksimum gate limitine ulaþtý.");
	MesajGonder(playerid,"Gate oluþturuldu, ID: %d",id);
	return 1;
}
CMD:gateduzenle(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 4)
	    return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	BilgiMesajGonder(playerid, "/gateduzenle [ID] [Ýsim]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[ISIM]:{FFFFFF} bolge, hiz, radius, zaman, model, pos, hareket, sifre, linkid, faction, sahip, world");
		return 1;
	}
	if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
	    return HataMesajGonder(playerid, "Hatalý Gate ID girdiniz.");

    if (!strcmp(type, "bolge", true))
	{
		static
		    Float:x,
		    Float:y,
		    Float:z,
		    Float:angle;

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		x += 3.0 * floatsin(-angle, degrees);
		y += 3.0 * floatcos(-angle, degrees);

		GateData[id][gatePos][0] = x;
		GateData[id][gatePos][1] = y;
		GateData[id][gatePos][2] = z;
		GateData[id][gatePos][3] = 0.0;
		GateData[id][gatePos][4] = 0.0;
		GateData[id][gatePos][5] = angle;

		SetDynamicObjectPos(GateData[id][gateObject], x, y, z);
		SetDynamicObjectRot(GateData[id][gateObject], 0.0, 0.0, angle);

		GateData[id][gateOpened] = false;

		Gate_Save(id);
		return 1;
	}
	else if (!strcmp(type, "hiz", true))
	{
	    static
	        Float:speed;

		if (sscanf(string, "f", speed))
		    return BilgiMesajGonder(playerid, "/gateduzenle [ID] [hiz] [Hýz]");

		if (speed < 0.0 || speed > 20.0)
		    return HataMesajGonder(playerid, "Hýz 0 ile 20 arasýnda olmalýdýr.");

        GateData[id][gateSpeed] = speed;

		Gate_Save(id);
		return 1;
	}
	else if (!strcmp(type, "radius", true))
	{
	    static
	        Float:radius;

		if (sscanf(string, "f", radius))
		    return BilgiMesajGonder(playerid, "/gateduzenle [ID] [radius] [Radius]");

		if (radius < 0.0 || radius > 20.0)
		    return HataMesajGonder(playerid, "Radius 0 ile 20 arasýnda olmalýdýr.");

        GateData[id][gateRadius] = radius;

		Gate_Save(id);
		return 1;
	}
	else if (!strcmp(type, "zaman", true))
	{
	    static
	        time;

		if (sscanf(string, "d", time))
		    return BilgiMesajGonder(playerid, "/gateduzenle [ID] [zaman] [Zaman] (0 kapatýr)");

		if (time < 0 || time > 60000)
		    return HataMesajGonder(playerid, "0 ile 60,000 ms arasýnda olmalýdýr.");

        GateData[id][gateTime] = time;

		Gate_Save(id);
		return 1;
	}
	else if (!strcmp(type, "model", true))
	{
	    static
	        model;

		if (sscanf(string, "d", model))
		    return BilgiMesajGonder(playerid, "/gateduzenle [ID] [model] [gate model]");

		if (!IsValidObjectModel(model))
		    return HataMesajGonder(playerid, "Hatalý Obje ID.");

        GateData[id][gateModel] = model;

		DestroyDynamicObject(GateData[id][gateObject]);
		GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

		Gate_Save(id);
		return 1;
	}
    else if (!strcmp(type, "pos", true))
	{
	   	EditDynamicObject(playerid, GateData[id][gateObject]);

		PlayerData[playerid][pEditGate] = id;
        PlayerData[playerid][pEditType] = 1;
		BilgiMesajGonder(playerid, "%d ID'li gatenin pozisyonunu deðiþtiriyorsunuz.", id);
		return 1;
	}
	else if (!strcmp(type, "hareket", true))
	{
	   	EditDynamicObject(playerid, GateData[id][gateObject]);

		PlayerData[playerid][pEditGate] = id;
		PlayerData[playerid][pEditType] = 2;

		BilgiMesajGonder(playerid, "%d ID'li gatenin açýlýþ pozisyonunu deðiþtiriyorsunuz.", id);
		return 1;
	}
	else if (!strcmp(type, "linkid", true))
	{
	    static
	        linkid = -1;

		if (sscanf(string, "d", linkid))
		    return BilgiMesajGonder(playerid, "/gateduzenle [id] [linkid] [gate link] (-1 kapatýr)");

        if ((linkid < -1 || linkid >= MAX_GATES) || (linkid != -1 && !GateData[linkid][gateExists]))
	    	return HataMesajGonder(playerid, "Hatalý gate id.");

        GateData[id][gateLinkID] = (linkid == -1) ? (-1) : (GateData[linkid][gateID]);
		Gate_Save(id);

		return 1;
	}
	else if (!strcmp(type, "faction", true))
	{
	    static
	        factionid = -1;

		if (sscanf(string, "d", factionid))
		    return BilgiMesajGonder(playerid, "/gateduzenle [ID] [faction] [gate faction] (-1 kapatýr)");


        GateData[id][gateFaction] = factionid;
		Gate_Save(id);

		return 1;
	}
	else if (!strcmp(type, "sifre", true))
	{
	    static
	        pass[32];

		if (sscanf(string, "s[32]", pass))
		    return BilgiMesajGonder(playerid, "/gateduzenle [ID] [sifre] [gate þifre] ( 'yok' gate'yi þifresiz yapar)");

		if (!strcmp(pass, "yok", true))
			GateData[id][gatePass][0] = 0;

		else format(GateData[id][gatePass], 32, pass);

		Gate_Save(id);
		return 1;
	}
	else if (!strcmp(type, "world", true))
	{
	    GateData[id][gateWorld] = GetPlayerVirtualWorld(playerid);
	    DestroyDynamicObject(GateData[id][gateObject]);
		GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);
	    Gate_Save(id);
	}
	return 1;
}
CMD:gatesil(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4)
	    return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok");

	if (sscanf(params, "d", id))
	    return BilgiMesajGonder(playerid, "/gatesil [Gate ID]");

	if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
	    return HataMesajGonder(playerid, "Hatalý gate ID girdiniz.");

	Gate_Sil(id);
	MesajGonder(playerid, "Gate silindi, ID: %d.", id);
	return 1;
}
CMD:garajolustur(playerid, params[])
{
	new tip[20], interiorid;
	if (PlayerData[playerid][pAdmin] < 4)
	    return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");

	if(sscanf(params, "is[20]", interiorid, tip)) return BilgiMesajGonder(playerid, "/garajolustur [Interior ID] [Tip]");
	if(!(0 <= interiorid <= sizeof(GarageInteriors)-1)) return HataMesajGonder(playerid, "Geçersiz Interior ID girdiniz.");
	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	new id = Garaj_Olustur(tip, interiorid, pos[0], pos[1], pos[2], GetPlayerVirtualWorld(playerid));
	if(id == -1) return HataMesajGonder(playerid, "Sunucu maksimum garaj limitine ulaþtý.");
	MesajGonder(playerid, "Garaj oluþturuldu, (/garajduzenle) komutu ile garajý düzenleyebilirsiniz. (ID: %d)", id);
	return 1;
}
CMD:garajsil(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4)
	    return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
	new id;
	if(sscanf(params, "i", id)) return BilgiMesajGonder(playerid, "/garajsil [ID]");
	if ((id < 0 || id >= MAX_GARAGE) || !GarageData[id][gExists])
	    return HataMesajGonder(playerid, "Hatalý garaj ID girdiniz.");

	Garaj_Sil(id);
	MesajGonder(playerid, "Garaj silindi, ID: %d.", id);
	return 1;
}
CMD:garajduzenle(playerid, params[])
{
	static
		id,
		type[24],
		string[128];

    if (PlayerData[playerid][pAdmin] < 4)
	    return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	BilgiMesajGonder(playerid, "/garajduzenle [ID] [Ýsim]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[ISIM]:{FFFFFF} kilit, sifre, birlik, sahip, pos, interior, tip, araclimit");
		return 1;
	}
	if ((id < 0 || id >= MAX_GARAGE) || !GarageData[id][gExists])
	    return HataMesajGonder(playerid, "Hatalý Garaj ID girdiniz.");

	if (!strcmp(type, "kilit", true))
	{
	    if(GarageData[id][gKilit] == 1)
	    {
	        GarageData[id][gKilit] = 0;
	        //MesajGonder(playerid, "Garajýn kilidi açýldý.");
	        AdminMessage(COLOR_RED,"*** %s adlý yetkili tarafýndan Garaj ID %d kilidi açýldý.", PlayerData[playerid][pAdminName], id);
	    }
	    else
	    {
	        GarageData[id][gKilit] = 1;
	        //MesajGonder(playerid, "Garaj kilitlendi.");
	        AdminMessage(COLOR_RED,"*** %s adlý yetkili tarafýndan Garaj ID %d kilitlendi.", PlayerData[playerid][pAdminName], id);
	    }
	    Garaj_Kaydet(id);
	    Garaj_Yenile(id);
	}
 	else if (!strcmp(type, "sifre", true))
	{
	    static
	        pass[32];

		if (sscanf(string, "s[32]", pass))
		    return BilgiMesajGonder(playerid, "/garajduzenle [ID] [sifre] [garaj þifre] ( 'yok' yazarsanýz þifresiz yapar)");

		format(GarageData[id][gSifre], 30, pass);

        AdminMessage(COLOR_RED,"*** %s adlý yetkili tarafýndan Garaj ID %d þifresi deðiþtirildi.", PlayerData[playerid][pAdminName], id);
		Garaj_Kaydet(id);
		return 1;
	}
	else if (!strcmp(type, "birlik", true))
	{
	    static
	        factionid = -1;

		if (sscanf(string, "d", factionid))
		    return BilgiMesajGonder(playerid, "/garajduzenle [ID] [birlik] [birlik id] (-1 kapatýr)");

        AdminMessage(COLOR_RED,"*** %s adlý yetkili tarafýndan %d ID'li garajýn birliði %d ID'li birlik olarak ayarlandý.", PlayerData[playerid][pAdminName], id, factionid);
        GarageData[id][gBirlik] = factionid;
        Garaj_Yenile(id);
		Garaj_Kaydet(id);

		return 1;
	}
	else if (!strcmp(type, "sahip", true))
	{
	    static
	        sahip = -1;

		if (sscanf(string, "d", sahip))
		    return BilgiMesajGonder(playerid, "/garajduzenle [ID] [sahip] [sql id] (-1 kapatýr)");


        GarageData[id][gSahip] = sahip;
        Garaj_Yenile(id);
		Garaj_Kaydet(id);
        AdminMessage(COLOR_RED,"*** %s adlý yetkili tarafýndan %d ID'li garajýn sahibi SQL id %d olarak ayarlandý.", PlayerData[playerid][pAdminName], id, sahip);
		return 1;
	}
	else if (!strcmp(type, "pos", true))
	{
	    static
		    Float:px,
		    Float:py,
		    Float:pz;

		GetPlayerPos(playerid, px, py, pz);

		GarageData[id][gPos][0] = px;
		GarageData[id][gPos][1] = py;
		GarageData[id][gPos][2] = pz;
		GarageData[id][gVw] = GetPlayerVirtualWorld(playerid);

		Garaj_Yenile(id);
		Garaj_Kaydet(id);
	 	AdminMessage(COLOR_RED,"*** %s adlý yetkili tarafýndan %d ID'li garajýn pozisyonu deðiþtirildi.", PlayerData[playerid][pAdminName], id);
	}
	else if (!strcmp(type, "interior", true))
	{
	    static
	        interior;

		if (sscanf(string, "d", interior))
		    return BilgiMesajGonder(playerid, "/garajduzenle [ID] [interior] [Interior ID]");


        GarageData[id][gInterior] = interior;
		Garaj_Kaydet(id);
        AdminMessage(COLOR_RED,"*** %s adlý yetkili tarafýndan %d ID'li garajýn interioru %d olarak deðiþtirildi.", PlayerData[playerid][pAdminName], id, interior);
		return 1;
	}
	else if (!strcmp(type, "tip", true))
	{
	    static
	        tip[20];

		if (sscanf(string, "s[20]", tip))
		    return BilgiMesajGonder(playerid, "/garajduzenle [ID] [Tip] [Tip]");


        format(GarageData[id][gTip], 20, tip);
        Garaj_Yenile(id);
		Garaj_Kaydet(id);
        AdminMessage(COLOR_RED," %s adlý yetkili tarafýndan %d ID'li garajýn tipi %s olarak deðiþtirildi.", PlayerData[playerid][pAdminName], id, tip);
		return 1;
	}
	else if (!strcmp(type, "araclimit", true))
	{
	    static
	        limit;

		if (sscanf(string, "d", limit))
		    return BilgiMesajGonder(playerid, "/garajduzenle [ID] [araclimit] [Limit]");


        GarageData[id][gAracLimit] = limit;
        Garaj_Yenile(id);
		Garaj_Kaydet(id);
        AdminMessage(COLOR_RED," %s adlý yetkili tarafýndan %d ID'li garajýn araç limiti %d olarak deðiþtirildi.", PlayerData[playerid][pAdminName], id, limit);
		return 1;
	}
	return 1;
}
CMD:evolustur(playerid,params[])
{
	new fiyat, intid, mobilyasayisi;
	if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok");
	if(sscanf(params,"iii",fiyat,intid, mobilyasayisi)) return BilgiMesajGonder(playerid,"/evolustur [Fiyat] [Interior ID] [Maks. Mobilya]");
	if(!(0 <= intid <= sizeof(HouseInteriors)-1)) return HataMesajGonder(playerid, "Yazdýðýnýz ID'de bir interior bulunmamaktadýr.");
	new id = -1;
	new Float:pos[3];
	GetPlayerPos(playerid,pos[0],pos[1],pos[2]);
	id = Ev_Olustur(pos[0],pos[1],pos[2],fiyat, intid, mobilyasayisi);
	if(id == -1) return HataMesajGonder(playerid,"Sunucu maksimum ev limitine ulaþtý.");
	MesajGonder(playerid,"Ev oluþturuldu, ID: %d",id);
	return 1;
}
CMD:evsil(playerid,params[])
{
	new id = 0;
	if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok");
	if(sscanf(params, "d", id)) return BilgiMesajGonder(playerid,"/evsil [Ev ID]");
	if ((id < 0 || id >= MAX_EV) || !house_info[id][evExists]) return HataMesajGonder(playerid,"Bu ID'de bir ev bulunmuyor.");
	Ev_Sil(playerid, id);
	MesajGonder(playerid,"Ev silindi, ID: %d",id);
	return 1;
}
CMD:birlikolustur(playerid,params[])
{
	new
	    id = -1,
		type,
		name[32],
		str[50];

	if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok");
	if(sscanf(params, "ds[32]S()", type, name, str))
	{
	    BilgiMesajGonder(playerid,"/birlikolustur [Tip] [Isim]");
     	SendClientMessage(playerid, COLOR_YELLOW, "[TIP]:{FFFFFF}1: Çete 2: Mafya 3: Yayýn Ajansý 4: Legal 5: LSPD 6: LSMD 7: FBI 8: GOV");
   		return 1;
	}
	if (type < 1 || type > 8) return HataMesajGonder(playerid,"Tip 1 ile 8 arasýnda olmalýdýr.");
	id = Birlik_Olustur(name, type);

	if(id == -1) return HataMesajGonder(playerid,"Sunucu maksimum birlik sayýsýna ulaþmýþtýr.");
	BilgiMesajGonder(playerid,"Birlik oluþturuldu, ID: %d",id);
	return 1;
}
CMD:birliksil(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok");

	if (sscanf(params, "d", id)) return BilgiMesajGonder(playerid, "/birliksil [Birlik ID]");

	if ((id < 0 || id >= MAX_BIRLIK) || !Birlikler[id][birlikExists])
	    return HataMesajGonder(playerid, "Geçersiz ID.");

	Birlik_Sil(id);
	MesajGonder(playerid, "Birlik ID %d silindi.", id);
	return 1;
}
CMD:birlikduzenle(playerid,params[])
{
    new id, type[24],string[128];
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok");
    if (sscanf(params, "ds[24]S()[128]", id, type, string))
    {
        BilgiMesajGonder(playerid,"/birlikduzenle [ID] [Seçenek]");
       	SendClientMessage(playerid, COLOR_YELLOW, "[SEÇENEK]: {FFFFFF}isim, renk, tip, rutbe, maxrutbe, sistemselonay, silahonay, uyusturucuonay, graffitionay, hoodonay");
        return 1;
    }
    if ((id < 0 || id >= MAX_BIRLIK) || !Birlikler[id][birlikExists]) return HataMesajGonder(playerid,"Hatalý Birlik ID.");
    if(!strcmp(type, "isim", true))
    {
        new isim[32];
        if(sscanf(string, "s[32]", isim)) return BilgiMesajGonder(playerid,"/birlikduzenle [ID] [isim] [Yeni Isim]");
        format(Birlikler[id][birlikAd], 32, isim);
        Birlik_Kaydet(id);
        AdminMessage(COLOR_RED," %s adlý yetkili tarafýndan %d ID'li birliðin ismi %s olarak deðiþtirildi.",ReturnName(playerid,0),id,isim);
        Log_Write("logs/birliklog.txt","%s tarafindan %d ID'li birligin ismi %s olarak degistirildi",ReturnName(playerid,0),id,isim);
    }
    else if (!strcmp(type, "renk", true))
	{
	    new color;

	    if (sscanf(string, "h", color))
	        return BilgiMesajGonder(playerid, "/birlikduzenle [ID] [renk] [Hex Renk]");

	    Birlikler[id][birlikColor] = color;
	    Birlik_Update(id);

	    Birlik_Kaydet(id);
		AdminMessage(COLOR_RED, " %s tarafýndan %d ID'li birliðin {%06x}rengi {AA3333}deðiþtirildi.", ReturnName(playerid, 0), id, color >>> 8);
	}
	else if(!strcmp(type, "tip", true))
	{
	    new typeint;
	    if(sscanf(string, "d", typeint))
	    {
	        BilgiMesajGonder(playerid,"/birlikduzenle [ID] [tip] [Tip]");
	        SendClientMessage(playerid, COLOR_YELLOW, "[TIP]:{FFFFFF}1: Çete 2: Mafya 3: Yayýn Ajansý 4: Legal 5: LSPD 6: LSMD 7: FBI 8: GOV");
	        return 1;
	    }
	    if (typeint < 1 || typeint > 8) return HataMesajGonder(playerid,"Tip 1 ile 8 arasýnda olmalýdýr.");

	    Birlikler[id][birlikTip] = typeint;
	    Birlik_Kaydet(id);
	    AdminMessage(COLOR_RED, " %s adlý yetkili %d ID'li birliðin tipini deðiþtirdi.",ReturnName(playerid, 0), id);
	}
	else if(!strcmp(type, "rutbe", true))
	{
	    Birlik_RutbeleriGoster(playerid, id);
	}
	else if (!strcmp(type, "maxrutbe", true))
	{
	    new ranks;

	    if (sscanf(string, "d", ranks))
	        return BilgiMesajGonder(playerid, "/birlikduzenle [ID] [maxrutbe] [max rutbe]");

		if (ranks < 1 || ranks > 15)
		    return HataMesajGonder(playerid, "Rütbe 1'den küçük, 15'den büyük olamaz.");

	    Birlikler[id][birlikRutbeler] = ranks;

	    Birlik_Kaydet(id);
	}
	else if (!strcmp(type, "sistemselonay", true))
	{
	    if(Birlikler[id][birlikOnaylar][0])
	    {
	        Birlikler[id][birlikOnaylar][0] = 0;
			BilgiMesajGonder(playerid,"%s (ID: %d) adlý birliðin sistemsel onayýný sildiniz.", Birlikler[id][birlikAd], id);
			AdminMessage(COLOR_RED, " %s, %s (ID: %d) birliðinin sistemsel onayýný sildi.",PlayerData[playerid][pAdminName], Birlikler[id][birlikAd], id);
	    }
		else
		{
		    Birlikler[id][birlikOnaylar][0] = 1;
		    BilgiMesajGonder(playerid,"%s (ID: %d) adlý birliðe sistemsel onay verdiniz.", Birlikler[id][birlikAd], id);
		    AdminMessage(COLOR_RED, " %s, %s (ID: %d) birliðine sistemsel onay verdi.",PlayerData[playerid][pAdminName], Birlikler[id][birlikAd], id);
		}

	    Birlik_Kaydet(id);
	}
	else if (!strcmp(type, "silahonay", true))
	{
	    if(Birlikler[id][birlikOnaylar][1])
	    {
	        Birlikler[id][birlikOnaylar][1] = 0;
			BilgiMesajGonder(playerid,"%s (ID: %d) adlý birliðin silah onayýný sildiniz.", Birlikler[id][birlikAd], id);
			AdminMessage(COLOR_RED, " %s, %s (ID: %d) birliðinin silah onayýný sildi.",PlayerData[playerid][pAdminName], Birlikler[id][birlikAd], id);
	    }
		else
		{
		    Birlikler[id][birlikOnaylar][1] = 1;
		    BilgiMesajGonder(playerid,"%s (ID: %d) adlý birliðe silah onayý verdiniz.", Birlikler[id][birlikAd], id);
		    AdminMessage(COLOR_RED, " %s, %s (ID: %d) birliðine silah onayý verdi.",PlayerData[playerid][pAdminName], Birlikler[id][birlikAd], id);
		}

	    Birlik_Kaydet(id);
	}
	else if (!strcmp(type, "uyusturucuonay", true))
	{
	    if(Birlikler[id][birlikOnaylar][2])
	    {
	        Birlikler[id][birlikOnaylar][2] = 0;
			BilgiMesajGonder(playerid,"%s (ID: %d) adlý birliðin uyuþturucu onayýný sildiniz.", Birlikler[id][birlikAd], id);
			AdminMessage(COLOR_RED, " %s, %s (ID: %d) birliðinin uyuþturucu onayýný sildi.",PlayerData[playerid][pAdminName], Birlikler[id][birlikAd], id);
	    }
		else
		{
		    Birlikler[id][birlikOnaylar][2] = 1;
		    BilgiMesajGonder(playerid,"%s (ID: %d) adlý birliðe uyuþturucu onayý verdiniz.", Birlikler[id][birlikAd], id);
		    AdminMessage(COLOR_RED, " %s, %s (ID: %d) birliðine uyuþturucu onayý verdi.",PlayerData[playerid][pAdminName], Birlikler[id][birlikAd], id);
		}

	    Birlik_Kaydet(id);
	}
	else if (!strcmp(type, "graffitionay", true))
	{
	    if(Birlikler[id][birlikOnaylar][3])
	    {
	        Birlikler[id][birlikOnaylar][3] = 0;
			BilgiMesajGonder(playerid,"%s (ID: %d) adlý birliðin graffiti onayýný sildiniz.", Birlikler[id][birlikAd], id);
			AdminMessage(COLOR_RED, " %s, %s (ID: %d) birliðinin graffiti onayýný sildi.",PlayerData[playerid][pAdminName], Birlikler[id][birlikAd], id);
	    }
		else
		{
		    Birlikler[id][birlikOnaylar][3] = 1;
		    BilgiMesajGonder(playerid,"%s (ID: %d) adlý birliðe graffiti onayý verdiniz.", Birlikler[id][birlikAd], id);
		    AdminMessage(COLOR_RED, " %s, %s (ID: %d) birliðine graffiti onayý verdi.",PlayerData[playerid][pAdminName], Birlikler[id][birlikAd], id);
		}

	    Birlik_Kaydet(id);
	}
	else if (!strcmp(type, "hoodonay", true))
	{
	    if(Birlikler[id][birlikOnaylar][4])
	    {
	        Birlikler[id][birlikOnaylar][4] = 0;
			BilgiMesajGonder(playerid,"%s (ID: %d) adlý birliðin Hood onayýný sildiniz.", Birlikler[id][birlikAd], id);
			AdminMessage(COLOR_RED, " %s, %s (ID: %d) birliðinin Hood onayýný sildi.",PlayerData[playerid][pAdminName], Birlikler[id][birlikAd], id);
	    }
		else
		{
		    Birlikler[id][birlikOnaylar][4] = 1;
		    BilgiMesajGonder(playerid,"%s (ID: %d) adlý birliðe Hood onayý verdiniz.", Birlikler[id][birlikAd], id);
		    AdminMessage(COLOR_RED, " %s, %s (ID: %d) birliðine Hood onayý verdi.",PlayerData[playerid][pAdminName], Birlikler[id][birlikAd], id);
		}

	    Birlik_Kaydet(id);
	}
	return 1;
}
CMD:setleader(playerid,params[])
{
	new pid,id;
	if(PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid,"Bu komutu kullanamazsýn.");
	if(sscanf(params,"ui",pid,id)) return BilgiMesajGonder(playerid,"/setleader [ID/Isim] [Birlik ID] (-1 yazarsan liderlikten atýlýr)");
	if(!OyundaDegil(pid)) return HataMesajGonder(playerid,"Oyuncu oyunda deðil!");
	if ((id < -1 || id >= MAX_BIRLIK) || (id != -1 && !Birlikler[id][birlikExists])) return HataMesajGonder(playerid,"Hatalý Birlik ID.");
	if (id == -1)
	{
	    BirliktenAt(pid);
	    BilgiMesajGonder(playerid, "%s adlý oyuncuyu birlik liderliðinden attýnýz.", ReturnName(pid, 0));
    	BilgiMesajGonder(pid, "%s adlý yetkili sizi birlik liderliðinden attý.", ReturnName(playerid, 0));
    	Oyuncu_Kaydet(id);
	}
	else
	{
	    BirliktenAt(pid);
	    PlayerData[pid][pFaction] = id;
	    PlayerData[pid][pFactionRutbe] = Birlikler[id][birlikRutbeler];
	    PlayerData[pid][pFactionDivizyon] = 0;
	    BilgiMesajGonder(playerid, "%s adlý oyuncuyu \"%s\" adlý birliðin lideri yaptýnýz.", ReturnName(pid, 0),Birlikler[id][birlikAd]);
	    BilgiMesajGonder(pid, "%s adlý yetkili seni \"%s\" adlý birliðin lideri yaptý.", ReturnName(playerid, 0),Birlikler[id][birlikAd]);
	    Oyuncu_Kaydet(pid);
	}
	return 1;
}
CMD:isyeriolustur(playerid,params[])
{
	new tip,fiyat;
	if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok");
	if (sscanf(params, "dd", tip, fiyat))
	{
		BilgiMesajGonder(playerid,"/isyeriolustur [Tip] [Fiyat]");
		SendClientMessage(playerid,-1,"{00FF15}[TIP]: {FFFFFF} 1: Market 2: Kiyafet Maðazasý 3: Fast Food 4: Galeri 5: Elektronik 6: Bar/Pub 7: Kumarhane");
		return 1;
	}
	if(tip < 1 || tip > 7) return HataMesajGonder(playerid,"Geçersiz iþyeri tipi. 1 ile 7 arasýnda olmalýdýr.");
	new id;
	id = Isyeri_Olustur(playerid, tip, fiyat);
	if (id == -1) return HataMesajGonder(playerid, "Sunucu iþyeri sýnýrýna ulaþtý.");
	BilgiMesajGonder(playerid,"Ýþyeri oluþturuldu, ID: %d",id);
	return 1;
}
CMD:isyerisil(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4)
	    return HataMesajGonder(playerid, "Bu komutu kullanamazsýn !");

	if (sscanf(params, "d", id))
	    return BilgiMesajGonder(playerid, "/isyerisil [Ýþyeri ID]");

	if ((id < 0 || id >= MAX_ISYERI) || !Isyeri[id][isyeriExists])
	    return HataMesajGonder(playerid, "Geçersiz iþyeri ID'sý.");

	Isyeri_Sil(id);
	BilgiMesajGonder(playerid, "Ýþyeri silindi, ID: %d.", id);
	return 1;
}
CMD:isyeriduzenle(playerid,params[])
{
	static id, type[24], string[128];
	if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanamazsýn !");
	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	BilgiMesajGonder(playerid, "/isyeriduzenle [ID] [Ad]");
	    SendClientMessage(playerid, COLOR_YELLOW, "{00FF15}[ADLAR]: {FFFFFF} pozisyon, interior, fiyat, stok, tip, spawn, devlet");
		return 1;
	}
	if ((id < 0 || id >= MAX_ISYERI) || !Isyeri[id][isyeriExists])
	    return HataMesajGonder(playerid, "Geçersiz iþyeri ID'sý.");

	if (!strcmp(type, "pozisyon", true))
	{
	    GetPlayerPos(playerid, Isyeri[id][isyeriPos][0], Isyeri[id][isyeriPos][1], Isyeri[id][isyeriPos][2]);
		GetPlayerFacingAngle(playerid, Isyeri[id][isyeriPos][3]);

		Isyeri_Yenile(id);
		Isyeri_Kaydet(id);
	}
	else if (!strcmp(type, "interior", true))
	{
	    GetPlayerPos(playerid, Isyeri[id][isyeriInt][0], Isyeri[id][isyeriInt][1], Isyeri[id][isyeriInt][2]);
		GetPlayerFacingAngle(playerid, Isyeri[id][isyeriInt][3]);

		Isyeri[id][isyeriInterior] = GetPlayerInterior(playerid);

        foreach (new i : Player)
		{
			if (PlayerData[i][pIsyeri] == Isyeri[id][isyeriID])
			{
				SetPlayerPos(i, Isyeri[id][isyeriInt][0], Isyeri[id][isyeriInt][1], Isyeri[id][isyeriInt][2]);
				SetPlayerFacingAngle(i, Isyeri[id][isyeriInt][3]);

				SetPlayerInterior(i, Isyeri[id][isyeriInterior]);
				SetCameraBehindPlayer(i);
			}
		}
		Isyeri_Kaydet(id);
		BilgiMesajGonder(playerid,"%d ID'li iþyerinin interioru þu an bulunduðunuz interior (ID: %d) olarak deðiþtirildi.",id,GetPlayerInterior(playerid));
	}
	else if (!strcmp(type, "fiyat", true))
	{
	    new price;

	    if (sscanf(string, "d", price))
	        return BilgiMesajGonder(playerid, "/isyeriduzenle [ID] [Fiyat] [Yeni Fiyat]");

	    Isyeri[id][isyeriFiyat] = price;
	    Isyeri[id][isyeriKendiFiyati] = price;

	    Isyeri_Yenile(id);
	    Isyeri_Kaydet(id);

		BilgiMesajGonder(playerid,"%d ID'li iþyerinin fiyatý {2ECC71}%s {FFFFFF}olarak deðiþtirildi.",id,FormatNumber(price));
	}
	else if (!strcmp(type, "stok", true))
	{
	    new urunid,amount;

	    if (sscanf(string, "dd",urunid,amount))
	        return BilgiMesajGonder(playerid, "/isyeriduzenle [ID] [stok] [Ürün ID] [Ürün Sayýsý]");

	    Isyeri[id][isyeriUrunSayisi][urunid] = amount;

	    Isyeri_Yenile(id);
	    Isyeri_Kaydet(id);
	}
	else if (!strcmp(type, "tip", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
	    {
	        BilgiMesajGonder(playerid,"/isyeriduzenle [ID] [Tip]");
			SendClientMessage(playerid,-1,"{00FF15}[TIP]: {FFFFFF} 1: Market 2: Kiyafet Maðazasý 3: Fast Food 4: Galeri 5: Elektronik 6: Bar/Pub 7: Kumarhane");
			return 1;
	    }
	    if (typeint < 1 || typeint > 9)
			return HataMesajGonder(playerid, "Belirtilen tip 1 ve 7 arasýnda olmalýdýr.");

		Isyeri[id][isyeriTip] = typeint;

		switch(typeint)
 		{
 			case 1: // Market
  			{
		     		    Isyeri[id][isyeriInt][0] = -27.3074;
	                	Isyeri[id][isyeriInt][1] = -30.8741;
	                	Isyeri[id][isyeriInt][2] = 1003.5573;
	                	Isyeri[id][isyeriInt][3] = 0.0000;
						Isyeri[id][isyeriInterior] = 4;
    		}
    		case 2: // Kiyafet Maðazasý
    		{
		     		    Isyeri[id][isyeriInt][0] = 161.4801;
	                	Isyeri[id][isyeriInt][1] = -96.5368;
	                	Isyeri[id][isyeriInt][2] = 1001.8047;
	                	Isyeri[id][isyeriInt][3] = 0.0000;
						Isyeri[id][isyeriInterior] = 18;
    		}
    		case 3: // Fast Food
    		{
		     		    Isyeri[id][isyeriInt][0] = 363.3402; //
	                	Isyeri[id][isyeriInt][1] = -74.6679;
	                	Isyeri[id][isyeriInt][2] = 1001.5078;
	                	Isyeri[id][isyeriInt][3] = 315.0000;
						Isyeri[id][isyeriInterior] = 10;
    		}
    		case 4: // Galeri
    		{
		     		    Isyeri[id][isyeriInt][0] = 1494.5612;
		            	Isyeri[id][isyeriInt][1] = 1304.2061;
		            	Isyeri[id][isyeriInt][2] = 1093.2891;
		            	Isyeri[id][isyeriInt][3] = 0.0000;
						Isyeri[id][isyeriInterior] = 3;
    		}
    		case 5: // Elektronik
    		{
		     		    Isyeri[id][isyeriInt][0] = 2310.3713;
	   					Isyeri[id][isyeriInt][1] = 997.7480;
				   		Isyeri[id][isyeriInt][2] = -53.9590;
	      				Isyeri[id][isyeriInt][3] = 271.6157;
						Isyeri[id][isyeriInterior] = 0;
    		}
    		case 6: // Bar/Pub
    		{
		     		    Isyeri[id][isyeriInt][0] = 2015.23;
		   				Isyeri[id][isyeriInt][1] = 1345.85;
					   	Isyeri[id][isyeriInt][2] = 107.48;
		      			Isyeri[id][isyeriInt][3] = 90.0000;
						Isyeri[id][isyeriInterior] = 1;
    		}
    		case 7:
    		{
			     		Isyeri[id][isyeriInt][0] = 1481.9872;
	  					Isyeri[id][isyeriInt][1] = 783.1984;
				   		Isyeri[id][isyeriInt][2] = -61.2514;
	     				Isyeri[id][isyeriInt][3] = 83.5277;
    	}	}
	}
	else if (!strcmp(type, "spawn", true))
	{
	    if (Isyeri[id][isyeriTip] != 4)
	        return HataMesajGonder(playerid, "Bu iþyeri tipi araç galerisi deðil!");

	    if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	        return HataMesajGonder(playerid, "Araç spawn noktasý sadece dýþarýda olabilir.");

	    GetPlayerPos(playerid, Isyeri[id][isyeriSpawn][0], Isyeri[id][isyeriSpawn][1], Isyeri[id][isyeriSpawn][2]);
		GetPlayerFacingAngle(playerid, Isyeri[id][isyeriSpawn][3]);

		Isyeri_Kaydet(id);
		BilgiMesajGonder(playerid,"%d ID'li iþyerinin araç spawn noktasý ayarlandý.",id);
	}
	else if (!strcmp(type, "devlet", true))
	{
	    if(Isyeri[id][isyeriSahip] == -99)
	    {
	        Isyeri[id][isyeriSahip] = -1;
	        Isyeri_Yenile(id);
	        Isyeri_Kaydet(id);
	        BilgiMesajGonder(playerid,"Ýþyeri artýk devletin deðil.");
	    }
	    else
		{
		    Isyeri[id][isyeriSahip] = -99;
		    Isyeri_Yenile(id);
	        Isyeri_Kaydet(id);
	        BilgiMesajGonder(playerid,"Ýþyeri artýk devletin.");
		}
	}
	return 1;
}
CMD:giseolustur(playerid, params[])
{
	new id = -1;

	if (PlayerData[playerid][pAdmin] < 5)
	    return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	id = Gise_Olustur(playerid);

	if (id != -1)
	    BilgiMesajGonder(playerid, "ID: %d Giþe oluþturuldu.", id);

	if (id == -1)
	    BilgiMesajGonder(playerid, "Giþe oluþturulurken hata oluþtu, geliþtiriciye ulaþýn.");


	return 1;
}

CMD:gisesil(playerid, params[])
{
	new id, query[512];

	if (PlayerData[playerid][pAdmin] < 5)
	    return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	if (sscanf(params, "d", id))
	    return BilgiMesajGonder(playerid, "/gisesil [Giþe ID]");

	if (!Gise[id][gs_Exists])
		return HataMesajGonder(playerid, "Giþe mevcut deðil.");

	Gise[id][gs_ID] = -1;
	Gise[id][gs_Exists] = false;

	DestroyDynamicObject(Gise[id][gs_GateObje]);
	DestroyDynamicObject(Gise[id][gs_Obje]);

	DestroyDynamic3DTextLabel(Gise[id][gs_id]);
	DestroyDynamic3DTextLabel(Gise[id][gs_inf]);

	Gise[id][gs_GateBar][0] = 0.0;
	Gise[id][gs_GateBar][1] = 0.0;
	Gise[id][gs_GateBar][2] = 0.0;
	Gise[id][gs_GateBar][3] = 0.0;
	Gise[id][gs_GateBar][4] = 0.0;
	Gise[id][gs_GateBar][5] = 0.0;

	Gise[id][gs_Kapali][0] = 0.0;
	Gise[id][gs_Kapali][1] = 0.0;
	Gise[id][gs_Kapali][2] = 0.0;
	Gise[id][gs_Kapali][3] = 0.0;
	Gise[id][gs_Kapali][4] = 0.0;
	Gise[id][gs_Kapali][5] = 0.0;

	Gise[id][gs_Acik][0] = 0.0;
	Gise[id][gs_Acik][1] = 0.0;
	Gise[id][gs_Acik][2] = 0.0;
	Gise[id][gs_Acik][3] = 0.0;
	Gise[id][gs_Acik][4] = 0.0;
	Gise[id][gs_Acik][5] = 0.0;

	mysql_format(baglanti, query, sizeof query, "DELETE FROM `giseler` WHERE `ID` = '%d'", id);
	mysql_query (baglanti, query);

	BilgiMesajGonder(playerid, "ID: %d giþe baþarýyla silindi.", id);
	return 1;
}

Gise_Olustur(playerid)
{
	for (new i = 0; i < MAX_GISE; i++)
	{
	    if (!Gise[i][gs_Exists])
	    {
	        new Float:oPos[4];

	        GetPlayerPos(playerid, oPos[0], oPos[1], oPos[2]);
	        GetPlayerFacingAngle(playerid, oPos[3]);

	        Gise[i][gs_ID] = i;
	        Gise[i][gs_Exists] = true;

	        GetXYInFrontOfPlayer(playerid, oPos[0], oPos[1], 2.5);

			Gise[i][gs_GateObje] = CreateDynamicObject(966, oPos[0], oPos[1], oPos[2] - 0.940001, 0.0000000, 0.0000000, oPos[3]);

	        Gise[i][gs_GateBar][0] = oPos[0];
	        Gise[i][gs_GateBar][1] = oPos[1];
	        Gise[i][gs_GateBar][2] = oPos[2];
	        Gise[i][gs_GateBar][3] = 0.0;
	        Gise[i][gs_GateBar][4] = 0.0;
            Gise[i][gs_GateBar][5] = 0.0;

            SetPVarInt(playerid, "GiseGate", Gise[i][gs_ID]);

	        Gise[i][gs_Durum] = GISE_KAPALI;

	        BilgiMesajGonder(playerid, "Þimdi giþe gatesinin pozisyonunu ayarlayýn.");
	        EditDynamicObject(playerid, Gise[i][gs_GateObje]);
	        return i;
	    }
	}
	return -1;
}

Gise_Kaydet(id)
{
	new query[1024];

	mysql_format(baglanti, query, sizeof query, "INSERT INTO `giseler` (`ID`, `GatePos`, `KapaliPos`, `AcikPos`) VALUES ('%d', '%f|%f|%f|%f|%f|%f', '%f|%f|%f|%f|%f|%f', '%f|%f|%f|%f|%f|%f')",
	Gise[id][gs_ID],

	Gise[id][gs_GateBar][0],
	Gise[id][gs_GateBar][1],
	Gise[id][gs_GateBar][2],
	Gise[id][gs_GateBar][3],
	Gise[id][gs_GateBar][4],
	Gise[id][gs_GateBar][5],

	Gise[id][gs_Kapali][0],
	Gise[id][gs_Kapali][1],
	Gise[id][gs_Kapali][2],
	Gise[id][gs_Kapali][3],
	Gise[id][gs_Kapali][4],
	Gise[id][gs_Kapali][5],

	Gise[id][gs_Acik][0],
	Gise[id][gs_Acik][1],
	Gise[id][gs_Acik][2],
	Gise[id][gs_Acik][3],
	Gise[id][gs_Acik][4],
	Gise[id][gs_Acik][5]
	);
	mysql_query (baglanti, query);
	return true;
}

stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
	new Float:a;
	GetPlayerPos(playerid, x, y, a);
	GetPlayerFacingAngle(playerid, a);
	if (GetPlayerVehicleID(playerid))
	{
	    GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}
CMD:createarrest(playerid, params[])
{
	static
	    id = -1,
		Float:x,
		Float:y,
		Float:z;

	GetPlayerPos(playerid, x, y, z);

    if (PlayerData[playerid][pAdmin] < 4)
	    return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");

	id = Arrest_Create(x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));

	if (id == -1)
	    return HataMesajGonder(playerid, "Sunucu maksimum hapis noktasýna ulaþtý.");

	MesajGonder(playerid, "Hapis noktasý oluþturuldu, ID: %d.", id);
	return 1;
}

CMD:destroyarrest(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4)
	    return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");

	if (sscanf(params, "d", id))
	    return BilgiMesajGonder(playerid, "/destroyarrest [ID]");

	if ((id < 0 || id >= MAX_ARREST_POINTS) || !ArrestData[id][arrestExists])
	    return HataMesajGonder(playerid, "Hatalý ID girdiniz.");

	Arrest_Delete(id);
	MesajGonder(playerid, "Hapis noktasý silindi, ID: %d.", id);
	return 1;
}
CMD:createcctv(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komuta yetkin yok!"); //ADMIN LEVEL HERE
    new
        name[30];
    if(sscanf(params, "s[30]", name)) return BilgiMesajGonder(playerid, "/createcctv [Ad]");
    new id = CreateCCTV(playerid, name);
    if(id == -1) return HataMesajGonder(playerid, "Daha fazla CCTV yaratamazsýn!");
    MesajGonder(playerid, "CCTV oluþturuldu, (/editcctv) komutu ile düzenleyebilirsiniz. (ID: %d)", id);
    return 1;
}
CMD:rangecctv(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komuta yetkin yok!"); //ADMIN LEVEL HERE
	foreach(new i : CCTVIter)
	if(IsPlayerInRangeOfPoint(playerid, 10.0, CCTVInfo[i][cctv_X], CCTVInfo[i][cctv_Y], CCTVInfo[i][cctv_Z]))
	{
		SendClientMessageEx(playerid, -1, "ID: %d - Ad: %s", i, CCTVInfo[i][cctv_Name]);
	}
	return 1;
}

CMD:deletecctv(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komuta yetkin yok!"); //ADMIN LEVEL HERE
    new id;
    if(sscanf(params, "d", id)) return BilgiMesajGonder(playerid, "/deletecctv [ID]");
    DeleteCCTV(playerid, id);
    return 1;
}
CMD:editcctv(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komuta yetkin yok!"); //ADMIN LEVEL HERE
    new id;
    if(sscanf(params, "d", id)) return BilgiMesajGonder(playerid, "/editcctv [ID]");
    EditCCTV(playerid, id);
    return 1;
}
CMD:movecctv(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komuta yetkin yok!"); //ADMIN LEVEL HERE
    new id;
    if(sscanf(params, "d", id)) return BilgiMesajGonder(playerid, "/movecctv [ID]");
    MoveCCTV(playerid, id);
    return 1;
}
CMD:renamecctv(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komuta yetkin yok!"); //ADMIN LEVEL HERE
    new
        name[30], id;
    if(sscanf(params, "ds[30]", id, name)) return BilgiMesajGonder(playerid, "/renamecctv [ID] [isim]");
    ChangeCCTVName(playerid, id, name);
    return 1;
}
CMD:setbitcoin(playerid, params[])
{
	new tip, deger;
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
    if(sscanf(params, "ii", tip, deger)) return BilgiMesajGonder(playerid, "/setbitcoin [1 - Alma 2 - Satma] [Deðer]");
    if(tip <=0 || tip >= 3) return HataMesajGonder(playerid, "1 - Alma 2- Satma");
    switch(tip)
    {
        case 1:
        {
            SetServerBilgi("BitcoinAlma", deger);
            MesajGonder(playerid, "Bitcoin alma fiyatý %s olarak deðiþtirildi.", FormatNumber(deger));
        }
        case 2:
		{
		    SetServerBilgi("BitcoinSatma", deger);
		    MesajGonder(playerid, "Bitcoin satma fiyatý %s olarak deðiþtirildi.", FormatNumber(deger));
		}
    }
	return 1;
}
CMD:lokasyonekle(playerid, params[])
{
	new name[30];
	if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
    if(sscanf(params, "s[30]", name)) return BilgiMesajGonder(playerid, "/lokasyonekle [Ad]");
    if(strlen(name) > 30) return HataMesajGonder(playerid, "Lokasyon Adý 30 karakteri geçemez.");
    new Float:pos[3];
    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
    new id = Lokasyon_Ekle(name, pos[0], pos[1], pos[2]);
    if(id == -1) return HataMesajGonder(playerid, "Sunucu maksimum lokasyon limitine ulaþtý.");
    else MesajGonder(playerid, "Lokasyon eklendi, ID: %d", id);
	return 1;
}
CMD:lokasyonsil(playerid, params[])
{
	new id;
    if(!OyundaDegil(playerid)) return 1;
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
    if(sscanf(params, "i", id)) return BilgiMesajGonder(playerid, "/lokasyonsil [ID]");
    if ((id < 0 || id >= MAX_LOKASYON) || !Lokasyon[id][Exists]) return HataMesajGonder(playerid, "Hatalý ID.");
    Lokasyon_Sil(id);
    MesajGonder(playerid, "Lokasyon silindi.");
	return 1;
}
CMD:destroyboombox(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1)
	    return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");

	foreach (new i : Player) if (BoomboxData[i][boomboxPlaced] && IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[i][boomboxPos][0], BoomboxData[i][boomboxPos][1], BoomboxData[i][boomboxPos][2])) {
		Boombox_Destroy(i);

		MesajGonder(playerid, "%s adlý kiþinin müzik kutusunu kaldýrdýn.", ReturnName(i, 0));
		return BilgiMesajGonder(i, "%s adlý yetkili tarafýndan müzik kutunuz kaldýrýldý.", ReturnName(playerid, 0));
	}
	HataMesajGonder(playerid, "Herhangi bir müzik kutusuna yakýn deðilsiniz!");
	return 1;
}
CMD:2xpayday(playerid)
{
	if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
	if(GetServerBilgi("2xpayday") == 0)
	{
	    SetServerBilgi("2xpayday", 1);
	    MesajGonder(playerid, "2x Payday aktif edildi.");
	}
	else
	{
	    SetServerBilgi("2xpayday", 0);
	    MesajGonder(playerid, "2x Payday deaktif edildi.");
	}
	return 1;
}
CMD:aipcoz(playerid, params[])
{
	new id;
    if(PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
    if(sscanf(params, "u", id)) return BilgiMesajGonder(playerid, "/aipcoz [ID/Isim]");
    if(!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu oyunda deðil.");
    if(GetPVarInt(id, "IpBaglandi") == 0) return HataMesajGonder(playerid, "Bu oyuncu baðlý deðil.");
    SetPVarInt(id, "IpBaglandi", 0);
    TogglePlayerControllable(id, true);
    SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
    MesajGonder(id, "%s adlý yetkili tarafýndan ipleriniz çözüldü.", PlayerData[playerid][pAdminName]);
    MesajGonder(playerid, "%s adlý kiþinin iplerini çözdünüz.", ReturnName(id, 0));
	return 1;
}
CMD:akelepcecoz(playerid, params[])
{
    new userid;
    if(PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
    if(sscanf(params, "u", userid)) return BilgiMesajGonder(playerid, "/akelepcecoz [ID/Isim]");
    if(!OyundaDegil(userid)) return HataMesajGonder(playerid, "Oyuncu oyunda deðil.");
    if(PlayerData[userid][pKelepce] == 0) return HataMesajGonder(playerid, "Bu oyuncu kelepçeli deðil.");
    PlayerData[userid][pKelepce] = 0;
    PlayerData[userid][pDragged] = 0;
	PlayerData[userid][pDraggedBy] = INVALID_PLAYER_ID;
	KillTimer(PlayerData[userid][pDragTimer]);
    SetPlayerCuffed(userid, false);
    TogglePlayerControllable(userid,true);
    MesajGonder(userid, "%s adlý yetkili tarafýndan kelepçeniz çýkarýldý.", PlayerData[playerid][pAdminName]);
    MesajGonder(playerid, "%s adlý kiþinin kelepçelerini çýkardýnýz.", ReturnName(userid, 0));
	return 1;
}
CMD:createdealer(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
	new skin;
	if(sscanf(params, "i", skin)) return BilgiMesajGonder(playerid, "/createdealer [skin id]");
	if(!(0 <= skin <= 311)) return HataMesajGonder(playerid, "Geçersiz Skin ID.");
	new id = Iter_Free(Dealers);
	if(id == -1) return HataMesajGonder(playerid, "Daha fazla uyuþturucu satýcýsý oluþturulamaz.");
	GetPlayerPos(playerid, DealerData[id][dealerX], DealerData[id][dealerY], DealerData[id][dealerZ]);
	GetPlayerFacingAngle(playerid, DealerData[id][dealerA]);
	DealerData[id][dealerDrugs] = 0;
    DealerData[id][dealerSkin] = skin;
    DealerData[id][dealerVw] = GetPlayerVirtualWorld(playerid);
	DealerData[id][dealerActorID] = CreateActor(skin, DealerData[id][dealerX], DealerData[id][dealerY], DealerData[id][dealerZ], DealerData[id][dealerA]);
	SetActorInvulnerable(DealerData[id][dealerActorID], 1);
	SetActorVirtualWorld(DealerData[id][dealerActorID], GetPlayerVirtualWorld(playerid));
	new label[128];
	format(label, sizeof(label), "Uyuþturucu Satýcýsý (%d)\n\n{F1C40F}ALT {FFFFFF}tuþuna basarak etkileþime geçebilirsiniz.", id);
	DealerData[id][dealerLabel] = CreateDynamic3DTextLabel(label, 0xF1C40FFF, DealerData[id][dealerX], DealerData[id][dealerY], DealerData[id][dealerZ] + 0.25, 5.0, .testlos = 1);
	Iter_Add(Dealers, id);

	stmt_bind_value(AddDealer, 0, DB::TYPE_INTEGER, id);
	stmt_bind_value(AddDealer, 1, DB::TYPE_INTEGER, skin);
	stmt_bind_value(AddDealer, 2, DB::TYPE_INTEGER, 0);
    stmt_bind_value(AddDealer, 3, DB::TYPE_FLOAT, DealerData[id][dealerX]);
    stmt_bind_value(AddDealer, 4, DB::TYPE_FLOAT, DealerData[id][dealerY]);
    stmt_bind_value(AddDealer, 5, DB::TYPE_FLOAT, DealerData[id][dealerZ]);
    stmt_bind_value(AddDealer, 6, DB::TYPE_FLOAT, DealerData[id][dealerA]);
    stmt_bind_value(AddDealer, 7, DB::TYPE_INTEGER, DealerData[id][dealerVw]);

    if(stmt_execute(AddDealer))
	{
		MesajGonder(playerid, "Uyuþturucu satýcýsý oluþturuldu, ID: %d.", id);
		SetPlayerPos(playerid, DealerData[id][dealerX] + (1.5 * floatsin(-DealerData[id][dealerA], degrees)), DealerData[id][dealerY] + (1.5 * floatcos(-DealerData[id][dealerA], degrees)), DealerData[id][dealerZ]);
	}

	return 1;
}

CMD:setdealerskin(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
	if(isnull(params)) return BilgiMesajGonder(playerid, "/setdealerskin [dealer id] [skin id]");
	new id, skin;
	if(sscanf(params, "ii", id, skin)) return BilgiMesajGonder(playerid, "/setdealerskin [dealer id] [skin id]");
	if(!Iter_Contains(Dealers, id)) return HataMesajGonder(playerid, "Geçersiz ID.");
	if(!(0 <= skin <= 311)) return HataMesajGonder(playerid, "Geçersiz Skin ID.");
	DealerData[id][dealerSkin] = skin;

	DestroyActor(DealerData[id][dealerActorID]);
	DealerData[id][dealerActorID] = CreateActor(skin, DealerData[id][dealerX], DealerData[id][dealerY], DealerData[id][dealerZ], DealerData[id][dealerA]);
	SetActorInvulnerable(DealerData[id][dealerActorID], 1);
    SetActorVirtualWorld(DealerData[id][dealerActorID], DealerData[id][dealerVw]);
	stmt_bind_value(UpdateDealer, 0, DB::TYPE_INTEGER, skin);
	stmt_bind_value(UpdateDealer, 1, DB::TYPE_INTEGER, DealerData[id][dealerDrugs]);
    stmt_bind_value(UpdateDealer, 2, DB::TYPE_FLOAT, DealerData[id][dealerX]);
    stmt_bind_value(UpdateDealer, 3, DB::TYPE_FLOAT, DealerData[id][dealerY]);
    stmt_bind_value(UpdateDealer, 4, DB::TYPE_FLOAT, DealerData[id][dealerZ]);
    stmt_bind_value(UpdateDealer, 5, DB::TYPE_FLOAT, DealerData[id][dealerA]);
    stmt_bind_value(UpdateDealer, 6, DB::TYPE_INTEGER, DealerData[id][dealerVw]);
    stmt_bind_value(UpdateDealer, 7, DB::TYPE_INTEGER, id);

    if(stmt_execute(UpdateDealer)) MesajGonder(playerid, "Uyuþturucu satýcýsýnýn skini deðiþtirildi.");
	return 1;
}

CMD:setdealerpos(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
	new id;
	if(sscanf(params, "i", id)) return BilgiMesajGonder(playerid, "/setdealerpos [dealer id]");
	if(!Iter_Contains(Dealers, id)) return HataMesajGonder(playerid, "Geçersiz ID.");
	GetPlayerPos(playerid, DealerData[id][dealerX], DealerData[id][dealerY], DealerData[id][dealerZ]);
	GetPlayerFacingAngle(playerid, DealerData[id][dealerA]);

	DestroyActor(DealerData[id][dealerActorID]);
	DealerData[id][dealerActorID] = CreateActor(DealerData[id][dealerSkin], DealerData[id][dealerX], DealerData[id][dealerY], DealerData[id][dealerZ], DealerData[id][dealerA]);
	SetActorInvulnerable(DealerData[id][dealerActorID], 1);
	DealerData[id][dealerVw] = GetPlayerVirtualWorld(playerid);
	SetActorVirtualWorld(DealerData[id][dealerActorID], DealerData[id][dealerVw]);
    Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, DealerData[id][dealerLabel], E_STREAMER_X, DealerData[id][dealerX]);
	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, DealerData[id][dealerLabel], E_STREAMER_Y, DealerData[id][dealerY]);
	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, DealerData[id][dealerLabel], E_STREAMER_Z, DealerData[id][dealerZ] + 0.25);

	stmt_bind_value(UpdateDealer, 0, DB::TYPE_INTEGER, DealerData[id][dealerSkin]);
	stmt_bind_value(UpdateDealer, 1, DB::TYPE_INTEGER, DealerData[id][dealerDrugs]);
    stmt_bind_value(UpdateDealer, 2, DB::TYPE_FLOAT, DealerData[id][dealerX]);
    stmt_bind_value(UpdateDealer, 3, DB::TYPE_FLOAT, DealerData[id][dealerY]);
    stmt_bind_value(UpdateDealer, 4, DB::TYPE_FLOAT, DealerData[id][dealerZ]);
    stmt_bind_value(UpdateDealer, 5, DB::TYPE_FLOAT, DealerData[id][dealerA]);
    stmt_bind_value(UpdateDealer, 6, DB::TYPE_INTEGER, DealerData[id][dealerVw]);
    stmt_bind_value(UpdateDealer, 7, DB::TYPE_INTEGER, id);

    if(stmt_execute(UpdateDealer))
	{
		MesajGonder(playerid, "Uyuþturucu satýcýsýnýn pozisyonu deðiþtirildi.");
        SetPlayerPos(playerid, DealerData[id][dealerX] + (1.5 * floatsin(-DealerData[id][dealerA], degrees)), DealerData[id][dealerY] + (1.5 * floatcos(-DealerData[id][dealerA], degrees)), DealerData[id][dealerZ]);
	}

	return 1;
}

CMD:removedealer(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
	new id;
	if(sscanf(params, "i", id)) return HataMesajGonder(playerid, "/removedealer [dealer id]");
	if(!Iter_Contains(Dealers, id)) return HataMesajGonder(playerid, "Geçersiz ID.");
	DestroyActor(DealerData[id][dealerActorID]);
	DestroyDynamic3DTextLabel(DealerData[id][dealerLabel]);

	DealerData[id][dealerActorID] = -1;
	DealerData[id][dealerLabel] = Text3D: -1;
	Iter_Remove(Dealers, id);

	stmt_bind_value(RemoveDealer, 0, DB::TYPE_INTEGER, id);
    if(stmt_execute(RemoveDealer)) MesajGonder(playerid, "Uyuþturucu satýcýsý kaldýrýldý.");
	return 1;
}
CMD:revive(playerid, params[])
{
	new id;
    if(PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
    if(sscanf(params, "u", id)) return BilgiMesajGonder(playerid, "/revive [ID/Isim]");
    if(!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu oyunda deðil.");
    if(PlayerData[id][pBaygin] == 0) return HataMesajGonder(playerid, "Oyuncu yaralý deðil.");
    if(IsPlayerDying(playerid)) return HataMesajGonder(playerid, "Biraz bekleyin.");
    ResetPlayerDamages(id);
    PlayerData[id][pBaygin] = 0;
    PlayerData[id][pBayginSure] = 0;
    CanAyarla(id, 100);
    TogglePlayerControllable(id, true);
    ClearAnimations(id);
    MesajGonder(playerid, "%s adlý kiþiyi canlandýrdýnýz.", ReturnName(id, 0));
    MesajGonder(id, "%s adlý yetkili tarafýndan canlandýrýldýnýz.", PlayerData[playerid][pAdminName]);
    new rank[20];
	if(PlayerData[playerid][pHelper] > 0) format(rank, sizeof(rank), "(Lv. %d) Helper", PlayerData[playerid][pHelper]);
	else format(rank, sizeof(rank), "%s", GetAdminRank(playerid));
    AdminHelperMessage(COLOR_LIGHTRED, "AdmLog: (%s) %s, %s(%d) adlý oyuncuyu canlandýrdý.", ReturnDate(), rank, PlayerData[playerid][pAdminName], Player_GetName(id), id);
	return 1;
}
CMD:reviveall(playerid)
{
    if (PlayerData[playerid][pAdmin] < 2)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");

    foreach (new i : Player) {
        if(PlayerData[i][pBaygin] == 1)
        {
            SetCameraBehindPlayer(i);
            PlayerData[i][pBaygin] = 0;
			PlayerData[i][pBayginSure] = 0;
            ClearAnimations(i);
            TogglePlayerControllable(i, true);
            CanAyarla(i, 100);
            MesajGonder(i, "%s adlý yetkili tarafýndan canlandýrýldýnýz.",PlayerData[playerid][pAdminName]);
        }
    }
    AdminMessage(COLOR_LIGHTRED,"(%s) - (( %s adlý yetkili tarafýndan bütün oyuncular canlandýrýldý. ))",ReturnDate(), PlayerData[playerid][pAdminName]);
    return 1;
}
CMD:abankasahip(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    new id, owner;
    if (sscanf(params, "ii", id, owner)) return BilgiMesajGonder(playerid, "/abankasahip [Hesap ID] [Yeni Sahip SQL ID]");
    new query[128];
    mysql_format(baglanti, query, sizeof(query), "UPDATE bank_accounts SET Owner='%d' WHERE ID=%d", owner, id);
    mysql_tquery(baglanti, query, "OnBankAccountAdminEdit", "i", playerid);
	return 1;
}

CMD:abankasifre(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    new id, password[16];
    if (sscanf(params, "is[16]", id, password)) return BilgiMesajGonder(playerid, "/abankasifre [Hesap ID] [Þifre]");
    new query[128];
    mysql_format(baglanti, query, sizeof(query), "UPDATE bank_accounts SET Password=md5('%e') WHERE ID=%d", password, id);
    mysql_tquery(baglanti, query, "OnBankAccountAdminEdit", "i", playerid);
	return 1;
}

CMD:adengedegistir(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    new id, balance;
    if (sscanf(params, "ii", id, balance)) return BilgiMesajGonder(playerid, "/adengedegistir [Hesap ID] [Para]");
    if (balance > ACCOUNT_LIMIT) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Balance you specified exceeds account money limit.");
    new query[128];
    mysql_format(baglanti, query, sizeof(query), "UPDATE bank_accounts SET Balance=%d WHERE ID=%d", balance, id);
    mysql_tquery(baglanti, query, "OnBankAccountAdminEdit", "i", playerid);
	return 1;
}

CMD:abankaclearlogs(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    new id, type;
    if (sscanf(params, "iI(0)", id, type))
	{
	    SendClientMessage(playerid, 0xE88732FF, "KULLANIM: {FFFFFF}/abankaclearlogs [Hesap ID] [Log Tipi]");
	    SendClientMessage(playerid, 0xE88732FF, "TIP: {FFFFFF}0- Bütün | 1- Giriþler | 2- Yatýrýlan | 3- Çekilen | 4- Transfer | 5- Þifre Deðiþtirmeler");
		return 1;
	}

	new query[128];
	if (type > 0) {
	    mysql_format(baglanti, query, sizeof(query), "DELETE FROM bank_logs WHERE AccountID=%d && Type=%d", id, type);
	}else{
	    mysql_format(baglanti, query, sizeof(query), "DELETE FROM bank_logs WHERE AccountID=%d", id);
	}

    mysql_tquery(baglanti, query, "OnBankAccountAdminEdit", "i", playerid);
	return 1;
}

CMD:abankahesapsil(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    new id;
    if (sscanf(params, "i", id)) return SendClientMessage(playerid, 0xE88732FF, "KULLANIM: {FFFFFF}/abankahesapsil [Hesap ID]");
    foreach (new i : Player)
    {
        if (CurrentAccountID[i] == id) CurrentAccountID[i] = -1;
    }

    new query[128];
    mysql_format(baglanti, query, sizeof(query), "UPDATE bank_accounts SET Disabled=1 WHERE ID=%d", id);
    mysql_tquery(baglanti, query, "OnBankAccountAdminEdit", "i", playerid);
	return 1;
}

CMD:abankahesapkurtar(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    new id;
    if (sscanf(params, "i", id)) return SendClientMessage(playerid, 0xE88732FF, "KULLANIM: {FFFFFF}/abankahesapkurtar [hesap id]");
    new query[128];
    mysql_format(baglanti, query, sizeof(query), "UPDATE bank_accounts SET Disabled=0 WHERE ID=%d", id);
    mysql_tquery(baglanti, query, "OnBankAccountAdminEdit", "i", playerid);
	return 1;
}

// Admin Commands for Bankers
CMD:createbanker(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
	new id = Iter_Free(Bankers);
	if (id == -1) return HataMesajGonder(playerid, "Daha fazla oluþturulamaz.");
	new skin;
	if (sscanf(params, "i", skin)) return BilgiMesajGonder(playerid, "/createbanker [Skin ID]");
	if (!(0 <= skin <= 311)) return HataMesajGonder(playerid, "Geçersiz Skin ID.");
	BankerData[id][Skin] = skin;
	GetPlayerPos(playerid, BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ]);
	GetPlayerFacingAngle(playerid, BankerData[id][bankerA]);
	SetPlayerPos(playerid, BankerData[id][bankerX] + (1.0 * floatsin(-BankerData[id][bankerA], degrees)), BankerData[id][bankerY] + (1.0 * floatcos(-BankerData[id][bankerA], degrees)), BankerData[id][bankerZ]);

	BankerData[id][bankerActorID] = CreateActor(skin, BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ], BankerData[id][bankerA]);
	if (IsValidActor(BankerData[id][bankerActorID])) SetActorInvulnerable(BankerData[id][bankerActorID], true);
	SetActorVirtualWorld(BankerData[id][bankerActorID], GetPlayerVirtualWorld(playerid));
	BankerData[id][bankerActorID] = GetPlayerVirtualWorld(playerid);

	#if defined BANKER_USE_MAPICON
	BankerData[id][bankerIconID] = CreateDynamicMapIcon(BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ], 58, 0, .streamdistance = BANKER_ICON_RANGE);
	#endif

	new label_string[80];
	format(label_string, sizeof(label_string), "{F1C40F}[%d] FLEECA Banka Görevlisi\n\n{FFFFFF}[{808080}ALT{FFFFFF}]", id);
	BankerData[id][bankerLabel] = CreateDynamic3DTextLabel(label_string, 0x1ABC9CFF, BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ] + 0.25, 5.0, .testlos = 1);

	new query[225];
	mysql_format(baglanti, query, sizeof(query), "INSERT INTO bankers (`ID`, `Skin`, `PosX`, `PosY`, `PosZ`, `PosA`, `Virtual`) VALUES ('%d', '%d', '%f', '%f', '%f', '%f', '%d')", id, skin, BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ], BankerData[id][bankerA], GetPlayerVirtualWorld(playerid));
	mysql_tquery(baglanti, query);

	Iter_Add(Bankers, id);
	return 1;
}

CMD:setbankerpos(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
	new id;
	if (sscanf(params, "i", id)) return BilgiMesajGonder(playerid, "/setbankerpos [ID]");
	if (!Iter_Contains(Bankers, id)) return HataMesajGonder(playerid, "Geçersiz ID.");
	GetPlayerPos(playerid, BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ]);
	GetPlayerFacingAngle(playerid, BankerData[id][bankerA]);

	DestroyActor(BankerData[id][bankerActorID]);
	BankerData[id][bankerActorID] = CreateActor(BankerData[id][Skin], BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ], BankerData[id][bankerA]);
	if (IsValidActor(BankerData[id][bankerActorID])) SetActorInvulnerable(BankerData[id][bankerActorID], true);
    SetActorVirtualWorld(BankerData[id][bankerActorID], GetPlayerVirtualWorld(playerid));
	BankerData[id][bankerActorID] = GetPlayerVirtualWorld(playerid);
	#if defined BANKER_USE_MAPICON
	Streamer_SetFloatData(STREAMER_TYPE_MAP_ICON, BankerData[id][bankerIconID], E_STREAMER_X, BankerData[id][bankerX]);
	Streamer_SetFloatData(STREAMER_TYPE_MAP_ICON, BankerData[id][bankerIconID], E_STREAMER_Y, BankerData[id][bankerY]);
	Streamer_SetFloatData(STREAMER_TYPE_MAP_ICON, BankerData[id][bankerIconID], E_STREAMER_Z, BankerData[id][bankerZ]);
	#endif

	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, BankerData[id][bankerLabel], E_STREAMER_X, BankerData[id][bankerX]);
	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, BankerData[id][bankerLabel], E_STREAMER_Y, BankerData[id][bankerY]);
	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, BankerData[id][bankerLabel], E_STREAMER_Z, BankerData[id][bankerZ]);

	SetPlayerPos(playerid, BankerData[id][bankerX] + (1.0 * floatsin(-BankerData[id][bankerA], degrees)), BankerData[id][bankerY] + (1.0 * floatcos(-BankerData[id][bankerA], degrees)), BankerData[id][bankerZ]);

	new query[144];
	mysql_format(baglanti, query, sizeof(query), "UPDATE bankers SET PosX='%f', PosY='%f', PosZ='%f', PosA='%f', `Virtual` = '%d' WHERE ID=%d", BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ], BankerData[id][bankerA], GetPlayerVirtualWorld(playerid),id);
	mysql_tquery(baglanti, query);
	return 1;
}

CMD:setbankerskin(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
	new id, skin;
	if (sscanf(params, "ii", id, skin)) return BilgiMesajGonder(playerid, "/setbankerskin [ID] [Skin ID]");
	if (!Iter_Contains(Bankers, id)) return HataMesajGonder(playerid, "Geçersiz ID.");
	if (!(0 <= skin <= 311)) return HataMesajGonder(playerid, "Geçersiz Skin ID.");
	BankerData[id][Skin] = skin;

	if (IsValidActor(BankerData[id][bankerActorID])) DestroyActor(BankerData[id][bankerActorID]);
	BankerData[id][bankerActorID] = CreateActor(BankerData[id][Skin], BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ], BankerData[id][bankerA]);
	if (IsValidActor(BankerData[id][bankerActorID])) SetActorInvulnerable(BankerData[id][bankerActorID], true);

	new query[48];
	mysql_format(baglanti, query, sizeof(query), "UPDATE bankers SET Skin=%d WHERE ID=%d", BankerData[id][Skin], id);
	mysql_tquery(baglanti, query);
	return 1;
}

CMD:removebanker(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
	new id;
	if (sscanf(params, "i", id)) return BilgiMesajGonder(playerid, "/removebanker [ID]");
	if (!Iter_Contains(Bankers, id)) return HataMesajGonder(playerid, "Geçersiz ID.");
	if (IsValidActor(BankerData[id][bankerActorID])) DestroyActor(BankerData[id][bankerActorID]);
	BankerData[id][bankerActorID] = -1;

	#if defined BANKER_USE_MAPICON
	if (IsValidDynamicMapIcon(BankerData[id][bankerIconID])) DestroyDynamicMapIcon(BankerData[id][bankerIconID]);
    BankerData[id][bankerIconID] = -1;
    #endif

    if (IsValidDynamic3DTextLabel(BankerData[id][bankerLabel])) DestroyDynamic3DTextLabel(BankerData[id][bankerLabel]);
    BankerData[id][bankerLabel] = Text3D: -1;

	Iter_Remove(Bankers, id);

	new query[48];
	mysql_format(baglanti, query, sizeof(query), "DELETE FROM bankers WHERE ID=%d", id);
	mysql_tquery(baglanti, query);
	return 1;
}


/*============================================================================*/


/*============================================================================*/

// Admin Commands for ATMs
CMD:createatm(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
	new id = Iter_Free(ATMs);
	if (id == -1) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Can't create any more ATMs.");
	ATMData[id][atmRX] = ATMData[id][atmRY] = 0.0;

	#if defined ATM_USE_MAPICON
	ATMData[id][atmIconID] = CreateDynamicMapIcon(ATMData[id][atmX], ATMData[id][atmY], ATMData[id][atmZ], 52, 0, .streamdistance = ATM_ICON_RANGE);
	#endif

	GetPlayerPos(playerid, ATMData[id][atmX], ATMData[id][atmY], ATMData[id][atmZ]);
	GetPlayerFacingAngle(playerid, ATMData[id][atmRZ]);

	ATMData[id][atmX] += (2.0 * floatsin(-ATMData[id][atmRZ], degrees));
    ATMData[id][atmY] += (2.0 * floatcos(-ATMData[id][atmRZ], degrees));
    ATMData[id][atmZ] -= 0.3;

	ATMData[id][atmObjID] = CreateDynamicObject(-2905, ATMData[id][atmX], ATMData[id][atmY], ATMData[id][atmZ], ATMData[id][atmRX], ATMData[id][atmRY], ATMData[id][atmRZ]);

    if (IsValidDynamicObject(ATMData[id][atmObjID]))
    {
        #if defined ROBBABLE_ATMS
        new dataArray[E_ATMDATA];
        format(dataArray[IDString], 8, "atm_sys");
        dataArray[refID] = id;
        Streamer_SetArrayData(STREAMER_TYPE_OBJECT, ATMData[id][atmObjID], E_STREAMER_EXTRA_ID, dataArray);
		#endif

        EditingATMID[playerid] = id;
        EditDynamicObject(playerid, ATMData[id][atmObjID]);
    }

	#if defined ATM_USE_MAPICON
	ATMData[id][atmIconID] = CreateDynamicMapIcon(ATMData[id][atmX], ATMData[id][atmY], ATMData[id][atmZ], 52, 0, .streamdistance = ATM_ICON_RANGE);
	#endif

	new label_string[64];
	format(label_string, sizeof(label_string), "{F1C40F}[%d] FLEECA ATM\n\n{FFFFFF}[{808080}ALT{FFFFFF}]", id);
	ATMData[id][atmLabel] = CreateDynamic3DTextLabel(label_string, 0x1ABC9CFF, ATMData[id][atmX], ATMData[id][atmY], ATMData[id][atmZ] + 0.99, 5.0, .testlos = 1);

	new query[144];
	mysql_format(baglanti, query, sizeof(query), "INSERT INTO bank_atms SET ID=%d, PosX='%f', PosY='%f', PosZ='%f', RotX='%f', RotY='%f', RotZ='%f'", id, ATMData[id][atmX], ATMData[id][atmY], ATMData[id][atmZ], ATMData[id][atmRX], ATMData[id][atmRY], ATMData[id][atmRZ]);
	mysql_tquery(baglanti, query);

	Iter_Add(ATMs, id);
	return 1;
}

CMD:editatm(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
	new id;
	if (sscanf(params, "i", id)) return BilgiMesajGonder(playerid, "/editatm [ATM ID]");
	if (!Iter_Contains(ATMs, id)) return HataMesajGonder(playerid, "Geçersiz ID.");
	if (!IsPlayerInRangeOfPoint(playerid, 30.0, ATMData[id][atmX], ATMData[id][atmY], ATMData[id][atmZ])) return HataMesajGonder(playerid, "Editlemek istediðiniz ATM'ye yakýn deðilsiniz.");
	if (EditingATMID[playerid] != -1) return HataMesajGonder(playerid, "Zaten ATM editliyorsun.");
	EditingATMID[playerid] = id;
	EditDynamicObject(playerid, ATMData[id][atmObjID]);
	return 1;
}

CMD:removeatm(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
	new id;
	if (sscanf(params, "i", id)) return BilgiMesajGonder(playerid, "/removeatm [ID]");
	if (!Iter_Contains(ATMs, id)) return HataMesajGonder(playerid, "Geçersiz ATM id.");
	if (IsValidDynamicObject(ATMData[id][atmObjID])) DestroyDynamicObject(ATMData[id][atmObjID]);
	ATMData[id][atmObjID] = -1;

	#if defined ATM_USE_MAPICON
	if (IsValidDynamicMapIcon(ATMData[id][atmIconID])) DestroyDynamicMapIcon(ATMData[id][atmIconID]);
    ATMData[id][atmIconID] = -1;
    #endif

    if (IsValidDynamic3DTextLabel(ATMData[id][atmLabel])) DestroyDynamic3DTextLabel(ATMData[id][atmLabel]);
    ATMData[id][atmLabel] = Text3D: -1;

	#if defined ROBBABLE_ATMS
    if (ATMData[id][atmTimer] != -1) KillTimer(ATMData[id][atmTimer]);
    ATMData[id][atmTimer] = -1;

    if (IsValidDynamicPickup(ATMData[id][atmPickup])) DestroyDynamicPickup(ATMData[id][atmPickup]);
    ATMData[id][atmPickup] = -1;

    ATMData[id][atmHealth] = ATM_HEALTH;
	ATMData[id][atmRegen] = 0;
	#endif

	Iter_Remove(ATMs, id);

	new query[48];
	mysql_format(baglanti, query, sizeof(query), "DELETE FROM bank_atms WHERE ID=%d", id);
	mysql_tquery(baglanti, query);
	return 1;
}
CMD:setfuel(playerid, params[])
{
	new vid, Float:fuel;
	if(PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
	if(sscanf(params, "if", vid, fuel)) return BilgiMesajGonder(playerid, "/setfuel [Araç ID] [Yakýt]");
	if(!IsValidVehicle(vid)) return HataMesajGonder(playerid, "Böyle bir araç yok.");
	if(fuel > 100.0 || fuel < 0.1) return HataMesajGonder(playerid, "En fazla 100, en az 0 yakýt verebilirsiniz.");
	new arac = Car_GetID(vid);
	if(arac == -1) return HataMesajGonder(playerid, "Bu aracýn yakýtýný ayarlayamazsýnýz.");
	AracInfo[arac][aracBenzin] = fuel;
	MesajGonder(playerid, "%d ID'li aracýn yakýtý %.1f olarak deðiþtirildi.", vid, fuel);
	return 1;
}
CMD:gotoobject(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
	if(isnull(params)) return BilgiMesajGonder(playerid, "/gotoobject [ID]");
	new id = strval(params[0]);
	if(!(0 <= id <= MAX_COP_OBJECTS - 1)) return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");
	if(!CopObjectData[id][ObjCreated]) return HataMesajGonder(playerid, "Böyle bir obje yok.");
	SetPlayerPos(playerid, CopObjectData[id][ObjX], CopObjectData[id][ObjY], CopObjectData[id][ObjZ] + 1.75);
	SetPlayerInterior(playerid, CopObjectData[id][ObjInterior]);
	SetPlayerVirtualWorld(playerid, CopObjectData[id][ObjVirtualWorld]);
	MesajGonder(playerid, "%d ID'li objeye ýþýnlandýnýz.", id);
	return 1;
}
CMD:createtree(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
	new id = Iter_Free(Trees);
	if(id == -1) return SendClientMessage(playerid, 0xE74C3CFF, "Daha fazla aðaç oluþturulamaz.");
 	new Float: x, Float: y, Float: z, Float: a;
 	GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
 	x += (3.0 * floatsin(-a, degrees));
	y += (3.0 * floatcos(-a, degrees));
	z -= 1.0;

	TreeData[id][treeX] = x;
	TreeData[id][treeY] = y;
	TreeData[id][treeZ] = z;
	TreeData[id][treeRX] = TreeData[id][treeRY] = TreeData[id][treeRZ] = 0.0;

	TreeData[id][treeObjID] = CreateDynamicObject(657, TreeData[id][treeX], TreeData[id][treeY], TreeData[id][treeZ], TreeData[id][treeRX], TreeData[id][treeRY], TreeData[id][treeRZ]);

	new label[96];
	format(label, sizeof(label), "Aðaç (%d)\n\n{F1C40F}~k~~CONVERSATION_NO~ {FFFFFF}ile kesebilirsin.", id);
	TreeData[id][treeLabel] = CreateDynamic3DTextLabel(label, 0x2ECC71FF, TreeData[id][treeX], TreeData[id][treeY], TreeData[id][treeZ] + 1.5, 5.0);
	Iter_Add(Trees, id);

	stmt_bind_value(AddTree, 0, DB::TYPE_INTEGER, id);
    stmt_bind_value(AddTree, 1, DB::TYPE_FLOAT, TreeData[id][treeX]);
    stmt_bind_value(AddTree, 2, DB::TYPE_FLOAT, TreeData[id][treeY]);
    stmt_bind_value(AddTree, 3, DB::TYPE_FLOAT, TreeData[id][treeZ]);
    stmt_bind_value(AddTree, 4, DB::TYPE_FLOAT, TreeData[id][treeRX]);
    stmt_bind_value(AddTree, 5, DB::TYPE_FLOAT, TreeData[id][treeRY]);
    stmt_bind_value(AddTree, 6, DB::TYPE_FLOAT, TreeData[id][treeRZ]);

    if(stmt_execute(AddTree))
    {
        EditingTreeID[playerid] = id;
        EditDynamicObject(playerid, TreeData[id][treeObjID]);

        MesajGonder(playerid, "Aðaç oluþturuldu, ID: %d", id);
	}

	return 1;
}

CMD:edittree(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
    if(EditingTreeID[playerid] != -1) return HataMesajGonder(playerid, "Zaten aðaç editliyorsun.");
	new id;
	if(sscanf(params, "i", id)) return BilgiMesajGonder(playerid, "/edittree [tree id]");
	if(!Iter_Contains(Trees, id)) return HataMesajGonder(playerid, "Geçersiz ID.");
	if(TreeData[id][treeGettingCut]) return HataMesajGonder(playerid, "Bu aðaç kesildiði için düzenleyemezsiniz.");
	if(!IsPlayerInRangeOfPoint(playerid, 30.0, TreeData[id][treeX], TreeData[id][treeY], TreeData[id][treeZ])) return SendClientMessage(playerid, 0xE74C3CFF, "Düzenlemek istediðiniz aðaca yakýn deðilsiniz.");
	EditingTreeID[playerid] = id;
	EditDynamicObject(playerid, TreeData[id][treeObjID]);
	return 1;
}

CMD:removetree(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
	new id;
	if(sscanf(params, "i", id)) return BilgiMesajGonder(playerid, "/removetree [tree id]");
	if(!Iter_Contains(Trees, id)) return HataMesajGonder(playerid, "Geçersiz ID.");
	if(TreeData[id][treeGettingCut]) return HataMesajGonder(playerid, "Bu aðaç kesildiði için silemezsiniz.");
	if(Tree_BeingEdited(id)) return HataMesajGonder(playerid, "Bu aðaç düzenlendiði için silemezsiniz.");
	DestroyDynamicObject(TreeData[id][treeObjID]);
	DestroyDynamic3DTextLabel(TreeData[id][treeLabel]);
	if(TreeData[id][treeTimer] != -1) KillTimer(TreeData[id][treeTimer]);

	TreeData[id][treeLogs] = TreeData[id][treeSeconds] = 0;
	TreeData[id][treeObjID] = TreeData[id][treeTimer] = -1;
	TreeData[id][treeLabel] = Text3D: -1;
	Iter_Remove(Trees, id);

	stmt_bind_value(RemoveTree, 0, DB::TYPE_INTEGER, id);
	if(stmt_execute(RemoveTree)) MesajGonder(playerid, "Aðaç silindi.");
	return 1;
}

// Admin Commands - Log Buyers
CMD:createbuyer(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
	new skin;
	if(sscanf(params, "i", skin)) return BilgiMesajGonder(playerid, "/createbuyer [skin id]");
	if(!(0 <= skin <= 311)) return HataMesajGonder(playerid, "Geçersiz Skin ID.");
	new id = Iter_Free(Buyers);
	if(id == -1) return HataMesajGonder(playerid, "Daha fazla oluþturulamaz.");
	GetPlayerPos(playerid, BuyerData[id][buyerX], BuyerData[id][buyerY], BuyerData[id][buyerZ]);
	GetPlayerFacingAngle(playerid, BuyerData[id][buyerA]);

	BuyerData[id][buyerActorID] = CreateActor(skin, BuyerData[id][buyerX], BuyerData[id][buyerY], BuyerData[id][buyerZ], BuyerData[id][buyerA]);
	SetActorInvulnerable(BuyerData[id][buyerActorID], 1);

	new label[180];
	format(label, sizeof(label), "Oduncu (%d)\n\n{FFFFFF}Testere almak için {F1C40F}/testere {FFFFFF}kullanabilirsiniz. {2ECC71}(%s)\n{FFFFFF}Odun satmak için {F1C40F}/odun sat {FFFFFF}kullanabilirsin. {2ECC71}(%s).", id, FormatNumber(CSAW_PRICE), FormatNumber(LOG_PRICE));
	BuyerData[id][buyerLabel] = CreateDynamic3DTextLabel(label, 0xF1C40FFF, BuyerData[id][buyerX], BuyerData[id][buyerY], BuyerData[id][buyerZ] + 0.25, 5.0, .testlos = 1);
	Iter_Add(Buyers, id);

	stmt_bind_value(AddBuyer, 0, DB::TYPE_INTEGER, id);
	stmt_bind_value(AddBuyer, 1, DB::TYPE_INTEGER, skin);
    stmt_bind_value(AddBuyer, 2, DB::TYPE_FLOAT, BuyerData[id][buyerX]);
    stmt_bind_value(AddBuyer, 3, DB::TYPE_FLOAT, BuyerData[id][buyerY]);
    stmt_bind_value(AddBuyer, 4, DB::TYPE_FLOAT, BuyerData[id][buyerZ]);
    stmt_bind_value(AddBuyer, 5, DB::TYPE_FLOAT, BuyerData[id][buyerA]);

    if(stmt_execute(AddBuyer))
	{
		SetPlayerPos(playerid, BuyerData[id][buyerX] + (1.5 * floatsin(-BuyerData[id][buyerA], degrees)), BuyerData[id][buyerY] + (1.5 * floatcos(-BuyerData[id][buyerA], degrees)), BuyerData[id][buyerZ]);
	}

	return 1;
}

CMD:setbuyerskin(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
	new id, skin;
	if(sscanf(params, "ii", id, skin)) return SendClientMessage(playerid, 0xE88732FF, "KULLANIM: {FFFFFF}/setbuyerskin [buyer id] [skin id]");
	if(!Iter_Contains(Buyers, id)) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Geçersiz ID.");
	if(!(0 <= skin <= 311)) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Geçersiz skin ID.");
	BuyerData[id][buyerSkin] = skin;

	DestroyActor(BuyerData[id][buyerActorID]);
	BuyerData[id][buyerActorID] = CreateActor(skin, BuyerData[id][buyerX], BuyerData[id][buyerY], BuyerData[id][buyerZ], BuyerData[id][buyerA]);
	SetActorInvulnerable(BuyerData[id][buyerActorID], 1);

	stmt_bind_value(UpdateBuyer, 0, DB::TYPE_INTEGER, skin);
    stmt_bind_value(UpdateBuyer, 1, DB::TYPE_FLOAT, BuyerData[id][buyerX]);
    stmt_bind_value(UpdateBuyer, 2, DB::TYPE_FLOAT, BuyerData[id][buyerY]);
    stmt_bind_value(UpdateBuyer, 3, DB::TYPE_FLOAT, BuyerData[id][buyerZ]);
    stmt_bind_value(UpdateBuyer, 4, DB::TYPE_FLOAT, BuyerData[id][buyerA]);
    stmt_bind_value(UpdateBuyer, 5, DB::TYPE_INTEGER, id);

	return 1;
}

CMD:setbuyerpos(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
	new id;
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, 0xE88732FF, "KULLANIM: {FFFFFF}/setbuyerpos [buyer id]");
	if(!Iter_Contains(Buyers, id)) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Geçersiz ID.");
	GetPlayerPos(playerid, BuyerData[id][buyerX], BuyerData[id][buyerY], BuyerData[id][buyerZ]);
	GetPlayerFacingAngle(playerid, BuyerData[id][buyerA]);

	DestroyActor(BuyerData[id][buyerActorID]);
	BuyerData[id][buyerActorID] = CreateActor(BuyerData[id][buyerSkin], BuyerData[id][buyerX], BuyerData[id][buyerY], BuyerData[id][buyerZ], BuyerData[id][buyerA]);
	SetActorInvulnerable(BuyerData[id][buyerActorID], 1);

    Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, BuyerData[id][buyerLabel], E_STREAMER_X, BuyerData[id][buyerX]);
	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, BuyerData[id][buyerLabel], E_STREAMER_Y, BuyerData[id][buyerY]);
	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, BuyerData[id][buyerLabel], E_STREAMER_Z, BuyerData[id][buyerZ] + 0.25);

	stmt_bind_value(UpdateBuyer, 0, DB::TYPE_INTEGER, BuyerData[id][buyerSkin]);
    stmt_bind_value(UpdateBuyer, 1, DB::TYPE_FLOAT, BuyerData[id][buyerX]);
    stmt_bind_value(UpdateBuyer, 2, DB::TYPE_FLOAT, BuyerData[id][buyerY]);
    stmt_bind_value(UpdateBuyer, 3, DB::TYPE_FLOAT, BuyerData[id][buyerZ]);
    stmt_bind_value(UpdateBuyer, 4, DB::TYPE_FLOAT, BuyerData[id][buyerA]);
    stmt_bind_value(UpdateBuyer, 5, DB::TYPE_INTEGER, id);

    if(stmt_execute(UpdateBuyer))
	{
        SetPlayerPos(playerid, BuyerData[id][buyerX] + (1.5 * floatsin(-BuyerData[id][buyerA], degrees)), BuyerData[id][buyerY] + (1.5 * floatcos(-BuyerData[id][buyerA], degrees)), BuyerData[id][buyerZ]);
	}

	return 1;
}

CMD:removebuyer(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
	new id;
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, 0xE88732FF, "KULLANIM: {FFFFFF}/removebuyer [buyer id]");
	if(!Iter_Contains(Buyers, id)) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Geçersiz ID.");
	DestroyActor(BuyerData[id][buyerActorID]);
	DestroyDynamic3DTextLabel(BuyerData[id][buyerLabel]);

	BuyerData[id][buyerActorID] = -1;
	BuyerData[id][buyerLabel] = Text3D: -1;
	Iter_Remove(Buyers, id);

	stmt_bind_value(RemoveBuyer, 0, DB::TYPE_INTEGER, id);
	return 1;
}
CMD:bakiyever(playerid, params[])
{
	new id, bakiye;
	if(PlayerData[playerid][pAdmin] < 5) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
	if(sscanf(params, "ui", id, bakiye)) return BilgiMesajGonder(playerid, "/bakiyever [ID/Isim] [Miktar]");
	if(bakiye == 0) return 1;
	if(!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu oyunda deðil.");

	PlayerData[id][pBakiye] += bakiye;
	if(bakiye < 0)
	{
	    BilgiMesajGonder(playerid, "%s adlý kiþiden %d TL bakiyesini aldýn.", ReturnName(id, 0), bakiye);
    	BilgiMesajGonder(id, "%s adlý yetkili bakiyenizden %d TL sildi.", PlayerData[playerid][pAdminName], bakiye);
	}
	else
	{
	    MesajGonder(playerid, "%s adlý kiþiye %d TL bakiye verdiniz.", ReturnName(id, 0), bakiye);
    	MesajGonder(id, "%s adlý yetkili size %d TL bakiye verdi.", PlayerData[playerid][pAdminName], bakiye);
	}
	return 1;
}
CMD:siparisler(playerid)
{
    if(!OyundaDegil(playerid)) return 1;
	if(PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
	SetPVarInt(playerid, "Siparis", 0);
	SiparisListele(playerid);
	return 1;
}
CMD:setvip(playerid, params[])
{
	new id, level, gun;
	if(!OyundaDegil(playerid)) return 1;
	if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
	if(sscanf(params, "uii", id, level, gun)) return BilgiMesajGonder(playerid, "/setvip [ID/Isim] [Level] [Gün]");
	if(!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu oyunda deðil.");
	if(level < 0 || level > 3) return HataMesajGonder(playerid, "Geçersiz level girdiniz.");
	if(gun < 0) return 1;
	if(level == 0)
	{
		PlayerData[id][pVip] = 0;
		PlayerData[id][pVipSure] = 0;
		PlayerData[id][pVipRenk] = 0;
		PlayerData[id][pDovusStili] = 4;
  		SetPlayerFightingStyle(id, FIGHT_STYLE_NORMAL);
		Oyuncu_Kaydet(id);
		BilgiMesajGonder(id, "%s adlý yetkili tarafýndan V.I.P paketiniz silindi.", PlayerData[playerid][pAdminName]);
		BilgiMesajGonder(playerid, "%s adlý kiþinin V.I.P paketini sildiniz.", ReturnName(id, 0));
	}
	else
	{
	    PlayerData[id][pVip] = level;
	    PlayerData[id][pVipSure] = gettime()+gun*86400;
	    BilgiMesajGonder(id, "%s adlý yetkili size %s paketini %d günlük verdi. (Bitiþ tarihi: %s)", PlayerData[playerid][pAdminName], GetVIPName(level), gun, convertDatex(PlayerData[id][pVipSure]));
	    BilgiMesajGonder(playerid, "%s adlý kiþiye %s paketini %d günlük verdiniz. (Bitiþ tarihi: %s)", ReturnName(id, 0), GetVIPName(level), gun, convertDatex(PlayerData[id][pVipSure]));
	    Oyuncu_Kaydet(id);
	}
	Log_Write("logs/admin.log","%s adli admin %s adli kisiye %d gunluk level %d vip verdi.",PlayerData[playerid][pAdminName], ReturnName(id, 0), gun, level);
	return 1;
}
CMD:masked(playerid)
{
    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    static
        name[24];

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");

    foreach (new i : Player) if (PlayerData[i][pMaske] == true) {
        GetPlayerName(i, name, sizeof(name));

        SendClientMessageEx(playerid, COLOR_WHITE, "* %s (#%d)", name, PlayerData[i][pMaskeID]);
    }
    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
    return 1;
}
CMD:maskeidbul(playerid, params[])
{
	new maskid;
	if (PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");
	if(sscanf(params, "i", maskid)) return BilgiMesajGonder(playerid, "/maskeidbul [Maske ID]");
	new name[24], sayi;
	foreach(new i:Player) if(PlayerData[i][pMaskeID] == maskid)
	{
	    GetPlayerName(i, name, sizeof(name));
	    sayi++;
	    SendClientMessageEx(playerid, COLOR_WHITE, "* %s (ID: %d)", name, i);
	}
	if(sayi == 0) return HataMesajGonder(playerid, "Bulunamadý.");
	return 1;
}
CMD:ozelmodelver(playerid, params[])
{
	new sqlid, skinid;
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");
    if(sscanf(params, "ii", sqlid, skinid)) return BilgiMesajGonder(playerid, "/ozelmodelver [SQL ID] [Skin ID]");
    new query[124];
    format(query, sizeof(query), "SELECT null FROM `ozelmodel` WHERE `sqlid` = '%d' AND `skinid` = '%d'", sqlid, skinid);
    mysql_tquery(baglanti, query, "OzelModelVer", "iii", playerid, sqlid, skinid);
	return 1;
}
CMD:ozelmodelsil(playerid, params[])
{
    new sqlid, skinid;
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");
    if(sscanf(params, "ii", sqlid, skinid)) return BilgiMesajGonder(playerid, "/ozelmodelsil [SQL ID] [Skin ID]");
    new query[124];
    format(query, sizeof(query), "SELECT null FROM `ozelmodel` WHERE `sqlid` = '%d' AND `skinid` = '%d'", sqlid, skinid);
    mysql_tquery(baglanti, query, "OzelModelSil", "iii", playerid, sqlid, skinid);
	return 1;
}
CMD:hoodolustur(playerid, params[])
{
	new birlikid;
    if(PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");
    if(sscanf(params, "i", birlikid)) return BilgiMesajGonder(playerid, "/hoodolustur [Birlik ID]");
    new id = Hood_Olustur(playerid, birlikid);
    if(id == -1) return HataMesajGonder(playerid, "Hood oluþturulamadý.");
    MesajGonder(playerid, "Hood oluþturuldu, ID: %d", id);
	return 1;
}
CMD:hoodsil(playerid, params[])
{
	new id;
    if(PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");
    if(sscanf(params, "i", id)) return BilgiMesajGonder(playerid, "/hoodsil [ID]");
    if ((id < 0 || id >= MAX_HOOD) || Hood[id][hExists] == false) return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");
    Hood_Sil(id);
    MesajGonder(playerid, "Hood silindi.");
	return 1;
}
CMD:graffitisil(playerid, params[])
{
	new id;
	if(PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");
	if(sscanf(params, "i", id)) return BilgiMesajGonder(playerid, "/graffitisil [ID] (-1 yazarsanýz yakýnýnýzdaki graffiti silinir)");
	if(id == -1)
	{
	    new yakinid = GetClosestGraffiti(playerid);
	    if(yakinid == -1) return HataMesajGonder(playerid, "Yakýnýnýzda graffiti yok.");
	    Graffiti_Delete(yakinid);
	    MesajGonder(playerid, "Graffiti silindi, ID: %d.", yakinid);
	}
	else
	{
	    if ((id < 0 || id >= MAX_GRAFFITI_POINTS) || !GraffitiData[id][graffitiExists]) return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");
	    Graffiti_Delete(id);
	    MesajGonder(playerid, "Graffiti silindi, ID: %d.", id);
	}
	return 1;
}
CMD:ss(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");

    if (isnull(params))
        return BilgiMesajGonder(playerid, "/ss [IC]");

    if (strlen(params) > 64)
    {
        foreach (new i : Player) if (OyundaDegil(i)) {
            SendClientMessageEx(i, 0xAAC4E5FF, "(( [Sokaktan Sesler]: %.64s", params);
            SendClientMessageEx(i, 0xAAC4E5FF, "...%s ))", params[64]);
        }
    }
    else
    {
        foreach (new i : Player) if (OyundaDegil(i)) {
            SendClientMessageEx(i, 0xAAC4E5FF, "(( [Sokaktan Sesler]: %s ))", params);
        }
    }
    return 1;
}
CMD:o(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");

    if (isnull(params))
        return BilgiMesajGonder(playerid, "/o [Sunucu OOC Yazý]");
    if (strlen(params) > 64)
    {
        foreach (new i : Player)
		{
            SendClientMessageEx(i, 0x01A9DBFF, "(( [Oyun Dýþý] %s: %.64s", PlayerData[playerid][pAdminName], params);
            SendClientMessageEx(i, 0x01A9DBFF, "...%s ))", params[64]);
        }
    }
    else
    {
        foreach (new i : Player)
        {
            SendClientMessageEx(i, 0x01A9DBFF, "(( [Oyun Dýþý] %s: %s ))", PlayerData[playerid][pAdminName], params);
        }
    }
    return 1;
}
CMD:songiris(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");

    if (isnull(params) || strlen(params) > 24)
        return BilgiMesajGonder(playerid, "/songiris [Kullanýcý Adý]");

    static
        query[128];

    format(query, sizeof(query), "SELECT `SonGiris`, `LastIP` FROM `oyuncular` WHERE `Isim` = '%s'", SQL_ReturnEscaped(params));
    mysql_tquery(baglanti, query, "OnLoginDate", "ds", playerid, params);

    return 1;
}
CMD:slap(playerid, params[])
{
    static
        userid;

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 3)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "u", userid))
        return BilgiMesajGonder(playerid, "/slap [ID/Isim]");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

    static
        Float:px,
        Float:py,
        Float:pz;

    GetPlayerPos(userid, px, py, pz);
    SetPlayerPos(userid, px, py, pz + 5);

    PlayerPlaySound(userid, 1130, 0.0, 0.0, 0.0);
    AdminMessage(COLOR_LIGHTRED, " %s adlý yetkili %s(%d) adlý oyuncuyu tokatladý.", PlayerData[playerid][pAdminName], ReturnName(userid, 0), userid);
    return 1;
}
CMD:kick(playerid, params[])
{
    static
        userid,
        reason[128];
        //query[512];

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 4)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "us[128]", userid, reason))
        return BilgiMesajGonder(playerid, "/kick [ID/Isim] [Sebep]");

    if (!IsPlayerConnected(userid))
        return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

    if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
        return HataMesajGonder(playerid, "Belirtilen oyuncu sizden yüksek yetkiye sahiptir.");

	new query[300];
    if(PlayerData[userid][pLevel] >= 1)
    {
        format(query, sizeof(query), "INSERT INTO `oocsicil` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', '%s', '%s', '1')",  PlayerData[userid][pID], ReturnDate(), reason, PlayerData[playerid][pAdminName]);
        mysql_tquery(baglanti, query);
    }
    foreach(new i:Player) if(PlayerData[i][pAyarlar][3] == 0 || i == userid)
    {
    	SendClientMessageEx(i, COLOR_LIGHTRED, "(%s) - (( %s adlý oyuncu %s tarafýndan %s sebebiyle sunucudan atýldý. ))", ReturnDate(), ReturnName(userid, 0),  PlayerData[playerid][pAdminName], reason);
    }
    Log_Write("logs/kick_log.txt", "[%s] %s tarafindan %s sunucudan atildi. sebep: %s.", ReturnDate(), PlayerData[playerid][pAdminName], ReturnName(userid, 0), reason);
    Kick(userid);
    return 1;
}
CMD:kickall(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 5)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    SendClientMessageToAllEx(COLOR_LIGHTRED, "(%s) - (( %s adlý yetkili herkesi sunucudan attý. ))", ReturnDate(), PlayerData[playerid][pAdminName]);
    foreach(new i : Player)
    {
        if(!IsPlayerNPC(i) && i != playerid)
		{
		    Kick(i);
		}
    }
    return 1;
}
CMD:dondur(playerid, params[])
{
    static
        userid;

    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "u", userid))
        return BilgiMesajGonder(playerid, "/dondur [id/isim]");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

    TogglePlayerControllable(userid, 0);
    MesajGonder(playerid, "%s adlý oyuncuyu dondurdunuz.", ReturnName(userid, 0));
    BilgiMesajGonder(userid, "%s adlý yetkili tarafýndan donduruldunuz.", PlayerData[playerid][pAdminName]);
    return 1;
}

CMD:coz(playerid, params[])
{
    static
        userid;

    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "u", userid))
        return BilgiMesajGonder(playerid, "/coz [id/isim]");

    if (!IsPlayerConnected(userid))
        return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

    TogglePlayerControllable(userid, 1);
    MesajGonder(playerid, "%s adlý oyuncunun hareket edememe engelini kaldýrdýnýz.", ReturnName(userid, 0));
    return 1;
}
CMD:level1(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
    new string[1024];
    foreach (new i : Player)
    {
        if(PlayerData[i][pLevel] == 1 && OyundaDegil(i))
        {
            new bilgiler[256];
            format(bilgiler, sizeof(bilgiler), "%s - [ID: %d ]\n", ReturnName(i), i);
            strcat(string, bilgiler);
        }
    }
    Dialog_Show(playerid, Level1ler, DIALOG_STYLE_LIST, "Acemi Oyuncular", string, "Tamam", "");
    return 1;
}
CMD:spawnla(playerid, params[])
{
    static
        userid;

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "u", userid))
        return BilgiMesajGonder(playerid, "/spawnla [id/isim]");

    if (!OyundaDegil(userid) || IsPlayerNPC(userid))
        return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil !");


    if (GetPlayerState(userid) == 2)
    {
        new tmpcar = GetPlayerVehicleID(playerid);
        SetVehiclePos(tmpcar, 2096.6858,-1807.7062,13.5528);
        LinkVehicleToInteriorEx(tmpcar, 0);
        SetPlayerVirtualWorld(userid, 0);
    }
    else
    {
        SetPlayerPos(userid, 2096.6858,-1807.7062,13.5528);
        SetPlayerVirtualWorld(userid, 0);
    }
    SetPlayerInterior(userid, 0);

    MesajGonder(playerid, "%s adlý oyuncuyu spawnladýnýz.", ReturnName(userid, 0));
    BilgiMesajGonder(userid, "%s adlý yetkili sizi spawnladý.", PlayerData[playerid][pAdminName]);


    PlayerData[userid][pHouse] = -1;
    PlayerData[userid][pIsyeri] = -1;
    PlayerData[userid][pGarage] = -1;
    PlayerData[userid][pCadir] = -1;
    return 1;
}

CMD:setskin(playerid, params[])
{
    static
        userid,
        skinid;

    if (PlayerData[playerid][pAdmin] < 2)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "ud", userid, skinid))
        return BilgiMesajGonder(playerid, "/setskin [id/isim] [skin id]");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

    SetPlayerSkin(userid, skinid);
    PlayerData[userid][pSkin] = skinid;

    MesajGonder(playerid, "%s adlý oyuncunun kýyafetini ID %d olarak deðiþtirdiniz.", ReturnName(userid, 0), skinid);
    BilgiMesajGonder(userid, "%s adlý yetkili skininizi ID %d olarak deðiþtirdi.", PlayerData[playerid][pAdminName], skinid);

    return 1;
}
CMD:goto(playerid, params[])
{
	static
	    id,
	    type[24],
		string[64];

	if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2)
	    return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

	if (sscanf(params, "u", id))
 	{
	 	BilgiMesajGonder(playerid, "/goto [oyuncu veya isim]");
		SendClientMessage(playerid, COLOR_YELLOW, "[ÝSÝMLER]:{FFFFFF} spawn, ev, isyeri, bina, gate, interior, garaj");
		return 1;
	}
	new rank[20];
	if(PlayerData[playerid][pHelper] > 0) format(rank, sizeof(rank), "(Lv. %d) Helper", PlayerData[playerid][pHelper]);
	else format(rank, sizeof(rank), "%s", GetAdminRank(playerid));
    if (id == INVALID_PLAYER_ID)
	{
	    if (sscanf(params, "s[24]S()[64]", type, string))
		{
		    BilgiMesajGonder(playerid, "/goto [oyuncu veya isim]");
			SendClientMessage(playerid, COLOR_YELLOW, "[ÝSÝMLER]:{FFFFFF} spawn, ev, isyeri, bina, gate, interior, garaj");
			return 1;
	    }
	    if (!strcmp(type, "spawn", true)) {
	        SetPlayerPos(playerid, 2096.6858,-1807.7062,13.5528);
	        SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);
	        PlayerData[playerid][pHouse] = -1;
	        PlayerData[playerid][pIsyeri] = -1;
	        PlayerData[playerid][pGarage] = -1;
			PlayerData[playerid][pCadir] = -1;
			AdminHelperMessage(COLOR_LIGHTRED, "AdmLog: (%s) %s, varsayýlan spawn noktasýna ýþýnlandý.", ReturnDate(), rank, PlayerData[playerid][pAdminName], id);
	        return BilgiMesajGonder(playerid, "Varsayýlan spawn noktasýna gönderildin.");
		}
		else if (!strcmp(type, "ev", true))
		{
		    if (sscanf(string, "d", id))
		        return BilgiMesajGonder(playerid, "/goto [ev] [ev ID]");

			if ((id < 0 || id >= MAX_EV) || !house_info[id][evExists])
			    return HataMesajGonder(playerid, "Geçersiz ev ID'si.");

		    SetPlayerPos(playerid, house_info[id][evPos][0], house_info[id][evPos][1], house_info[id][evPos][2]);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    PlayerData[playerid][pHouse] = -1;
	        PlayerData[playerid][pIsyeri] = -1;
	        PlayerData[playerid][pGarage] = -1;
            PlayerData[playerid][pCadir] = -1;
            AdminHelperMessage(COLOR_LIGHTRED, "AdmLog: (%s) %s %s, %d numaralý eve ýþýnlandý.", ReturnDate(), rank, PlayerData[playerid][pAdminName], id);
		    BilgiMesajGonder(playerid, "ID: %d numaralý eve gönderildin.", id);
		    return 1;
		}
		else if (!strcmp(type, "isyeri", true))
		{
		    if (sscanf(string, "d", id))
		        return BilgiMesajGonder(playerid, "/goto [isyeri] [isyeri ID]");

			if ((id < 0 || id >= MAX_ISYERI) || !Isyeri[id][isyeriExists])
			    return HataMesajGonder(playerid, "Geçersiz iþyeri ID'si.");

		    SetPlayerPos(playerid, Isyeri[id][isyeriPos][0], Isyeri[id][isyeriPos][1], Isyeri[id][isyeriPos][2]);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    PlayerData[playerid][pHouse] = -1;
	        PlayerData[playerid][pIsyeri] = -1;
	        PlayerData[playerid][pGarage] = -1;
            PlayerData[playerid][pCadir] = -1;
            AdminHelperMessage(COLOR_LIGHTRED, "AdmLog: (%s) %s %s, %d numaralý iþyerine ýþýnlandý.", ReturnDate(), rank, PlayerData[playerid][pAdminName], id);
		    BilgiMesajGonder(playerid, "ID: %d numaralý iþyerine gönderildin.", id);
		    return 1;
		}
		else if (!strcmp(type, "bina", true))
		{
		    if (sscanf(string, "d", id))
		        return BilgiMesajGonder(playerid, "/goto [bina] [bina ID]");

			if ((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
			    return HataMesajGonder(playerid, "Geçersiz bir bina ID belirttiniz.");

		    SetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
		    SetPlayerInterior(playerid, EntranceData[id][entranceExterior]);

			SetPlayerVirtualWorld(playerid, EntranceData[id][entranceExteriorVW]);
			PlayerData[playerid][pHouse] = -1;
	        PlayerData[playerid][pIsyeri] = -1;
	        PlayerData[playerid][pGarage] = -1;
            PlayerData[playerid][pCadir] = -1;
			AdminHelperMessage(COLOR_LIGHTRED, "AdmLog: (%s) %s %s, %d numaralý binaya ýþýnlandý.", ReturnDate(), rank, PlayerData[playerid][pAdminName], id);
		    BilgiMesajGonder(playerid, "ID: %d numaralý binaya gönderildin.", id);
		    return 1;
		}
		else if (!strcmp(type, "gate", true))
		{
		    if (sscanf(string, "d", id))
		        return BilgiMesajGonder(playerid, "/goto [gate] [gate ID]");

			if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
			    return HataMesajGonder(playerid, "Geçersiz bir kapý kimliði belirttiniz.");

		    SetPlayerPos(playerid, GateData[id][gatePos][0] - (2.5 * floatsin(-GateData[id][gatePos][3], degrees)), GateData[id][gatePos][1] - (2.5 * floatcos(-GateData[id][gatePos][3], degrees)), GateData[id][gatePos][2]);
		    SetPlayerInterior(playerid, GateData[id][gateInterior]);

			SetPlayerVirtualWorld(playerid, GateData[id][gateWorld]);
			PlayerData[playerid][pHouse] = -1;
	        PlayerData[playerid][pIsyeri] = -1;
	        PlayerData[playerid][pGarage] = -1;
	        PlayerData[playerid][pCadir] = -1;
	        AdminHelperMessage(COLOR_LIGHTRED, "AdmLog: (%s) %s %s, %d numaralý gateye ýþýnlandý.", ReturnDate(), rank, PlayerData[playerid][pAdminName], id);
		    BilgiMesajGonder(playerid, "ID: %d numaralý gate'e gönderildin.", id);
		    return 1;
		}
		else if (!strcmp(type, "interior", true))
		{
		    static
		        str[1536];

			str[0] = '\0';

			for (new i = 0; i < sizeof(g_arrInteriorData); i ++) {
			    strcat(str, g_arrInteriorData[i][e_InteriorName]);
			    strcat(str, "\n");
		    }
		    Dialog_Show(playerid, TeleportInterior, DIALOG_STYLE_LIST, "Iþýnlan: Interior Listesi", str, "Seç", "Kapat");
		    return 1;
		}
		else if (!strcmp(type, "garaj", true))
		{
		    if (sscanf(string, "d", id))
		        return BilgiMesajGonder(playerid, "/goto [garaj] [garaj ID]");

			if ((id < 0 || id >= MAX_GARAGE) || GarageData[id][gExists] == false)
			    return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");

			SetPlayerPos(playerid, GarageData[id][gPos][0], GarageData[id][gPos][1], GarageData[id][gPos][2]);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			PlayerData[playerid][pHouse] = -1;
	        PlayerData[playerid][pIsyeri] = -1;
	        PlayerData[playerid][pGarage] = -1;
			PlayerData[playerid][pCadir] = -1;
			AdminHelperMessage(COLOR_LIGHTRED, "AdmLog: (%s) %s %s, %d numaralý garaja ýþýnlandý.", ReturnDate(), rank, PlayerData[playerid][pAdminName], id);
			return 1;
		}
	    else return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil !");
	}
	if (!OyundaDegil(id))
		return HataMesajGonder(playerid, "Bu kiþi giriþ yapmamýþ.");

	SendPlayerToPlayer(playerid, id);
    AdminHelperMessage(COLOR_LIGHTRED, "AdmLog: (%s) %s %s, %s(%d) adlý oyuncuya ýþýnlandý.", ReturnDate(), rank, PlayerData[playerid][pAdminName], Player_GetName(id), id);
	MesajGonder(playerid, "%s(%d) adlý kiþinin yanýna ýþýnlandýnýz.", ReturnName(id, 0), id);

	return 1;
}
CMD:gethere(playerid, params[])
{
    static
        userid;

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "u", userid))
        return BilgiMesajGonder(playerid, "/gethere [id/isim]");

    if (!OyundaDegil(userid) || IsPlayerNPC(userid))
        return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

    new rank[20];
	if(PlayerData[playerid][pHelper] > 0) format(rank, sizeof(rank), "(Lv. %d) Helper", PlayerData[playerid][pHelper]);
	else format(rank, sizeof(rank), "%s", GetAdminRank(playerid));
    SendPlayerToPlayer(userid, playerid);
    AdminHelperMessage(COLOR_LIGHTRED, "AdmLog: (%s) %s %s, %s(%d) adlý oyuncuyu yanýna çekti.", ReturnDate(), rank, PlayerData[playerid][pAdminName], Player_GetName(userid), userid);
    MesajGonder(playerid, "%s adlý oyuncuyu yanýna çektin.", ReturnName(userid, 0));
    BilgiMesajGonder(userid, "%s adlý yetkili seni yanýna çekti.", PlayerData[playerid][pAdminName]);
    return 1;
}
CMD:setinterior(playerid, params[])
{
    static
        userid,
        interior;

    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "ud", userid, interior))
        return BilgiMesajGonder(playerid, "/setinterior [id/isim] [interior]");

    if (!OyundaDegil(userid) || IsPlayerNPC(userid))
        return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

    SetPlayerInterior(userid, interior);

    MesajGonder(playerid, "%s adlý oyuncunun interiorunu (%d) olarak deðiþtirdin.", ReturnName(userid, 0), interior);
    return 1;
}

CMD:setvw(playerid, params[])
{
    static
        userid,
        world;

    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "ud", userid, world))
        return BilgiMesajGonder(playerid, "/setvw [id/isim] [world]");

    if (!OyundaDegil(userid) || IsPlayerNPC(userid))
        return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

    SetPlayerVirtualWorld(userid, world);

    MesajGonder(playerid, "%s adlý oyuncunun virtual worldunu (%d) olarak deðiþtirdin.", ReturnName(userid, 0), world);
    return 1;
}
CMD:sendto(playerid, params[])
{
    static
        userid,
        targetid;

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 3)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "uu", userid, targetid) )
        return BilgiMesajGonder(playerid, "/sendto [id/isim] [id/isim]");

    if (!OyundaDegil(userid) || targetid == INVALID_PLAYER_ID || IsPlayerNPC(userid))
        return HataMesajGonder(playerid, "Belirtilen kullanýcý(lar) baðlý deðildir.");

    SendPlayerToPlayer(userid, targetid);

    MesajGonder(playerid, "%s adlý oyuncuyu %s adlý oyuncunun yanýna gönderdin.", ReturnName(userid, 0), ReturnName(targetid));
    BilgiMesajGonder(userid, "%s adlý yetkili seni %s adlý oyuncunun yanýna gönderdi.", PlayerData[playerid][pAdminName], ReturnName(targetid));
    return 1;
}
CMD:ip(playerid, params[])
{
    static
        userid;

    if (PlayerData[playerid][pAdmin] < 2)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "u", userid))
        return BilgiMesajGonder(playerid, "/ip [id/isim]");

    if (!IsPlayerConnected(userid))
        return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	new pip[15];
	GetPlayerIp(userid, pip, sizeof(pip));
    MesajGonder(playerid, "%s adlý oyuncunun IP adresi: %s", ReturnName(userid, 0), pip);
    return 1;
}
CMD:sethp(playerid, params[])
{
    static
        userid,
        Float:amount;

    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "uf", userid, amount))
        return BilgiMesajGonder(playerid, "/sethp [id/isim] [deðer]");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

    CanAyarla(userid, amount);
    MesajGonder(playerid, "%s adlý oyuncunun canýný %.2f olarak deðiþtirdin.", ReturnName(userid, 0), amount);
    return 1;
}

CMD:setarmor(playerid, params[])
{
    static
        userid,
        Float:amount;

    if (PlayerData[playerid][pAdmin] < 2)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "uf", userid, amount))
        return BilgiMesajGonder(playerid, "/armor [id/isim] [amount]");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

    ZirhAyarla(userid, amount);
    MesajGonder(playerid, "%s adlý oyuncunun zýrhýný %.2f olarak deðiþtirdin.", ReturnName(userid, 0), amount);
    return 1;
}
CMD:resetweps(playerid, params[])
{
    static
        userid;

    if (PlayerData[playerid][pAdmin] < 3)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "u", userid))
        return BilgiMesajGonder(playerid, "/resetweps [id/isim]");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

    ResetWeapons(userid);
    MesajGonder(playerid, "%s adlý oyuncunun silahlarýný sýfýrladýnýz.", ReturnName(userid, 0));
	BilgiMesajGonder(userid, "%s adlý yetkili tarafýndan silahlarýnýz sýfýrlandý.", PlayerData[playerid][pAdminName]);
    return 1;
}

CMD:atamir(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (vehicleid > 0 && isnull(params))
    {
        RepairVehicle(vehicleid);
        BilgiMesajGonder(playerid, "Bulunduðunuz araç tamir edildi.");
    }
    else
    {
        if (sscanf(params, "d", vehicleid))
            return BilgiMesajGonder(playerid, "/atamir [araç ID]");

        else if (!IsValidVehicle(vehicleid))
            return HataMesajGonder(playerid, "Geçersiz bir araç ID'sý belirttiniz.");

        RepairVehicle(vehicleid);
        BilgiMesajGonder(playerid, "Araç ID: %d tamir edildi.  ", vehicleid);
    }
    return 1;
}

CMD:getcar(playerid, params[])
{
    new vehicleid;

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "d", vehicleid))
        return BilgiMesajGonder(playerid, "/getcar [Araç ID]");

    if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
        return HataMesajGonder(playerid, "Geçersiz bir araç ID'sý belirttiniz.");

    static
        Float:px,
        Float:py,
        Float:pz;

    GetPlayerPos(playerid, px, py, pz);
    SetVehiclePos(vehicleid, px + 2, py - 2, pz);

    SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
    LinkVehicleToInteriorEx(vehicleid, GetPlayerInterior(playerid));
    new rank[20];
	if(PlayerData[playerid][pHelper] > 0) format(rank, sizeof(rank), "(Lv. %d) Helper", PlayerData[playerid][pHelper]);
	else format(rank, sizeof(rank), "%s", GetAdminRank(playerid));
    AdminHelperMessage(COLOR_LIGHTRED, "AdmLog: (%s) %s %s, %s (ID: %d) model aracý yanýna çekti.", ReturnDate(), rank, PlayerData[playerid][pAdminName], ReturnVehicleModelName(GetVehicleModel(vehicleid)), vehicleid);
    return 1;
}


CMD:carto(playerid, params[])
{
    new vehicleid, userid;

    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "du", vehicleid, userid))
        return BilgiMesajGonder(playerid, "/carto [araç] [userid]");

    if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
        return HataMesajGonder(playerid, "Geçersiz bir araç ID'sý belirttiniz.");

    static
        Float:px,
        Float:py,
        Float:pz;

    GetPlayerPos(userid, px, py, pz);
    SetVehiclePos(vehicleid, px + 2, py - 2, pz);

    SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(userid));
    LinkVehicleToInteriorEx(vehicleid, GetPlayerInterior(userid));

    return 1;
}
CMD:entercar(playerid, params[])
{
    new vehicleid, seatid;

    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "d", vehicleid))
        return BilgiMesajGonder(playerid, "/entercar [araç id]");

    if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
        return HataMesajGonder(playerid, "Geçersiz bir araç ID'sý belirttiniz.");

    seatid = GetAvailableSeat(vehicleid, 0);

    if (seatid == -1)
        return HataMesajGonder(playerid, "Araçta boþ koltuk yok.");

    PutPlayerInVehicle(playerid, vehicleid, seatid);
    return 1;
}

CMD:gotocar(playerid, params[])
{
    new vehicleid;

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "d", vehicleid))
        return BilgiMesajGonder(playerid, "/gotocar [araç id]");

    if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
        return HataMesajGonder(playerid, "Geçersiz bir araç ID'sý belirttiniz.");

    static
        Float:px,
        Float:py,
        Float:pz;

    GetVehiclePos(vehicleid, px, py, pz);
    SetPlayerPos(playerid, px, py - 2, pz + 2);
    new rank[20];
	if(PlayerData[playerid][pHelper] > 0) format(rank, sizeof(rank), "(Lv. %d) Helper", PlayerData[playerid][pHelper]);
	else format(rank, sizeof(rank), "%s", GetAdminRank(playerid));
	AdminHelperMessage(COLOR_LIGHTRED, "AdmLog: (%s) %s %s, %s (ID: %d) model aracýn yanýna ýþýnlandý.", ReturnDate(), rank, PlayerData[playerid][pAdminName], ReturnVehicleModelName(GetVehicleModel(vehicleid)), vehicleid);
    return 1;
}

CMD:respawncar(playerid, params[])
{
    new vehicleid;

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "d", vehicleid))
        return BilgiMesajGonder(playerid, "/respawncar [Araç ID]");

    if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
        return HataMesajGonder(playerid, "Geçersiz bir araç ID'sý belirttiniz.");

	AracSpawn(vehicleid);
    BilgiMesajGonder(playerid, "ID: %d nolu araç respawn edildi.", vehicleid);
	return 1;
}
CMD:respawncars(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    new count;

    for(new i = 1, ps = GetVehiclePoolSize(); i <= ps; i++)
    {
        new modelid = GetVehicleModel(i);
        if (IsValidVehicle(i) && GetVehicleDriver(i) == INVALID_PLAYER_ID && modelid != 435)
        {
            AracSpawn(i);
            count++;
        }
    }
    if (!count)
        return HataMesajGonder(playerid, "Hiç araç yok.");

    MesajGonder(playerid, "%d adet araç respawn edildi.", count);
    return 1;
}
CMD:meslekaracrespawn(playerid)
{
    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    new count;
    for(new i; i<MAX_ARAC; i++) if(AracInfo[i][aracExists] && AracInfo[i][aracTip] == 2 && GetVehicleDriver(AracInfo[i][aracVehicle]) != -1)
    {
        Arac_Spawn(i);
        count++;
    }
    if(!count) return HataMesajGonder(playerid, "Hiç meslek aracý yok.");
    MesajGonder(playerid, "» Toplam %d meslek aracý respawn edildi.", count);
	return 1;
}
CMD:giveweapon(playerid, params[])
{
    static
        userid,
        weaponid,
        ammo;

    if (PlayerData[playerid][pAdmin] < 4)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "udI(500)", userid, weaponid, ammo))
        return BilgiMesajGonder(playerid, "/giveweapon [id/isim] [silahid] [mermi]");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil.");

    if (weaponid <= 0 || weaponid > 46 || (weaponid >= 19 && weaponid <= 21))
        return HataMesajGonder(playerid, "Geçersiz silah ID'sý.");

    GiveWeaponToPlayer(userid, weaponid, ammo);
    MesajGonder(playerid, "%s adlý oyuncuya %s (%d mermi) model silah verdin.", ReturnName(userid, 0), ReturnWeaponName(weaponid), ammo);
    BilgiMesajGonder(userid, "%s adlý yetkili sana %s (Mermi: %d) model silah verdi.", PlayerData[playerid][pAdminName], ReturnWeaponName(weaponid), ammo);
    return 1;
}
CMD:cc(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    for (new i = 0; i < 100; i ++) {
        SendClientMessageToAll(-1, "");
    }
    return 1;
}
CMD:asetfaction(playerid, params[])
{
    static
        userid,
        id;

    if (PlayerData[playerid][pAdmin] < 3)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "ud", userid, id))
        return BilgiMesajGonder(playerid, "/asetfaction [id/isim] [faction id] (-1 atar)");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

    if ((id < -1 || id >= MAX_BIRLIK) || (id != -1 && !Birlikler[id][birlikExists]))
        return HataMesajGonder(playerid, "Geçersiz birlik id.");

    if (id == -1)
    {
        BirliktenAt(userid);

        BilgiMesajGonder(playerid, "%s adlý kiþi birlikten çýkarýldý.", ReturnName(userid, 0));
        BilgiMesajGonder(userid, "%s adlý yetkili tarafýndan birlikten çýkarýldýnýz.", PlayerData[playerid][pAdminName]);
        Oyuncu_Kaydet(userid);
    }
    else
    {
        BirliktenAt(userid);
        PlayerData[userid][pFaction] = id;
	    PlayerData[userid][pFactionRutbe] = 1;
	    PlayerData[userid][pFactionDivizyon] = 0;

		Oyuncu_Kaydet(userid);
        MesajGonder(playerid, "%s adlý kiþiyi \"%s\" adlý birliðe aldýnýz.", ReturnName(userid, 0), Birlikler[id][birlikAd]);
        BilgiMesajGonder(userid, "%s adlý yetkili sizi \"%s\" adlý birliðe aldý.", PlayerData[playerid][pAdminName], Birlikler[id][birlikAd]);
    }
    return 1;
}

CMD:asetrank(playerid, params[])
{
    static
        userid,
        rank,
        factionid;

    if (PlayerData[playerid][pAdmin] < 3)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "ud", userid, rank))
        return BilgiMesajGonder(playerid, "/asetrank [id/isim] [rutbe id]");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

    if ((factionid = PlayerData[userid][pFaction]) == -1)
        return HataMesajGonder(playerid, "Bu oyuncu herhangi bir birliðin üyesi deðil.");

    if (rank < 1 || rank > Birlikler[factionid][birlikRutbeler])
        return HataMesajGonder(playerid, "Geçersiz rütbe. Rütbe 1 ile %d arasýnda olmalýdýr.", Birlikler[factionid][birlikRutbeler]);

    PlayerData[userid][pFactionRutbe] = rank;

    MesajGonder(playerid, "%s adlý kiþinin rütbesi %d olarak deðiþtirildi.", ReturnName(userid, 0), rank);
    BilgiMesajGonder(userid, "%s adlý yetkili tarafýndan birlikteki rütbeniz %d olarak ayarlandý.", PlayerData[playerid][pAdminName], rank);

    return 1;
}
CMD:spec(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");
    new id;
    if(sscanf(params, "u", id)) return BilgiMesajGonder(playerid, "/izle [ID/Isim]");
    if(!OyundaDegil(id)) return HataMesajGonder(playerid, "Ýzlemek istediðin kiþi oyunda deðil.");
    if(id == playerid) return HataMesajGonder(playerid, "Kendini izleyemezsin.");
    PlayerData[playerid][pSpecID] = id;
    if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
    {
        GetPlayerPos(playerid, specPos[playerid][0], specPos[playerid][1], specPos[playerid][2]);
        SetPVarInt(playerid, "specVw", GetPlayerVirtualWorld(playerid));
        SetPVarInt(playerid, "specInterior", GetPlayerInterior(playerid));
    }
    SetPlayerInterior(playerid, GetPlayerInterior(id));
    SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(id));
    TogglePlayerSpectating(playerid, true);
    if(IsPlayerInAnyVehicle(id))
    {
        PlayerSpectateVehicle(playerid, GetPlayerVehicleID(id));
    }
    else
    {
        PlayerSpectatePlayer(playerid, id);
    }
    MesajGonder(playerid, "{808080}%s adlý kiþiyi izliyorsun, /specoff ile çýkabilirsin.", ReturnName(id, 0));
    MesajGonder(playerid, "{808080}PacketLoss: %.2f, Frekans: 0000, Slot:0, Arac ID: 0, Yetki: %s", NetStats_PacketLossPercent(id), FormatNumber(PlayerData[id][pAdmin]));
    MesajGonder(playerid, "{808080}%s(%d - #%s)(Seviye: %d, Para: %d, Can: %d, Zýrh:%d, Ping:%d)", ReturnName(id, 0), id, FormatNumber(PlayerData[id][pMaskeID]), FormatNumber(PlayerData[id][pCash]), ReturnHealth(id), ReturnArmour(id), GetPlayerPing(id));
	return 1;
}
CMD:specoff(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    IzlemeBitir(playerid);
    return 1;
}
CMD:jail(playerid, params[])
{
	static userid, sure, sebep[50];
	if(PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 5) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");
	if(sscanf(params, "uds[50]", userid, sure, sebep)) return BilgiMesajGonder(playerid, "/jail [id/isim] [dakika] [sebep]");
	if(!OyundaDegil(userid)) return HataMesajGonder(playerid, "Oyuncu oyunda deðil.");
	if(sure < 1) return HataMesajGonder(playerid, "En az 1 dakika girmelisiniz.");
	if(PlayerData[userid][pHapisSure] > 0 && PlayerData[userid][pCK] == 1) return HataMesajGonder(playerid, "Bu karakter CK edilmiþ.");
    ResetPlayer(userid);
    ResetWeapons(userid);
    ClearAnimations(userid);
	PlayerTextDrawShow(userid, HapisTD[userid]);
	SetPlayerPos(userid, 197.6346, 175.3765, 1003.0234);
    SetPlayerInterior(userid, 3);

    SetPlayerVirtualWorld(userid, (userid + 100));
    SetPlayerFacingAngle(userid, 0.0);

    SetCameraBehindPlayer(userid);
    PlayerData[userid][pHapisSure] = sure * 60;
    format(PlayerData[userid][pHapisSebep], 50, sebep);
    format(PlayerData[userid][pHapiseAtan], 24, PlayerData[playerid][pAdminName]);
    PlayerData[userid][pHapis] = 0;
    new query[500];
    format(query, sizeof(query), "INSERT INTO `oocsicil` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', '%s', '%s', '3')",  PlayerData[userid][pID], ReturnDate(), sebep, PlayerData[playerid][pAdminName]);
    mysql_tquery(baglanti, query);
    BilgiMesajGonder(userid, "%s adlý yetkili seni %d dakika hapse attý. (%s).", PlayerData[playerid][pAdminName], sure, sebep);
	foreach(new i:Player) if(PlayerData[i][pAyarlar][3] == 0 || i == userid)
	{
    	SendClientMessageEx(i, COLOR_LIGHTRED, "(%s) - (( %s adlý oyuncu %s tarafýndan %s sebebiyle %d dakika cezalandýrýldý. ))", ReturnDate(), ReturnName(userid, 0), PlayerData[playerid][pAdminName], sebep, sure);
    }
    Log_Write("logs/jail_log.txt", "[%s] %s adli yetkili %s adli oyuncuyu %d dakika cezalandirdi,  sebep: %s.", ReturnDate(), PlayerData[playerid][pAdminName], ReturnName(userid, 0), sure, sebep);
	return 1;
}
CMD:labjail(playerid, params[])
{
	static userid, sure, sebep[50];
	if(PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 5) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");
	if(sscanf(params, "uds[50]", userid, sure, sebep)) return BilgiMesajGonder(playerid, "/labjail [id/isim] [dakika] [sebep]");
	if(!OyundaDegil(userid)) return HataMesajGonder(playerid, "Oyuncu oyunda deðil.");
	if(sure < 1) return HataMesajGonder(playerid, "En az 1 dakika girmelisiniz.");
	if(PlayerData[userid][pHapisSure] > 0 && PlayerData[userid][pCK] == 1) return HataMesajGonder(playerid, "Bu karakter CK edilmiþ.");
    ResetPlayer(userid);
    ResetWeapons(userid);
    ClearAnimations(userid);
	PlayerTextDrawShow(userid, HapisTD[userid]);
	SetPlayerPos(userid, 1242.3070, 5300.9780, 50.3004);
    SetPlayerInterior(userid, 3);

    SetPlayerVirtualWorld(userid, (userid + 100));
    SetPlayerFacingAngle(userid, 0.0);

    SetCameraBehindPlayer(userid);
    PlayerData[userid][pHapisSure] = sure * 60;
    format(PlayerData[userid][pHapisSebep], 50, sebep);
    format(PlayerData[userid][pHapiseAtan], 24, PlayerData[playerid][pAdminName]);
    PlayerData[userid][pHapis] = 0;
    new query[500];
    format(query, sizeof(query), "INSERT INTO `oocsicil` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', '%s', '%s', '3')",  PlayerData[userid][pID], ReturnDate(), sebep, PlayerData[playerid][pAdminName]);
    mysql_tquery(baglanti, query);
    BilgiMesajGonder(userid, "%s adlý yetkili seni %d dakika hapse attý. (%s).", PlayerData[playerid][pAdminName], sure, sebep);
	foreach(new i:Player) if(PlayerData[i][pAyarlar][3] == 0 || i == userid)
	{
    	SendClientMessageEx(i, COLOR_LIGHTRED, "(%s) - (( %s adlý oyuncu %s tarafýndan %s sebebiyle %d dakika cezalandýrýldý.(Labirent) ))", ReturnDate(), ReturnName(userid, 0), PlayerData[playerid][pAdminName], sebep, sure);
    }
    Log_Write("logs/jail_log.txt", "[%s] %s adli yetkili %s adli oyuncuyu %d dakika cezalandirdi,  sebep: %s. (Labirent)", ReturnDate(), PlayerData[playerid][pAdminName], ReturnName(userid, 0), sure, sebep);
	return 1;
}
CMD:unjail(playerid, params[])
{
    static
        userid;

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 5)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "u", userid))
        return BilgiMesajGonder(playerid, "/unjail [id/isim]");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

    if (!PlayerData[userid][pHapisSure])
        return HataMesajGonder(playerid, "Belirttiðiniz oyuncu hapiste deðil.");
    if(PlayerData[userid][pCK] == 1) return HataMesajGonder(playerid, "Bu karakter CK edilmiþ, hapisten çýkarýlamaz.");

    PlayerData[userid][pHapisSure] = 1;

    MesajGonder(playerid, "%s adlý oyuncuyu hapisten çýkarttýnýz.", ReturnName(userid, 0));
    BilgiMesajGonder(userid, "%s adlý yetkili sizi hapisten çýkarttý.", PlayerData[playerid][pAdminName]);

    Log_Write("logs/jail_log.txt", "[%s] %s adli yetkili %s adli oyuncuyu hapisten cikartti.", ReturnDate(), PlayerData[playerid][pAdminName], ReturnName(userid, 0));
    return 1;
}
CMD:ojail(playerid, params[])
{
	new ad[24], sure, sebep[50];
    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");
    if(sscanf(params, "s[24]is[50]", ad, sure, sebep)) return BilgiMesajGonder(playerid, "/ojail [Karakter Adý] [Dakika] [Sebep]");
    if(sure < 1) return HataMesajGonder(playerid, "En az 1 dakika girmelisiniz.");
    if(GetPlayerID(ad) != -1) return HataMesajGonder(playerid, "Bu oyuncu oyunda, /jail komutunu kullanýn.");
    new query[124];
    format(query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `Isim` = '%s'", ad);
    mysql_tquery(baglanti, query, "OnJailAccount", "isis", playerid, ad, sure, sebep);
	return 1;
}
CMD:jailed(playerid)
{
    if(PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
    new string[600];
	foreach (new i : Player)
    {
        if(PlayerData[i][pHapisSure] > 1)
        {
            new bilgiler[256];
            format(bilgiler, sizeof(bilgiler), "%s - [ID: %d ] - [Hapis Süresi: %d saniye.]\n", ReturnName(i), i, PlayerData[i][pHapisSure]);
            strcat(string, bilgiler);
        }
    }
    Dialog_Show(playerid, Hapistekiler, DIALOG_STYLE_LIST, "Hapistekiler", string, "Tamam", "");
    return 1;
}
CMD:givecash(playerid, params[])
{
    static
        userid,
        amount;

    if (PlayerData[playerid][pAdmin] < 5)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "ud", userid, amount))
        return BilgiMesajGonder(playerid, "/givecash [id/isim] [miktar]");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

    ParaVer(userid, amount);
	MesajGonder(playerid, "%s adlý kiþiye %s miktar para verdiniz.", ReturnName(userid, 0), FormatNumber(amount));
	BilgiMesajGonder(userid, "%s adlý yetkili size %s miktar para verdi.",PlayerData[playerid][pAdminName], FormatNumber(amount));
    AdminMessage(COLOR_LIGHTRED, "AdmLog: (%s) %s adlý yetkili %s adlý kiþiye %s miktar para verdi.", ReturnDate(), PlayerData[playerid][pAdminName], ReturnName(userid, 0), FormatNumber(amount));
    Log_Write("logs/admin.log", "[%s] %s adli yetkili %s adli kisiye %s miktar para verdi.", ReturnDate(), PlayerData[playerid][pAdminName], ReturnName(userid, 0), FormatNumber(amount));

    return 1;
}
CMD:givecashall(playerid, params[])
{
	new miktar;
    if (PlayerData[playerid][pAdmin] < 5) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");
    if(sscanf(params, "i", miktar)) return BilgiMesajGonder(playerid, "/givecashall [Miktar]");
    foreach(new i:Player) if(OyundaDegil(i))
    {
        ParaVer(i, miktar);
    }
    SendClientMessageToAllEx(COLOR_LIGHTRED, "%s adlý yetkili oyunda bulunan herkese %s miktar para daðýttý.", PlayerData[playerid][pAdminName], FormatNumber(miktar));
	return 1;
}
CMD:kills(playerid, params[])
{
	new id;
    if (PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");
    if(sscanf(params, "u", id)) return BilgiMesajGonder(playerid, "/kills [ID/Isim]");
    if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu oyunda deðil.");
    MesajGonder(playerid, "Öldürme: %d, Ölme: %d", PlayerData[id][pOldurme], PlayerData[id][pOlme]);
	return 1;
}
CMD:talepsayi(playerid, params[])
{
    new id;
    if (PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");
    if(sscanf(params, "u", id)) return BilgiMesajGonder(playerid, "/talepsayi [ID/Isim]");
    if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu oyunda deðil.");
    MesajGonder(playerid, "Talep Bakma Sayýsý: %d", PlayerData[id][pTalepSayi]);
	return 1;
}
CMD:giveexp(playerid, params[])
{
	new id, miktar;
    if (PlayerData[playerid][pAdmin] < 5) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");
    if(sscanf(params, "ui", id, miktar)) return BilgiMesajGonder(playerid, "/giveexp [ID/Isim] [Miktar]");
    if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu oyunda deðil.");
	PlayerData[id][pEXP] += miktar;
	MesajGonder(id, "%s adlý yetkili size %d EXP verdi.", PlayerData[playerid][pAdminName], miktar);
	MesajGonder(playerid, "%s adlý oyuncuya %d EXP verdiniz.", ReturnName(id, 0), miktar);
	AdminMessage(COLOR_LIGHTRED, "AdmLog: (%s) %s adlý yetkili %s adlý kiþiye %d EXP verdi.",ReturnDate(), PlayerData[playerid][pAdminName], Player_GetName(id), miktar);
	if(PlayerData[id][pEXP] >= PlayerData[id][pLevel]*5)
	{
 		new kalanexp = 0;
   		if(PlayerData[id][pEXP] > PlayerData[id][pLevel]*5) kalanexp = PlayerData[id][pEXP] - PlayerData[id][pLevel]*5;
		PlayerData[id][pEXP] = kalanexp;
		PlayerData[id][pLevel]++;
		SetPlayerScore(id, PlayerData[id][pLevel]);
		MesajGonder(id, "{7EFB1A}Level atladýnýz!");
	}
	return 1;
}
CMD:giveexpall(playerid, params[])
{
	new miktar;
    if (PlayerData[playerid][pAdmin] < 5) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");
    if(sscanf(params, "i", miktar)) return BilgiMesajGonder(playerid, "/giveexpall [Miktar]");
    foreach(new i:Player) if(OyundaDegil(i))
    {
        PlayerData[i][pEXP] += miktar;
		if(PlayerData[i][pEXP] >= PlayerData[i][pLevel]*5)
		{
			new kalanexp = 0;
   			if(PlayerData[i][pEXP] > PlayerData[i][pLevel]*5) kalanexp = PlayerData[i][pEXP] - PlayerData[i][pLevel]*5;
			PlayerData[i][pEXP] = kalanexp;
			PlayerData[i][pLevel]++;
			SetPlayerScore(i, PlayerData[i][pLevel]);
			MesajGonder(i, "{7EFB1A}Level atladýnýz!");
		}
    }
    SendClientMessageToAllEx(COLOR_LIGHTRED, "%s adlý yetkili oyunda bulunan herkese %d miktar EXP verdi.", PlayerData[playerid][pAdminName], miktar);
	return 1;
}
CMD:ban(playerid, params[])
{
	new id, gun, sebep[50];
    if(PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");
    if(sscanf(params, "uis[50]", id, gun, sebep)) return BilgiMesajGonder(playerid, "/ban [ID/Isim] [Gün (0 yazarsanýz sýnýrsýz yasaklanýr)] [Sebep]");
    if(!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu giriþ yapmamýþ.");
    if(id == playerid) return HataMesajGonder(playerid, "Kendinizi yasaklayamazsýnýz.");
    if(PlayerData[id][pAdmin] > PlayerData[playerid][pAdmin]) return HataMesajGonder(playerid, "Belirtilen oyuncu sizden yüksek yetkiye sahiptir.");

    new pip[20];
    GetPlayerIp(id, pip, sizeof(pip));
    new sure[10];
    if(gun == 0) sure = "Sýnýrsýz";
    else format(sure, sizeof(sure), "%d gün", gun);
    Dialog_Show(id, Banli, DIALOG_STYLE_MSGBOX, "Yasaklandýnýz!", "Hesabýnýz bu sunucudan yasaklanmýþtýr. Detaylar;\n\nKarakter Adý: %s\nSebep: %s\nYasaklayan: %s\nSüre: %s\nF8 tuþuna basýn ve bir ekran görüntüsü alýn, bu ekran görüntüsü ile forumumuzdan yasaklanmanýza itiraz edebilirsiniz.", "Kapat", "", Player_GetName(id), sebep, PlayerData[playerid][pAdminName], sure);
    new query[350];
    format(query, sizeof(query), "INSERT INTO `oocsicil` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', '%s', '%s', '2')",  PlayerData[id][pID], ReturnDate(), sebep, PlayerData[playerid][pAdminName]);
    mysql_tquery(baglanti, query);
    foreach(new i:Player) if(PlayerData[i][pAyarlar][3] == 0 || i == id)
    {
    	if(gun == 0) SendClientMessageEx(i, COLOR_LIGHTRED, "(%s) - (( %s adlý oyuncu %s tarafýndan %s sebebiyle sunucudan sýnýrsýz yasaklandý. ))", ReturnDate(), ReturnName(id, 0),  PlayerData[playerid][pAdminName], sebep);
    	else SendClientMessageEx(i, COLOR_LIGHTRED, "(%s) - (( %s adlý oyuncu %s tarafýndan %s sebebiyle sunucudan %d gün yasaklandý. ))", ReturnDate(), ReturnName(id, 0),  PlayerData[playerid][pAdminName], sebep, gun);
    }
    Log_Write("logs/ban_log.txt", "[%s] %s,  %s tarafindan %d gun yasaklandi. sebep: %s.", ReturnDate(), ReturnName(id, 0), PlayerData[playerid][pAdminName], gun, sebep);
    new suree;
    if(gun < 1) suree = 0;
    else suree = gettime()+gun*86400;
    AddBan(pip, Player_GetName(id), "", PlayerData[playerid][pAdminName], suree, sebep);
    Kick(id);
	return 1;
}
/*CMD:cban(playerid, params[])
{
	new id, sebep[50];
    if(PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");
    if(sscanf(params, "us[50]", id, sebep)) return BilgiMesajGonder(playerid, "/cban [ID/Isim] [Sebep]");
    if(!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu giriþ yapmamýþ.");
    if(PlayerData[id][pAdmin] > PlayerData[playerid][pAdmin]) return HataMesajGonder(playerid, "Belirtilen oyuncu sizden yüksek yetkiye sahiptir.");
    new pip[20];
    GetPlayerIp(id, pip, sizeof(pip));
    foreach (new i : Player)
	{
        new ipp[15];
        GetPlayerIp(i, ipp, sizeof(ipp));
        if (!strcmp(pip, ipp) && i != id)
        {
            Kick(i);
        }
    }
    new query[300];
    format(query, sizeof(query), "INSERT INTO `oocsicil` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', '%s', '%s', '4')",  PlayerData[id][pID], ReturnDate(), sebep, PlayerData[playerid][pAdminName]);
    mysql_tquery(baglanti, query);
    foreach(new i:Player) if(PlayerData[i][pAyarlar][3] == 0 || i == id)
    {
        SendClientMessageEx(i, COLOR_LIGHTRED, "ADM: (%s) %s adlý oyuncu %s tarafýndan %s sebebiyle client yasaklandý.", ReturnDate(), ReturnName(id, 0),  PlayerData[playerid][pAdminName], sebep);
    }
    Log_Write("logs/ban_log.txt", "[%s] %s, %s tarafindan client yasaklandi. sebep: %s.", ReturnDate(), ReturnName(id, 0), PlayerData[playerid][pAdminName], sebep);
    AddBan(pip, Player_GetName(id), PlayerData[id][pSerial], PlayerData[playerid][pAdminName], 0, sebep);
    Kick(id);
	return 1;
}*/
CMD:banip(playerid, params[])
{
	new ip[30], gun, sebep[50];
    if(PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");
    if(sscanf(params, "s[30]is[50]", ip, gun, sebep)) return BilgiMesajGonder(playerid, "/banip [IP] [Gün (0 yazarsanýz sýnýrsýz yasaklanýr)][Sebep]");
    AddBan(ip, "Yok", "", PlayerData[playerid][pAdminName], (gun < 1) ? (0) : (gettime()+gun*86400), sebep);
    new sure[10];
    if(gun < 1) sure = "Sýnýrsýz";
    else format(sure, sizeof(sure), "%d gün", gun);
    AdminMessage(COLOR_LIGHTRED, "AdmLog: (%s) %s adlý yetkili IP (%s) %s yasakladý.", ReturnDate(), PlayerData[playerid][pAdminName], ip, sure);
	return 1;
}
CMD:oban(playerid, params[])
{
	new ad[24], gun, sebep[50];
    if(PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");
    if(sscanf(params, "s[24]is[50]", ad, gun, sebep)) return BilgiMesajGonder(playerid, "/oban [Karakter Adý] [Gün (0 yazarsanýz sýnýrsýz yasaklanýr)] [Sebep]");
    if(GetPlayerID(ad) != -1) return HataMesajGonder(playerid, "Bu oyuncu oyunda, /ban komutunu kullanýn.");
    new query[124];
    format(query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `Isim` = '%s'", ad);
    mysql_tquery(baglanti, query, "OnBanAccount", "isis", playerid, ad, gun, sebep);
	return 1;
}
/*CMD:ocban(playerid, params[])
{
	new ad[24], sebep[50];
    if(PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");
    if(sscanf(params, "s[24]s[50]", ad, sebep)) return BilgiMesajGonder(playerid, "/ocban [Karakter Adý] [Sebep]");
    if(GetPlayerID(ad) != -1) return HataMesajGonder(playerid, "Bu oyuncu oyunda, /cban komutunu kullanýn.");
    new query[124];
    format(query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `Isim` = '%s'", ad);
    mysql_tquery(baglanti, query, "OnCBanAccount", "iss", playerid, ad, sebep);
	return 1;
}*/
CMD:unban(playerid, params[])
{
	new ad[30];
    if(PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");
    if(sscanf(params, "s[30]", ad)) return BilgiMesajGonder(playerid, "/unban [Karakter Adý veya IP]");
    new query[124];
    format(query, sizeof(query), "SELECT null FROM `bans` WHERE `Ad` = '%s' OR `IP` = '%s'", ad, ad);
    mysql_tquery(baglanti, query, "UnBan", "is", playerid, ad);
	return 1;
}
CMD:baninfo(playerid, params[])
{

    if (PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");
	if (isnull(params) || strlen(params) > 30) return BilgiMesajGonder(playerid, "/baninfo [Karakter Adý veya IP]");
	new query[124];
 	format(query, sizeof(query), "SELECT * FROM `bans` WHERE `Ad` = '%s' OR `IP` = '%s'", SQL_ReturnEscaped(params), SQL_ReturnEscaped(params));
  	mysql_tquery(baglanti, query, "BanInfo", "ds", playerid, params);
    return 1;
}
CMD:h(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 1) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");
    if(isnull(params)) return BilgiMesajGonder(playerid, "/h [Mesaj]");
    foreach(new i:Player) if((PlayerData[i][pAdmin] >= 1 || PlayerData[i][pHelper] >= 1) && PlayerData[i][pAyarlar][7] == 0)
    {
        if(strlen(params) > 64)
        {
        	if(PlayerData[playerid][pHelper] > 0) SendClientMessageEx(i, COLOR_LIGHTRED, "[hChat] (Lv. %d) Helper %s: %.64s", PlayerData[playerid][pHelper], PlayerData[playerid][pAdminName], params);
        	else SendClientMessageEx(i, COLOR_LIGHTRED, "[hChat] %s %s: %.64s", GetAdminRank(playerid), PlayerData[playerid][pAdminName], params);
        	SendClientMessageEx(i, COLOR_LIGHTRED, "%s", params[64]);
        }
        else
        {
            if(PlayerData[playerid][pHelper] > 0) SendClientMessageEx(i, COLOR_LIGHTRED, "[hChat] (Lv. %d) Helper %s: %s", PlayerData[playerid][pHelper], PlayerData[playerid][pAdminName], params);
        	else SendClientMessageEx(i, COLOR_LIGHTRED, "[hChat] %s %s: %s", GetAdminRank(playerid), PlayerData[playerid][pAdminName], params);
        }
    }
	return 1;
}
CMD:soruekle(playerid)
{
    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
    if(SoruSayisi() >= MAX_SORU) return HataMesajGonder(playerid,"Daha fazla soru ekleyemezsiniz.");
    Dialog_Show(playerid,SoruEkle,DIALOG_STYLE_INPUT,"Soru Ekle","Lütfen ekleyeceðiniz sorunun sorusunu giriniz:\n\n{FFBF00}[Ýnfo] en fazla 50 karakterden oluþabilir.","Devam","Kapat");
    return 1;
}
CMD:sorusil(playerid,params[])
{
    if(PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok.");
    new sid;
    if(sscanf(params,"i",sid))
    {
        BilgiMesajGonder(playerid,"/sorusil [Soru ID]");
        return HataMesajGonder(playerid,"Soru ID'si bulmak için /soruidbul komutunu kullanýn.");
    }
    if((sid < 0 || sid >= MAX_SORU) || !SoruData[sid][soruExists]) return HataMesajGonder(playerid,"Soru ID'si bulunamadý.");
    Soru_Sil(sid);
    MesajGonder(playerid, "Soru silindi.");
    return 1;
}
CMD:soruidbul(playerid,params[])
{
    new soruu[50];
    if(PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok.");
    if(sscanf(params,"s[50]",soruu)) return BilgiMesajGonder(playerid, "/soruidbul [Soru]");
    if(strlen(soruu) < 3 || strlen(soruu) > 50) return HataMesajGonder(playerid,"Soru 3 ile 50 karakter arasinda olmalidir.");
    new str[50],sayi;
    for(new i; i<MAX_SORU; i++)
    {
        if(SoruData[i][soruExists])
        {
            if(strfind(SoruData[i][Soru], soruu, true) != -1)
            {
                format(str,sizeof(str),"ID: %d | SQL ID: %d",i,SoruData[i][soruID]);
                SendClientMessage(playerid,0x00FFBFFF,str);
                sayi++;
            }
        }
    }
    if(!sayi) return HataMesajGonder(playerid,"Yazdýðýnýz anahtar kelimeye ait hiçbir soru bulunamadý.");
    return 1;
}
CMD:talep(playerid)
{
	if(PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 1) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
	TalepListele(playerid);
	return 1;
}
CMD:setplayer(playerid, params[])
{
    static
	    userid,
	    type[18],
	    amount[32];

	if(PlayerData[playerid][pAdmin] < 5) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
	if (sscanf(params, "us[18]S()[32]", userid, type, amount))
	{
	    BilgiMesajGonder(playerid, "/setplayer [ID/Isim] [Adlar]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[ADLAR]:{FFFFFF} yas, cinsiyet, dogumyeri, ten, ehliyet, aranma, bitcoin, level, oynamasaati");
		SendClientMessage(playerid, COLOR_YELLOW, "[ADLAR]:{FFFFFF} bagimlilik, tasimacilikseviye, tasimaciliksefer, dovusstili, maskehakki");
		return 1;
	}
	if (!OyundaDegil(userid))
	    return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	if (!strcmp(type, "yas", true))
	{
	    if (isnull(amount) || strval(amount) < 18 || strval(amount) > 80) return BilgiMesajGonder(playerid, "/setplayer [ID/Isim] [Yas] [Yaþ]");
	    PlayerData[userid][pYas] = strval(amount);
	    MesajGonder(playerid, "%s adlý kiþinin yaþýný %d olarak ayarladýn.", ReturnName(userid, 0), strval(amount));
	}
	else if(!strcmp(type, "cinsiyet", true))
	{
	    if(PlayerData[userid][pCinsiyet] == 1)
	    {
	        PlayerData[userid][pCinsiyet] = 2;
	        MesajGonder(playerid, "%s adlý kiþinin cinsiyetini Kadýn olarak deðiþtirdiniz.", ReturnName(userid, 0));
	    }
	    else
	    {
	        PlayerData[userid][pCinsiyet] = 1;
	        MesajGonder(playerid, "%s adlý kiþinin cinsiyetini Erkek olarak deðiþtirdiniz.", ReturnName(userid, 0));
	    }
	}
	else if(!strcmp(type, "dogumyeri", true))
	{
	    if(isnull(amount)) return HataMesajGonder(playerid, "Doðum yerini girmediniz.");
	    format(PlayerData[userid][pDogum], 30, amount);
	    MesajGonder(playerid, "%s adlý kiþinin doðum yerini '%s' olarak deðiþtirdiniz.", ReturnName(userid, 0), amount);
	}
	else if(!strcmp(type, "ten", true))
	{
	    if(PlayerData[userid][pTen] == 1)
	    {
	        PlayerData[userid][pTen] = 2;
	        MesajGonder(playerid, "%s adlý kiþinin ten rengini Siyah olarak deðiþtirdiniz.", ReturnName(userid, 0));
	    }
	    else
	    {
	        PlayerData[userid][pTen] = 1;
	        MesajGonder(playerid, "%s adlý kiþinin ten rengini Beyaz olarak deðiþtirdiniz.", ReturnName(userid, 0));
	    }
	}
	else if(!strcmp(type, "ehliyet", true))
	{
	    if(PlayerData[userid][pEhliyet] == 1)
	    {
	        PlayerData[userid][pEhliyet] = 0;
	        MesajGonder(playerid, "%s adlý kiþinin ehliyetini sildiniz.", ReturnName(userid, 0));
	    }
	    else
	    {
	        PlayerData[userid][pEhliyet] = 1;
	        MesajGonder(playerid, "%s adlý kiþiye ehliyet verdiniz.", ReturnName(userid, 0));
	    }
	}
	else if(!strcmp(type, "aranma", true))
	{
		if(isnull(amount) || strval(amount) < 0 || strval(amount) > 6) return BilgiMesajGonder(playerid, "/setplayer [ID/Isim] [Aranma] [Aranma Seviyesi 0-6]");
		PlayerData[userid][pAranma] = strval(amount);
		SetPlayerWantedLevel(userid, PlayerData[userid][pAranma]);
		MesajGonder(playerid, "%s adlý kiþinin aranma seviyesini %d olarak ayarladýnýz.", ReturnName(userid, 0), strval(amount));
	}
	else if(!strcmp(type, "bitcoin", true))
	{
		if(isnull(amount) || strval(amount) < 0 || strval(amount) > 1000) return BilgiMesajGonder(playerid, "/setplayer [ID/Isim] [Bitcoin] [Miktar]");
		PlayerData[userid][pBitcoin] = strval(amount);
		MesajGonder(playerid, "%s adlý kiþinin bitcoin miktarý %d olarak ayarlandý", ReturnName(userid, 0), strval(amount));
	}
	else if(!strcmp(type, "level", true))
	{
		if(isnull(amount)) return BilgiMesajGonder(playerid, "/setplayer [ID/Isim] [Level] [Level]");
		PlayerData[userid][pLevel] = strval(amount);
		SetPlayerScore(userid, PlayerData[userid][pLevel]);
		MesajGonder(playerid, "%s adlý kiþinin levelini %d olarak ayarlandýnýz", ReturnName(userid, 0), strval(amount));
	}
	else if(!strcmp(type, "oynamasaati", true))
	{
		if(isnull(amount)) return BilgiMesajGonder(playerid, "/setplayer [ID/Isim] [oynamasaati] [Saat]");
		PlayerData[userid][pOynamaSaati] = strval(amount);
		MesajGonder(playerid, "%s adlý kiþinin oynama saatini %d olarak ayarlandýnýz", ReturnName(userid, 0), strval(amount));
	}
	else if(!strcmp(type, "bagimlilik", true))
	{
		if(PlayerData[userid][pBagimlilik] == 0)
		{
		    PlayerData[userid][pBagimlilik] = 1;
		    PlayerData[userid][pBagimlilikSayac][1] = 0;
		    PlayerData[userid][pBagimlilikSayac][0] = 0;
		    MesajGonder(playerid, "%s adlý kiþiyi uyuþturucu baðýmlýsý yaptýnýz.", ReturnName(userid, 0));
		}
		else
		{
		    PlayerData[userid][pBagimlilik] = 0;
		    PlayerData[userid][pBagimlilikSayac][1] = 0;
		    PlayerData[userid][pBagimlilikSayac][0] = 0;
		    MesajGonder(playerid, "%s adlý kiþi artýk uyuþturucu baðýmlýsý deðil.", ReturnName(userid, 0));
		}
	}
	else if(!strcmp(type, "tasimacilikseviye", true))
	{
        if(isnull(amount)) return BilgiMesajGonder(playerid, "/setplayer [ID/Isim] [tasimacilikseviye] [Seviye 0-5]");
        if(strval(amount) < 0 || strval(amount) > 5) return HataMesajGonder(playerid, "Taþýmacýlýk seviyesi 0-5 arasýnda olmalýdýr.");
		PlayerData[userid][pTasimacilikSeviye] = strval(amount);
		MesajGonder(playerid, "%s adlý kiþinin taþýmacýlýk seviyesini %d olarak ayarlandýnýz", ReturnName(userid, 0), strval(amount));
	}
	else if(!strcmp(type, "tasimaciliksefer", true))
	{
        if(isnull(amount)) return BilgiMesajGonder(playerid, "/setplayer [ID/Isim] [tasimaciliksefer] [Sefer]");
		PlayerData[userid][pTasimacilikSefer] = strval(amount);
		MesajGonder(playerid, "%s adlý kiþinin taþýmacýlýk seferini %d olarak ayarlandýnýz", ReturnName(userid, 0), strval(amount));
	}
	else if(!strcmp(type, "dovusstili", true))
	{
        if(isnull(amount)) return BilgiMesajGonder(playerid, "/setplayer [ID/Isim] [dovusstili] [Stil]");
		PlayerData[userid][pDovusStili] = strval(amount);
		MesajGonder(playerid, "%s adlý kiþinin dövüþ stilini %s olarak ayarlandýnýz", ReturnName(userid, 0), GetFightStyleName(strval(amount)));
	}
	else if(!strcmp(type, "maskehakki", true))
	{
		if(PlayerData[userid][pMaskeHakki] == 0)
		{
		    PlayerData[userid][pMaskeHakki] = 1;
		    MesajGonder(playerid, "%s adlý kiþiye maske hakký verdiniz.", ReturnName(userid, 0));
		}
		else
		{
		    PlayerData[userid][pMaskeHakki] = 0;
		    MesajGonder(playerid, "%s adlý kiþinin maske hakkýný sildiniz.", ReturnName(userid, 0));
		}
	}
	return 1;
}
CMD:aesyaver(playerid, params[])
{
	static userid;
	if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
	if(sscanf(params, "u", userid)) return BilgiMesajGonder(playerid, "/aesyaver [ID/Isim]");
	if(!OyundaDegil(userid)) return HataMesajGonder(playerid, "Oyuncu oyunda deðil.");
	SetPVarInt(playerid, "oyuncuID", userid);
	Dialog_Show(playerid, AEsyaVer, DIALOG_STYLE_LIST, "Eþya Ver", "Zar\nSigara\nÝp\nGöz Baðý\nMaske\nBenzin Kutusu\nBarbeku\nKöfte\nTavuk Eti\nDana Eti\nTamir Kiti\nPortatif Çadýr\nKamp Ateþi\nÞarjör\nYan Keski", "Ver", "Kapat");
	return 1;
}
/*CMD:nrn(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");

    new userid;
    if (sscanf(params, "u", userid))
        return BilgiMesajGonder(playerid, "/nrn [id/isim]");

    Dialog_Show(userid, nrn, DIALOG_STYLE_INPUT, "Ýsim Deðiþtirme Talebi", "%s adlý yetkili senin ismini role-play kurallarýna uygun bulmadý.\nLütfen yeni isim girin.\n - Ad_Soyad tarzýnda olmalý.\n - Yabancý ad soyad olmalý.\n - Ünlü adý olmamalý.", "Deðiþtir", "Iptal", PlayerData[playerid][pAdminName]);
    return 1;
}
CMD:an(playerid, params[])
{
    static
        userid;

    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");

    if (sscanf(params, "u", userid))
        return BilgiMesajGonder(playerid, "/an [id/isim]");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

    if (!strlen(PlayerData[userid][pNameChange]))
        return HataMesajGonder(playerid, "Oyuncu isim deðiþikliði isteðinde bulunmamýþ.");


    MesajGonder(playerid, "%s adlý oyuncunun yeni adý %s olarak deðiþtirildi.", Player_GetName(userid), PlayerData[userid][pNameChange]);
    BilgiMesajGonder(userid, "%s adlý yetkili isim deðiþtirme isteðinizi kabul etti, isminiz %s olarak deðiþtirildi.", PlayerData[playerid][pAdminName], PlayerData[userid][pNameChange]);
	AdminMessage(COLOR_LIGHTRED, "ADM: (%s) %s, %s kiþisinden gelen isim deðiþikliði talebini kabul etti.", ReturnDate(), PlayerData[playerid][pAdminName], Player_GetName(userid));
    ChangeName(userid, PlayerData[userid][pNameChange]);
    PlayerData[userid][pNameChange][0] = '\0';
    IC_Sicil_Reset(userid);
    PlayerData[userid][pAranma] = 0;
    SetPlayerWantedLevel(userid, 0);
    return 1;
}
CMD:dn(playerid, params[])
{
    static
        userid;

    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");

    if (sscanf(params, "u", userid))
        return BilgiMesajGonder(playerid, "/dn [id/isim]");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

    if (!strlen(PlayerData[userid][pNameChange]))
        return HataMesajGonder(playerid, "Oyuncu isim deðiþikliði isteðinde bulunmamýþ.");

    BilgiMesajGonder(playerid, "%s adlý oyuncunun %s isim deðiþikliðini reddetiniz.", Player_GetName(userid), PlayerData[userid][pNameChange]);
    BilgiMesajGonder(userid, "%s adlý yetkili %s isim deðiþikliðini reddetti.", PlayerData[playerid][pAdminName], PlayerData[userid][pNameChange]);
    AdminMessage(COLOR_LIGHTRED, "ADM: (%s) %s, %s kiþisinden gelen isim deðiþikliðini reddetti.", ReturnDate(), PlayerData[playerid][pAdminName], Player_GetName(userid));
    PlayerData[userid][pNameChange][0] = '\0';
    return 1;
}*/
CMD:sicilkontrol(playerid, params[])
{
    static
        userid;

    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "u", userid))
        return BilgiMesajGonder(playerid, "/sicilkontrol [id/isim]");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

    SicilKontrol(playerid, userid);
    return 1;
}
CMD:listguns(playerid, params[])
{
    new userid;

    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "u", userid))
        return BilgiMesajGonder(playerid, "/listguns [id/isim]");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Oyuncu giriþ yapmamýþ.");

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
    SendClientMessageEx(playerid, COLOR_LIGHTRED, "%s'in Silahlarý:", ReturnName(userid, 0));
	new a;
    for(new i; i<13; i++) if(PlayerData[userid][pSilahlar][i] > 0)
	{
	    GetPlayerWeaponData(userid, i, a, PlayerData[userid][pMermiler][i]);
	    SendClientMessageEx(playerid, COLOR_WHITE, "* %s (%d mermi)", ReturnWeaponName(PlayerData[userid][pSilahlar][i]), PlayerData[userid][pMermiler][i]);
	}
    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
    return 1;
}
CMD:flipcar(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (vehicleid > 0 && isnull(params))
    {
        FlipVehicle(vehicleid);
        MesajGonder(playerid, "Bulunduðunuz araç düzeltildi.");
    }
    else
    {
        if (sscanf(params, "d", vehicleid))
            return BilgiMesajGonder(playerid, "/flipcar [araç ID]");

        else if (!IsValidVehicle(vehicleid))
            return HataMesajGonder(playerid, "Geçersiz bir araç ID'sý belirttiniz.");

        FlipVehicle(vehicleid);
        MesajGonder(playerid, "Araç ID %d düzeltildi.", vehicleid);
    }
    return 1;
}
CMD:tracenumber(playerid, params[])
{
    new number;

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 4)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "d", number))
        return BilgiMesajGonder(playerid, "/tracenumber [numara]");

    if (number == 0)
        return HataMesajGonder(playerid, "Geçersiz numara girdiniz.");

    if (GetNumberOwner(number) != INVALID_PLAYER_ID)
        return BilgiMesajGonder(playerid, "%d numaranýn sahibi %s adlý kiþidir.", number, ReturnName(GetNumberOwner(number), 0));

    HataMesajGonder(playerid, "Bu numaraya sahip oyuncu çevrimiçi deðil veya bu numaraya sahip kimse yok.");
    return 1;
}
CMD:arenk(playerid, params[])
{
    static
        color1,
        color2,
        carid;

    if (PlayerData[playerid][pAdmin] < 3)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");

    if(sscanf(params, "iii", carid, color1, color2)) return BilgiMesajGonder(playerid, "/arenk [Araç ID] [Renk 1] [Renk 2]");
    if(!IsValidVehicle(carid)) return HataMesajGonder(playerid, "Geçersiz araç id.");

    if (color1 < 0 || color1 > 255)
        return HataMesajGonder(playerid, "Renk 1, 0 ile 255 arasýnda olmalýdýr.");

    if (color2 < 0 || color2 > 255)
        return HataMesajGonder(playerid, "Renk 2, 0 ile 255 arasýnda olmalýdýr.");

	new id = Car_GetID(carid);
	if(id == -1) ChangeVehicleColor(carid, color1, color2);
	else
	{
	    AracInfo[id][aracRenkler][0] = color1;
	    AracInfo[id][aracRenkler][1] = color2;
	    ChangeVehicleColor(carid, color1, color2);
	    Arac_Kaydet(id);
	}

    MesajGonder(playerid, "Aracýn rengi deðiþtirildi.");
    return 1;
}

CMD:apaintjob(playerid, params[])
{
    static
        paintjobid, carid;

    if (PlayerData[playerid][pAdmin] < 3)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if(sscanf(params, "ii", carid, paintjobid)) return BilgiMesajGonder(playerid, "/arenk [Araç ID] [Paintjob ID] (-1 kapatýr)");
    if(!IsValidVehicle(carid)) return HataMesajGonder(playerid, "Geçersiz araç id.");

    if (paintjobid < -1 || paintjobid > 5)
        return HataMesajGonder(playerid, "Geçersiz Paintjob ID. (0-5)");

    if (paintjobid == -1)
        paintjobid = 6;

    new id = Car_GetID(carid);
    if(id == -1) ChangeVehiclePaintjob(carid, paintjobid);
    else
    {
        AracInfo[id][aracPaintjob] = paintjobid;
        ChangeVehiclePaintjob(carid, paintjobid);
        Arac_Kaydet(id);
    }
    MesajGonder(playerid, "Paintjob deðiþtirildi.", paintjobid);
    return 1;
}
CMD:jetpack(playerid, params[])
{

    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

	PlayerData[playerid][pJetpack] = 1;
 	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
    return 1;
}
CMD:setweather(playerid, params[])
{
    new weatherid;

    if (PlayerData[playerid][pAdmin] < 4)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    if (sscanf(params, "d", weatherid))
        return BilgiMesajGonder(playerid, "/setweather [weather ID]");

    SetWeather(weatherid);
    MesajGonder(playerid, "Hava durumu %d olarak deðiþtirildi.", weatherid);
    AdminMessage(COLOR_LIGHTRED, "AdmLog: %s adlý yetkili hava durumunu deðiþtirdi. (ID: %d)", PlayerData[playerid][pAdminName], weatherid);
    return 1;
}
CMD:panel(playerid)
{
	if(PlayerData[playerid][pAdmin] < 5) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
	if(sunucuKilitli) Dialog_Show(playerid, ServerPanel, DIALOG_STYLE_LIST, "Server Panel", "Kilit Aç\nHostname Deðiþtir\nSorgu Çalýþtýr\nBakým Modu\nBaþvuru Durumu (%s)", "Seç", "Kapat", (GetServerBilgi("basvurudurum") == 1) ? ("{84f542}Açýk") : ("{ff1414}Kapalý"));
	else Dialog_Show(playerid, ServerPanel, DIALOG_STYLE_LIST, "Server Panel", "Kilitle\nHostname Deðiþtir\nSorgu Çalýþtýr\nBakým Modu\nBaþvuru Durumu (%s)", "Seç", "Kapat", (GetServerBilgi("basvurudurum") == 1) ? ("{84f542}Açýk") : ("{ff1414}Kapalý"));
	return 1;
}
CMD:evduzenle(playerid, params[])
{
    static id, type[24], string[128];
	if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanamazsýn !");
	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	BilgiMesajGonder(playerid, "/evduzenle [ID] [Ad]");
	    SendClientMessage(playerid, COLOR_YELLOW, "{00FF15}[ADLAR]: {FFFFFF} sahip, sistemselfiyat, pozisyon, interior, kilit, maksmobilya, mobilyatemizle, kasatemizle");
		return 1;
	}
	if ((id < 0 || id >= MAX_EV) || !house_info[id][evExists])
	    return HataMesajGonder(playerid, "Geçersiz ev ID'sý.");

    if (!strcmp(type, "sahip", true))
    {
        new sahipid;

	    if (sscanf(string, "d", sahipid))
	        return BilgiMesajGonder(playerid, "/evduzenle [ID] [sahip] [Sahip SQL ID] (-1 yazarsanýz sahipsiz olur)");

		house_info[id][evSahip] = sahipid;
		Ev_Yenile(id);
		Ev_Kaydet(id);
    }
    if (!strcmp(type, "sistemselfiyat", true))
    {
        new fiyat;

	    if (sscanf(string, "d", fiyat))
	        return BilgiMesajGonder(playerid, "/evduzenle [ID] [sistemselfiyat] [Fiyat]");

		house_info[id][evKendiFiyati] = fiyat;
		if(!house_info[id][evSatilik]) house_info[id][evFiyat] = fiyat;
		Ev_Yenile(id);
		Ev_Kaydet(id);
    }
    if (!strcmp(type, "pozisyon", true))
    {
        GetPlayerPos(playerid, house_info[id][evPos][0], house_info[id][evPos][1], house_info[id][evPos][2]);
		Ev_Yenile(id);
		Ev_Kaydet(id);
    }
    if (!strcmp(type, "interior", true)) // Deðiþti
    {
        new interior;

	    if (sscanf(string, "d", interior))
	        return BilgiMesajGonder(playerid, "/evduzenle [ID] [interior] [Interior ID]");

	    if(!(0 <= interior <= sizeof(HouseInteriors)-1)) return HataMesajGonder(playerid, "Yazdýðýnýz ID'de bir interior bulunmamaktadýr.");

	    house_info[id][evInterior] = interior;
	    foreach(new i:Player)
	    {
	        if(PlayerData[i][pHouse] == house_info[id][evID])
	        {
	            SetPlayerInterior(playerid, HouseInteriors[ house_info[id][evInterior] ][intID]);
  				SetPlayerPos(playerid, HouseInteriors[house_info[id][evInterior] ][intX], HouseInteriors[ house_info[id][evInterior] ][intY], HouseInteriors[ house_info[id][evInterior] ][intZ]);
          		ObjelerYukleniyor(i);
	        }
	    }
	    Ev_Kaydet(id);
	    House_RemoveFurniture(id);
    }
    if (!strcmp(type, "kilit", true))
    {
        if(house_info[id][evKilit] == 1) house_info[id][evKilit] = 0;
        else house_info[id][evKilit] = 1;
        Ev_Yenile(id);
        Ev_Kaydet(id);
    }
    if (!strcmp(type, "maksmobilya", true))
    {
        new mobilya;

	    if (sscanf(string, "d", mobilya))
	        return BilgiMesajGonder(playerid, "/evduzenle [ID] [maksmobilya] [Mobilya Limiti]");

		house_info[id][evMaksMobilya] = mobilya;
		Ev_Kaydet(id);
		MesajGonder(playerid, "Maksimum mobilya limiti %d olarak deðiþtirildi.", mobilya);
    }
    if (!strcmp(type, "mobilyatemizle", true)) // Deðiþti
    {
        MesajGonder(playerid, "Mobilyalar silindi.");
        House_RemoveFurniture(id);
    }
    if (!strcmp(type, "kasatemizle", true))
    {
        house_info[id][evCash] = 0;
        house_info[id][evUyusturucu] = 0;
        for(new i; i<10; i++)
        {
            house_info[id][evSilahlar][i] = 0;
            house_info[id][evMermiler][i] = 0;
        }
        Ev_Kaydet(id);
        MesajGonder(playerid, "Kasadaki para, uyuþturucu ve silahlar silindi.");
    }
	return 1;
}
CMD:aracduzenle(playerid, params[])
{
    static vid, type[24], string[128];
	if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanamazsýn !");
	if (sscanf(params, "ds[24]S()[128]", vid, type, string))
	{
	    BilgiMesajGonder(playerid, "/aracduzenle [ID] [Ayar]");
	    SendClientMessage(playerid, COLOR_YELLOW, "{00FF15}[Ayarlar]: {FFFFFF}model, sahip, zirh, güvenlik, kilit, vergi, modifiyesil, taksiplaka, ceza, birlik, kira, satilik");
	    return SendClientMessage(playerid, COLOR_YELLOW, "{00FF15}[Ayarlar]: {FFFFFF}plaka, bagajtemizle, kilometre");
	}
	new id = Car_GetID(vid);
	if(id == -1) return HataMesajGonder(playerid, "Geçersiz Araç ID.");
	if (!strcmp(type, "model", true))
	{
	    new model;
	    if(sscanf(string, "d", model)) return BilgiMesajGonder(playerid, "/aracduzenle [ID] [model] [Model ID]");
	    if(!IsValidVehicleModel(model)) return HataMesajGonder(playerid,"Geçersiz Model ID girdiniz.");
	    AracInfo[id][aracModel] = model;
	    Arac_Kaydet(id);
	    Arac_Spawn(id, 1);
	    MesajGonder(playerid, "Aracýn modeli deðiþtirildi ve respawn edildi.");
	}
	else if (!strcmp(type, "sahip", true))
	{
	    new sahip;
	    if(sscanf(string, "d", sahip)) return BilgiMesajGonder(playerid, "/aracduzenle [ID] [sahip] [Sahip SQL ID]");
	    AracInfo[id][aracSahip] = sahip;
	    Arac_Kaydet(id);
	    MesajGonder(playerid, "Aracýn sahibi SQL ID %d olarak ayarlandý.", sahip);
	}
	else if (!strcmp(type, "zirh", true))
	{
	    new zirh;
	    if(sscanf(string, "d", zirh)) return BilgiMesajGonder(playerid, "/aracduzenle [ID] [zirh] [Zirh]");
	    AracInfo[id][aracZirh] = zirh;
	    Arac_Kaydet(id);
	    MesajGonder(playerid, "Aracýn zýrhýný %d olarak ayarladýnýz.", zirh);
	}
	else if (!strcmp(type, "guvenlik", true))
	{
	    new mik;
	    if(sscanf(string, "d", mik)) return BilgiMesajGonder(playerid, "/aracduzenle [ID] [guvenlik] [0-5]");
	    if(mik < 0 || mik > 5) return HataMesajGonder(playerid, "0 ile 5 arasýnda olmalýdýr.");
	    AracInfo[id][aracSeviye] = mik;
	    Arac_Kaydet(id);
	    MesajGonder(playerid, "Aracýn güvenlik seviyesini %d olarak ayarladýnýz.", mik);
	}
	else if (!strcmp(type, "kilit", true))
	{
	    static
	        engine,
	        lights,
	        alarm,
	        doors,
	        bonnet,
	        boot,
	        objective;

		GetVehicleParamsEx(AracInfo[id][aracVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
		if (!AracInfo[id][aracKilit])
			{
				AracInfo[id][aracKilit] = true;
				Arac_Kaydet(id);

				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

				SetVehicleParamsEx(AracInfo[id][aracVehicle], engine, lights, alarm, 1, bonnet, boot, objective);
				MesajGonder(playerid, "Araç kilitlendi.");
			}
			else
			{
				AracInfo[id][aracKilit] = false;
				Arac_Kaydet(id);

				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				SetVehicleParamsEx(AracInfo[id][aracVehicle], engine, lights, alarm, 0, bonnet, boot, objective);
				MesajGonder(playerid, "Aracýn kilidi açýldý.");
			}
	}
	else if (!strcmp(type, "vergi", true))
	{
	    new vergi;
	    if(sscanf(string, "d", vergi)) return BilgiMesajGonder(playerid, "/aracduzenle [ID] [vergi] [Vergi]");
	    AracInfo[id][aracVergi] = vergi;
	    Arac_Kaydet(id);
	    MesajGonder(playerid, "Aracýn vergisini %s olarak ayarladýnýz.", FormatNumber(vergi));
	}
	else if (!strcmp(type, "modifiyesil", true))
	{
	    for(new i; i<14; i++) if(AracInfo[id][aracMods][i] > 0)
	    {
	        RemoveVehicleComponent(AracInfo[id][aracVehicle], AracInfo[id][aracMods][id]);
	        AracInfo[id][aracMods][id] = 0;
	    }
	    AracInfo[id][aracPaintjob] = -1;
	    ChangeVehiclePaintjob(AracInfo[id][aracVehicle], 3);
	    Arac_Kaydet(id);
	    MesajGonder(playerid, "Modifiyeler kaldýrýldý.");
	}
	else if (!strcmp(type, "taksiplaka", true))
	{
	    if(AracInfo[id][TaksiPlaka] == 0)
	    {
	        AracInfo[id][TaksiPlaka] = 1;
	        MesajGonder(playerid, "Araca taksi plakasý verdiniz.");
	    }
	    else
	    {
	        AracInfo[id][TaksiPlaka] = 0;
	        MesajGonder(playerid, "Aracýn taksi plakasý kaldýrýldý.");
	    }
	    Arac_Kaydet(id);
	}
	else if (!strcmp(type, "ceza", true))
	{
	    new ceza;
	    if(sscanf(string, "d", ceza)) return BilgiMesajGonder(playerid, "/aracduzenle [ID] [ceza] [Ceza]");
	    AracInfo[id][aracTicket] = ceza;
	    Arac_Kaydet(id);
	    MesajGonder(playerid, "Aracýn cezasýný %s olarak ayarladýnýz.", FormatNumber(ceza));
	}
	else if (!strcmp(type, "birlik", true))
	{
	    new birlikid;
	    if(sscanf(string, "d", birlikid)) return BilgiMesajGonder(playerid, "/aracduzenle [ID] [birlik] [Birlik ID (sql)]");
	    AracInfo[id][aracFaction] = birlikid;
     	AracInfo[id][aracFactionType] = Birlikler[Birlik_GetID(birlikid)][birlikTip];
     	Arac_Kaydet(id);
	}
	else if (!strcmp(type, "satilik", true))
	{
	    new fiyat;
	    if(sscanf(string, "d", fiyat)) return BilgiMesajGonder(playerid, "/aracduzenle [ID] [satilik] [Fiyat] (0 yazarsanýz satýlýk olmaz)");
	    if(fiyat <= 0)
	    {
	        AracInfo[id][aracSatilik] = 0;
	        AracInfo[id][aracFiyat] = 0;
	        Arac_Kaydet(id);
	        UpdateDynamic3DTextLabelText(AracInfo[id][aracLabel], -1, " ");
	        DestroyDynamic3DTextLabel(AracInfo[id][aracLabel]);
	        MesajGonder(playerid,"Araç artýk satýlýk deðil.");
	    }
	    else
	    {
	        UpdateDynamic3DTextLabelText(AracInfo[id][aracLabel], -1, " ");
	        DestroyDynamic3DTextLabel(AracInfo[id][aracLabel]);
	        AracInfo[id][aracSatilik] = 1;
	        AracInfo[id][aracFiyat] = fiyat;
	        Arac_Kaydet(id);
	        new str[120];
		    format(str,sizeof(str),"{FF00FF}SATILIK\n{FF00FF}Ücret: %s\n{FF00FF}%d",FormatNumber(AracInfo[id][aracFiyat]), GetSQLPhoneNumber(AracInfo[id][aracSahip]));
		    AracInfo[id][aracLabel] = CreateDynamic3DTextLabel(str,-1, 0.0, -2.5, 0.4,30.0,INVALID_PLAYER_ID,AracInfo[id][aracVehicle], 1);
	    }
	}
	else if (!strcmp(type, "plaka", true))
	{
	    new plaka[24];
	    if(sscanf(string, "s[24]", plaka)) return BilgiMesajGonder(playerid, "/aracduzenle [ID] [plaka] [Plaka]");
	 	format(AracInfo[id][aracPlaka], 24, plaka);
	 	SetVehicleNumberPlate(AracInfo[id][aracPlaka], plaka);
	 	MesajGonder(playerid, "Aracýn plakasý deðiþtirildi.");
	}
	else if (!strcmp(type, "bagajtemizle", true))
	{
	    for(new i; i<5; i++) if(AracInfo[id][aracSilahlar][i] > 0)
	    {
	        AracInfo[id][aracSilahlar][i] = 0;
	        AracInfo[id][aracMermiler][i] = 0;
	    }
	    AracInfo[id][aracUyusturucu] = 0;
	    MesajGonder(playerid, "Aracýn bagajý temizlendi.");
	}
	else if (!strcmp(type, "kilometre", true))
	{
	    new Float:km;
	    if(sscanf(string, "f", km)) return BilgiMesajGonder(playerid, "/aracduzenle [ID] [kilometre] [Kilometre]");
	    AracInfo[id][aracKM] = km;
	    Arac_Kaydet(id);
	    MesajGonder(playerid, "Aracýn kilometresi %f olarak deðiþtirildi", km);
	}
	return 1;
}
CMD:god(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");
	if(PlayerData[playerid][pGOD] == true)
	{
	    PlayerData[playerid][pGOD] = false;
	    MesajGonder(playerid, "Godmode kapatýldý.");
	}
	else
	{
	    PlayerData[playerid][pGOD] = true;
	    MesajGonder(playerid, "Godmode açýldý.");
	}
	return 1;
}
CMD:respawnnear(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 2)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");

    new count;

    for(new i = 1, ps = GetVehiclePoolSize(); i <= ps; i++)
    {
        static
            Float:fX,
            Float:fY,
            Float:fZ;

        if (IsValidVehicle(i) && GetVehicleDriver(i) == INVALID_PLAYER_ID)
        {
            GetVehiclePos(i, fX, fY, fZ);

            if (IsPlayerInRangeOfPoint(playerid, 50.0, fX, fY, fZ))
            {
                AracSpawn(i);
                count++;
            }
        }
    }
    if (!count)
        return HataMesajGonder(playerid, "Respawn için yakýnýnýzda hiçbir araç bulunmamaktadýr.");

    MesajGonder(playerid, "Yakýnýnýzda bulunan %d adet araç respawn edilmiþtir.", count);
    return 1;
}
CMD:setname(playerid, params[])
{
	static userid, newname[24];
	if(PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
	if (sscanf(params, "us[24]", userid, newname)) return BilgiMesajGonder(playerid, "/setname [id/isim] [yeni isim]");
	if(!OyundaDegil(userid)) return HataMesajGonder(playerid, "Bu oyuncu giriþ yapmamýþ.");
	if(!IsValidRoleplayName(newname)) return HataMesajGonder(playerid, "Geçersiz ad biçimi girdiniz.");
	if(!IsimKontrol(newname)) return HataMesajGonder(playerid, "Bu isim kullanýlýyor.");
	if(SoyadKilitlimi(GetPlayerLastName(playerid, newname, 0))) return HataMesajGonder(playerid, "Bu soyad kilitlenmiþ.");

	MesajGonder(playerid, "%s adlý kiþinin ismini %s olarak ayarladýnýz.", Player_GetName(userid), newname);
	ChangeName(userid, newname);
	return 1;
}
CMD:namechanges(playerid, params[])
{
	new id;
    if(PlayerData[playerid][pAdmin] < 2) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
    if(sscanf(params, "u", id)) return BilgiMesajGonder(playerid, "/namechanges [ID/Isim]");
    if(!OyundaDegil(id)) return HataMesajGonder(playerid, "Bu oyuncu giriþ yapmamýþ.");
    new query[124];
    format(query, sizeof(query), "SELECT * FROM `namechanges` WHERE `sqlid` = '%d'", PlayerData[id][pID]);
    mysql_tquery(baglanti, query, "NameChanges", "di", playerid, id);
	return 1;
}
CMD:stats(playerid, params[])
{
	new id;
	if(PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
	if(sscanf(params, "u", id)) return BilgiMesajGonder(playerid, "/stats [ID/Isim]");
	if(!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu giriþ yapmamýþ.");
	ShowStats(playerid, id);
	return 1;
}
CMD:ahelp(playerid)
{
    if(PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
    SendClientMessage(playerid, 0xBBFFEEFF, "[Oyun Görevlisi]: /gotopos, /aduty, /aipcoz, /akelepcecoz, /revive, /masked, /maskeidbul, /ss, /o, /songiris, /kick");
    SendClientMessage(playerid, 0xBBFFEEFF, "[Oyun Görevlisi]: /dondur, /coz, /spawnla, /goto, /gethere, /setinterior, /setvw, /sendto, /sethp, /atamir, /getcar");
    SendClientMessage(playerid, 0xBBFFEEFF, "[Oyun Görevlisi]: /carto, /entercar, /gotocar, /respawncar, /respawncars, /meslekaracspawn, /cc, /spec, /jail, /unjail");
    SendClientMessage(playerid, 0xBBFFEEFF, "[Oyun Görevlisi]: , /ojail, /ban, /banip, /unban, /oban, /an, /dn, /stats, /listguns, /flipcar, /tracenumber");
    if(PlayerData[playerid][pAdmin] >= 2) SendClientMessage(playerid, 0xBBFFEEFF, "[Oyun Yetkilisi]: /reviveall, /setskin, /ip, /setarmor, /respawnnear");
    if(PlayerData[playerid][pAdmin] >= 3) SendClientMessage(playerid, 0xBBFFEEFF, "[Topluluk Yöneticisi]: /binaekle, /setleader, /siparisler, /resetweps, /asetfaction, /asetrank, /arenk, /apaintjob, /setname");
    if(PlayerData[playerid][pAdmin] >= 4) SendClientMessage(playerid, 0xBBFFEEFF, "[Genel Yetkili]: /sethelper, /setstaffname, /setvip, /ozelmodelver, /ozelmodelsil, /giveweapon, /aesyaver, /setweather, /evduzenle");
    if(PlayerData[playerid][pAdmin] >= 5) SendClientMessage(playerid, 0xBBFFEEFF, "[Kurucu]: /setadmin, /kickall, /givecash, /givecashall, /giveexp, /giveexpall, /setplayer, /panel, /dinamikyardim");
	return 1;
}
CMD:dinamikyardim(playerid)
{
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
    SendClientMessage(playerid, COLOR_CLIENT, "DÝNAMÝK:{FFFFFF} /binaekle, /binaduzenle, /binasil, /aracolustur, /aracsil, /gateolustur, /gateduzenle, /gatesil");
    SendClientMessage(playerid, COLOR_CLIENT, "DÝNAMÝK:{FFFFFF} /garajolustur, /garajsil, /garajduzenle, /evolustur, /evsil, /evduzenle, /birlikolustur, /birliksil");
    SendClientMessage(playerid, COLOR_CLIENT, "DÝNAMÝK:{FFFFFF} /birlikduzenle, /isyeriolustur, /isyeriduzenle, /isyerisil, /createarrest, /destroyarrest, /createcctv, /deletecctv");
    SendClientMessage(playerid, COLOR_CLIENT, "DÝNAMÝK:{FFFFFF} /lokasyonekle, /lokasyonsil, /createatm, /editatm, /removeatm, /hoodolustur, /hoodsil");
	return 1;
}
CMD:hhelp(playerid)
{
	if(PlayerData[playerid][pHelper] < 1) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok.");
	SendClientMessage(playerid, 0xBBFFEEFF, "[Lv. 1 Helper]: /talep, /hduty, /h");
	if(PlayerData[playerid][pHelper] >= 2) SendClientMessage(playerid, 0xBBFFEEFF, "[Lv. 2 Helper]: /revive, /spawnla, /goto, /gethere, /getcar, /gotocar, /respawncar");
	if(PlayerData[playerid][pHelper] >= 3) SendClientMessage(playerid, 0xBBFFEEFF, "[Lv. 3 Helper]: /carto, /sendto, /slap");
	if(PlayerData[playerid][pHelper] >= 4) SendClientMessage(playerid, 0xBBFFEEFF, "[Lv. 4 Helper]: /kick, /tracenumber");
	if(PlayerData[playerid][pHelper] >= 5) SendClientMessage(playerid, 0xBBFFEEFF, "[Lv. 5 Helper]: /jail");
	return 1;
}
CMD:dashcamlimit(playerid, params[])
{
	new limit, vehicleid;
	vehicleid = GetPlayerVehicleID(playerid);
	if (GetFactionType(playerid) != BIRLIK_LSPD)
		return HataMesajGonder(playerid, "Devlet memuru deðilsiniz.");

    if(sscanf(params, "i", limit)) return BilgiMesajGonder(playerid, "/dashcamlimit [KM/H]");

	if (!IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Bu komutu polis araçlarýnda kullanabilirsin.");
	if (vehRadar[vehicleid] == false) return HataMesajGonder(playerid, "Ýlk önce aracýn Dashcam'ý açýk olmalýdýr.");

    if(limit < 50 || limit > 250) return HataMesajGonder(playerid, "Limit en az 50, en fazla 250 olmalýdýr.");

    vehRadarLimit[vehicleid] = limit;
	MesajGonder(playerid, "Uyarýlacak hýz seviyesi %d KM/H olarak ayarlandý.", limit);
	return 1;
}
CMD:setactorvw(playerid, params[])
{
	new acid, vw;
	if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
	if(sscanf(params, "ii", acid, vw)) return BilgiMesajGonder(playerid, "/setactorvw [Actor ID] [Vw]");
	if(!IsValidActor(acid)) return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");
	SetActorVirtualWorld(acid, vw);
	return 1;
}
CMD:payday(playerid)
{
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
    foreach(new i: Player)
    {
        if(PlayerData[i][pMaasSure] < 3600 && PlayerData[i][pHapisSure] < 2) PlayerData[i][pMaasSure] = 3599;
    }
    AdminMessage(COLOR_LIGHTRED, "AdmLog: (%s) %s %s, tüm oyunculara maaþ verdi. (PayDay)", ReturnDate(), GetAdminRank(playerid), PlayerData[playerid][pAdminName]);
	return 1;
}
CMD:givedrug(playerid, params[])
{
	new id, miktar;
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");
    if(sscanf(params, "ui", id, miktar)) return BilgiMesajGonder(playerid, "/givedrug [ID/Isim] [Miktar]");
    if(!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu oyunda deðil.");
    PlayerDrugData[id][Drugs] += miktar;
    MesajGonder(playerid, "%s adlý kiþiye %d miktar uyuþturucu verdiniz.", ReturnName(id, 0), miktar);
	return 1;
}
// -----------------------------------------------------------------------------
// ----------------------------------- FUNCTIONS -------------------------------
stock ViewFactions(playerid)
{
	for(new i; i<MAX_BIRLIK; i++) if(Birlikler[i][birlikExists])
	{
	    Birlik_Kaydet(i);
	}

	new Cache:sawyer = mysql_query(baglanti, "SELECT * FROM `birlikler` ORDER BY BirlikUyeSayisi DESC LIMIT 10");
	new rows;
	cache_get_row_count(rows);
	if(rows)
	{
	    new str[1000], string[124], count, birlikname[32], tip, tipyazi[15], uyesayisi;
        strcat(str, "#\tAd\tTip\tÜye Sayýsý\n");
        for(new i; i<rows; i++)
        {
            cache_get_value_name(i, "bisim", birlikname, 32);
            cache_get_value_name_int(i, "btip", tip);
            cache_get_value_name_int(i, "BirlikUyeSayisi", uyesayisi);
            switch(tip)
     		{
	      		case 0: tipyazi = "Belirlenmiyor";
	      		case 1: tipyazi = "Çete";
	        	case 2: tipyazi = "Mafya";
	         	case 3: tipyazi = "Yayýn Ajansý";
	          	case 4: tipyazi = "Legal";
	           	default: tipyazi = "Özel Kurum";
      		}
            count++;
	    	format(string, sizeof(string), "%d.\t%s\t%s\t%d\n", count, birlikname, tipyazi, uyesayisi);
	    	strcat(str, string);
        }
        cache_delete(sawyer);
        format(string, sizeof(string), "Birlikler (%d)", count);
        Dialog_Show(playerid, Birlikler, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Kapat", "");
	}
	else
	{
		cache_delete(sawyer);
		HataMesajGonder(playerid, "Hiç birlik yok.");
	}

	return 1;
}
stock SetPlayerToFacePlayer(playerid, targetid)
{
    new
        Float:x[2],
        Float:y[2],
        Float:z[2],
        Float:angle;

    GetPlayerPos(targetid, x[0], y[0], z[0]);
    GetPlayerPos(playerid, x[1], y[1], z[1]);

    angle = (180.0 - atan2(x[1] - x[0], y[1] - y[0]));
    SetPlayerFacingAngle(playerid, angle + (5.0 * -1));
}
stock ShowStats(playerid, id)
{
	if(!OyundaDegil(id)) return 1;
	new yseviye[30] = "Üye";
	new vip[20] = "Yok";
	new birlik[34] = "Yok";
	new rutbe[30] = "-";
	new partner[24] = "-";
	if(PlayerData[id][pAdmin] > 0)
	{
	    switch(PlayerData[id][pAdmin])
		{
  			case 1: yseviye = "{61ff00}Oyun Yetkilisi";
	    	case 2: yseviye = "{d47626}Oyun Yetkilisi";
		    case 3: yseviye = "{714622}Topluluk Yöneticisi";
		    case 4: yseviye = "{fc3309}Genel Yetkili";
		    case 5: yseviye = "{fc3309}Kurucu";
		}
	}
	if(PlayerData[id][pHelper] > 0) format(yseviye, sizeof(yseviye), "{e4b400}Helper (%d)", PlayerData[id][pHelper]);
	if(PlayerData[id][pVip] > 0) format(vip, sizeof(vip), "{%s}%s", GetVIPRenk(PlayerData[id][pVip]), GetVIPName(PlayerData[id][pVip]));
	if(PlayerData[id][pFaction] != -1 && Birlikler[PlayerData[id][pFaction]][birlikExists])
	{
	    format(birlik, sizeof(birlik), "%s (%d)", Birlikler[PlayerData[id][pFaction]][birlikAd], PlayerData[id][pFaction]);
	    format(rutbe, sizeof(rutbe), "%s", Birlik_GetRutbe(id));
	}
	if(PlayerData[id][pPartner] > 0) format(partner, sizeof(partner), "%s", SQLName(PlayerData[id][pPartner], 0));
	SendClientMessageEx(playerid, -1, "{66FF00}-------------------------------------[%s (%d)]-------------------------------------", Player_GetName(id), id);
	SendClientMessageEx(playerid, 0xBBFFEEFF, "[HESAP] SQLID: [%d] Seviye: [%d] EXP: [%d/%d] Oynama Saati: [%d] Yönetici Seviyesi: [%s{BBFFEE}]", PlayerData[id][pID], PlayerData[id][pLevel], PlayerData[id][pEXP],
	PlayerData[id][pLevel]*5, PlayerData[id][pOynamaSaati], yseviye);
	SendClientMessageEx(playerid, 0xBBFFEEFF, "[HESAP] V.I.P: [%s{BBFFEE}] Bakiye: [%d TL] VW: [%d] Interior: [%d]", vip, PlayerData[id][pBakiye], GetPlayerVirtualWorld(id), GetPlayerInterior(id));
	SendClientMessageEx(playerid, 0xBBFFEEFF, "[KARAKTER] Cinsiyet: [%s] Ten: [%s] Yaþ: [%d] Doðum Yeri: [%s] Partner: [%s]", (PlayerData[id][pCinsiyet] == 1) ? ("Erkek") : ("Kadýn"), (PlayerData[id][pTen] == 1) ? ("Beyaz") : ("Siyah"),
	PlayerData[id][pYas], PlayerData[id][pDogum], partner);
	SendClientMessageEx(playerid, 0xBBFFEEFF, "[KARAKTER] Ehliyet: [%s] Birlik: [%s] Rütbe: [%s] Taþýmacýlýk Seviyesi: [%d/5]", (PlayerData[id][pEhliyet] == 1) ? ("Var") : ("Yok"), birlik, rutbe, PlayerData[id][pTasimacilikSeviye]);
	SendClientMessageEx(playerid, 0xBBFFEEFF, "[KARAKTER] Aranma: [%d] Telefon: [%d] Frekans: [%d] Uyuþturucu: [%d gram]", PlayerData[id][pAranma], (PlayerData[id][pTelefon] == -1) ? (0) : (PlayerData[id][pTelefon]), PlayerData[id][pFrekans], PlayerDrugData[id][Drugs]);
	SendClientMessageEx(playerid, 0xBBFFEEFF, "[KARAKTER] Cüzdandaki Para: [%s] Çekilmemiþ Maaþ: [%s] PayDay: [%d/60]", FormatNumber(PlayerData[id][pCash]), FormatNumber(PlayerData[id][pMaas]), floatround(PlayerData[id][pMaasSure]/60));
	SendClientMessage(playerid, -1, "{66FF00}------------------------------------------------------------------------------------");
	return 1;
}
Dialog:ServerPanel(playerid, response, listitem, inputtext[])
{
	if(PlayerData[playerid][pAdmin] < 4) return 0;
	if(response)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
		        if (sunucuKilitli)
	         	{
	          		sunucuKilitli = false;

					SendRconCommand("password 0");
	    			AdminMessage(COLOR_LIGHTRED, "AdmLog: %s sunucunun kilidini kaldýrdý.", PlayerData[playerid][pAdminName]);
				}
	   			else Dialog_Show(playerid, LockServer, DIALOG_STYLE_INPUT, "Kilitle", "Lütfen sunucuya koymak istediðiniz þifreyi girin:", "Kilitle", "Geri");
   			}
   			case 1:
   			{
   			    Dialog_Show(playerid, SetHostname, DIALOG_STYLE_INPUT, "Hostname Deðiþtir", "Lütfen hostname girin:", "Tamam", "<< Geri");
   			}
   			case 2:
   			{
   			    Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Sorgu Çalýþtýr", "Lütfen çalýþtýrmak istediðiniz sorguyu girin:", "Çalýþtýr", "Geri");
   			}
   			case 3:
   			{
   			    if(GetServerBilgi("bakimModu") == 1)
   			    {
   			        SetServerBilgi("bakimModu", 0);
   			        SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmLog: %s adlý yetkili tarafýndan bakým modu kapatýldý.", PlayerData[playerid][pAdminName]);
   			    }
   			    else
   			    {
   			        Dialog_Show(playerid, BakimSifre, DIALOG_STYLE_INPUT, "Bakým Modu", "Sunucuyu bakýma almak için þifre belirlemelisiniz:", "Bakýma Al", "Kapat");
   			    }
   			}
   			case 4:
   			{
   			    if(GetServerBilgi("basvurudurum") == 1)
   			    {
   			        SetServerBilgi("basvurudurum", 0);
   			        MesajGonder(playerid, "Karakter baþvurularý kapatýldý.");
   			    }
   			    else
   			    {
   			        SetServerBilgi("basvurudurum", 1);
   			        MesajGonder(playerid, "Karakter baþvurularý açýlmýþtýr.");
   			    }
   			}
	    }
	}
	return 1;
}
Dialog:BakimSifre(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, BakimSifre, DIALOG_STYLE_INPUT, "Bakým Modu", "Sunucuyu bakýma almak için þifre belirlemelisiniz:", "Bakýma Al", "Kapat");
	    SetServerBilgi("bakimModu", 1);
	    SetServerBilgiStr("bakimSifre", inputtext);
     	AdminHelperMessage(COLOR_LIGHTRED, "AdmLog: %s adlý yetkili sunucuyu bakým moduna aldý.", PlayerData[playerid][pAdminName]);
	}
	return 1;
}
Dialog:ExecuteQuery(playerid, response, listitem, inputtext[])
{
    if (PlayerData[playerid][pAdmin] < 4)
        return 0;

    if (response)
    {
        if (isnull(inputtext))
            return Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Sorgu Çalýþtýr", "Lütfen çalýþtýrmak istediðiniz sorguyu girin:", "Çalýþtýr", "Geri");

        if (strfind(inputtext, "DELETE", true) != -1 || strfind(inputtext, "DROP", true) != -1)
            return Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Sorgu Çalýþtýr", "HATA: DROP ve DELETE sorgularýný çalýþtýramazsýnýz!\nLütfen çalýþtýrmak istediðiniz sorguyu girin:", "Çalýþtýr", "Geri");

        mysql_tquery(baglanti, inputtext, "OnQueryExecute", "ds", playerid, inputtext);
    }
    else callcmd::panel(playerid);
    return 1;
}
forward OnQueryExecute(playerid, query[]);
public OnQueryExecute(playerid, query[])
{
    new rows;

    cache_get_row_count(rows);
    if (strfind(query, "SELECT", true) != -1)
    {
        MesajGonder(playerid, "Sorgu çalýþtýrýldý, rows: %d", rows);
    }
    else
    {
        MesajGonder(playerid, "Sorgu çalýþtýrýlmýþtýr.");
    }
    return 1;
}
Dialog:SetHostname(playerid, response, listitem, inputtext[])
{
    if (PlayerData[playerid][pAdmin] < 4)
        return 0;

    if (response)
    {
        if (isnull(inputtext))
            return Dialog_Show(playerid, SetHostname, DIALOG_STYLE_INPUT, "Hostname Deðiþtir", "Lütfen hostname girin:", "Tamam", "<< Geri");

        static
            str[128];

        format(str, sizeof(str), "hostname %s", inputtext);

        SendRconCommand(str);
        AdminMessage(COLOR_LIGHTRED, "AdmLog: %s sunucu adýný \"%s\" olarak deðiþtirdi.", PlayerData[playerid][pAdminName], inputtext);
    }
    else callcmd::panel(playerid);
    return 1;
}
Dialog:LockServer(playerid, response, listitem, inputtext[])
{
    if (PlayerData[playerid][pAdmin] < 4)
        return 0;

    if (response)
    {
        if (isnull(inputtext) || !strcmp(inputtext, "0"))
            return Dialog_Show(playerid, LockServer, DIALOG_STYLE_INPUT, "Kilitle", "Lütfen sunucuya koymak istediðiniz þifreyi girin:", "Kilitle", "Geri");

        if (strlen(inputtext) > 32)
            return Dialog_Show(playerid, LockServer, DIALOG_STYLE_INPUT, "Kilitle", "Lütfen sunucuya koymak istediðiniz þifreyi girin:", "Kilitle", "Geri");

        static
            str[48];

        format(str, sizeof(str), "password %s", inputtext);
        sunucuKilitli = true;

        SendRconCommand(str);
        AdminMessage(COLOR_LIGHTRED, "AdmLog: %s tarafýndan sunucu kilitlendi.", PlayerData[playerid][pAdminName]);
    }
    else callcmd::panel(playerid);
    return 1;
}
stock FlipVehicle(vehicleid)
{
    new
        Float:fAngle;

    GetVehicleZAngle(vehicleid, fAngle);

    SetVehicleZAngle(vehicleid, fAngle);
    SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
    return 1;
}
stock SicilKontrol(playerid, id)
{
    new
        string[128];

    format(string, sizeof(string), "SELECT * FROM `oocsicil` WHERE `ID` = '%d'", PlayerData[id][pID]);
    mysql_tquery(baglanti, string, "OnSicilView", "dd", playerid, id);
    return 1;
}
forward OnSicilView(playerid, id);
public OnSicilView(playerid, id)
{
	new rows;
	cache_get_row_count(rows);
	if(!rows) return HataMesajGonder(playerid, "Bu oyuncunun hiç OOC sicil kaydý yok.");
	new str[1000], uygulayan[24], tur, turstring[15], sebep[50], tarih[30];
	strcat(str, "Uygulayan\tTür\tSebep\tTarih\n");
	for(new i; i<rows; i++)
	{
	    cache_get_value_name(i, "Uygulayan", uygulayan, 24);
	    cache_get_value_name_int(i, "Tur", tur);
	    cache_get_value_name(i, "Sebep", sebep, 50);
	    cache_get_value_name(i, "Tarih", tarih, 30);
	    switch(tur)
	    {
	        case 1: turstring = "Kick";
	        case 2: turstring = "Ban";
	        case 3: turstring = "Hapis";
	        case 4: turstring = "Client Ban";
	        default: turstring = "Bilinmiyor";
	    }
	    format(str, sizeof(str), "%s%s\t%s\t%s\t%s\n", str, uygulayan, turstring, sebep, tarih);
	}
	new baslik[50];
	format(baslik, sizeof(baslik), "OOC Sicil Kayýtlarý (Toplam %d)", rows);
	Dialog_Show(playerid, Banli, DIALOG_STYLE_TABLIST_HEADERS, baslik, str, "Kapat", "");
	return 1;
}
Dialog:nrn(playerid, response, listitem, inputtext[]) {
    if (response)
    {
        if(isnull(inputtext)) return Dialog_Show(playerid, nrn, DIALOG_STYLE_INPUT, "Ýsim Deðiþtirme Talebi", "Lütfen boþ býrakmayýn!\nLütfen yeni isim girin.\n - Ad_Soyad tarzýnda olmalý.\n - Yabancý ad soyad olmalý.\n - Ünlü adý olmamalý.", "Deðiþtir", "Iptal");
	    if(strlen(inputtext) <= 3)
	    {
	        HataMesajGonder(playerid, "Çok kýsa bir ad girdiniz.");
	        return Dialog_Show(playerid, nrn, DIALOG_STYLE_INPUT, "Ýsim Deðiþtirme Talebi", "Çok kýsa bir ad girdiniz!\nLütfen yeni isim girin.\n - Ad_Soyad tarzýnda olmalý.\n - Yabancý ad soyad olmalý.\n - Ünlü adý olmamalý.", "Deðiþtir", "Iptal");
	    }
	    if(!IsValidRoleplayName(inputtext))
	    {
	        HataMesajGonder(playerid, "Ýsminiz Ad_Soyad formatýnda olmalýdýr. (Örnek: Danny_Ruswell)");
	        return Dialog_Show(playerid, nrn, DIALOG_STYLE_INPUT, "Ýsim Deðiþtirme Talebi", "Ýsminiz Ad_Soyad formatýnda olmalýdýr.\nLütfen yeni isim girin.\n - Ad_Soyad tarzýnda olmalý.\n - Yabancý ad soyad olmalý.\n - Ünlü adý olmamalý.", "Deðiþtir", "Iptal");
	    }
	    if(SoyadKilitlimi(GetPlayerLastName(playerid, inputtext, 0)))
	    {
	        HataMesajGonder(playerid, "Yazdýðýnýz soyad kilitlenmiþ.");
	        return Dialog_Show(playerid, nrn, DIALOG_STYLE_INPUT, "Ýsim Deðiþtirme Talebi", "Bu soyadý kullanamazsýnýz, kilitlenmiþ!\nLütfen yeni isim girin.\n - Ad_Soyad tarzýnda olmalý.\n - Yabancý ad soyad olmalý.\n - Ünlü adý olmamalý.", "Deðiþtir", "Iptal");
	    }
	    if(!IsimKontrol(inputtext))
	    {
	        HataMesajGonder(playerid, "Bu isim baþkasý tarafýndan kullanýlmaktadýr.");
	        return Dialog_Show(playerid, nrn, DIALOG_STYLE_INPUT, "Ýsim Deðiþtirme Talebi", "Bu isim kullanýlýyor.\nLütfen yeni isim girin.\n - Ad_Soyad tarzýnda olmalý.\n - Yabancý ad soyad olmalý.\n - Ünlü adý olmamalý.", "Deðiþtir", "Iptal");
	    }
	    format(PlayerData[playerid][pNameChange], 24, inputtext);
	    AdminMessage(COLOR_LIGHTRED, "AdmLog: %s (%d) isim deðiþtirme talep ediyor, Yeni isim: %s (\"/an\" ya da \"/dn\").", Player_GetName(playerid),playerid, inputtext);
    	MesajGonder(playerid, "Ýsim deðiþtirme talebiniz yetkililere iletildi, lütfen bekleyiniz.");
    }
    else Dialog_Show(playerid, nrn, DIALOG_STYLE_INPUT, "Ýsim Deðiþtirme Talebi", "Lütfen boþ býrakmayýn!\nLütfen yeni isim girin.\n - Ad_Soyad tarzýnda olmalý.\n - Yabancý ad soyad olmalý.\n - Ünlü adý olmamalý.", "Deðiþtir", "Iptal");
    return 1;
}
Dialog:AEsyaVer(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new id = GetPVarInt(playerid, "oyuncuID");
	    if(!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu çýkmýþ.");
	    PlayerData[id][pEsyalar][listitem]++;
	    MesajGonder(playerid, "%s adlý kiþiye %s adlý eþyayý verdiniz.", ReturnName(id, 0), inputtext);
	}
	return 1;
}
stock TalepListele(playerid)
{
	new str[1000], string[300], count, ilgilenen[24];
	strcat(str, "ID\tÝçerik\tGönderen\tIlgilenen\n");
	for(new i; i<MAX_TALEP; i++) if(Talep[i][tExists] == true && IsPlayerConnected(Talep[i][tGonderen]))
	{
	    if(Talep[i][tIlgilenen] == -1) ilgilenen = "Yok";
	    else format(ilgilenen, sizeof(ilgilenen), PlayerData[Talep[i][tIlgilenen]][pAdminName]);
	    count++;
	    format(string, sizeof(string), "{FFFFFF}%d\t{FFFFFF}%.24s\t{FFFFFF}%s (%d)\t{FFFFFF}%s\n", i, Talep[i][tIcerik], Player_GetName(Talep[i][tGonderen]), Talep[i][tGonderen], ilgilenen);
	    strcat(str, string);
	}
	if(!count) return Dialog_Show(playerid, TalepYok, DIALOG_STYLE_MSGBOX, "Destek Talepleri", "{FFFFFF}Hiç bekleyen destek talebi yok.", "Yenile", "Kapat");
	format(string, sizeof(string), "Destek Talepleri (%d)", count);
	Dialog_Show(playerid, DestekTalepleri, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Seç", "Kapat");
	return 1;
}
stock TalepIlgilen(playerid, id)
{
	if(PlayerData[playerid][pAdmin] > 0 || PlayerData[playerid][pHelper] > 0)
	{
	    if(Talep[id][tExists] == false || (Talep[id][tIlgilenen] != -1 && Talep[id][tIlgilenen] != playerid)) return HataMesajGonder(playerid, "Destek talebi silinmiþ veya baþkasý ilgileniyor...");
	    new str[100];
	    Talep[id][tIlgilenen] = playerid;
	    SetPVarInt(playerid, "TalepID", id);
	    format(str, sizeof(str), "Talep #%d: %s (ID: %d)", id, Player_GetName(Talep[id][tGonderen]), Talep[id][tGonderen]);
	    if(strlen(Talep[id][tIcerik]) > 40)
	    {
	    	Dialog_Show(playerid, TalepIncele, DIALOG_STYLE_LIST, str, "{FFFFFF}%.40s\n{FFFFFF}%s\n \n{8cf442}» {FFFFFF}Cevapla\n{f45130}» {FFFFFF}Reddet\n{FFFFFF}» Foruma Yönlendir\n{FFFFFF}» Ýncelemeye Al\n{FFFFFF}» Ýncelendi ve Reddedildi", "Seç", "Geri", Talep[id][tIcerik], Talep[id][tIcerik][40]);
	    }
	    else
	    {
	        Dialog_Show(playerid, TalepIncele, DIALOG_STYLE_LIST, str, "{FFFFFF}%s\n \n{8cf442}» {FFFFFF}Cevapla\n{f45130}» {FFFFFF}Reddet\n{FFFFFF}» Foruma Yönlendir\n{FFFFFF}» Ýncelemeye Al\n{FFFFFF}» Ýncelendi ve Reddedildi", "Seç", "Geri", Talep[id][tIcerik]);
	    }
	}
	return 1;
}
Dialog:TalepIncele(playerid, response, listitem, inputtext[])
{
	new id = GetPVarInt(playerid, "TalepID");
	if(!response)
	{
		Talep[id][tIlgilenen] = -1;
		DeletePVar(playerid, "TalepID");
		return TalepListele(playerid);
	}
	else
	{
	    if(Talep[id][tExists] == false || Talep[id][tIlgilenen] != playerid) return HataMesajGonder(playerid, "Bu destek talebi silindi veya baþkasý ilgileniyor.");
	    if(strfind(inputtext, "Cevapla", true) != -1)
	    {
	        Dialog_Show(playerid, TalepCevapla, DIALOG_STYLE_INPUT, "Talep Cevapla", "%s\n\n{FFFFFF}Lütfen bu destek talebine vermek istediðiniz cevabý yazýn:", "Cevapla", "Geri", Talep[id][tIcerik]);
	        return 1;
	    }
	    new rank[20];
    	if(PlayerData[playerid][pHelper] > 0) format(rank, sizeof(rank), "(Lv. %d) Helper", PlayerData[playerid][pHelper]);
    	else format(rank, sizeof(rank), "%s", GetAdminRank(playerid));
	    if(strfind(inputtext, "Reddet", true) != -1)
	    {
	        PlayerData[playerid][pTalepSayi]++;
	        BilgiMesajGonder(Talep[id][tGonderen], "%s %s tarafýndan destek talebiniz silindi.", rank, PlayerData[playerid][pAdminName]);
	        AdminHelperMessage(COLOR_LIGHTRED, "AdmLog: (%s) %s %s, %s adlý kiþinin destek talebini sildi.", ReturnDate(), rank, PlayerData[playerid][pAdminName], Player_GetName(Talep[id][tGonderen]));
	        Talep[id][tExists] = false;
	    	Talep[id][tGonderen] = -1;
	    	Talep[id][tIlgilenen] = -1;
	    	format(Talep[id][tIcerik], 128, "");
	    	return 1;
	    }
	    if(strfind(inputtext, "Foruma Yönlendir", true) != -1)
	    {
	        PlayerData[playerid][pTalepSayi]++;
	        PlayerPlaySound(Talep[id][tGonderen], 1085, 0.0, 0.0, 0.0);
	        SendClientMessageEx(Talep[id][tGonderen], COLOR_YELLOW, "[CEVAP] %s %s: Merhabalar, destek talebinizin cevabýný forum sitemizden bulabilirsiniz. (www.victim-roleplay.com)", rank, PlayerData[playerid][pAdminName]);
	        AdminHelperMessage(COLOR_LIGHTRED, "AdmLog: (%s) %s %s, %s adlý kiþinin destek talebini foruma yönlendirdi.", ReturnDate(), rank, PlayerData[playerid][pAdminName], Player_GetName(Talep[id][tGonderen]));
	        Talep[id][tExists] = false;
	    	Talep[id][tGonderen] = -1;
	    	Talep[id][tIlgilenen] = -1;
	    	format(Talep[id][tIcerik], 128, "");
	    	return 1;
	    }
	    if(strfind(inputtext, "Ýncelemeye Al", true) != -1)
	    {
	        PlayerData[playerid][pTalepSayi]++;
	        PlayerPlaySound(Talep[id][tGonderen], 1085, 0.0, 0.0, 0.0);
	        SendClientMessageEx(Talep[id][tGonderen], COLOR_YELLOW, "[CEVAP] %s %s: Merhabalar, destek talebinizi þu anda incelemekteyim. Lütfen sabýrlý ve anlayýþlý olun.", rank, PlayerData[playerid][pAdminName]);
	        AdminHelperMessage(COLOR_LIGHTRED, "AdmLog: (%s) %s %s, %s adlý kiþinin destek talebini incelemeye aldý.", ReturnDate(), rank, PlayerData[playerid][pAdminName], Player_GetName(Talep[id][tGonderen]));
	        Talep[id][tExists] = false;
	    	Talep[id][tGonderen] = -1;
	    	Talep[id][tIlgilenen] = -1;
	    	format(Talep[id][tIcerik], 128, "");
	    	return 1;
	    }
	    if(strfind(inputtext, "Ýncelendi ve Reddedildi", true) != -1)
	    {
	        PlayerData[playerid][pTalepSayi]++;
	        PlayerPlaySound(Talep[id][tGonderen], 1085, 0.0, 0.0, 0.0);
	        SendClientMessageEx(Talep[id][tGonderen], COLOR_YELLOW, "[CEVAP] %s %s: Merhabalar, destek talebiniz incelendi ve reddedildi.", rank, PlayerData[playerid][pAdminName]);
	        AdminHelperMessage(COLOR_LIGHTRED, "AdmLog: (%s) %s %s, %s adlý kiþinin destek talebini inceledi ve reddetti.", ReturnDate(), rank, PlayerData[playerid][pAdminName], Player_GetName(Talep[id][tGonderen]));
	        Talep[id][tExists] = false;
	    	Talep[id][tGonderen] = -1;
	    	Talep[id][tIlgilenen] = -1;
	    	format(Talep[id][tIcerik], 128, "");
	    	return 1;
	    }
	    TalepIlgilen(playerid, id);
	}
	return 1;
}
Dialog:TalepCevapla(playerid, response, listitem, inputtext[])
{
	new id = GetPVarInt(playerid, "TalepID");
	if(!response)
	{
		TalepIlgilen(playerid, id);
	}
	else
	{
	    if(Talep[id][tExists] == false) return HataMesajGonder(playerid, "Destek talebi silinmiþ.");
	    if(isnull(inputtext)) return Dialog_Show(playerid, TalepCevapla, DIALOG_STYLE_INPUT, "Talep Cevapla", "%s\n\nLütfen bu destek talebine vermek istediðiniz cevabý yazýn:", "Cevapla", "Geri", Talep[id][tIcerik]);
	    new rank[20];
	    if(PlayerData[playerid][pHelper] > 0) format(rank, sizeof(rank), "(Lv. %d) Helper", PlayerData[playerid][pHelper]);
	    else format(rank, sizeof(rank), "%s", GetAdminRank(playerid));
	    PlayerData[playerid][pTalepSayi]++;
	    PlayerPlaySound(Talep[id][tGonderen], 1085, 0.0, 0.0, 0.0);
	    if(strlen(inputtext) > 64)
	    {
	        SendClientMessageEx(Talep[id][tGonderen], COLOR_YELLOW, "[CEVAP] %s %s: %.64s", rank, PlayerData[playerid][pAdminName], inputtext);
	        SendClientMessageEx(Talep[id][tGonderen], COLOR_YELLOW, "...%s", inputtext[64]);
	    }
	    else
	    {
	        SendClientMessageEx(Talep[id][tGonderen], COLOR_YELLOW, "[CEVAP] %s %s: %s", rank, PlayerData[playerid][pAdminName], inputtext);
	    }
	    AdminHelperMessage(COLOR_LIGHTRED, "AdmLog: (%s) %s %s, %s adlý kiþinin destek talebini cevapladý.", ReturnDate(), rank, PlayerData[playerid][pAdminName], Player_GetName(Talep[id][tGonderen]));
	    Talep[id][tExists] = false;
	    Talep[id][tGonderen] = -1;
	    Talep[id][tIlgilenen] = -1;
	    format(Talep[id][tIcerik], 128, "");
	}
	return 1;
}
Dialog:TalepYok(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(PlayerData[playerid][pAdmin] > 0 || PlayerData[playerid][pHelper] > 0) return TalepListele(playerid);
	}
	return 1;
}
Dialog:DestekTalepleri(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new id = strval(inputtext);
	    if(Talep[id][tExists] == false || !IsPlayerConnected(Talep[id][tGonderen]))
	    {
	        HataMesajGonder(playerid, "Bu destek talebi silindi veya sonuçlandý.");
	        return TalepListele(playerid);
	    }
	    if(Talep[id][tIlgilenen] != -1 && IsPlayerConnected(Talep[id][tIlgilenen]))
	    {
	        HataMesajGonder(playerid, "Bu talep ile baþkasý ilgilenmekte.");
	        return TalepListele(playerid);
	    }
	    TalepIlgilen(playerid, id);
	}
	return 1;
}
stock Talep_GetCount(playerid)
{
	new count;
	for(new i; i<MAX_TALEP; i++) if(Talep[i][tExists] == true && Talep[i][tGonderen] == playerid)
	{
	    count++;
	}
	return count;
}
stock Talep_Add(playerid, icerik[])
{
	for(new i; i<MAX_TALEP; i++) if(Talep[i][tExists] == false)
	{
	    Talep[i][tExists] = true;
	    format(Talep[i][tIcerik], 128, icerik);
	    Talep[i][tGonderen] = playerid;
	    Talep[i][tIlgilenen] = -1;
	    return i;
	}
	return -1;
}
Dialog:Graffiti(playerid, response, listitem, inputtext[])
{
	if(!response) return PlayerData[playerid][pGraffiti] = 0;
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, Graffiti, DIALOG_STYLE_INPUT, "Graffiti ~ Yazý", "{FFFFFF}Lütfen graffiti yazýsýný girin.\n{FFFFFF}Yazý içerisinde #renk ile renklendirme yapabilirsiniz. (#kirmizi, #mavi vs.)\n{FFBF00}[Ýnfo] {FFFFFF}Yazý 64 karakteri geçemez.", "Devam", "Kapat");
	    if(strlen(inputtext) < 3 || strlen(inputtext) > 64)
	    {
	        HataMesajGonder(playerid, "Yazý 3 ile 64 karakter arasýnda olmalýdýr.");
	        return Dialog_Show(playerid, Graffiti, DIALOG_STYLE_INPUT, "Graffiti ~ Yazý", "{FFFFFF}Lütfen graffiti yazýsýný girin.\n{FFFFFF}Yazý içerisinde #renk ile renklendirme yapabilirsiniz. (#kirmizi, #mavi vs.)\n{FFBF00}[Ýnfo] {FFFFFF}Yazý 64 karakteri geçemez.", "Devam", "Kapat");
	    }
	    new tmp[300];
	    set(tmp, inputtext);
	    tmp = strreplace("#kirmizi", "{f9071f}", tmp);
	    tmp = strreplace("#mavi", "{0000FF}", tmp);
	    tmp = strreplace("#sari", "{FFFF00}", tmp);
	    tmp = strreplace("#yesil", "{00FF00}", tmp);
	    tmp = strreplace("#beyaz", "{FFFFFF}", tmp);
	    tmp = strreplace("#turuncu", "{FF8000}", tmp);

	    format(PlayerData[playerid][pGraffitiYazi], 64, tmp);
	    Dialog_Show(playerid, GraffitiFont, DIALOG_STYLE_INPUT, "Graffiti Fontu", "Lütfen font yazýn:", "Tamam", "Iptal");
	}
	return 1;
}
Dialog:GraffitiFont(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, Graffiti, DIALOG_STYLE_INPUT, "Graffiti ~ Yazý", "{FFFFFF}Lütfen graffiti yazýsýný girin.\n{FFFFFF}Yazý içerisinde #renk ile renklendirme yapabilirsiniz. (#kirmizi, #mavi vs.)\n{FFBF00}[Ýnfo] {FFFFFF}Yazý 64 karakteri geçemez.", "Devam", "Kapat");
	if(response)
	{
	    new Float:pos[3];
	    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	    new id = Graffiti_Create(pos[0], pos[1], pos[2]);
	    if(id == -1) return HataMesajGonder(playerid, "Graffiti oluþturulamadý.");
	    format(GraffitiData[id][graffitiText], 64, PlayerData[playerid][pGraffitiYazi]);
	    format(GraffitiData[id][graffitiFont], 64, inputtext);

	    Graffiti_Refresh(id);
	    Graffiti_Save(id);
	    SetPVarInt(playerid, "GraffitiEdit", id);
	    EditDynamicObject(playerid, GraffitiData[id][graffitiObject]);

	}
	return 1;
}
forward BanInfo(playerid, bilgi[]);
public BanInfo(playerid, bilgi[])
{
	new rows;
	cache_get_row_count(rows);
	if(!rows) return HataMesajGonder(playerid, "Bu karakter adý veya IP banlý deðil.");
	new ad[24], ip[30], banlanmatarihi[30], sebep[50], banlayan[24], sure;
	cache_get_value_name(0, "Ad", ad, 24);
	cache_get_value_name(0, "IP", ip, 30);
	cache_get_value_name(0, "BanlanmaTarihi", banlanmatarihi, 30);
	cache_get_value_name(0, "Sebep", sebep, 50);
	cache_get_value_name(0, "Banlayan", banlayan, 24);
	cache_get_value_name_int(0, "Sure", sure);
	Dialog_Show(playerid, Banli, DIALOG_STYLE_MSGBOX, "Ban Bilgileri", "Karakter Adý: %s\nIP: %s\nBanlanma Tarihi: %s\nSebep: %s\nBanlayan: %s\nAçýlacaðý Tarih: %s", "Kapat", "", ad, ip, banlanmatarihi, sebep, banlayan, (sure < 1) ? ("Yok") : (convertDatex(sure)));
	return 1;
}
forward UnBan(playerid, ad[]);
public UnBan(playerid, ad[])
{
	new rows;
	cache_get_row_count(rows);
	if(!rows) return HataMesajGonder(playerid, "Bu karakter adý veya IP banlý deðil.");
	RemoveBan(ad, ad);
	if(strfind(ad, "_", true) != -1)
	{
	    MesajGonder(playerid, "%s adlý oyuncunun baný açýlmýþtýr.", ad);
	    AdminMessage(COLOR_LIGHTRED, "AdmLog: (%s) %s adlý oyuncunun baný %s adlý yetkili tarafýndan açýldý.", ReturnDate(), ad, PlayerData[playerid][pAdminName]);
	}
	else
	{
 		MesajGonder(playerid, "IP: %s baný açýldý.", ad);
	    AdminMessage(COLOR_LIGHTRED, "AdmLog: (%s) IP: %s baný %s adlý yetkili tarafýndan açýldý.", ReturnDate(), ad, PlayerData[playerid][pAdminName]);
	}
	return 1;
}
forward OnCBanAccount(playerid, isim[], sebep[50]);
public OnCBanAccount(playerid, isim[], sebep[50])
{
	new rows;
	cache_get_row_count(rows);
	if(rows)
	{
	    new admin, ip[30], serial[75];
	    cache_get_value_name_int(0, "AdminLevel", admin);
		cache_get_value_name(0, "LastIP", ip, 30);
		cache_get_value_name(0, "hddserial", serial, 75);
		if(admin > PlayerData[playerid][pAdmin]) return HataMesajGonder(playerid, "Bu oyuncu sizden yüksek yetkiye sahiptir.");
		AddBan(ip, isim, serial, PlayerData[playerid][pAdminName], 0, sebep);
		MesajGonder(playerid, "%s (IP: %s, Serial: %s) adlý oyuncuyu %s sebebiyle client banladýnýz.", isim, ip, serial, sebep);
		AdminMessage(COLOR_LIGHTRED, "AdmLog: (%s) %s adlý yetkili %s (IP: %s) adlý oyuncuyu offline olarak %s sebebiyle client yasakladý.", ReturnDate(), PlayerData[playerid][pAdminName], isim, ip, sebep);
	}
	return 1;
}
forward OnPanelBanAccount(uygulayan[], isim[], sure, sebep[50]);
public OnPanelBanAccount(uygulayan[], isim[], sure, sebep[50])
{
	new rows;
	cache_get_row_count(rows);
	if(rows)
	{
	    new ip[30], sqlid;
	    cache_get_value_name_int(0, "ID", sqlid);
	    cache_get_value_name(0, "LastIP", ip, 30);
	    AddBan(ip, isim, "", uygulayan, (sure < 1) ? (0) : (gettime()+sure*86400), sebep);
	    foreach(new i:Player) if(PlayerData[i][pAyarlar][3] == 0)
    	{
    		if(sure == 0) SendClientMessageEx(i, COLOR_LIGHTRED, "(%s) - (( %s adlý oyuncu %s tarafýndan %s sebebiyle panelden sýnýrsýz yasaklandý. ))", ReturnDate(), isim,  uygulayan, sebep);
    		else SendClientMessageEx(i, COLOR_LIGHTRED, "(%s) - (( %s adlý oyuncu %s tarafýndan %s sebebiyle panelden %d gün yasaklandý. ))", ReturnDate(), isim,  uygulayan, sebep, sure);
    	}
    	new query[300];
	    format(query, sizeof(query), "INSERT INTO `oocsicil` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', '%s', '%s', '2')",  sqlid, ReturnDate(), sebep, uygulayan);
    	mysql_query(baglanti, query, false);
	}
	return 1;
}
forward OnBanAccount(playerid, isim[], sure, sebep[50]);
public OnBanAccount(playerid, isim[], sure, sebep[50])
{
	new rows;
	cache_get_row_count(rows);
	if(rows)
	{
	    new admin, ip[30], sqlid;
	    cache_get_value_name_int(0, "ID", sqlid);
	    cache_get_value_name_int(0, "AdminLevel", admin);
		cache_get_value_name(0, "LastIP", ip, 30);
	    if(admin > PlayerData[playerid][pAdmin]) return HataMesajGonder(playerid, "Bu oyuncu sizden yüksek yetkiye sahiptir.");
	    AddBan(ip, isim, "", PlayerData[playerid][pAdminName], (sure < 1) ? (0) : (gettime()+sure*86400), sebep);
	    new suree[12];
	    if(sure == 0) suree = "Sýnýrsýz";
	    else format(suree, sizeof(suree), "%d gün", sure);
	    MesajGonder(playerid, "%s (IP: %s) adlý oyuncuyu %s sebebiyle %s banladýnýz.", isim, ip, sebep, suree);

	    AdminMessage(COLOR_LIGHTRED, "AdmLog: (%s) %s adlý yetkili %s (IP: %s) adlý oyuncuyu offline olarak %s sebebiyle %s yasakladý.", ReturnDate(), PlayerData[playerid][pAdminName], isim, ip, sebep, suree);
	    new query[300];
	    format(query, sizeof(query), "INSERT INTO `oocsicil` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', '%s', '%s', '2')",  sqlid, ReturnDate(), sebep, PlayerData[playerid][pAdminName]);
    	mysql_query(baglanti, query, false);
	}
	else HataMesajGonder(playerid, "Karakter adý bulunamadý.");
	return 1;
}
forward NameChanges(playerid, targetid);
public NameChanges(playerid, targetid)
{
	new rows;
	cache_get_row_count(rows);
	if(!rows) return HataMesajGonder(playerid, "Bu oyuncuya ait isim deðiþikliði bulunamadý.");
	new eskiad[24], yeniad[24], tarih[25];
	for(new i; i<rows; i++)
	{
	    cache_get_value_name(i, "EskiAd", eskiad, 24);
	    cache_get_value_name(i, "YeniAd", yeniad, 24);
	    cache_get_value_name(i, "Tarih", tarih, 25);
	    SendClientMessageEx(playerid, 0xFFFF00AA, "(%s) Eski Ad: %s - Yeni Ad: %s", tarih, eskiad, yeniad);
	}
	return 1;
}
forward BanKontrol(playerid, pip[]);
public BanKontrol(playerid, pip[])
{
	new rows;
	cache_get_row_count(rows);
	if(rows)
	{
	    new ad[24], bantarih[30], sebep[50], sure, banlayan[24], hddserial[75];
	    cache_get_value_name(0, "Ad", ad, 24);
	    cache_get_value_name(0, "BanlanmaTarihi", bantarih, 30);
	    cache_get_value_name(0, "Sebep", sebep, 50);
	    cache_get_value_name(0, "Banlayan", banlayan, 24);
	    cache_get_value_name(0, "hddserial", hddserial, 75);
	    cache_get_value_name_int(0, "Sure", sure);
	    if(sure != 0)
	    {
	        if(gettime() > sure)
	        {
	            RemoveBan(Player_GetName(playerid), pip);
	            return 1;
	        }
	        else
	        {
	            Dialog_Show(playerid, Banli, DIALOG_STYLE_MSGBOX, "Yasaklýsýnýz!", "Hesabýnýz bu sunucudan geçici olarak yasaklandý.\n\nHesap: %s\nSebep: %s\nBanlanma Tarihi: %s\nBanlayan Admin: %s\nAçýlacaðý Tarih: %s\n\nF8 tuþuna basýn ve bir ekran görüntüsü alýn, bu ekran görüntüsü ile forumumuzdan yasaklanmanýza itiraz edebilirsiniz.", "Kapat", "", ad, sebep, bantarih, banlayan, convertDatex(sure));
	            Kick(playerid);
	        }
	    }
	    if(strlen(hddserial) >= 5)
	    {
	        Dialog_Show(playerid, Banli, DIALOG_STYLE_MSGBOX, "Yasaklýsýnýz!", "Hesabýnýz client olarak kalýcý yasaklandý.\n\nHesap: %s\nSerial: %s\nSebep: %s\nBanlanma Tarihi: %s\nBanlayan Admin: %s\nAçýlacaðý Tarih: Yok\n\nF8 tuþuna basýn ve bir ekran görüntüsü alýn, bu ekran görüntüsü ile forumumuzdan yasaklanmanýza itiraz edebilirsiniz.", "Kapat", "", ad, hddserial, sebep, bantarih, banlayan);
	        Kick(playerid);
	    }
	    else if (!strcmp(ad, "yok", true) || !ad[0])
	    {
	      	Dialog_Show(playerid, Banli, DIALOG_STYLE_MSGBOX, "Yasaklýsýnýz!", "Bu IP sunucudan kalýcý olarak yasaklý.\n\nIP: %s\nBanlanma Tarihi: %s\nBanlayan Admin: %s\nSebep: %s\n\nBu ekranýn fotoðrafýný çekerek forumdan hatalý yasaklanma açabilirsin.", "Kapat", "", pip, bantarih, banlayan, sebep);
       		Kick(playerid);
       	}
        else
        {
        	Dialog_Show(playerid, Banli, DIALOG_STYLE_MSGBOX, "Yasaklýsýnýz!", "Bu sunucudan kalýcý olarak yasaklandýnýz.\n\nHesap: %s\nBanlanma Tarihi: %s\nBanlayan Admin: %s\nSebep: %s\n\nBu ekranýn fotoðrafýný çekerek forumdan hatalý yasaklanma açabilirsin.", "Kapat", "", ad, bantarih, banlayan, sebep);
         	Kick(playerid);
        }
	}
	return 1;
}
stock RemoveBan(ad[], ip[])
{
	new query[150];
	format(query, sizeof(query), "DELETE FROM `bans` WHERE `Ad` = '%s' OR `IP` = '%s'", ad, ip);
	mysql_query(baglanti, query, false);
	if(strlen(ad) > 3)
	{
	    format(query, sizeof(query), "UPDATE `oyuncular` SET `Ban` = '0' WHERE `Isim` = '%s'", ad);
	    mysql_query(baglanti, query, false);
	}
	return 1;
}
stock AddBan(bannedip[], bannedname[], hddserial[], bannedby[], gun, sebep[])
{
	new query[600];
	format(query, sizeof(query), "INSERT INTO `bans` (`IP`, `Ad`, `hddserial`, `Banlayan`, `Sure`, `Sebep`, `BanlanmaTarihi`) VALUES ('%s', '%s', '%s', '%s', '%d', '%s', '%s')", bannedip, bannedname, hddserial, bannedby, gun, sebep, ReturnDate());
	mysql_query(baglanti, query, false);
	if(strlen(bannedname) > 3)
	{
	    format(query, sizeof(query), "UPDATE `oyuncular` SET `Ban` = '1' WHERE `Isim` = '%s'", bannedname);
	    mysql_query(baglanti, query, false);
	}
	return 1;
}
forward OnJailAccount(playerid, isim[], sure, sebep[50]);
public OnJailAccount(playerid, isim[], sure, sebep[50])
{
	new rows;
	cache_get_row_count(rows);
	if(rows)
	{
	    new ck, sqlid;
	    cache_get_value_name_int(0, "ID", sqlid);
	    cache_get_value_name_int(0, "CK", ck);
	    if(ck == 1) return HataMesajGonder(playerid, "Bu karakter CK edilmiþ.");
	    new query[800];
	    format(query, sizeof(query), "UPDATE `oyuncular` SET `HapisSure` = '%d', `HapisSebep` = '%s', `HapiseAtan` = '%s'", sure*60, sebep, PlayerData[playerid][pAdminName]);
	    for(new i; i<13; i++)
	    {
	        format(query, sizeof(query), "%s, `Silah%d` = '0', `Mermi%d` = '0'", query, i+1, i+1);
	    }
	    format(query, sizeof(query), "%s WHERE `Isim` = '%s'", query, isim);
	    mysql_query(baglanti, query, false);
	    format(query, sizeof(query), "INSERT INTO `oocsicil` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', '%s', '%s', '3')",  sqlid, ReturnDate(), sebep, PlayerData[playerid][pAdminName]);
   	 	mysql_tquery(baglanti, query);
	    MesajGonder(playerid, "%s adlý kiþiyi %s sebebiyle %d dakika cezalandýrdýnýz.", isim, sebep, sure);
	    Log_Write("logs/jail_log.txt", "[%s] %s adli yetkili %s adli oyuncuyu %s sebebiyle %d dakika offline olarak hapise atti.", ReturnDate(), PlayerData[playerid][pAdminName], isim, sebep, sure);
	}
	else HataMesajGonder(playerid, "Böyle bir oyuncu yok.");
	return 1;
}
stock ResetPlayer(playerid)
{
    if(HasTrash[playerid]) Trash_ResetPlayer(playerid);
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 574)
    {
        SetVehicleToRespawn(GetPlayerVehicleID(playerid));
        //SendClientMessageEx(playerid, 0x2ECC71FF, "TEMÝZLÝKÇÝ: {FFFFFF}Temizlikçi mesleði bitirildi, kazanýlan; {FFBF00}%s", FormatNumber(GetPVarInt(playerid,"TemizlikciKazanilan")));
        TemizlikciDistance[playerid] = 0;
        DeletePVar(playerid,"TemizlikciKazanilan");
        GetVehiclePos(GetPlayerVehicleID(playerid),TemizlikciLastPos[GetPlayerVehicleID(playerid)][0],TemizlikciLastPos[GetPlayerVehicleID(playerid)][1],TemizlikciLastPos[GetPlayerVehicleID(playerid)][2]);
    }
    if(GetPVarInt(playerid, "pnsID") != -1)
    {
        new vid = GetPlayerVehicleID(playerid);
        if(IsValidVehicle(vid))
        {
            SetVehiclePos(vid, PayNSpray[GetPVarInt(playerid, "pnsID")][0], PayNSpray[GetPVarInt(playerid, "pnsID")][1], PayNSpray[GetPVarInt(playerid, "pnsID")][2]);
        }
	}
	if(PetKontrol[playerid] != -1) callcmd::pet(playerid);
	foreach(new i:Petler) if(PetBilgi[i][petSahip] == PlayerData[playerid][pID] && PetBilgi[i][petDurum] == true)
	{
	    PetBilgi[i][petSaglik] = FCNPC_GetHealth(PetBilgi[i][NPCID]);
     	FCNPC_Destroy(PetBilgi[i][NPCID]);
      	PetBilgi[i][petTakip] = -1;
       	PetBilgi[i][NPCID] = -1;
        PetBilgi[i][petDurum] = false;
        DestroyDynamic3DTextLabel(PetBilgi[i][petText]);
        Pet_Kaydet(i);
	}
    Player_ResetCutting(playerid);
	Player_RemoveLog(playerid);
    Player_CleanUp(playerid, 1);
	EditingTreeID[playerid] = -1;
    if(RegenTimer[playerid] != -1)
	{
	    KillTimer(RegenTimer[playerid]);
	    RegenTimer[playerid] = -1;
	}
	foreach(new i : Player)
	{
	    if(PlayerDrugData[i][DrugsOfferedBy] == playerid)
	    {
	        PlayerDrugData[i][DrugsOfferedBy] = INVALID_PLAYER_ID;
	        ShowPlayerDialog(i, -1, DIALOG_STYLE_MSGBOX, "Title", "Content", "Button1", "Button2");

            //BilgiMesajGonder(i, "Uyuþturucu satmaya çalýþtýðýnýz kiþi oyundan çýktý.");
	    }
	}
	foreach(new i:Player) if(PlayerData[i][pAdmin] >= 1 && PlayerData[i][pSpecID] == playerid)
	{
	    IzlemeBitir(i);
   		ShowTextDrawMessage(i, "~r~Oyundan Cikti", TEXTDRAW_TYPE_MSG, 1000);
	}
	RemoveEffects(playerid);
	Player_SaveDrugs(playerid);
    new id = CadirID(playerid);
   	if(id != -1)
   	{
   	    foreach(new i:Player) if(PlayerData[i][pCadir] == id)
        {
            SetPlayerPos(i, CadirData[id][cadirPos][0], CadirData[id][cadirPos][1], CadirData[id][cadirPos][2]);
            SetPlayerInterior(i, 0);
            SetPlayerVirtualWorld(i, 0);
            PlayerData[i][pCadir] = -1;
        }
        Cadir_Sil(playerid);
  	}
  	PlayerData[playerid][pCadir] = -1;
    KumarReset(playerid, 1);
    KumarReset(GetPVarInt(playerid, "kumar_id"), 1);

	if(BalikTimer[playerid] != -1)
	{
	    KillTimer(BalikTimer[playerid]);
	    BalikTimer[playerid] = -1;
     	RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "OltaSlot"));
 		SetPVarInt(playerid, "OltaSlot", -1);
   		ClearAnimations(playerid);
   	}
   	if(PlayerData[playerid][pDestek] > 0)
   	{
   	    PlayerData[playerid][pDestek] = 0;
   	    DestekKapat(playerid, 1);
   	}
   	if(PlayerData[playerid][pBaygin] == 1)
   	{
   	    PlayerData[playerid][pBaygin] = 0;
    	PlayerData[playerid][pBayginSure] = 0;
    	CanAyarla(playerid, 100);
    	ClearAnimations(playerid);
   	}
   	if(PlayerData[playerid][pMangalKuruldu] == true)
   	{
   	    PlayerData[playerid][pMangalKuruldu] = false;
		DestroyDynamicObject(PlayerData[playerid][pMangalObject][0]);
		DestroyDynamicObject(PlayerData[playerid][pMangalObject][1]);
		DestroyDynamic3DTextLabel(PlayerData[playerid][MangalText]);
		PlayerData[playerid][pYemekPisiriliyor] = 0;
		PlayerData[playerid][pPisirilenYemek] = 0;

   	}
   	if(PlayerData[playerid][pKampAtesi] == true)
   	{
   	    PlayerData[playerid][pKampAtesi] = false;
        DestroyDynamicObject(PlayerData[playerid][pKampAtesiObject]);
        //MesajGonder(playerid, "Kamp Ateþi kaldýrýldý.");
  	}
   	PlayerData[playerid][yayinKonuk] = -1;
   	if(PlayerData[playerid][pAramada] != 0)
   	{
   		if(PlayerData[playerid][pAramada] == ARAMA_ARANIYOR)
   		{
   			//BilgiMesajGonder(PlayerData[playerid][pCallLine], "Gelen çaðrý reddedildi ((Oyundan çýktý))");
   			DeletePVar(playerid, "Arayan");
   			DeletePVar(PlayerData[playerid][pCallLine], "Arayan");
   			PlayerData[playerid][pAramada] = 0;
   			PlayerData[PlayerData[playerid][pCallLine]][pAramada] = 0;
   			PlayerData[PlayerData[playerid][pCallLine]][pCallLine] = 0;
   			PlayerData[playerid][pCallLine] = 0;
   		}
   		else if(PlayerData[playerid][pAramada] == ARAMA_ARIYOR)
   		{
   		    DeletePVar(playerid, "Arayan");
   			DeletePVar(PlayerData[playerid][pCallLine], "Arayan");
   			PlayerData[playerid][pAramada] = 0;
   			PlayerData[PlayerData[playerid][pCallLine]][pAramada] = 0;
   			PlayerData[PlayerData[playerid][pCallLine]][pCallLine] = 0;
   			PlayerData[playerid][pCallLine] = 0;
   		}
   		else if(PlayerData[playerid][pAramada] == ARAMA_KONUSUYOR)
   		{
   			//BilgiMesajGonder(PlayerData[playerid][pCallLine], "Konuþtuðunuz kiþi telefonu kapattý. (( Oyundan çýktý ))");
   			DeletePVar(playerid, "Arayan");
   			DeletePVar(PlayerData[playerid][pCallLine], "Arayan");
   			PlayerData[playerid][pAramada] = 0;
   			PlayerData[PlayerData[playerid][pCallLine]][pAramada] = 0;
   			PlayerData[PlayerData[playerid][pCallLine]][pCallLine] = 0;
   			PlayerData[playerid][pCallLine] = 0;
   		}
   	}
   	if (BoomboxData[playerid][boomboxPlaced])
		Boombox_Destroy(playerid);
	SetPlayerWantedLevel(playerid, 0);
	PlayerData[playerid][pAranma] = 0;
	PlayerData[playerid][pKelepce] = 0;
    PlayerData[playerid][pDragged] = 0;
	PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	KillTimer(PlayerData[playerid][pDragTimer]);
    SetPlayerCuffed(playerid, false);
    TogglePlayerControllable(playerid,true);
    SetPVarInt(playerid, "IpBaglandi", 0);
    SetPVarInt(playerid, "GozBaglandi", 0);
    TextDrawHideForPlayer(playerid, Karanlik);
    DisablePlayerCheckpoint(playerid);
    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_MSGBOX, "", "", "", "");
	Fuel_ResetPlayer(playerid);
    return 1;
}
stock IzlemeBitir(playerid)
{
	TogglePlayerSpectating(playerid, false);
	PlayerData[playerid][pSpecID] = -1;
	SetWeapons(playerid);
    SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "specVw"));
    SetPlayerInterior(playerid, GetPVarInt(playerid, "specInterior"));
    SetPlayerPos(playerid, specPos[playerid][0], specPos[playerid][1], specPos[playerid][2]);
    return 1;
}
AracSpawn(aracid)
{
	new id = Car_GetID(aracid);
	if(id == -1) return SetVehicleToRespawn(aracid);
	Arac_Spawn(id);
	return 1;
}
SendPlayerToPlayer(playerid, targetid)
{
    new
        Float:px,
        Float:py,
        Float:pz;

    GetPlayerPos(targetid, px, py, pz);

    if (IsPlayerInAnyVehicle(playerid))
    {
        SetVehiclePos(GetPlayerVehicleID(playerid), px, py + 2, pz);
        LinkVehicleToInteriorEx(GetPlayerVehicleID(playerid), GetPlayerInterior(targetid));
    }
    else
        SetPlayerPos(playerid, px + 1, py, pz);

    SetPlayerInterior(playerid, GetPlayerInterior(targetid));
    SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));

    PlayerData[playerid][pHouse] = PlayerData[targetid][pHouse];
    PlayerData[playerid][pIsyeri] = PlayerData[targetid][pIsyeri];
    PlayerData[playerid][pGarage] = PlayerData[targetid][pGarage];
    PlayerData[playerid][pCadir] = PlayerData[targetid][pCadir];
    return 1;
}
Dialog:TeleportInterior(playerid, response, listitem, inputtext[])
{
    if (response)
    {
        SetPlayerInterior(playerid, g_arrInteriorData[listitem][e_InteriorID]);
        SetPlayerPos(playerid, g_arrInteriorData[listitem][e_InteriorX], g_arrInteriorData[listitem][e_InteriorY], g_arrInteriorData[listitem][e_InteriorZ]);
        SetPlayerVirtualWorld(playerid, 0);
        PlayerData[playerid][pHouse] = -1;
       	PlayerData[playerid][pIsyeri] = -1;
        PlayerData[playerid][pGarage] = -1;
        PlayerData[playerid][pCadir] = -1;
    }
    return 1;
}
forward OnLoginDate(extraid, username[]);
public OnLoginDate(extraid, username[])
{
    if (!IsPlayerConnected(extraid))
        return 0;

    new rows, date[20], lastip[15];

    cache_get_row_count(rows);

    if (rows) {
        cache_get_value_name(0, "SonGiris", date, 20);
        cache_get_value_name(0, "LastIP", lastip, 15);

        MesajGonder(extraid, "%s adlý kiþinin son giriþ tarihi: %s (IP: %s).", username, date, lastip);
    }
    else {
        HataMesajGonder(extraid, "Veritabanýnda böyle bir karakter yok.");
    }
    return 1;
}
stock Hood_Sil(id)
{
    if(IsValidDynamic3DTextLabel(Hood[id][hLabel])) DestroyDynamic3DTextLabel(Hood[id][hLabel]);
	if(IsValidDynamicArea(Hood[id][hZone])) DestroyDynamicArea(Hood[id][hZone]);
	if(IsValidDynamicPickup(Hood[id][hPickup])) DestroyDynamicPickup(Hood[id][hPickup]);
	if(IsValidDynamicMapIcon(Hood[id][hMapIcon])) DestroyDynamicMapIcon(Hood[id][hMapIcon]);

	Hood[id][hExists] = false;
	Hood[id][hPos][0] = Hood[id][hPos][1] = Hood[id][hPos][2] = 0.0;
	Hood[id][hBirlik] = -1;
	new query[80];
	format(query, sizeof(query), "DELETE FROM `hood` WHERE `ID` = '%d'", Hood[id][hID]);
	mysql_query(baglanti, query, false);
	Hood[id][hID] = 0;
	return 1;
}
stock Hood_Olustur(playerid, id)
{
	for(new i; i<MAX_HOOD; i++) if(Hood[i][hExists] == false)
	{
	    Hood[i][hExists] = true;
	    GetPlayerPos(playerid, Hood[i][hPos][0],  Hood[i][hPos][1],  Hood[i][hPos][2]);
	    Hood[i][hBirlik] = id;
	    new query[124];
	    format(query, sizeof(query), "INSERT INTO `hood` (`hoodX`, `hoodY`, `hoodZ`, `Birlik`) VALUES ('%.2f', '%.2f', '%.2f', '%d')", Hood[i][hPos][0],  Hood[i][hPos][1],  Hood[i][hPos][2], id);
	    new Cache:sawyer = mysql_query(baglanti, query, false);
	    Hood[i][hID] = cache_insert_id();
	    cache_delete(sawyer);
	    Hood_Yenile(i);
	    return i;
	}
	return -1;
}
Dialog:AyarlarGiris(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(isnull(inputtext)) return callcmd::ayarlar(playerid);
	    new query[300];
	    format(query, sizeof(query), "SELECT null FROM `oyuncular` WHERE `Isim` = '%s' AND `Sifre` = md5('%s')", Player_GetName(playerid), inputtext);
	    new Cache:sawyer = mysql_query(baglanti, query);
	    new rows;
	    cache_get_row_count(rows);
	    if(!rows)
	    {
	        cache_delete(sawyer);
	        HataMesajGonder(playerid, "Yanlýþ þifre girdiniz.");
	        return callcmd::ayarlar(playerid);
	    }
	    Dialog_Show(playerid, Ayarlar, DIALOG_STYLE_LIST, "{FFFFFF}Hesap Ayarlarý", "{FFFFFF}Þifre Deðiþtir\n{FFFFFF}TOG\n{FFFFFF}Yürüyüþ Stili", "Seç", "Kapat");
	}
	return 1;
}
stock TOGMenu(playerid)
{
	new str[400];
	format(str, sizeof(str), "{FFFFFF}Birlik & Telsiz Mesajlarý\t%s\n{FFFFFF}PM\t%s\n{FFFFFF}Yayýn & Reklam & Taksi\t%s\n{FFFFFF}Admin Ýþlemleri\t%s\n{FFFFFF}Otomatik Chat Animasyonu\t%s\nKarakter Ýsimleri\t%s\n", (PlayerData[playerid][pAyarlar][0] == 0) ? ("{7af442}Açýk") : ("{ff0000}Kapalý"), (PlayerData[playerid][pAyarlar][1] == 0) ? ("{7af442}Açýk") : ("{ff0000}Kapalý"),
    (PlayerData[playerid][pAyarlar][2] == 0) ? ("{7af442}Açýk") : ("{ff0000}Kapalý"), (PlayerData[playerid][pAyarlar][3] == 0) ? ("{7af442}Açýk") : ("{ff0000}Kapalý"), (PlayerData[playerid][pAyarlar][4] == 0) ? ("{7af442}Açýk") : ("{ff0000}Kapalý"), (PlayerData[playerid][pAyarlar][5] == 0) ? ("{7af442}Açýk") : ("{ff0000}Kapalý"));
	if(PlayerData[playerid][pAdmin] >= 1) format(str, sizeof(str), "%s{FFFFFF}Admin Chat\t%s\n{FFFFFF}Helper Chat\t%s\n{FFFFFF}Yetkili Bilgi Mesajlarý\t%s\n", str, (PlayerData[playerid][pAyarlar][6] == 0) ? ("{7af442}Açýk") : ("{ff0000}Kapalý"), (PlayerData[playerid][pAyarlar][7] == 0) ? ("{7af442}Açýk") : ("{ff0000}Kapalý"), (PlayerData[playerid][pAyarlar][8] == 0) ? ("{7af442}Açýk") : ("{ff0000}Kapalý"));
	Dialog_Show(playerid, TOG, DIALOG_STYLE_TABLIST, "TOG", str, "Deðiþtir", "Geri");
	return 1;
}
Dialog:TOG(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, Ayarlar, DIALOG_STYLE_LIST, "{FFFFFF}Hesap Ayarlarý", "{FFFFFF}Þifre Deðiþtir\n{FFFFFF}TOG\n{FFFFFF}Yürüyüþ Stili", "Seç", "Kapat");
	if(response)
	{
	    if(PlayerData[playerid][pAyarlar][listitem] == 0)
	    {
	        PlayerData[playerid][pAyarlar][listitem] = 1;
	    }
	    else
	    {
	        PlayerData[playerid][pAyarlar][listitem] = 0;
	    }
	    if(PlayerData[playerid][pAyarlar][5] == 1)
	    {
	        foreach(new i:Player)
	        {
	            Streamer_RemoveArrayData(STREAMER_TYPE_3D_TEXT_LABEL, NameTag[i], E_STREAMER_PLAYER_ID, playerid);
	        }
	    }
	    else
	    {
	        foreach(new i:Player)
	        {
	            Streamer_AppendArrayData(STREAMER_TYPE_3D_TEXT_LABEL, NameTag[i], E_STREAMER_PLAYER_ID, playerid);
	        }
	    }
	    TOGMenu(playerid);
	}
	return 1;
}
Dialog:Ayarlar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(listitem == 0)
	    {
	        Dialog_Show(playerid, SifreDegistir, DIALOG_STYLE_INPUT, "Yeni Þifre", "Lütfen yeni þifrenizi girin:", "Deðiþtir", "Geri");
	    }
		if(listitem == 1)
		{
		    TOGMenu(playerid);
		}
		if(listitem == 2)
		{
		    Dialog_Show(playerid, YuruyusStili, DIALOG_STYLE_LIST, "Yürüyüþ Stili", "Normal\nLow Walk\nGangsta\nGangsta2\nOld Walk\nOld Walk2\nNormal Walk2\nFemale Walk\nFemale Walk2\nWhore Walk\nFemale Walk3\nDrunk Walk\nBlind Walk\nNormal", "Seç", "Geri");
		}
	}
	return 1;
}
Dialog:YuruyusStili(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, Ayarlar, DIALOG_STYLE_LIST, "{FFFFFF}Hesap Ayarlarý", "{FFFFFF}Þifre Deðiþtir\n{FFFFFF}TOG\n{FFFFFF}Yürüyüþ Stili", "Seç", "Kapat");
	if(response)
	{
	    PlayerData[playerid][pAyarlar][9] = listitem+1;
	    MesajGonder(playerid, "Yürüyüþ stiliniz deðiþtirildi.");
	}
	return 1;
}
Dialog:SifreDegistir(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, Ayarlar, DIALOG_STYLE_LIST, "{FFFFFF}Hesap Ayarlarý", "{FFFFFF}Þifre Deðiþtir\n{FFFFFF}TOG\n{FFFFFF}Yürüyüþ Stili", "Seç", "Kapat");
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, SifreDegistir, DIALOG_STYLE_INPUT, "Yeni Þifre", "Lütfen yeni þifrenizi girin:", "Deðiþtir", "Geri");
	    if(strlen(inputtext) < 6 || strlen(inputtext) > 30)
     	{
      		HataMesajGonder(playerid,"Þifreniz 6 ile 30 karakter arasýnda olmalýdýr.");
			return Dialog_Show(playerid, SifreDegistir, DIALOG_STYLE_INPUT, "Yeni Þifre", "Lütfen yeni þifrenizi girin:", "Deðiþtir", "Geri");
		}
		if(TurkceKarakter(inputtext))
		{
            HataMesajGonder(playerid,"Þifreniz Türkçe karakter içeremez.");
			return Dialog_Show(playerid, SifreDegistir, DIALOG_STYLE_INPUT, "Yeni Þifre", "Lütfen yeni þifrenizi girin:", "Deðiþtir", "Geri");
		}
		if(OzelKarakter(inputtext))
		{
            HataMesajGonder(playerid,"Þifreniz özel karakter içeremez.");
			return Dialog_Show(playerid, SifreDegistir, DIALOG_STYLE_INPUT, "Yeni Þifre", "Lütfen yeni þifrenizi girin:", "Deðiþtir", "Geri");
		}
		new query[300];
		format(query, sizeof(query), "UPDATE `oyuncular` SET `Sifre` = md5('%s') WHERE `Isim` = '%s'", inputtext, Player_GetName(playerid));
		mysql_query(baglanti, query, false);
		MesajGonder(playerid, "Þifreniz deðiþtirildi.");
	}
	return 1;
}
stock OzelModelListele(playerid)
{
	new query[124];
	format(query, sizeof(query), "SELECT * FROM `ozelmodel` WHERE `sqlid` = '%d'", PlayerData[playerid][pID]);
	new Cache:sawyer = mysql_query(baglanti, query);
	new rows;
	cache_get_row_count(rows);
	if(rows)
	{
	    new str[1000], skinid, sayi;
	    for(new i; i<rows; i++)
	    {
	        cache_get_value_name_int(i, "skinid", skinid);
	        OzelModelListeleme[playerid][sayi] = skinid;
	        sayi++;
	        format(str, sizeof(str), "%s%d\n", str, skinid);
	    }
	    cache_delete(sawyer);
	    Dialog_Show(playerid, OzelModelListe, DIALOG_STYLE_PREVMODEL, "Ozel Modelleriniz", str, "Sec", "Kapat");
	}
	else
	{
	    cache_delete(sawyer);
	    HataMesajGonder(playerid, "Hiç özel modeliniz yok.");
	}
	return 1;
}
Dialog:OzelModelListe(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new skin = OzelModelListeleme[playerid][listitem];
	    PlayerData[playerid][pSkin] = skin;
	    SetPlayerSkin(playerid, skin);
	}
	return 1;
}
forward OzelModelSil(playerid, sqlid, skinid);
public OzelModelSil(playerid, sqlid, skinid)
{
	new rows;
	cache_get_row_count(rows);
	if(!rows) return HataMesajGonder(playerid, "Bu oyuncunun böyle bir özel modeli yok.");
	new query[150];
	format(query, sizeof(query), "DELETE FROM `ozelmodel` WHERE `sqlid` = '%d' AND `skinid` = '%d'", sqlid, skinid);
	mysql_query(baglanti, query, false);
	format(query, sizeof(query), "UPDATE `oyuncular` SET `Skin` = '101' WHERE `Skin` = '%d'", skinid);
	mysql_query(baglanti, query, false);
	foreach(new i:Player) if(PlayerData[i][pSkin] == skinid)
	{
	    PlayerData[i][pSkin] = (PlayerData[i][pCinsiyet] == 1) ? (101) : (211);
	    SetPlayerSkin(i, PlayerData[i][pSkin]);
	    BilgiMesajGonder(i, "Kullandýðýnýz skin yetkili tarafýndan silindiði için skininiz deðiþtirildi.");
	}
	MesajGonder(playerid, "%s (SQL ID: %d) adlý kiþinin %d ID'li özel modelini sildiniz.", SQLName(sqlid), sqlid, skinid);
	Log_Write("logs/admin.log","[%s] %s adli admin %d sql id'li oyuncunun %d id'li ozel modelini sildi.",ReturnDate(),PlayerData[playerid][pAdmin], sqlid, skinid);
	return 1;
}
forward OzelModelVer(playerid, sqlid, skinid);
public OzelModelVer(playerid, sqlid, skinid)
{
	new rows;
	cache_get_row_count(rows);
	if(rows) return HataMesajGonder(playerid, "Bu oyuncunun zaten bu modeli var.");
	new query[150];
	format(query, sizeof(query), "INSERT INTO `ozelmodel` (`sqlid`, `skinid`) VALUES ('%d', '%d')", sqlid, skinid);
	mysql_query(baglanti, query, false);
	MesajGonder(playerid, "%s (SQL ID: %d) kiþisine %d ID'li özel modeli verdiniz.", SQLName(sqlid), sqlid, skinid);
	Log_Write("logs/admin.log","[%s] %s adli admin %d sql id'li oyuncuya %d id'li ozel modeli verdi.",ReturnDate(),PlayerData[playerid][pAdmin], sqlid, skinid);
	return 1;
}
stock VipMenu(playerid)
{
	if(PlayerData[playerid][pVip] < 1 || PlayerData[playerid][pVipSure] < gettime()) return 1;
	new str[250];
	format(str, sizeof(str), "{E74C3C}Paket Türü\t{%s}[%s]\n{E74C3C}Paket Bitiþ Tarihi\t{FFFFFF}[%s]\n{E74C3C}Paket Özellikleri\t{FFFFFF}[...]\n{E74C3C}V.I.P Rengi\t{FFFFFF}[%s{FFFFFF}]\n{E74C3C}Dövüþ Stili\t{FFFFFF}[%s]",
	GetVIPRenk(PlayerData[playerid][pVip]), GetVIPName(PlayerData[playerid][pVip]), convertDatex(PlayerData[playerid][pVipSure]),
	(PlayerData[playerid][pVipRenk] == 1) ? ("{74f442}Açýk") : ("{ef2f2f}Kapalý"), GetFightStyleName(GetPlayerFightingStyle(playerid)));
	Dialog_Show(playerid, VipMenu, DIALOG_STYLE_TABLIST, "{FFFFFF}V.I.P Menü", str, "Deðiþtir", "Kapat");
    return 1;
}
stock VipDolap(playerid)
{
    if(PlayerData[playerid][pVip] < 1 || PlayerData[playerid][pVipSure] < gettime()) return 1;
    Dialog_Show(playerid, VipDolap, DIALOG_STYLE_LIST, "{FFFFFF}VIP Dolap", "{E74C3C}V.I.P Can\t{2ECC71}$100\n{E74C3C}V.I.P Zýrh\t{2ECC71}$2000\n{E74C3C}V.I.P Skinleri (Pasif)", "Seç", "Kapat");
    return 1;
}
Dialog:VipDolap(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(listitem == 0)
	    {
	        if(ReturnHealth(playerid) >= 100) return HataMesajGonder(playerid, "Zaten canýnýz full.");
	        if(PlayerData[playerid][pCash] < 100) return HataMesajGonder(playerid, "Yeterli paranýz yok.");
	        CanAyarla(playerid, 100.0);
	        ParaVer(playerid, -100);
	    }
	    if(listitem == 1)
	    {
	        if(ReturnArmour(playerid) >= 100) return HataMesajGonder(playerid, "Zaten zýrhýnýz full.");
	        if(PlayerData[playerid][pCash] < 2000) return HataMesajGonder(playerid, "Yeterli paranýz yok.");
	        ZirhAyarla(playerid, 100.0);
	        ParaVer(playerid, -2000);
	    }

	}
	return 1;
}
/*stock IsVipSkin(skinid)
{
	for(new i; i<50; i++)
	{
	    if(VIPErkekSkinler[i] == skinid || VIPBayanSkinler[i] == skinid) return 1;
	}
	return 0;
}
Dialog:VIPSkinler(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(PlayerData[playerid][pCinsiyet] == 1)
	    {
			PlayerData[playerid][pSkin] = VIPErkekSkinler[listitem];
			SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
		}
		else
		{
		    PlayerData[playerid][pSkin] = VIPBayanSkinler[listitem];
			SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
		}
	}
	return 1;
}*/
Dialog:VipMenu(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(listitem == 0 || listitem == 1) return callcmd::vipmenu(playerid);
	    if(listitem == 2)
	    {
	        new str[3000];
	        switch(PlayerData[playerid][pVip])
	        {
	            case 1:
	            {
	                strcat(str, "{FFFFFF}V.I.P rengini aktif edebilir.\n");
	                strcat(str, "{FFFFFF}V.I.P menüsünden (/vipmenu) dövüþ stilini deðiþtirebilir. Paketi son erdiðinde dövüþ stili normale döner.\n");
	                strcat(str, "{FFFFFF}V.I.P dolabýndan belirli ücret karþýlýðýnda canýný ve zýrhýný doldurabilir. (/vipdolap)\n");
	                strcat(str, "{FFFFFF}V.I.P dolabýndaki kiyafetlerden yararlanabilir.\n");
	                strcat(str, "{FFFFFF}Telefonda rehbere numara kaydetme limiti 25'e yükselir.\n");
	                strcat(str, "{FFFFFF}Sahip olabileceði araç limiti 7'e yükselir.\n");
	                strcat(str, "{FFFFFF}Sahip olabileceði ev limiti 6'ya yükselir.\n");
	                strcat(str, "{FFFFFF}Galeriden bisiklet alabilir.\n");
	                strcat(str, "{FFFFFF}Saatlik maaþlarda ekstra olarak 2 EXP alýr.\n");
	                strcat(str, "{FFFFFF}Saatlik maaþlarda ekstra olarak $200 alýr.\n");
	                strcat(str, "{FFFFFF}VIP olduðu süre boyunca mobilya hakký +60 artar.\n");
	                strcat(str, "{FFFFFF}Balýk tutma oraný +10 artar.\n");
	                strcat(str, "{FFFFFF}Forum ve Discordda donator tagý verilir.\n");
	            }
	            case 2:
	            {
	                strcat(str, "{FFFFFF}V.I.P rengini aktif edebilir.\n");
	                strcat(str, "{FFFFFF}V.I.P menüsünden (/vipmenu) dövüþ stilini deðiþtirebilir. Paketi son erdiðinde dövüþ stili normale döner.\n");
	                strcat(str, "{FFFFFF}V.I.P dolabýndan belirli ücret karþýlýðýnda canýný ve zýrhýný doldurabilir. (/vipdolap)\n");
	                strcat(str, "{FFFFFF}V.I.P dolabýndaki kiyafetlerden yararlanabilir.\n");
	                strcat(str, "{FFFFFF}Telefonda rehbere numara kaydetme limiti 35'e yükselir.\n");
	                strcat(str, "{FFFFFF}Sahip olabileceði araç limiti 9'a yükselir.\n");
	                strcat(str, "{FFFFFF}Sahip olabileceði ev limiti 8'e yükselir.\n");
	                strcat(str, "{FFFFFF}Grottiden bisiklet alabilir.\n");
	                strcat(str, "{FFFFFF}Saatlik maaþlarda ekstra olarak 4 EXP alýr.\n");
	                strcat(str, "{FFFFFF}Saatlik maaþlarda ekstra olarak $400 alýr.\n");
	                strcat(str, "{FFFFFF}VIP olduðu süre boyunca mobilya hakký +120 artar.\n");
	                strcat(str, "{FFFFFF}Forum ve Discordda donator tagý verilir.\n");
	                strcat(str, "{FFFFFF}Balýk tutma oraný +15 artar.\n");
	                strcat(str, "{FFFFFF}VIP olduðu süre boyunca maske hakký olmadan maske takabilir.\n");
	                strcat(str, "{FFFFFF}Grottiden VIP araçlarý alabilir. (Quad, Sandking)\n");
	            }
	            case 3:
	            {
	                strcat(str, "{FFFFFF}V.I.P rengini aktif edebilir.\n");
	                strcat(str, "{FFFFFF}V.I.P menüsünden (/vipmenu) dövüþ stilini deðiþtirebilir. Paketi son erdiðinde dövüþ stili normale döner.\n");
	                strcat(str, "{FFFFFF}V.I.P dolabýndan belirli ücret karþýlýðýnda canýný ve zýrhýný doldurabilir. (/vipdolap)\n");
	                strcat(str, "{FFFFFF}V.I.P dolabýndaki kiyafetlerden yararlanabilir.\n");
	                strcat(str, "{FFFFFF}Telefonda rehbere numara kaydetme limiti 40'a yükselir.\n");
	                strcat(str, "{FFFFFF}Sahip olabileceði araç limiti 11'e yükselir.\n");
	                strcat(str, "{FFFFFF}Sahip olabileceði ev limiti 10'a yükselir.\n");
	                strcat(str, "{FFFFFF}Grottiden bisiklet alabilir.\n");
	                strcat(str, "{FFFFFF}Saatlik maaþlarda ekstra olarak 6 EXP alýr.\n");
	                strcat(str, "{FFFFFF}Saatlik maaþlarda ekstra olarak $600 alýr.\n");
	                strcat(str, "{FFFFFF}VIP olduðu süre boyunca mobilya hakký +200 artar.\n");
	                strcat(str, "{FFFFFF}Forum ve Discordda donator tagý verilir.\n");
	                strcat(str, "{FFFFFF}Balýk tutma oraný +20 artar.\n");
	                strcat(str, "{FFFFFF}VIP olduðu süre boyunca maske hakký olmadan maske takabilir.\n");
	                strcat(str, "{FFFFFF}Grottiden VIP araçlarý alabilir. (Hotring racer, hotknife, bloodring)\n");
	            }

	        }
	        Dialog_Show(playerid, PaketOzellikleri, DIALOG_STYLE_MSGBOX, "Paket Özellikleri", str, "Geri", "");
	    }
	    if(listitem == 3)
	    {
	        if(PlayerData[playerid][pVipRenk] == 0)
	        {
	            PlayerData[playerid][pVipRenk] = 1;
	            MesajGonder(playerid, "V.I.P rengi aktif edildi.");
	            VipMenu(playerid);
	        }
			else
			{
			    PlayerData[playerid][pVipRenk] = 0;
			    MesajGonder(playerid, "V.I.P rengi kapatýldý.");
			    VipMenu(playerid);
			}
		}
		if(listitem == 4)
		{
		    Dialog_Show(playerid, FightStyle, DIALOG_STYLE_LIST, "Dövüþ Stilleri", "Normal\nBoxing\nKungfu\nKneehead\nGrab Kick\nElbow", "Seç", "Geri");
		}
	}
	return 1;
}

Dialog:PaketOzellikleri(playerid, response, listitem, inputtext[])
{
	if(response) return VipMenu(playerid);
	return 1;
}
Dialog:FightStyle(playerid, response, listitem, inputtext[])
{
	if(!response) return VipMenu(playerid);
	if(response)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
	            PlayerData[playerid][pDovusStili] = FIGHT_STYLE_NORMAL;
	            SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);

	        }
	        case 1:
	        {
	            PlayerData[playerid][pDovusStili] = FIGHT_STYLE_BOXING;
	            SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
	        }
	        case 2:
	        {
	            PlayerData[playerid][pDovusStili] = FIGHT_STYLE_KUNGFU;
	            SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
	        }
	        case 3:
	        {
	            PlayerData[playerid][pDovusStili] = FIGHT_STYLE_KNEEHEAD;
	            SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
	        }
	        case 4:
	        {
	            PlayerData[playerid][pDovusStili] = FIGHT_STYLE_GRABKICK;
	            SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
	        }
	        case 5:
	        {
	            PlayerData[playerid][pDovusStili] = FIGHT_STYLE_ELBOW;
	            SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
	        }
	    }
	    MesajGonder(playerid, "Dövüþ stiliniz deðiþtirildi. (Aim + Enter)");
	}
	return 1;
}
stock GetVIPRenk(level)
{
	new renk[10];
	switch(level)
	{
	    case 1: renk = "ff9b0f";
	    case 2: renk = "AFAFAF";
	    case 3: renk = "ffeb0f";
	    default: renk = "FFFFFF";
	}
	return renk;
}
stock GetVIPName(level)
{
	new vipname[20] = "Bilinmiyor";
	switch(level)
	{
	    case 1: vipname = "Bronze VIP";
	    case 2: vipname = "Silver VIP";
	    case 3: vipname = "Gold VIP";
	    default: vipname = "Bilinmiyor";
	}
	return vipname;
}
stock SiparisListele(playerid)
{
	new query[150];
	format(query, sizeof(query), "SELECT * FROM `siparisler` ORDER BY tarih DESC LIMIT %d, 15", GetPVarInt(playerid, "Siparis")*15);
	new Cache:sawyer = mysql_query(baglanti, query);
	new rows;
	cache_get_row_count(rows);
	if(rows)
	{
	    new str[1500],siparisid, sqlid, sipariseden[24], urun[40], tarih[25];
	    strcat(str, "Sipariþ ID\tSipariþ Eden\tÜrün\tTarih\n");
	    for(new i; i<rows; i++)
	    {
	        cache_get_value_name_int(i, "ID", siparisid);
	        cache_get_value_name_int(i, "sqlid", sqlid);
	        cache_get_value_name(i, "urun", urun, 40);
	        cache_get_value_name(i, "sipariseden", sipariseden, 24);
	        cache_get_value_name(i, "tarih", tarih, 25);
	        format(str, sizeof(str), "%s{FFFFFF}%d\t{FFFFFF}%s(%d)\t{FFFFFF}%s\t{FFFFFF}%s\n", str, siparisid, sipariseden, sqlid,  urun, tarih);
	    }
	    if(rows > 15) strcat(str, "{AFAFAF}» Ileri\n{AFAFAF}» Geri");
	    Dialog_Show(playerid, Siparisler, DIALOG_STYLE_TABLIST_HEADERS, "{f23737}Sipariþler", str, "Sil", "Kapat");
	}
	else
	{
	    cache_delete(sawyer);
	    if(GetPVarInt(playerid, "Siparis") == 0)
		{
		    HataMesajGonder(playerid, "Sipariþ yok.");
		}
		else
		{
		    SetPVarInt(playerid, "Siparis", GetPVarInt(playerid, "Siparis")-1);
		    SiparisListele(playerid);
		    HataMesajGonder(playerid, "Daha fazla sipariþ bulunamadý.");
		}
	}
	return 1;
}
Dialog:Siparisler(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(strfind(inputtext, "Ileri", true) != -1)
        {
            SetPVarInt(playerid, "Siparis", GetPVarInt(playerid, "Siparis")+1);
            SiparisListele(playerid);
            return 1;
        }
        if(strfind(inputtext, "Geri", true) != -1)
        {
            if(GetPVarInt(playerid, "Siparis") < 1)
            {
                SiparisListele(playerid);
                HataMesajGonder(playerid, "Zaten ilk sayfadasýnýz!");
            }
            else
            {
                SetPVarInt(playerid, "Siparis", GetPVarInt(playerid, "Siparis")-1);
                SiparisListele(playerid);
            }
            return 1;
        }
	    new sid = strval(inputtext);
	    if(sid < 1) return 1;
	    new query[80];
	    format(query, sizeof(query), "DELETE FROM `siparisler` WHERE `ID` = '%d'", sid);
	    mysql_query(baglanti, query, false);
	    MesajGonder(playerid, "Sipariþ silindi.");
	    SiparisListele(playerid);
	}
	return 1;
}
forward OOCMarket(playerid);
public OOCMarket(playerid)
{
	new rows;
	cache_get_row_count(rows);
 	new str[1500], string[124];
  	strcat(str, "Ürün\tFiyat\n");
   	strcat(str, "{AFAFAF}» Bakiye Gönder\n");
    if(PlayerData[playerid][pAdmin] >= 4) strcat(str, "{ff0000}» {AFAFAF}Düzenle\n");
    if(rows)
    {
        new urunadi[40], fiyat;
        for(new i; i<rows; i++)
        {
            cache_get_value_name(i, "urunadi", urunadi, 40);
            cache_get_value_name_int(i, "fiyat", fiyat);

            format(string, sizeof(string), "{FFFFFF}%s\t{FFFFFF}%d TL\n", urunadi, fiyat);
            strcat(str, string);
		}
	}
	format(string, sizeof(string), "OOC Market (Bakiyeniz: %d)", PlayerData[playerid][pBakiye]);
	Dialog_Show(playerid, oocm, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Satýn Al", "Kapat");
	return 1;
}
Dialog:oocm(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(strfind(inputtext, "Bakiye Gönder", true) != -1)
	    {
	        if(PlayerData[playerid][pBakiye] <= 0)
	        {
	            HataMesajGonder(playerid, "Bakiyeniz yok.");
	            return callcmd::oocmarket(playerid);
			}
			Dialog_Show(playerid, BakiyeGonderID, DIALOG_STYLE_INPUT, "Bakiye Gönder", "{ff0022}» {FFFFFF}Lütfen Bakiye göndermek istediðiniz oyuncunun ID'sini girin:", "Devam", "Geri");
			return 1;
	    }
	    if(strfind(inputtext, "Düzenle", true) != -1)
	    {
	        if(PlayerData[playerid][pAdmin] < 4) return 1;
	        Dialog_Show(playerid, UrunDuzenle, DIALOG_STYLE_LIST, "Düzenle", "{FFFFFF}Ürün Ekle\n{FFFFFF}Ürün Sil\n{FFFFFF}Ürün Fiyat Düzenle\nÜrün Pasifleþtir/Aktifleþtir", "Seç", "Kapat");
	        return 1;
	    }
	    if(strlen(inputtext) > 0)
	    {
	        OOCMarket_UrunAl(playerid, inputtext);
		}
	}
	return 1;
}
stock OOCMarket_UrunAl(playerid, urunadi[])
{
	new fiyat, durum;
	GetUrunBilgi(urunadi, fiyat, durum);
	if(strfind(urunadi, "Ýsim/Cinsiyet Deðiþtirme", true) != -1)
	{
	    if(durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafýndan pasife alýnmýþtýr.");
		if(PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, oocmisimdegistir, DIALOG_STYLE_INPUT, "Ýsim Deðiþtir", "{ff0022}» {FFFFFF}Lütfen yeni isminizi girin (Ad_Soyad formatýnda olmalýdýr):\n{ff0022}Not: {FFFFFF}Ýsminizi deðiþtirdikten sonra IC siciliniz sýfýrlanýr.", "Devam", "Vazgeç");
	}
	if(strfind(urunadi, "Karakter Yapýlandýrma Paketi", true) != -1)
	{
	    if(durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafýndan pasife alýnmýþtýr.");
		if(PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, oocmyas, DIALOG_STYLE_INPUT, "Karakter Yapýlandýrma Paketi (Adým 1)", "{FFFFFF}Karakter Yapýlandýrma Paketi: {ffd000}Karakter Yaþý\n\n{FFFFFF}Lütfen karakterinizin yaþýný girin:", "Devam", "Vazgeç");
	}
	if(strfind(urunadi, "Soyadý Kilitleme", true) != -1)
	{
	    if(durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafýndan pasife alýnmýþtýr.");
		if(PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		if(SoyadKilitlimi(GetPlayerLastName(playerid, ReturnName(playerid), 1))) return HataMesajGonder(playerid, "Bu soyad zaten kilitlenmiþ.");
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, SoyadKilitle, DIALOG_STYLE_MSGBOX, "Soyad Kilitle", "{a1ff00}%d TL {FFFFFF}ödeyerek kullandýðýnýz soyadý kilitlemek ister misiniz?", "Onayla", "Reddet", fiyat);
	}
	if(strfind(urunadi, "Özel Model", true) != -1)
	{
	    if(durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafýndan pasife alýnmýþtýr.");
		if(PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, OzelModel, DIALOG_STYLE_MSGBOX, "Özel Model", "{a1ff00}%d TL {FFFFFF} ödeyerek özel model satýn almak ister misiniz?", "Evet", "Hayýr", fiyat);
	}
	if(strfind(urunadi, "Özel Gate", true) != -1)
	{
	    if(durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafýndan pasife alýnmýþtýr.");
		if(PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, OzelGate, DIALOG_STYLE_MSGBOX, "Özel Gate", "{a1ff00}%d TL {FFFFFF} ödeyerek özel gate satýn almak ister misiniz?", "Evet", "Hayýr", fiyat);
	}
	if(strfind(urunadi, "Pet", true) != -1)
	{
	    if(durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafýndan pasife alýnmýþtýr.");
		if(PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, oocmpet, DIALOG_STYLE_MSGBOX, "Pet", "{a1ff00}%d TL {FFFFFF} ödeyerek pet satýn almak ister misiniz?", "Evet", "Hayýr", fiyat);
	}
	if(strfind(urunadi, "Bronze VIP", true) != -1)
	{
		if(PlayerData[playerid][pBakiye] < 20) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (20 TL)");
		if(PlayerData[playerid][pVip] > 0) return HataMesajGonder(playerid, "Zaten VIP paketiniz var.");
		SetPVarInt(playerid, "UrunFiyat", 20);
		Dialog_Show(playerid, BronzVip, DIALOG_STYLE_MSGBOX, "Bronze VIP", "{a1ff00}20 TL {FFFFFF}ödeyerek Bronze VIP adlý ürünü satýn almak ister misiniz?", "Onayla", "Vazgeç");
	}
	if(strfind(urunadi, "Silver VIP", true) != -1)
	{
		if(PlayerData[playerid][pBakiye] < 40) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (40 TL)");
		if(PlayerData[playerid][pVip] > 0) return HataMesajGonder(playerid, "Zaten VIP paketiniz var.");
		SetPVarInt(playerid, "UrunFiyat", 40);
		Dialog_Show(playerid, SilverVip, DIALOG_STYLE_MSGBOX, "Silver VIP", "{a1ff00}40 TL {FFFFFF}ödeyerek Silver VIP adlý ürünü satýn almak ister misiniz?", "Onayla", "Vazgeç");
	}
	if(strfind(urunadi, "Gold VIP", true) != -1)
	{
		if(PlayerData[playerid][pBakiye] < 60) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (60 TL)", fiyat);
		if(PlayerData[playerid][pVip] > 0) return HataMesajGonder(playerid, "Zaten VIP paketiniz var.");
		SetPVarInt(playerid, "UrunFiyat", 60);
		Dialog_Show(playerid, GoldVip, DIALOG_STYLE_MSGBOX, "Gold VIP", "{a1ff00}60 TL {FFFFFF}ödeyerek Gold VIP adlý ürünü satýn almak ister misiniz?", "Onayla", "Vazgeç");
	}
	if(strfind(urunadi, "Özel Map", true) != -1)
	{
	    if(durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafýndan pasife alýnmýþtýr.");
		if(PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, OzelMap, DIALOG_STYLE_MSGBOX, "Özel Map", "{a1ff00}%d TL {FFFFFF} ödeyerek özel map satýn almak ister misiniz?", "Evet", "Hayýr", fiyat);
	}
	if(strfind(urunadi, "Özel Plaka", true) != -1)
	{
	    if(durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafýndan pasife alýnmýþtýr.");
		if(PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "Özel plaka satýn almak için sürücü olmalýsýnýz!");
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, OzelPlaka, DIALOG_STYLE_MSGBOX, "Özel Plaka", "{a1ff00}%d TL {FFFFFF} ödeyerek özel plaka satýn almak ister misiniz?", "Evet", "Hayýr", fiyat);
	}
	if(strfind(urunadi, "Özel Numara", true) != -1)
	{
	    if(durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafýndan pasife alýnmýþtýr.");
		if(PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		if(PlayerData[playerid][pTelefon] == -1) return HataMesajGonder(playerid, "Bu ürünü satýn almak için telefonunuz olmalýdýr.");
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, OzelNumara, DIALOG_STYLE_INPUT, "Özel Numara", "{a1ff00}%d TL {FFFFFF}ödeyerek almak istediðiniz özel numarayý girin:", "Devam", "Vazgeç", fiyat);
	}
	if(strfind(urunadi, "EXP Boost", true) != -1)
	{
	    if(durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafýndan pasife alýnmýþtýr.");
		if(PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		if(PlayerData[playerid][pEXPBoost] > gettime()) return HataMesajGonder(playerid, "EXP Boost adlý ürününüz zaten bulunuyor.");
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, EXPBoost, DIALOG_STYLE_MSGBOX, "EXP Boost", "{a1ff00}%d TL {FFFFFF}ödeyerek EXP Boost adlý ürünü satýn almak ister misiniz\n\n{FFFFFF}Her maaþ aldýðýnýzda 1 EXP daha fazla kazanacaksýnýz.", "Onayla", "Vazgeç", fiyat);
	}
	if(strfind(urunadi, "Garaj", true) != -1)
	{
	    if(durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafýndan pasife alýnmýþtýr.");
		if(PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, OzelGaraj, DIALOG_STYLE_MSGBOX, "Özel Garaj", "{a1ff00}%d TL {FFFFFF} ödeyerek özel garaj satýn almak ister misiniz?", "Evet", "Hayýr", fiyat);
	}
	if(strfind(urunadi, "Özel Ev Ýnterioru", true) != -1)
	{
	    if(durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafýndan pasife alýnmýþtýr.");
		if(PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, OzelEv, DIALOG_STYLE_MSGBOX, "Özel Ev Ýnterioru", "{a1ff00}%d TL {FFFFFF} ödeyerek özel ev interioru satýn almak ister misiniz?", "Evet", "Hayýr", fiyat);
	}
	if(strfind(urunadi, "Balýk Oraný Arttýrma", true) != -1)
	{
	    if(durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafýndan pasife alýnmýþtýr.");
		if(PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		if(PlayerData[playerid][pBalikOrani] > gettime()) return HataMesajGonder(playerid, "Balýk Oraný Arttýrma adlý ürününüz zaten bulunuyor.");
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, BalikOrani, DIALOG_STYLE_MSGBOX, "Balýk Oraný Arttýrma", "{a1ff00}%d TL {FFFFFF} ödeyerek 'Balýk Oraný Arttýrma' satýn almak ister misiniz?", "Evet", "Hayýr", fiyat);
	}
	if(strfind(urunadi, "Araç Kilometre Sýfýrlama", true) != -1)
	{
	    if(durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafýndan pasife alýnmýþtýr.");
		if(PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "Sürücü olmalýsýnýz!");
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, KilometreSifirla, DIALOG_STYLE_MSGBOX, "Araç Kilometre Sýfýrlama", "{a1ff00}%d TL {FFFFFF} ödeyerek bulunduðunuz aracýn kilometresini sýfýrlamak ister misiniz?", "Evet", "Hayýr", fiyat);
	}
	if(strfind(urunadi, "Maske Kullaným Hakký", true) != -1)
	{
	    if(durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafýndan pasife alýnmýþtýr.");
		if(PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		if(PlayerData[playerid][pMaskeHakki] == 1) return HataMesajGonder(playerid, "Zaten maske kullaným hakkýnýz var.");
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, MaskeHakki, DIALOG_STYLE_MSGBOX, "Maske Kullaným Hakký", "{a1ff00}%d TL {FFFFFF} ödeyerek Maske Kullaným Hakký adlý ürünü satýn almak istiyor musunuz?", "Evet", "Hayýr", fiyat);
	}
	return 1;
}
Dialog:MaskeHakki(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        PlayerData[playerid][pMaskeHakki] = 1;
	        Oyuncu_Kaydet(playerid);
	        MesajGonder(playerid, "%d TL ödeyerek Maske Kullaným Hakký satýn aldýnýz.", GetPVarInt(playerid, "UrunFiyat"));
	        Log_Write("logs/oocmarket.log","[%s] %s adli kisi ooc marketden maske kullanim hakki adli urunu satin aldi.",ReturnDate(),ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");
	    }
	}
	return 1;
}
Dialog:BronzVip(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
	        PlayerData[playerid][pVip] = 1;
	        PlayerData[playerid][pVipSure] = gettime()+30*86400;
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        Oyuncu_Kaydet(playerid);
	        MesajGonder(playerid, "%d TL ödeyerek Bronze VIP satýn aldýnýz. (/vipmenu)", GetPVarInt(playerid, "UrunFiyat"));
	        Log_Write("logs/oocmarket.log","[%s] %s adli kisi ooc marketden bronze vip adli urunu satin aldi.",ReturnDate(),ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");
	    }
	}
	return 1;
}
Dialog:SilverVip(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
	        PlayerData[playerid][pVip] = 2;
	        PlayerData[playerid][pVipSure] = gettime()+30*86400;
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        Oyuncu_Kaydet(playerid);
	        MesajGonder(playerid, "%d TL ödeyerek Silver VIP satýn aldýnýz. (/vipmenu)", GetPVarInt(playerid, "UrunFiyat"));
	        Log_Write("logs/oocmarket.log","[%s] %s adli kisi ooc marketden silver vip adli urunu satin aldi.",ReturnDate(),ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");
	    }
	}
	return 1;
}
Dialog:GoldVip(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
	        PlayerData[playerid][pVip] = 3;
	        PlayerData[playerid][pVipSure] = gettime()+30*86400;
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        Oyuncu_Kaydet(playerid);
	        MesajGonder(playerid, "%d TL ödeyerek Gold VIP satýn aldýnýz. (/vipmenu)", GetPVarInt(playerid, "UrunFiyat"));
	        Log_Write("logs/oocmarket.log","[%s] %s adli kisi ooc marketden Gold VIP adli urunu satin aldi.",ReturnDate(),ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");
	    }
	}
	return 1;
}
Dialog:KilometreSifirla(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat") && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        new id = Car_GetID(GetPlayerVehicleID(playerid));
	        if(id == -1 || AracInfo[id][aracTip] != 4) return HataMesajGonder(playerid, "Bu aracýn kilometresini sýfýrlayamazsýn!");
	        AracInfo[id][aracKM] = 0.0;
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        Arac_Kaydet(id);
	        Oyuncu_Kaydet(id);
	        MesajGonder(playerid, "%d TL ödeyerek bulunduðunuz aracýn kilometresini sýfýrladýnýz.",GetPVarInt(playerid, "UrunFiyat"));
	        Log_Write("logs/oocmarket.log","[%s] %s adli kisi ooc marketden arac kilometre sifirlama adli urunu satin aldi.",ReturnDate(), ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");
	    }
	}
	return 1;
}
Dialog:BalikOrani(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
	        PlayerData[playerid][pBalikOrani] = gettime()+30*86400;
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        MesajGonder(playerid, "%d TL ödeyerek Balýk Oraný Arttýrma adlý ürünü satýn aldýnýz.", GetPVarInt(playerid, "UrunFiyat"));
	        Oyuncu_Kaydet(playerid);
	        Log_Write("logs/oocmarket.log","%s adli kisi ooc marketden balik orani arttirma adli urunu satin aldi.",ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");
	    }
	}
	return 1;
}
Dialog:OzelEv(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        new query[250];
	        format(query, sizeof(query), "INSERT INTO `siparisler` (`sqlid`, `sipariseden`, `urun`, `tarih`) VALUES ('%d', '%s', 'Kisisel Ev Interioru', '%s')", PlayerData[playerid][pID], Player_GetName(playerid),ReturnDate());
	        mysql_query(baglanti, query, false);
	        Oyuncu_Kaydet(playerid);
	        MesajGonder(playerid, "%d TL ödeyerek Özel Ev Ýnterioru satýn aldýnýz, F8 tuþuna basarak SS alýn ve forumumuzdan ticket açýn. (www.victimrpg.com)",GetPVarInt(playerid, "UrunFiyat"));
	        Log_Write("logs/oocmarket.log","%s adli kisi ooc marketden Özel Ev Ýnterioru adli urunu satin aldi.",ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");
	    }
	}
	return 1;
}
Dialog:OzelGaraj(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        new query[250];
	        format(query, sizeof(query), "INSERT INTO `siparisler` (`sqlid`, `sipariseden`, `urun`, `tarih`) VALUES ('%d', '%s', 'Kisisel Garaj', '%s')", PlayerData[playerid][pID], Player_GetName(playerid),ReturnDate());
	        mysql_query(baglanti, query, false);
	        Oyuncu_Kaydet(playerid);
	        MesajGonder(playerid, "%d TL ödeyerek özel garaj satýn aldýnýz, F8 tuþuna basarak SS alýn ve forumumuzdan ticket açýn. (www.victimrpg.com)",GetPVarInt(playerid, "UrunFiyat"));
	        Log_Write("logs/oocmarket.log","%s adli kisi ooc marketden Özel Garaj adli urunu satin aldi.",ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");
	    }
	}
	return 1;
}
Dialog:EXPBoost(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
	        PlayerData[playerid][pEXPBoost] = gettime()+30*86400;
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        MesajGonder(playerid, "%d TL ödeyerek EXP Boost adlý ürünü satýn aldýnýz. Her maaþ aldýðýnýzda 1 EXP daha fazla kazanacaksýnýz!", GetPVarInt(playerid, "UrunFiyat"));
	        Oyuncu_Kaydet(playerid);
	        Log_Write("logs/oocmarket.log","[%s] %s adli kisi ooc marketden EXP boost adli urunu satin aldi.",ReturnDate(), ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");
	    }
	}
	return 1;
}
Dialog:OzelNumara(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
			if(isnull(inputtext)) return Dialog_Show(playerid, OzelNumara, DIALOG_STYLE_INPUT, "Özel Numara", "{a1ff00}%d TL {FFFFFF}ödeyerek almak istediðiniz özel numarayý girin:", "Devam", "Vazgeç", GetPVarInt(playerid, "UrunFiyat"));
			if(!IsNumeric(inputtext)) return Dialog_Show(playerid, OzelNumara, DIALOG_STYLE_INPUT, "Özel Numara", "{a1ff00}%d TL {FFFFFF}ödeyerek almak istediðiniz özel numarayý girin:", "Devam", "Vazgeç", GetPVarInt(playerid, "UrunFiyat"));
			if(strval(inputtext) <= 0)
			{
			    HataMesajGonder(playerid, "Geçersiz numara girdiniz.");
			    return Dialog_Show(playerid, OzelNumara, DIALOG_STYLE_INPUT, "Özel Numara", "{a1ff00}%d TL {FFFFFF}ödeyerek almak istediðiniz özel numarayý girin:", "Devam", "Vazgeç", GetPVarInt(playerid, "UrunFiyat"));
			}
			if(strval(inputtext) >= 1000000000)
			{
			    HataMesajGonder(playerid, "Geçersiz numara girdiniz.");
			    return Dialog_Show(playerid, OzelNumara, DIALOG_STYLE_INPUT, "Özel Numara", "{a1ff00}%d TL {FFFFFF}ödeyerek almak istediðiniz özel numarayý girin:", "Devam", "Vazgeç", GetPVarInt(playerid, "UrunFiyat"));
			}
			if(NumaraKontrol(strval(inputtext)))
			{
			    HataMesajGonder(playerid, "Bu numara baþkasý tarafýndan kullanýlýyor.");
			    return Dialog_Show(playerid, OzelNumara, DIALOG_STYLE_INPUT, "Özel Numara", "{a1ff00}%d TL {FFFFFF}ödeyerek almak istediðiniz özel numarayý girin:", "Devam", "Vazgeç", GetPVarInt(playerid, "UrunFiyat"));
			}
			if(strval(inputtext) == 911 || strval(inputtext) == 555 || strval(inputtext) == 333)
			{
			    HataMesajGonder(playerid, "Bu numarayý kullanamazsýnýz.");
			    return Dialog_Show(playerid, OzelNumara, DIALOG_STYLE_INPUT, "Özel Numara", "{a1ff00}%d TL {FFFFFF}ödeyerek almak istediðiniz özel numarayý girin:", "Devam", "Vazgeç", GetPVarInt(playerid, "UrunFiyat"));
			}
			PlayerData[playerid][pTelefon] = strval(inputtext);
			PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
			MesajGonder(playerid, "%d TL ödeyerek telefon numaranýzý %d yaptýnýz.", GetPVarInt(playerid, "UrunFiyat"), strval(inputtext));
			Oyuncu_Kaydet(playerid);
			Log_Write("logs/oocmarket.log","[%s] %s adli kisi ooc marketden Özel Numara adli urunu satin aldi.",ReturnDate(), ReturnName(playerid));
			DeletePVar(playerid, "UrunFiyat");
	    }
	}
	return 1;
}
Dialog:OzelPlaka(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat") && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	    	Dialog_Show(playerid, OzelPlakaYaz, DIALOG_STYLE_INPUT, "Özel Plaka", "{a1ff00}%s {FFFFFF}model aracýnýza bir özel plaka girin:", "Devam", "Kapat", ReturnVehicleModelName(GetVehicleModel(GetPlayerVehicleID(playerid))));
	    }
	}
	return 1;
}
Dialog:OzelPlakaYaz(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat") && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        if(isnull(inputtext)) return Dialog_Show(playerid, OzelPlakaYaz, DIALOG_STYLE_INPUT, "Özel Plaka", "{a1ff00}%s {FFFFFF}model aracýnýza bir özel plaka girin:", "Devam", "Kapat", ReturnVehicleModelName(GetVehicleModel(GetPlayerVehicleID(playerid))));
	        if(strlen(inputtext) < 2 || strlen(inputtext) > 24)
	        {
	            HataMesajGonder(playerid, "Plaka minimum 2, maksimum 24 karakterden oluþmalýdýr.");
	            return Dialog_Show(playerid, OzelPlakaYaz, DIALOG_STYLE_INPUT, "Özel Plaka", "{a1ff00}%s {FFFFFF}model aracýnýza bir özel plaka girin:", "Devam", "Kapat", ReturnVehicleModelName(GetVehicleModel(GetPlayerVehicleID(playerid))));
	        }
	        if(TurkceKarakter(inputtext) || OzelKarakter(inputtext))
	        {
	            HataMesajGonder(playerid, "Plaka türkçe veya özel karakter içeremez.");
	            return Dialog_Show(playerid, OzelPlakaYaz, DIALOG_STYLE_INPUT, "Özel Plaka", "{a1ff00}%s {FFFFFF}model aracýnýza bir özel plaka girin:", "Devam", "Kapat", ReturnVehicleModelName(GetVehicleModel(GetPlayerVehicleID(playerid))));
	        }
	        new vehicleid = GetPlayerVehicleID(playerid);
	        new id = Car_GetID(vehicleid);
	        if(id == -1 || AracInfo[id][aracTip] != 4) return HataMesajGonder(playerid, "Bu araca özel plaka takamazsýn.");
	        format(AracInfo[id][aracPlaka], 24, inputtext);
	        SetVehicleNumberPlate(vehicleid, inputtext);
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        Oyuncu_Kaydet(playerid);
	        MesajGonder(playerid, "%d TL ödeyerek aracýn plakasýný '%s' yaptýnýz.", GetPVarInt(playerid, "UrunFiyat"), inputtext);
	        Log_Write("logs/oocmarket.log","%s adli kisi ooc marketden Ozel Plaka adli urunu satin aldi.",ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");
	    }
	}
	return 1;
}
Dialog:OzelMap(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        new query[250];
	        format(query, sizeof(query), "INSERT INTO `siparisler` (`sqlid`, `sipariseden`, `urun`, `tarih`) VALUES ('%d', '%s', 'Kisisel Map', '%s')", PlayerData[playerid][pID], Player_GetName(playerid),ReturnDate());
	        mysql_query(baglanti, query, false);
	        Oyuncu_Kaydet(playerid);
	        MesajGonder(playerid, "%d TL ödeyerek Özel Map satýn aldýnýz, F8 tuþuna basarak SS alýn ve forumumuzdan ticket açýn. (www.victimrpg.com)",GetPVarInt(playerid, "UrunFiyat"));
	        Log_Write("logs/oocmarket.log","%s adli kisi ooc marketden Kisisel Map adli urunu satin aldi.",ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");
	    }
	}
	return 1;
}
Dialog:oocmpet(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
	        new id = Pet_Olustur(PlayerData[playerid][pID], 1, 1);
			if(id == -1) return HataMesajGonder(playerid,"Pet satýn alýnamadý, geliþtirici ekibiyle iletiþime geçiniz.");
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        Oyuncu_Kaydet(playerid);
	        MesajGonder(playerid, "%d TL ödeyerek Pet satýn aldýnýz. (/petlerim)", GetPVarInt(playerid, "UrunFiyat"));
	        Log_Write("logs/oocmarket.log","%s adli kisi ooc marketden Pet adli urunu satin aldi.",ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");
	    }
	}
	return 1;
}
Dialog:OzelGate(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        new query[250];
	        format(query, sizeof(query), "INSERT INTO `siparisler` (`sqlid`, `sipariseden`, `urun`, `tarih`) VALUES ('%d', '%s', 'Kisisel Gate', '%s')", PlayerData[playerid][pID], Player_GetName(playerid),ReturnDate());
	        mysql_query(baglanti, query, false);
	        Oyuncu_Kaydet(playerid);
	        MesajGonder(playerid, "%d TL ödeyerek Özel Gate satýn aldýnýz, F8 tuþuna basarak SS alýn ve forumumuzdan ticket açýn. (www.victimrpg.com)",GetPVarInt(playerid, "UrunFiyat"));
	        Log_Write("logs/oocmarket.log","%s adli kisi ooc marketden Özel Gate adli urunu satin aldi.",ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");
	    }
	}
	return 1;
}
Dialog:OzelModel(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        new query[250];
	        format(query, sizeof(query), "INSERT INTO `siparisler` (`sqlid`, `sipariseden`, `urun`, `tarih`) VALUES ('%d', '%s', 'Ozel Model', '%s')", PlayerData[playerid][pID], Player_GetName(playerid),ReturnDate());
	        mysql_query(baglanti, query, false);
	        Oyuncu_Kaydet(playerid);
	        MesajGonder(playerid, "%d TL ödeyerek Özel Kiyafet satýn aldýnýz, F8 tuþuna basarak SS alýn ve forumumuzdan ticket açýn. (www.victimrpg.com)",GetPVarInt(playerid, "UrunFiyat"));
	        Log_Write("logs/oocmarket.log","%s adli kisi ooc marketden Özel Kiyafet adli urunu satin aldi.",ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");
	    }
	}
	return 1;
}
Dialog:SoyadKilitle(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new query[150];
	    format(query, sizeof(query), "INSERT INTO `kilitlisoyadlar` (`Soyad`, `Kilitleyen`, `Tarih`) VALUES ('%s', '%s', '%s')", GetPlayerLastName(playerid, ReturnName(playerid), 1), ReturnName(playerid), ReturnDate());
	    mysql_query(baglanti, query, false);
	    PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
		MesajGonder(playerid, "%d TL ödeyerek soyadýnýzý kilitlediniz.", GetPVarInt(playerid, "UrunFiyat"));
		Log_Write("logs/oocmarket.log","%s adli kisi ooc marketden Soyadi kilitleme adli urunu satin aldi.",ReturnName(playerid));
		DeletePVar(playerid, "UrunFiyat");
	}
	return 1;
}
Dialog:oocmyas(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, oocmyas, DIALOG_STYLE_INPUT, "Karakter Yapýlandýrma Paketi (Adým 1)", "{FFFFFF}Karakter Yapýlandýrma Paketi: {ffd000}Karakter Yaþý\n\n{FFFFFF}Lütfen karakterinizin yaþýný girin:", "Devam", "Vazgeç");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, oocmyas, DIALOG_STYLE_INPUT, "Karakter Yapýlandýrma Paketi (Adým 1)", "{FFFFFF}Karakter Yapýlandýrma Paketi: {ffd000}Karakter Yaþý\n\n{FFFFFF}Lütfen karakterinizin yaþýný girin:", "Devam", "Vazgeç");
	    if(strval(inputtext) < 18 || strval(inputtext) > 80)
	    {
	        HataMesajGonder(playerid, "Minimum 18, maksimum 80 yaþ girebilirsiniz!");
	        return Dialog_Show(playerid, oocmyas, DIALOG_STYLE_INPUT, "Karakter Yapýlandýrma Paketi (Adým 1)", "{FFFFFF}Karakter Yapýlandýrma Paketi: {ffd000}Karakter Yaþý\n\n{FFFFFF}Lütfen karakterinizin yaþýný girin:", "Devam", "Vazgeç");
	    }
	    SetPVarInt(playerid, "KarakterYas", strval(inputtext));
	    Dialog_Show(playerid, oocmdogumyeri, DIALOG_STYLE_INPUT, "Karakter Yapýlandýrma Paketi (Adým 2)", "{FFFFFF}Karakter Yapýlandýrma Paketi: {ffd000}Doðum Yeri\n\n{FFFFFF}Lütfen karakterinizin doðum yerini girin:", "Devam", "Geri");
	}
	return 1;
}
Dialog:oocmdogumyeri(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, oocmyas, DIALOG_STYLE_INPUT, "Karakter Yapýlandýrma Paketi (Adým 1)", "{FFFFFF}Karakter Yapýlandýrma Paketi: {ffd000}Karakter Yaþý\n\n{FFFFFF}Lütfen karakterinizin yaþýný girin:", "Devam", "Vazgeç");
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, oocmdogumyeri, DIALOG_STYLE_INPUT, "Karakter Yapýlandýrma Paketi (Adým 2)", "{FFFFFF}Karakter Yapýlandýrma Paketi: {ffd000}Doðum Yeri\n\n{FFFFFF}Lütfen karakterinizin doðum yerini girin:", "Devam", "Geri");
	    if(strlen(inputtext) < 3 || strlen(inputtext) > 30)
	    {
	        HataMesajGonder(playerid, "Doðum yeri çok kýsa veya çok uzun.");
	        return Dialog_Show(playerid, oocmdogumyeri, DIALOG_STYLE_INPUT, "Karakter Yapýlandýrma Paketi (Adým 2)", "{FFFFFF}Karakter Yapýlandýrma Paketi: {ffd000}Doðum Yeri\n\n{FFFFFF}Lütfen karakterinizin doðum yerini girin:", "Devam", "Geri");
	    }
	    SetPVarString(playerid, "DogumYeri", inputtext);
	    Dialog_Show(playerid, oocmtenrengi, DIALOG_STYLE_LIST, "Karakter Yapýlandýrma Paketi (Adým 3)", "Beyaz\nSiyah", "Bitir", "Geri");
	}
	return 1;
}
Dialog:oocmtenrengi(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, oocmdogumyeri, DIALOG_STYLE_INPUT, "Karakter Yapýlandýrma Paketi (Adým 2)", "{FFFFFF}Karakter Yapýlandýrma Paketi: {ffd000}Doðum Yeri\n\nLütfen karakterinizin doðum yerini girin:", "Devam", "Geri");
	if(response)
	{
	    if(PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
	    	new yas = GetPVarInt(playerid, "KarakterYas");
	    	new dogum[30];
	    	GetPVarString(playerid, "DogumYeri", dogum, sizeof(dogum));

	    	PlayerData[playerid][pYas] = yas;
	    	format(PlayerData[playerid][pDogum], 30, dogum);
	    	PlayerData[playerid][pTen] = listitem+1;
	    	PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
			MesajGonder(playerid, "%d TL ödeyerek karakterinizi baþarýyla yapýlandýrdýnýz.", GetPVarInt(playerid, "UrunFiyat"));
			Log_Write("logs/oocmarket.log","%s adli kisi ooc marketden Karakter yapilandirma adli urunu satin aldi.",ReturnName(playerid));
			DeletePVar(playerid, "UrunFiyat");
			DeletePVar(playerid, "DogumYeri");
			DeletePVar(playerid, "KarakterYas");
	    	Oyuncu_Kaydet(playerid);
	    }
	}
	return 1;
}
Dialog:oocmisimdegistir(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, oocmisimdegistir, DIALOG_STYLE_INPUT, "Ýsim Deðiþtir", "{ff0022}» {FFFFFF}Lütfen yeni isminizi girin (Ad_Soyad formatýnda olmalýdýr):\n{ff0022}Not: {FFFFFF}Ýsminizi deðiþtirdikten sonra IC siciliniz sýfýrlanýr.", "Devam", "Vazgeç");
	    if(strlen(inputtext) <= 3)
	    {
	        HataMesajGonder(playerid, "Çok kýsa bir ad girdiniz.");
	        return Dialog_Show(playerid, oocmisimdegistir, DIALOG_STYLE_INPUT, "Ýsim Deðiþtir", "{ff0022}» {FFFFFF}Lütfen yeni isminizi girin (Ad_Soyad formatýnda olmalýdýr):\n{ff0022}Not: {FFFFFF}Ýsminizi deðiþtirdikten sonra IC siciliniz sýfýrlanýr.", "Devam", "Vazgeç");
	    }
	    if(!IsValidRoleplayName(inputtext))
	    {
	        HataMesajGonder(playerid, "Ýsminiz Ad_Soyad formatýnda olmalýdýr. (Örnek: Danny_Ruswell)");
	        return Dialog_Show(playerid, oocmisimdegistir, DIALOG_STYLE_INPUT, "Ýsim Deðiþtir", "{ff0022}» {FFFFFF}Lütfen yeni isminizi girin (Ad_Soyad formatýnda olmalýdýr):\n{ff0022}Not: {FFFFFF}Ýsminizi deðiþtirdikten sonra IC siciliniz sýfýrlanýr.", "Devam", "Vazgeç");
	    }
	    if(SoyadKilitlimi(GetPlayerLastName(playerid, inputtext, 0)))
	    {
	        HataMesajGonder(playerid, "Yazdýðýnýz soyad kilitlenmiþ.");
	        return Dialog_Show(playerid, oocmisimdegistir, DIALOG_STYLE_INPUT, "Ýsim Deðiþtir", "{ff0022}» {FFFFFF}Lütfen yeni isminizi girin (Ad_Soyad formatýnda olmalýdýr):\n{ff0022}Not: {FFFFFF}Ýsminizi deðiþtirdikten sonra IC siciliniz sýfýrlanýr.", "Devam", "Vazgeç");
	    }
	    if(!IsimKontrol(inputtext))
	    {
	        HataMesajGonder(playerid, "Bu isim baþkasý tarafýndan kullanýlmaktadýr.");
	        return Dialog_Show(playerid, oocmisimdegistir, DIALOG_STYLE_INPUT, "Ýsim Deðiþtir", "{ff0022}» {FFFFFF}Lütfen yeni isminizi girin (Ad_Soyad formatýnda olmalýdýr):\n{ff0022}Not: {FFFFFF}Ýsminizi deðiþtirdikten sonra IC siciliniz sýfýrlanýr.", "Devam", "Vazgeç");
	    }
	    SetPVarString(playerid, "IsimChange", inputtext);
	    Dialog_Show(playerid, oocmcinsiyetdegistir, DIALOG_STYLE_LIST, "Cinsiyet Deðiþtir", "Erkek\nKadýn", "Devam", "Geri");
	}
	return 1;
}
Dialog:oocmcinsiyetdegistir(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    DeletePVar(playerid, "IsimChange");
	    Dialog_Show(playerid, oocmisimdegistir, DIALOG_STYLE_INPUT, "Ýsim Deðiþtir", "{ff0022}» {FFFFFF}Lütfen yeni isminizi girin (Ad_Soyad formatýnda olmalýdýr):\n{ff0022}Not: {FFFFFF}Ýsminizi deðiþtirdikten sonra IC siciliniz sýfýrlanýr.", "Devam", "Vazgeç");
	}
	else
	{
	    new ad[24];
	    GetPVarString(playerid, "IsimChange", ad, sizeof(ad));
	    if((PlayerData[playerid][pHapisSure] > 0 && PlayerData[playerid][pCK] == 1 && strcmp(ad, Player_GetName(playerid), false) != 0) || PlayerData[playerid][pHapis] == 1 && PlayerData[playerid][pHapisSure] > 50)
	    {
	        PlayerData[playerid][pCK] = 0;
	        format(PlayerData[playerid][pHapisSebep], 50, "");
	        PlayerData[playerid][pHapisSure] = 1;
	    }
	    PlayerData[playerid][pCinsiyet] = listitem+1;
	    ChangeName(playerid, ad);
	    PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	    IC_Sicil_Reset(playerid);
	    PlayerData[playerid][pAranma] = 0;
	    SetPlayerWantedLevel(playerid, 0);
	    DeletePVar(playerid, "IsimChange");
	    MesajGonder(playerid, "%d TL ödeyerek karakter adýnýz baþarýyla '%s' olarak deðiþtirildi.", GetPVarInt(playerid, "UrunFiyat"), ad);
	    DeletePVar(playerid, "UrunFiyat");
	    Oyuncu_Kaydet(playerid);
	}
	return 1;
}
stock IsPlayerSpawnedEx(playerid)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
        return 0;

    return (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && GetPlayerState(playerid) != PLAYER_STATE_NONE && GetPlayerState(playerid) != PLAYER_STATE_WASTED);
}
stock NumaraKontrol(numara)
{
	new query[100];
	format(query, sizeof(query), "SELECT null FROM `oyuncular` WHERE `Telefon` = '%d'", numara);
	new Cache:sawyer = mysql_query(baglanti, query);
	new rows;
	cache_get_row_count(rows);
	cache_delete(sawyer);
	if(rows) return 1;
	return 0;
}
stock IC_Sicil_Reset(playerid)
{
	new query[124];
	format(query, sizeof(query), "DELETE FROM `icsicil` WHERE `playersqlid` = '%d'", PlayerData[playerid][pID]);
	mysql_query(baglanti, query, false);
	return 1;
}
stock ChangeName(playerid, name[])
{
	new oldname[24];
	GetPlayerName(playerid, oldname, sizeof(oldname));
    SetPlayerName(playerid, name);
	new query[200];
    format(query, sizeof(query), "UPDATE `oyuncular` SET `Isim` = '%s' WHERE `Isim` = '%s'", name, oldname);
    mysql_query(baglanti, query, false);
    format(query, sizeof(query), "UPDATE `siparisler` SET `sipariseden` = '%s' WHERE `sqlid` = '%d'", name, PlayerData[playerid][pID]);
    mysql_query(baglanti, query, false);
    format(query, sizeof(query), "INSERT INTO namechanges (`sqlid`, `EskiAd`, `YeniAd`, `Tarih`) VALUES ('%d', '%s', '%s', '%s')", PlayerData[playerid][pID], oldname, name, ReturnDate());
    mysql_query(baglanti, query, false);
    Log_Write("logs/namechange.log","%s adli kisi karakter adini %s olarak degistirdi.",oldname, name);
    return 1;
}
stock IsimKontrol(ad[])
{
	foreach(new i:Player)
	{
	    if(strcmp(Player_GetName(i), ad, false) == 0) return 0;
	}
	new query[100];
	format(query, sizeof(query),"SELECT null FROM `oyuncular` WHERE `Isim` = '%s'", ad);
	mysql_query(baglanti, query);
	new rows;
	cache_get_row_count(rows);
	if(rows) return 0;
	return 1;
}
stock GetUrunBilgi(urunadi[], &fiyat, &durum)
{
	new query[124];
	format(query, sizeof(query), "SELECT * FROM `oocmarket` WHERE `urunadi` = '%s'", urunadi);
	new Cache:sawyer = mysql_query(baglanti, query);
	new rows;
	cache_get_row_count(rows);
	if(rows)
	{
	    cache_get_value_name_int(0, "fiyat", fiyat);
	    cache_get_value_name_int(0, "durum", durum);
	}
	cache_delete(sawyer);
	return 1;
}
Dialog:UrunDuzenle(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(listitem == 0)
	    {
	        if(PlayerData[playerid][pAdmin] < 4) return 1;
	        Dialog_Show(playerid, UrunEkle, DIALOG_STYLE_INPUT, "Ürün Ekle - Ad", "{ff0022}» {FFFFFF}Lütfen eklemek istediðiniz ürünün adýný girin:", "Devam", "Geri");
		}
		if(listitem == 1)
		{
		    if(PlayerData[playerid][pAdmin] < 4) return 1;
		    Dialog_Show(playerid, UrunSil, DIALOG_STYLE_INPUT, "Ürün Sil", "{ff0022}» {FFFFFF}Lütfen silmek istediðiniz ürünün tam adýný girin:", "Devam", "Geri");
		}
		if(listitem == 2)
		{
		    if(PlayerData[playerid][pAdmin] < 4) return 1;
		    Dialog_Show(playerid, FiyatDegistir, DIALOG_STYLE_INPUT, "Ürün Fiyat Deðiþtir", "{ff0022}» {FFFFFF}Lütfen fýyatýný deðiþtirmek istediðiniz ürünün tam adýný girin:", "Devam", "Geri");
		}
		if(listitem == 3)
		{
		    if(PlayerData[playerid][pAdmin] < 4) return 1;
		    Dialog_Show(playerid, UrunDurum, DIALOG_STYLE_INPUT, "Ürün Pasifleþtir/Aktifleþtir", "{ff0022}» {FFFFFF}Lütfen ürünün tam adýný girin:", "Devam", "Geri");
		}
	}
	return 1;
}
Dialog:UrunDurum(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, UrunDuzenle, DIALOG_STYLE_LIST, "Düzenle", "{FFFFFF}Ürün Ekle\n{FFFFFF}Ürün Sil\n{FFFFFF}Ürün Fiyat Düzenle\nÜrün Pasifleþtir/Aktifleþtir", "Seç", "Kapat");
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, UrunDurum, DIALOG_STYLE_INPUT, "Ürün Pasifleþtir/Aktifleþtir", "{ff0022}» {FFFFFF}Lütfen ürünün tam adýný girin:", "Devam", "Geri");
	    SetPVarString(playerid, "UrunAd", inputtext);
	    Dialog_Show(playerid, UrunPasifAktif, DIALOG_STYLE_MSGBOX, "Ürün Pasifleþtir/Aktifleþtir", "Bu ürüne ne yapmak istersiniz?", "Aktifleþtir", "Pasifleþtir");
	}
	return 1;
}
Dialog:UrunPasifAktif(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new urunad[40];
	    GetPVarString(playerid, "UrunAd", urunad, sizeof(urunad));
	    new query[124];
	    format(query, sizeof(query), "UPDATE `oocmarket` SET `durum` = '1' WHERE `urunadi` = '%s'", urunad);
	    mysql_query(baglanti, query, false);
	}
	else
	{
	    new urunad[40];
	    GetPVarString(playerid, "UrunAd", urunad, sizeof(urunad));
	    new query[124];
	    format(query, sizeof(query), "UPDATE `oocmarket` SET `durum` = '0' WHERE `urunadi` = '%s'", urunad);
	    mysql_query(baglanti, query, false);
	}
	return 1;
}
Dialog:FiyatDegistir(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, UrunDuzenle, DIALOG_STYLE_LIST, "Düzenle", "{FFFFFF}Ürün Ekle\n{FFFFFF}Ürün Sil\n{FFFFFF}Ürün Fiyat Düzenle\nÜrün Pasifleþtir/Aktifleþtir", "Seç", "Kapat");
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, FiyatDegistir, DIALOG_STYLE_INPUT, "Ürün Fiyat Deðiþtir", "{ff0022}» {FFFFFF}Lütfen fýyatýný deðiþtirmek istediðiniz ürünün tam adýný girin:", "Devam", "Geri");
	    SetPVarString(playerid, "FiyatDegistir", inputtext);
	    Dialog_Show(playerid, UrunFiyatDegistir, DIALOG_STYLE_INPUT, "Ürün Fiyat Deðiþtir", "Fiyat girin:", "Deðiþtir", "Kapat");
	}
	return 1;
}
Dialog:UrunFiyatDegistir(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, UrunFiyatDegistir, DIALOG_STYLE_INPUT, "Ürün Fiyat Deðiþtir", "Fiyat girin:", "Deðiþtir", "Kapat");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, UrunFiyatDegistir, DIALOG_STYLE_INPUT, "Ürün Fiyat Deðiþtir", "Fiyat girin:", "Deðiþtir", "Kapat");
	    new urunad[40];
	    GetPVarString(playerid, "FiyatDegistir", urunad, sizeof(urunad));
	    new query[150];
	    format(query, sizeof(query), "UPDATE `oocmarket` SET `fiyat` = '%d' WHERE `urunadi` = '%s'", strval(inputtext), urunad);
	    mysql_query(baglanti, query, false);
	}
	return 1;
}
Dialog:UrunSil(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, UrunDuzenle, DIALOG_STYLE_LIST, "Düzenle", "{FFFFFF}Ürün Ekle\n{FFFFFF}Ürün Sil\n{FFFFFF}Ürün Fiyat Düzenle\nÜrün Pasifleþtir/Aktifleþtir", "Seç", "Kapat");
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, UrunSil, DIALOG_STYLE_INPUT, "Ürün Sil", "{ff0022}» {FFFFFF}Lütfen silmek istediðiniz ürünün tam adýný girin:", "Devam", "Geri");
	    new query[100];
	    format(query, sizeof(query), "DELETE FROM `oocmarket` WHERE `urunadi` = '%s'", inputtext);
	    mysql_query(baglanti, query, false);
	}
	return 1;
}
Dialog:UrunEkle(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, UrunDuzenle, DIALOG_STYLE_LIST, "Düzenle", "{FFFFFF}Ürün Ekle\n{FFFFFF}Ürün Sil\n{FFFFFF}Ürün Fiyat Düzenle\nÜrün Pasifleþtir/Aktifleþtir", "Seç", "Kapat");
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, UrunEkle, DIALOG_STYLE_INPUT, "Ürün Ekle - Ad", "{ff0022}» {FFFFFF}Lütfen eklemek istediðiniz ürünün adýný girin:", "Devam", "Geri");
	    SetPVarString(playerid, "UrunAd", inputtext);
	    Dialog_Show(playerid, UrunEkleFiyat, DIALOG_STYLE_INPUT, "Ürün Ekle - Fiyat", "ff0022}» {FFFFFF}Lütfen ürünün fiyatýný girin:", "Ekle", "Kapat");
	}
	return 1;
}
Dialog:UrunEkleFiyat(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, UrunEkleFiyat, DIALOG_STYLE_INPUT, "Ürün Ekle - Fiyat", "ff0022}» {FFFFFF}Lütfen ürünün fiyatýný girin:", "Ekle", "Kapat");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, UrunEkleFiyat, DIALOG_STYLE_INPUT, "Ürün Ekle - Fiyat", "ff0022}» {FFFFFF}Lütfen ürünün fiyatýný girin:", "Ekle", "Kapat");
	    new query[250], ad[40];
	    GetPVarString(playerid, "UrunAd", ad, sizeof(ad));
	    format(query, sizeof(query), "INSERT INTO `oocmarket` (`urunadi`, `fiyat`, `durum`) VALUES ('%s', '%d', '1')", ad, strval(inputtext));
	    mysql_query(baglanti, query, false);
	    MesajGonder(playerid, "%s adlý ürün eklenmiþtir.", ad);
	}
	return 1;
}
Dialog:BakiyeGonderID(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, BakiyeGonderID, DIALOG_STYLE_INPUT, "Bakiye Gönder", "{ff0022}» {FFFFFF}Lütfen Bakiye göndermek istediðiniz oyuncunun ID'sini girin:", "Devam", "Geri");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, BakiyeGonderID, DIALOG_STYLE_INPUT, "Bakiye Gönder", "{ff0022}» {FFFFFF}Lütfen Bakiye göndermek istediðiniz oyuncunun ID'sini girin:", "Devam", "Geri");
	    new id = strval(inputtext);
	    if(!IsPlayerConnected(id))
	    {
	        HataMesajGonder(playerid, "Oyuncu oyunda deðil.");
	        return Dialog_Show(playerid, BakiyeGonderID, DIALOG_STYLE_INPUT, "Bakiye Gönder", "{ff0022}» {FFFFFF}Lütfen Bakiye göndermek istediðiniz oyuncunun ID'sini girin:", "Devam", "Geri");
	    }
	    if(id == playerid)
	    {
	        HataMesajGonder(playerid, "Kendinize bakiye gönderemezsiniz.");
	        return Dialog_Show(playerid, BakiyeGonderID, DIALOG_STYLE_INPUT, "Bakiye Gönder", "{ff0022}» {FFFFFF}Lütfen Bakiye göndermek istediðiniz oyuncunun ID'sini girin:", "Devam", "Geri");
	    }
	    SetPVarInt(playerid, "BakiyeID", id);
	    Dialog_Show(playerid, BakiyeGonder, DIALOG_STYLE_INPUT, "Bakiye Gönder","{ff0022}» {FFFFFF}Lütfen göndermek istediðiniz bakiye miktarýný girin:", "Gönder", "Geri");
	}
	return 1;
}
Dialog:BakiyeGonder(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, BakiyeGonderID, DIALOG_STYLE_INPUT, "Bakiye Gönder", "{ff0022}» {FFFFFF}Lütfen Bakiye göndermek istediðiniz oyuncunun ID'sini girin:", "Devam", "Geri");
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, BakiyeGonder, DIALOG_STYLE_INPUT, "Bakiye Gönder","{ff0022}» {FFFFFF}Lütfen göndermek istediðiniz bakiye miktarýný girin:", "Gönder", "Geri");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, BakiyeGonder, DIALOG_STYLE_INPUT, "Bakiye Gönder","{ff0022}» {FFFFFF}Lütfen göndermek istediðiniz bakiye miktarýný girin:", "Gönder", "Geri");
	    if(strval(inputtext) <= 0 || strval(inputtext) > 100)
	    {
	        HataMesajGonder(playerid, "Minimum 1, maksimum 100 TL gönderebilirsiniz!");
	        return Dialog_Show(playerid, BakiyeGonder, DIALOG_STYLE_INPUT, "Bakiye Gönder","{ff0022}» {FFFFFF}Lütfen göndermek istediðiniz bakiye miktarýný girin:", "Gönder", "Geri");
		}
		if(PlayerData[playerid][pBakiye] < strval(inputtext))
		{
		    HataMesajGonder(playerid, "O kadar bakiyeniz yok!");
		    return Dialog_Show(playerid, BakiyeGonder, DIALOG_STYLE_INPUT, "Bakiye Gönder","{ff0022}» {FFFFFF}Lütfen göndermek istediðiniz bakiye miktarýný girin:", "Gönder", "Geri");
		}
		new id = GetPVarInt(playerid, "BakiyeID");
		if(!OyundaDegil(id))
		{
		    HataMesajGonder(playerid, "Bakiye göndereceðiniz kiþi oyundan çýktý.");
		    return 1;
		}
		PlayerData[playerid][pBakiye] -= strval(inputtext);
		PlayerData[id][pBakiye] += strval(inputtext);
		MesajGonder(playerid, "%s(%d) adlý kiþiye %d TL bakiye gönderdiniz.", ReturnName(id, 0), id, strval(inputtext));
		MesajGonder(id, "%s(%d) adlý kiþi size %d TL bakiye gönderdi.", ReturnName(playerid, 0), playerid, strval(inputtext));
		DeletePVar(playerid, "BakiyeID");
	}
	return 1;
}
Dialog:GarajGiris(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new id = GetPVarInt(playerid, "Garaj");
	    if(GarageData[id][gExists])
	    {
	        if(isnull(inputtext)) return Dialog_Show(playerid, GarajGiris, DIALOG_STYLE_INPUT, "Garaj Þifre", "Bu garaj þifreli, lütfen þifreyi giriniz:", "Tamam", "Kapat");
	        if(!strcmp(GarageData[id][gSifre], inputtext, false))
	        {
	            if(!IsPlayerInAnyVehicle(playerid))
             	{
              		SetPlayerPos(playerid,GarageInteriors[GarageData[id][gInterior]][intX],GarageInteriors[GarageData[id][gInterior]][intY],GarageInteriors[GarageData[id][gInterior]][intZ]);
                	SetPlayerInterior(playerid,GarageInteriors[GarageData[id][gInterior]][intID]);
                 	SetPlayerVirtualWorld(playerid, id+23);
                  	SetPlayerFacingAngle(playerid,GarageInteriors[GarageData[id][gInterior]][intA]);
                   	SetCameraBehindPlayer(playerid);
                   	PlayerData[playerid][pGarage] = id;
              	}
              	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
              	{
              	    new vehicleid = GetPlayerVehicleID(playerid);
              	    SetVehiclePos(vehicleid, GarageInteriors[GarageData[id][gInterior]][intX],GarageInteriors[GarageData[id][gInterior]][intY],GarageInteriors[GarageData[id][gInterior]][intZ]);
              	    SetVehicleVirtualWorld(vehicleid, id+23);
              	    LinkVehicleToInteriorEx(vehicleid, GarageInteriors[GarageData[id][gInterior]][intID]);
              	    SetVehicleZAngle(vehicleid, GarageInteriors[GarageData[id][gInterior]][intA]);
              	    SetPlayerPos(playerid,GarageInteriors[GarageData[id][gInterior]][intX],GarageInteriors[GarageData[id][gInterior]][intY],GarageInteriors[GarageData[id][gInterior]][intZ]);
                	SetPlayerInterior(playerid,GarageInteriors[GarageData[id][gInterior]][intID]);
                 	SetPlayerVirtualWorld(playerid, id+23);
                  	SetPlayerFacingAngle(playerid,GarageInteriors[GarageData[id][gInterior]][intA]);
                   	SetCameraBehindPlayer(playerid);
              	    PutPlayerInVehicle(playerid, vehicleid, 0);
              	    ObjelerYukleniyor(playerid);
              	    PlayerData[playerid][pGarage] = id;
              	    foreach(new i:Player)
              	    {
              	        if(IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) != 128 && GetPlayerVehicleSeat(i) != 0)
						{
						    SetPlayerPos(i,GarageInteriors[GarageData[id][gInterior]][intX],GarageInteriors[GarageData[id][gInterior]][intY],GarageInteriors[GarageData[id][gInterior]][intZ]);
                			SetPlayerInterior(i,GarageInteriors[GarageData[id][gInterior]][intID]);
                 			SetPlayerVirtualWorld(i, id+23);
                  			SetPlayerFacingAngle(i,GarageInteriors[GarageData[id][gInterior]][intA]);
                   			SetCameraBehindPlayer(i);
                   			PutPlayerInVehicle(i, vehicleid, GetPlayerVehicleSeat(i));
                   			ObjelerYukleniyor(i);
                   			PlayerData[i][pGarage] = id;
              	        }
              	    }
              	}
              	DeletePVar(playerid, "Garaj");
	        }
	        else
	        {
	            HataMesajGonder(playerid, "Hatalý þifre girdiniz!");
	            return Dialog_Show(playerid, GarajGiris, DIALOG_STYLE_INPUT, "Garaj Þifre", "Bu garaj þifreli, lütfen þifreyi giriniz:", "Tamam", "Kapat");
	        }
	    }
	}
	return 1;
}
Dialog:GarajAyarlar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new id = GetPVarInt(playerid, "GarajID");
	    if(listitem == 0)
	    {
	        if(GarageData[id][gKilit] == 1) GarageData[id][gKilit] = 0;
	        else GarageData[id][gKilit] = 1;

	        Garaj_Yenile(id);
	        Garaj_Kaydet(id);
	        callcmd::garaj(playerid);
	    }
	    if(listitem == 1)
	    {
	        Dialog_Show(playerid, GarajSifre, DIALOG_STYLE_INPUT, "Garaj ~ Þifre", "{FFFFFF}Lütfen garajýnýz için bir þifre belirleyin:\n\n{FFBF00}[Ýnfo] {FFFFFF}Þifre yerine 'Yok' (týrnaksýz) yazarsanýz garaj þifresiz olur.", "Deðiþtir", "Geri");
	    }
	    if(listitem == 2)
	    {
	        if(GarageData[id][gParkDurum] == 1) GarageData[id][gParkDurum] = 0;
	        else GarageData[id][gParkDurum] = 1;

	        Garaj_Yenile(id);
	        Garaj_Kaydet(id);
	        callcmd::garaj(playerid);
	    }
	    if(listitem == 3)
	    {
	        Garaj_AracListesi(playerid, id);
		}
	}
	return 1;
}
stock Garaj_AracListesi(playerid, id)
{
	new str[1000], baslik[60], sayi;
	for(new i; i<MAX_ARAC; i++) if(AracInfo[i][aracExists] && AracInfo[i][aracGaraj] == id)
	{
	    ParkedilenAraclar[playerid][sayi] = i;
	    sayi++;
	    format(str, sizeof(str), "%s{FFFFFF}%s (ID: %d)\n", str, ReturnVehicleModelName(AracInfo[i][aracModel]), i);

	}
	if(sayi == 0) return HataMesajGonder(playerid, "Park edilmiþ araç yok.");
	format(baslik, sizeof(baslik), "Parkedilen Araçlar {f44242}(%d/%d)", sayi, GarageData[id][gAracLimit]);
	Dialog_Show(playerid, GarajAraclar, DIALOG_STYLE_LIST, baslik, str, "Garajdan At", "Geri");
	return 1;
}
Dialog:GarajAraclar(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::garaj(playerid);
	if(response)
	{
	    new aracid = ParkedilenAraclar[playerid][listitem];
	    new garajid = GetPVarInt(playerid, "GarajID");
	    if(AracInfo[aracid][aracExists] && AracInfo[aracid][aracGaraj] == garajid)
	    {
	        SetVehiclePos(AracInfo[aracid][aracVehicle], GarageData[garajid][gPos][0]+1, GarageData[garajid][gPos][1]+1, GarageData[garajid][gPos][2]);
	        LinkVehicleToInteriorEx(AracInfo[aracid][aracVehicle], 0);
	        SetVehicleVirtualWorld(AracInfo[aracid][aracVehicle], GarageData[garajid][gVw]);
	        AracInfo[aracid][aracPos][0] = GarageData[garajid][gPos][0]+1;
	        AracInfo[aracid][aracPos][1] = GarageData[garajid][gPos][1]+1;
	        AracInfo[aracid][aracPos][2] = GarageData[garajid][gPos][2]+1;
	        AracInfo[aracid][aracGaraj] = -1;
	        AracInfo[aracid][aracInterior] = 0;
	        AracInfo[aracid][aracWorld] = GarageData[garajid][gVw];
	        MesajGonder(playerid, "%s model araç garajdan atýldý.", ReturnVehicleModelName(AracInfo[aracid][aracModel]));
	        Garaj_AracListesi(playerid, garajid);
	    }
	}
	return 1;
}
Dialog:GarajSifre(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::garaj(playerid);
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, GarajSifre, DIALOG_STYLE_INPUT, "Garaj ~ Þifre", "{FFFFFF}Lütfen garajýnýz için bir þifre belirleyin:\n\n{FFBF00}[Ýnfo] {FFFFFF}Þifre yerine 'Yok' (týrnaksýz) yazarsanýz garaj þifresiz olur.", "Deðiþtir", "Geri");
	    if(strlen(inputtext) > 30) return Dialog_Show(playerid, GarajSifre, DIALOG_STYLE_INPUT, "Garaj ~ Þifre", "{FFFFFF}Lütfen garajýnýz için bir þifre belirleyin:\n\n{FFBF00}[Ýnfo] {FFFFFF}Þifre yerine 'Yok' (týrnaksýz) yazarsanýz garaj þifresiz olur.", "Deðiþtir", "Geri");

	    format(GarageData[GetPVarInt(playerid, "GarajID")][gSifre], 30, inputtext);
	    Garaj_Kaydet(GetPVarInt(playerid, "GarajID"));
	    callcmd::garaj(playerid);
	}
	return 1;
}
Dialog:LSPD(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
	            KisiselCezalar(playerid);
	        }
	        case 1:
	        {
	            Dialog_Show(playerid, AracCezaPlaka, DIALOG_STYLE_INPUT, "{FFFFFF}Araç Cezalarý", "Lütfen cezasýný ödemek istediðiniz aracýn plakasýný girin:", "Devam", "Kapat");
	        }
	        case 2:
	        {
	            new str[1000], sayi;
	            format(str, sizeof(str), "ID\tAraç Model\tCeza\n");
	            for(new i; i<MAX_ARAC; i++) if(AracInfo[i][aracExists] && AracInfo[i][aracSahip] == PlayerData[playerid][pID] && AracInfo[i][aracBaglandi] == 1)
	            {
	                sayi++;
	                format(str, sizeof(str), "%s%d\t%s\t{04ff00}%s\n", str, i, ReturnVehicleModelName(AracInfo[i][aracModel]), FormatNumber(AracInfo[i][aracBaglandiCeza]));
	            }
	            if(sayi == 0) return HataMesajGonder(playerid, "Haczedilen aracýnýz yok.");
	            Dialog_Show(playerid, HaczedilenAraclar, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Haczedilen Araçlarým", str, "Serbest Býrak", "Kapat");
	        }
	        case 3:
	        {
	            Dialog_Show(playerid, KefaletOde, DIALOG_STYLE_INPUT, "{FFFFFF}Kefalet Öde", "Lütfen kefaletini ödemek istediðiniz kiþinin ID'sini girin:", "Devam", "Kapat");
	        }
	        case 4:
	        {
	            if(!spamProtect(playerid, "MemurCagir", 60)) return HataMesajGonder(playerid, "Tekrar memur çaðýrmak için 1 dakika beklemelisiniz.");
	        	SendBirlikMessageEx(BIRLIK_LSPD, COLOR_RADIO, "** (Telsiz) %s adlý kiþi lobiye Memur talep ediyor.", ReturnName(playerid, 0));
	        	MesajGonder(playerid, "Memur çaðýrdýnýz.");
	        }
	    }
	}
	return 1;
}
Dialog:AracCezaPlaka(playerid, response, listitem, inputtext[])
{
	if(response)
	{
    	if(isnull(inputtext)) return Dialog_Show(playerid, AracCezaPlaka, DIALOG_STYLE_INPUT, "{FFFFFF}Araç Cezalarý", "Lütfen cezasýný ödemek istediðiniz aracýn plakasýný girin:", "Devam", "Kapat");
	    new id = -1;
	    for(new i; i != MAX_ARAC; i++)
	    {
	        if(AracInfo[i][aracExists] && AracInfo[i][aracTip] == 4 && AracInfo[i][aracSahip] > 0)
	        {
	            if(strcmp(AracInfo[i][aracPlaka], inputtext, false) == 0)
	            {
	                id = i;
	                break;
				}
			}
		}
		if(id == -1)
		{
		    HataMesajGonder(playerid, "Geçersiz plaka girdiniz.");
		    return Dialog_Show(playerid, AracCezaPlaka, DIALOG_STYLE_INPUT, "{FFFFFF}Araç Cezalarý", "Lütfen cezasýný ödemek istediðiniz aracýn plakasýný girin:", "Devam", "Kapat");
		}
		if(AracInfo[id][aracTicket] == 0)
		{
		    HataMesajGonder(playerid, "Bu aracýn cezasý yok.");
		    return Dialog_Show(playerid, AracCezaPlaka, DIALOG_STYLE_INPUT, "{FFFFFF}Araç Cezalarý", "Lütfen cezasýný ödemek istediðiniz aracýn plakasýný girin:", "Devam", "Kapat");
		}
		SetPVarInt(playerid, "TicketID", id);
		Dialog_Show(playerid, AracCezaOde, DIALOG_STYLE_MSGBOX, "Araç Ceza Öde", "{FFFFFF}Bu aracýn {04ff00}%s {FFFFFF}cezasý bulunmaktadýr. Ödemek istiyor musunuz?", "Öde", "Iptal", FormatNumber(AracInfo[id][aracTicket]));
	}
	return 1;
}
Dialog:AracCezaOde(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new id = GetPVarInt(playerid, "TicketID");
	    if(AracInfo[id][aracTicket] > PlayerData[playerid][pCash]) return HataMesajGonder(playerid, "Yeterli paranýz yok.");
	    ParaVer(playerid, -AracInfo[id][aracTicket]);
	    MesajGonder(playerid, "Aracýn %s miktar cezasýný ödediniz.", FormatNumber(AracInfo[id][aracTicket]));
	    AracInfo[id][aracTicket] = 0;
	    AracInfo[id][aracTicketTime] = 0;
	    AracInfo[id][aracElKonuldu] = 0;
	    Arac_Kaydet(id);
	    DeletePVar(playerid, "TicketID");
	}
	return 1;
}
Dialog:KefaletOde(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(isnull(inputtext) || !IsNumeric(inputtext) || playerid == strval(inputtext)) return Dialog_Show(playerid, KefaletOde, DIALOG_STYLE_INPUT, "{FFFFFF}Kefalet Öde", "Lütfen kefaletini ödemek istediðiniz kiþinin ID'sini girin:", "Devam", "Kapat");
	    new id = strval(inputtext);
	    if(!OyundaDegil(id))
	    {
	        HataMesajGonder(playerid, "Oyuncu oyunda deðil.");
	        return Dialog_Show(playerid, KefaletOde, DIALOG_STYLE_INPUT, "{FFFFFF}Kefalet Öde", "Lütfen kefaletini ödemek istediðiniz kiþinin ID'sini girin:", "Devam", "Kapat");
	    }
	    if(PlayerData[id][pHapis] == 0 || PlayerData[id][pHapisSure]/60 < 3)
	    {
	        HataMesajGonder(playerid, "Bu oyuncu IC hapiste deðil veya hapisten çýkmasýna az kalmýþ.");
	        return Dialog_Show(playerid, KefaletOde, DIALOG_STYLE_INPUT, "{FFFFFF}Kefalet Öde", "Lütfen kefaletini ödemek istediðiniz kiþinin ID'sini girin:", "Devam", "Kapat");
	    }
	    SetPVarInt(playerid, "KefaletID", strval(inputtext));
	    Dialog_Show(playerid, KefaletOde2, DIALOG_STYLE_MSGBOX, "{FFFFFF}Kefalet Öde", "{FFFFFF}%s adlý kiþiyi hapisten çýkarmak istiyorsanýz {04ff00}$%d {FFFFFF}ödemelisiniz. Kabul ediyor musunuz?", "Evet", "Hayýr", ReturnName(id, 0), floatround(PlayerData[id][pHapisSure]/60*500));
	}
	return 1;
}
Dialog:KefaletOde2(playerid, response, listitem, inputtext[])
{
	if(!response) return DeletePVar(playerid, "KefaletID");
	if(response)
	{
	    new id = GetPVarInt(playerid, "KefaletID");
	    if(!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu oyunda deðil.");
	    if(PlayerData[id][pHapis] == 0 || PlayerData[id][pHapisSure]/60 < 3) return HataMesajGonder(playerid, "Bu oyuncu IC hapiste deðil veya hapisten çýkmasýna az kalmýþ.");
	    if(PlayerData[playerid][pCash] < floatround(PlayerData[id][pHapisSure]/60*500)) return HataMesajGonder(playerid, "Yeterli paranýz yok.");
	    new miktar = floatround(PlayerData[id][pHapisSure]/60*500);
	    ParaVer(playerid, -miktar);
	    MesajGonder(playerid, "%s adlý kiþiyi {04ff00}%s {FFFFFF} kefalet ödeyerek çýkardýnýz.", ReturnName(id, 0), FormatNumber(miktar));
	    MesajGonder(id, "%s adlý kiþi {04ff00}%s {FFFFFF}kefalet ödeyerek sizi hapisten çýkardý.", ReturnName(playerid, 0), FormatNumber(miktar));
	    PlayerData[id][pHapis] = 0;
	    PlayerData[id][pHapisSure] = 0;
		SetPlayerPos(id, 1464.9292,-1690.9778,-70.0371);
  		SetPlayerInterior(id, 0);
    	SetPlayerVirtualWorld(id, 0);
     	SetCameraBehindPlayer(id);
      	ObjelerYukleniyor(id);
  		PlayerTextDrawHide(id, HapisTD[id]);

	}
	return 1;
}
Dialog:HaczedilenAraclar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new id = strval(inputtext);
	    if(AracInfo[id][aracExists] && AracInfo[id][aracSahip] == PlayerData[playerid][pID] && AracInfo[id][aracBaglandi] == 1)
	    {
	        if(AracInfo[id][aracBaglandiCeza] > PlayerData[playerid][pCash]) return HataMesajGonder(playerid, "Yeterli paranýz yok.");
	        ParaVer(playerid, -AracInfo[id][aracBaglandiCeza]);
	        MesajGonder(playerid, "%s model aracýnýzý {04ff00}%s {FFFFFF}ödeyerek serbest býraktýnýz. (/araclarim)",ReturnVehicleModelName(AracInfo[id][aracModel]), FormatNumber(AracInfo[id][aracBaglandiCeza]));
	        AracInfo[id][aracBaglandi] = 0;
	        AracInfo[id][aracBaglandiCeza] = 0;
	        Arac_Kaydet(id);
	    }
	}
	return 1;
}
stock KisiselCezalar(playerid)
{
	new str[1000], sayi = 0;
	strcat(str, "Ekleyen\tSebep\tMiktar\tTarih\n");
	for(new i; i<MAX_PLAYER_TICKETS; i++) if(TicketData[playerid][i][ticketExists])
	{
	    CezaListele[playerid][sayi] = i;
	    sayi++;
	    format(str, sizeof(str), "%s%s\t%.20s\t{04ff00}%s\t%s\n", str, TicketData[playerid][i][ticketMemur], TicketData[playerid][i][ticketReason], FormatNumber(TicketData[playerid][i][ticketFee]), TicketData[playerid][i][ticketDate]);
	}
	if(sayi == 0) return HataMesajGonder(playerid, "Cezanýz yok.");
	Dialog_Show(playerid, KisiselCezalar, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Kiþisel Cezalar", str, "Öde", "Geri");
	return 1;
}
Dialog:KisiselCezalar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new id = CezaListele[playerid][listitem];
	    if(TicketData[playerid][id][ticketExists])
	    {
	        if(TicketData[playerid][id][ticketFee] > PlayerData[playerid][pCash]) return HataMesajGonder(playerid, "Bu cezayý ödemek için yeterli paranýz yok.");
	        ParaVer(playerid, -TicketData[playerid][id][ticketFee]);
	        MesajGonder(playerid, "{04ff00}%s {FFFFFF}miktar cezayý ödediniz.", FormatNumber(TicketData[playerid][id][ticketFee]));
	        Ticket_Remove(playerid, id);
	    }
	}
	return 1;
}
Dialog:HukumetBinasi(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(listitem == 0)
	    {
	        Dialog_Show(playerid, AracVergi, DIALOG_STYLE_INPUT, "Araç Plaka", "{E74C3C}» {FFFFFF}Lütfen vergisini ödemek istediðiniz aracýn plakasýný girin:", "Devam", "Geri");
	    }
	    if(listitem == 1)
	    {
	        Dialog_Show(playerid, IsyeriVergi, DIALOG_STYLE_INPUT, "Ýþyeri ID", "{E74C3C}» {FFFFFF}Lütfen vergisini ödemek istediðiniz iþyerinin ID'sini girin:", "Devam", "Geri");
	    }
	    if(listitem == 2)
	    {
	        Dialog_Show(playerid, EvVergi, DIALOG_STYLE_INPUT, "Ev ID", "{E74C3C}» {FFFFFF}Lütfen vergisini ödemek istediðiniz evin ID'sini girin:", "Devam", "Geri");
	    }
	    if(listitem == 3)
	    {
			if(PlayerData[playerid][pPartner] < 1) return HataMesajGonder(playerid, "Evli deðilsiniz.");
			if(PlayerData[playerid][pCash] < 1500) return HataMesajGonder(playerid, "Boþanmak için yeterli paranýz yok. ($1,500)");
			Dialog_Show(playerid, Bosanma, DIALOG_STYLE_MSGBOX, "Boþanma", "{E74C3C}» {FFFFFF}$1,500 ödeyerek eþinizden boþanmayý onaylýyor musunuz?", "Evet", "Hayýr");
	    }
	    if(listitem == 4)
	    {
	        if(PlayerData[playerid][pMaas] < 1) return HataMesajGonder(playerid, "Maaþýnýz yok.");
	        Dialog_Show(playerid, MaasCek, DIALOG_STYLE_INPUT, "Maaþ Çek", "{E74C3C}» {FFFFFF}Lütfen çekmek istediðiniz maaþ miktarýný girin:", "Çek", "Geri");
	    }
	    if (listitem == 5)
	    {
 				new string[1000],count;
				strcat(string, "ID\tModel\tPlaka\tDurum\n");
				for (new i = 0; i < MAX_ARAC; i ++) if (AracInfo[i][aracExists] && AracInfo[i][aracSahip] == PlayerData[playerid][pID])
				{
				    format(string, sizeof(string), "%s%d\t%s\t%s\t%s\n",string, AracInfo[i][aracVehicle], ReturnVehicleModelName(AracInfo[i][aracModel]),AracInfo[i][aracPlaka],(AracInfo[i][aracDisplay]) ? ("{2ECC71}Aktif") : ("{FF0000}Pasif"));
				    count++;
				}
				if (!count) return HataMesajGonder(playerid, "Sahip olduðunuz araç yok.");

				Dialog_Show(playerid, AracSigortaYap, DIALOG_STYLE_TABLIST_HEADERS,  "{00FF80}Araçlarýnýz", string, "Deðiþtir", "Kapat");
	    }
	}
	return 1;
}
Dialog:Bosanma(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(PlayerData[playerid][pPartner] > 0 && PlayerData[playerid][pCash] >= 1500)
	    {
	        new query[100];
	        ParaVer(playerid, -1500);
	        PlayerData[playerid][pPartner] = 0;
	        format(query, sizeof(query), "UPDATE `oyuncular` SET `Partner` = '0' WHERE `Partner` = '%d'", PlayerData[playerid][pID]);
	        mysql_query(baglanti, query, false);
	        foreach (new i : Player) if (PlayerData[i][pPartner] == PlayerData[playerid][pID])
	        {
            	PlayerData[i][pPartner] = 0;
            }
            MesajGonder(playerid, "$1,500 ödeyerek eþinizden boþandýnýz.");
	    }
	}
	return 1;
}
Dialog:MaasCek(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, HukumetBinasi, DIALOG_STYLE_LIST, "{FFFFFF}Hükümet Binasý", "{FFFFFF}Araç Vergisi Sorgula\n{FFFFFF}Ýþyeri Vergisi Sorgula\n{FFFFFF}Ev Vergisi Sorgula\n{FFFFFF}Boþanma Ýþlemleri\n{FFFFFF}Maaþ Çek {00ff15}(%s)", "Seç", "Kapat", FormatNumber(PlayerData[playerid][pMaas]));
	if(response)
	{
	    if(isnull(inputtext) || !IsNumeric(inputtext)) return Dialog_Show(playerid, MaasCek, DIALOG_STYLE_INPUT, "Maaþ Çek", "{E74C3C}» {FFFFFF}Lütfen çekmek istediðiniz maaþ miktarýný girin:", "Çek", "Geri");
	    if(strval(inputtext) < 1) return Dialog_Show(playerid, MaasCek, DIALOG_STYLE_INPUT, "Maaþ Çek", "{E74C3C}» {FFFFFF}Lütfen çekmek istediðiniz maaþ miktarýný girin:", "Çek", "Geri");
	    if(strval(inputtext) > PlayerData[playerid][pMaas])
	    {
	        HataMesajGonder(playerid, "O kadar maaþýnýz yok.");
	        return Dialog_Show(playerid, MaasCek, DIALOG_STYLE_INPUT, "Maaþ Çek", "{E74C3C}» {FFFFFF}Lütfen çekmek istediðiniz maaþ miktarýný girin:", "Çek", "Geri");
	    }
	    PlayerData[playerid][pMaas] -= strval(inputtext);
	    ParaVer(playerid, strval(inputtext));
	    MesajGonder(playerid, "Maaþýnýzdan {04ff00}%s {FFFFFF}miktar para çektiniz.", FormatNumber(strval(inputtext)));
	}
	return 1;
}
Dialog:EvVergi(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, HukumetBinasi, DIALOG_STYLE_LIST, "{FFFFFF}Hükümet Binasý", "{FFFFFF}Araç Vergisi Sorgula\n{FFFFFF}Ýþyeri Vergisi Sorgula\n{FFFFFF}Ev Vergisi Sorgula\n{FFFFFF}Boþanma Ýþlemleri\n{FFFFFF}Maaþ Çek {00ff15}(%s)", "Seç", "Kapat", FormatNumber(PlayerData[playerid][pMaas]));
	if(response)
	{
	    if(isnull(inputtext) || !IsNumeric(inputtext)) return Dialog_Show(playerid, EvVergi, DIALOG_STYLE_INPUT, "Ev ID", "{E74C3C}» {FFFFFF}Lütfen vergisini ödemek istediðiniz evin ID'sini girin:", "Devam", "Geri");
	    if ((strval(inputtext) < 0 || strval(inputtext) >= MAX_EV) || !house_info[strval(inputtext)][evExists])
	    {
	        HataMesajGonder(playerid, "Hatalý ev ID'si girdiniz.");
	        return Dialog_Show(playerid, EvVergi, DIALOG_STYLE_INPUT, "Ev ID", "{E74C3C}» {FFFFFF}Lütfen vergisini ödemek istediðiniz evin ID'sini girin:", "Devam", "Geri");
	    }
	    if(house_info[strval(inputtext)][evVergi] < 1)
	    {
	        HataMesajGonder(playerid, "Bu evin vergisi yok.");
            return Dialog_Show(playerid, EvVergi, DIALOG_STYLE_INPUT, "Ev ID", "{E74C3C}» {FFFFFF}Lütfen vergisini ödemek istediðiniz evin ID'sini girin:", "Devam", "Geri");
	    }
	    SetPVarInt(playerid, "evID", strval(inputtext));
	    Dialog_Show(playerid, EvVergiOde, DIALOG_STYLE_MSGBOX, "Ev Vergi Öde", "{FFFFFF}'%s' adlý evin {04ff00}%s {FFFFFF}vergisi bulunmaktadýr. Ödemek istiyor musunuz?", "Öde", "Geri", house_info[strval(inputtext)][evIsim], FormatNumber(house_info[strval(inputtext)][evVergi]));
	}
	return 1;
}
Dialog:EvVergiOde(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new id = GetPVarInt(playerid, "evID");
	    if(house_info[id][evVergi] > PlayerData[playerid][pCash]) return HataMesajGonder(playerid, "Yeterli paranýz yok.");
	    ParaVer(playerid, -house_info[id][evVergi]);
	    MesajGonder(playerid, "%s adlý evin {04ff00}%s {FFFFFF}miktar vergisini ödediniz.", house_info[id][evIsim], FormatNumber(house_info[id][evVergi]));
	    house_info[id][evVergi] = 0;
	    house_info[id][evVergiSure] = 0;
	    Ev_Kaydet(id);
	    DeletePVar(playerid, "evID");
	}
	return 1;
}
Dialog:IsyeriVergi(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, HukumetBinasi, DIALOG_STYLE_LIST, "{FFFFFF}Hükümet Binasý", "{FFFFFF}Araç Vergisi Sorgula\n{FFFFFF}Ýþyeri Vergisi Sorgula\n{FFFFFF}Ev Vergisi Sorgula\n{FFFFFF}Boþanma Ýþlemleri\n{FFFFFF}Maaþ Çek {00ff15}(%s)", "Seç", "Kapat", FormatNumber(PlayerData[playerid][pMaas]));
	if(response)
	{
	    if(isnull(inputtext) || !IsNumeric(inputtext)) return Dialog_Show(playerid, IsyeriVergi, DIALOG_STYLE_INPUT, "Ýþyeri ID", "{E74C3C}» {FFFFFF}Lütfen vergisini ödemek istediðiniz iþyerinin ID'sini girin:", "Devam", "Geri");
	    if ((strval(inputtext) < 0 || strval(inputtext) >= MAX_ISYERI) || !Isyeri[strval(inputtext)][isyeriExists])
	    {
	        HataMesajGonder(playerid, "Hatalý iþyeri ID'si girdiniz.");
	        return Dialog_Show(playerid, IsyeriVergi, DIALOG_STYLE_INPUT, "Ýþyeri ID", "{E74C3C}» {FFFFFF}Lütfen vergisini ödemek istediðiniz iþyerinin ID'sini girin:", "Devam", "Geri");
	    }
	    if(Isyeri[strval(inputtext)][isyeriVergi] < 1)
	    {
	        HataMesajGonder(playerid, "Bu iþyerinin vergisi yok.");
            return Dialog_Show(playerid, IsyeriVergi, DIALOG_STYLE_INPUT, "Ýþyeri ID", "{E74C3C}» {FFFFFF}Lütfen vergisini ödemek istediðiniz iþyerinin ID'sini girin:", "Devam", "Geri");
	    }
	    SetPVarInt(playerid, "IsyeriID", strval(inputtext));
	    Dialog_Show(playerid, IsyeriVergiOde, DIALOG_STYLE_MSGBOX, "Ýþyeri Vergi Öde", "{FFFFFF}'%s' adlý iþyerinin {04ff00}%s {FFFFFF}vergisi bulunmaktadýr. Ödemek istiyor musunuz?", "Öde", "Geri", Isyeri[strval(inputtext)][isyeriName], FormatNumber(Isyeri[strval(inputtext)][isyeriVergi]));
	}
	return 1;
}
Dialog:IsyeriVergiOde(playerid, response, listitem, inputtext[])
{
	//if(!response) return Dialog_Show(playerid, IsyeriVergi, DIALOG_STYLE_INPUT, "Ýþyeri ID", "{E74C3C}» {FFFFFF}Lütfen vergisini ödemek istediðiniz iþyerinin ID'sini girin:", "Devam", "Geri");
	if(response)
	{
	    new id = GetPVarInt(playerid, "IsyeriID");
	    if(Isyeri[id][isyeriVergi] > PlayerData[playerid][pCash]) return HataMesajGonder(playerid, "Yeterli paranýz yok.");
	    ParaVer(playerid, -Isyeri[id][isyeriVergi]);
	    MesajGonder(playerid, "%s adlý iþyerinin {04ff00}%s {FFFFFF}miktar vergisini ödediniz.", Isyeri[id][isyeriName], FormatNumber(Isyeri[id][isyeriVergi]));
	    Isyeri[id][isyeriVergi] = 0;
	    Isyeri[id][isyeriVergiSure] = 0;
	    Isyeri_Kaydet(id);
	    DeletePVar(playerid, "IsyeriID");
	}
	return 1;
}
Dialog:AracVergi(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, HukumetBinasi, DIALOG_STYLE_LIST, "{FFFFFF}Hükümet Binasý", "{FFFFFF}Araç Vergisi Sorgula\n{FFFFFF}Ýþyeri Vergisi Sorgula\n{FFFFFF}Ev Vergisi Sorgula\n{FFFFFF}Boþanma Ýþlemleri\n{FFFFFF}Maaþ Çek {00ff15}(%s)", "Seç", "Kapat", FormatNumber(PlayerData[playerid][pMaas]));
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, AracVergi, DIALOG_STYLE_INPUT, "Araç Plaka", "{E74C3C}» {FFFFFF}Lütfen vergisini ödemek istediðiniz aracýn plakasýný girin:", "Devam", "Geri");
	    new id = -1;
	    for(new i; i < MAX_ARAC; i++)
	    {
	        if(AracInfo[i][aracExists] && AracInfo[i][aracTip] == 4 && AracInfo[i][aracSahip] > 0)
	        {
	            if(strcmp(AracInfo[i][aracPlaka], inputtext, false) == 0)
	            {
	                id = i;
	                break;
				}
			}
		}
		if(id == -1)
		{
		    HataMesajGonder(playerid, "Geçersiz plaka girdiniz.");
		    return Dialog_Show(playerid, AracVergi, DIALOG_STYLE_INPUT, "Araç Plaka", "{E74C3C}» {FFFFFF}Lütfen vergisini ödemek istediðiniz aracýn plakasýný girin:", "Devam", "Geri");
		}
		if(AracInfo[id][aracVergi] == 0)
		{
		    HataMesajGonder(playerid, "Bu aracýn vergisi yok.");
		    return Dialog_Show(playerid, AracVergi, DIALOG_STYLE_INPUT, "Araç Plaka", "{E74C3C}» {FFFFFF}Lütfen vergisini ödemek istediðiniz aracýn plakasýný girin:", "Devam", "Geri");
		}
		SetPVarInt(playerid, "VergiID", id);
		Dialog_Show(playerid, AracVergiOde, DIALOG_STYLE_MSGBOX, "Araç Vergi Öde", "{FFFFFF}Bu aracýn {04ff00}%s {FFFFFF}vergisi bulunmaktadýr. Ödemek istiyor musunuz?", "Öde", "Iptal", FormatNumber(AracInfo[id][aracVergi]));
	}
	return 1;
}
Dialog:AracVergiOde(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new id = GetPVarInt(playerid, "VergiID");
	    if(AracInfo[id][aracVergi] > PlayerData[playerid][pCash]) return HataMesajGonder(playerid, "Yeterli paranýz yok.");
	    ParaVer(playerid, -AracInfo[id][aracVergi]);
	    MesajGonder(playerid, "Aracýn %s miktar vergisini ödediniz.", FormatNumber(AracInfo[id][aracVergi]));
	    AracInfo[id][aracVergi] = 0;
	    AracInfo[id][aracVergiSure] = 0;
	    Arac_Kaydet(id);
	    DeletePVar(playerid, "VergiID");
	}
	return 1;
}
stock OyuncuSilahlar(playerid)
{
	new string[200],sayi = 0;
	strcat(string, "ID\t{FFFFFF}Silah Adý\t{FFFFFF}Mermi\n");
	new a;
	for(new i; i<13; i++) if(PlayerData[playerid][pSilahlar][i] > 0)
	{
	    sayi++;
	    GetPlayerWeaponData(playerid, i, a, PlayerData[playerid][pMermiler][i]);
	    format(string, sizeof(string), "%s{FFFFFF}%d\t{FFFFFF}%s\t{FFFFFF}%d\n", string, PlayerData[playerid][pSilahlar][i], ReturnWeaponName(PlayerData[playerid][pSilahlar][i]), PlayerData[playerid][pMermiler][i]);
	}
	if(sayi == 0) return HataMesajGonder(playerid, "Hiç silahýnýz yok.");
	Dialog_Show(playerid, Silahlarim, DIALOG_STYLE_TABLIST_HEADERS, "{ff0000}Silahlarýnýz", string, "Seç", "Kapat");
	return 1;
}
Dialog:Bagaj(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(listitem == 0)
	    {
	        if(GetFactionType(playerid) != BIRLIK_LSPD) Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucular","{FFFFFF}Uyuþturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyuþturucu Al\t{ff0000}%d gram bagajda", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
	        else Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucular","{FFFFFF}Uyuþturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyuþturucu Al\t{ff0000}%d gram bagajda\n{FFFFFF}Uyuþturuculara El Koy", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
	    }
	    if(listitem == 1)
	    {
	        AracSilahlar(playerid, GetPVarInt(playerid, "AracBagaj"));
		}
	}
	return 1;
}
Dialog:BagajUyusturucular(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::bagaj(playerid);
	if(response)
	{
	    if(listitem == 0)
	    {
	        if(PlayerDrugData[playerid][Drugs] < 1)
	        {
	            HataMesajGonder(playerid, "Üzerinizde hiç uyuþturucu yok.");
	            if(GetFactionType(playerid) != BIRLIK_LSPD) Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucular","{FFFFFF}Uyuþturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyuþturucu Al\t{ff0000}%d gram bagajda", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
	        	else Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucular","{FFFFFF}Uyuþturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyuþturucu Al\t{ff0000}%d gram bagajda\n{FFFFFF}Uyuþturuculara El Koy", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
	        	return 1;
	        }
	        Dialog_Show(playerid, UyusturucuKoy, DIALOG_STYLE_INPUT, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucu Koy", "{E74C3C}» {FFFFFF}Lütfen araca koymak istediðiniz uyuþturucu miktarýný girin:", "Koy", "Geri");
		}
		if(listitem == 1)
		{
		    if(AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu] < 1)
		    {
		        HataMesajGonder(playerid, "Aracýn bagajýnda hiç uyuþturucu yok.");
		        if(GetFactionType(playerid) != BIRLIK_LSPD) Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucular","{FFFFFF}Uyuþturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyuþturucu Al\t{ff0000}%d gram bagajda", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
	        	else Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucular","{FFFFFF}Uyuþturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyuþturucu Al\t{ff0000}%d gram bagajda\n{FFFFFF}Uyuþturuculara El Koy", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
	        	return 1;
		    }
		    Dialog_Show(playerid, UyusturucuAl, DIALOG_STYLE_INPUT, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucu Al", "{E74C3C}» {FFFFFF}Lütfen aracýn bagajýndan almak istediðiniz uyuþturucu miktarýný girin:", "Al", "Geri");
		}
		if(listitem == 2)
		{
		    if(AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu] < 1)
		    {
		        HataMesajGonder(playerid, "Aracýn bagajýnda hiç uyuþturucu yok.");
		        if(GetFactionType(playerid) != BIRLIK_LSPD) Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucular","{FFFFFF}Uyuþturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyuþturucu Al\t{ff0000}%d gram bagajda", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
	        	else Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucular","{FFFFFF}Uyuþturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyuþturucu Al\t{ff0000}%d gram bagajda\n{FFFFFF}Uyuþturuculara El Koy", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
	        	return 1;
		    }
		    AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu] = 0;
		    Arac_Kaydet(GetPVarInt(playerid, "AracBagaj"));
		    MesajGonder(playerid, "Aracýn bagajýnda bulunan uyuþturuculara el koydunuz.");
		}
	}
	return 1;
}
Dialog:EvUyusturucuKoy(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new evid = House_Inside(playerid);
	    if(evid == -1) return 1;
	    if(isnull(inputtext) || !IsNumeric(inputtext)) return Dialog_Show(playerid, EvUyusturucuKoy, DIALOG_STYLE_INPUT, "Uyuþturucu Koy", "{FFFFFF}Lütfen evinize koymak istediðiniz uyuþturucu miktarýný girin:", "Koy", "Kapat");
		if (strval(inputtext) < PlayerDrugData[playerid][Drugs])
        {
            HataMesajGonder(playerid, "Üzerinizde o kadar uyuþturucu yok.");
            return Dialog_Show(playerid, EvUyusturucuKoy, DIALOG_STYLE_INPUT, "Uyuþturucu Koy", "{FFFFFF}Lütfen evinize koymak istediðiniz uyuþturucu miktarýný girin:", "Koy", "Kapat");
        }
	    if(strval(inputtext) > PlayerDrugData[playerid][Drugs])
	    {
	        HataMesajGonder(playerid, "Üzerinizde o kadar uyuþturucu yok.");
	        return Dialog_Show(playerid, EvUyusturucuKoy, DIALOG_STYLE_INPUT, "Uyuþturucu Koy", "{FFFFFF}Lütfen evinize koymak istediðiniz uyuþturucu miktarýný girin:", "Koy", "Kapat");
	    }
	    house_info[evid][evUyusturucu] += strval(inputtext);
	    PlayerDrugData[playerid][Drugs] -= strval(inputtext);
	    MesajGonder(playerid, "Evinizin kasasýna %d gram uyuþturucu koydunuz.", strval(inputtext));
	    Ev_Kaydet(evid);
	}
	return 1;
}

Dialog:EvUyusturucuAl(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = House_Inside(playerid);
	    if (id == -1) return 1;
	    if (isnull(inputtext) || !IsNumeric(inputtext)) return Dialog_Show(playerid, EvUyusturucuAl, DIALOG_STYLE_INPUT, "Uyuþturucu Al", "{FFFFFF}Lütfen evinizin kasasýndan almak istediðiniz uyuþturucu miktarýný girin:", "Al", "Kapat");
		if (strval(inputtext) < PlayerDrugData[playerid][Drugs])
        {
            HataMesajGonder(playerid, "Üzerinizde o kadar uyuþturucu yok.");
            return Dialog_Show(playerid, EvUyusturucuKoy, DIALOG_STYLE_INPUT, "Uyuþturucu Koy", "Lütfen evinize koymak istediðiniz uyuþturucu miktarýný girin:", "Koy", "Kapat");
        }
		if (strval(inputtext) > house_info[id][evUyusturucu])
	    {
	        HataMesajGonder(playerid, "Evinizin kasasýnda o kadar uyuþturucu yok.");
	        return Dialog_Show(playerid, EvUyusturucuAl, DIALOG_STYLE_INPUT, "Uyuþturucu Al", "{FFFFFF}Lütfen evinizin kasasýndan almak istediðiniz uyuþturucu miktarýný girin:", "Al", "Kapat");
	    }
	    house_info[id][evUyusturucu] -= strval(inputtext);
	    PlayerDrugData[playerid][Drugs] += strval(inputtext);
	    MesajGonder(playerid, "Evinizin kasasýndan %d gram uyuþturucu aldýnýz.", strval(inputtext));
	    Ev_Kaydet(id);
	}
	return 1;
}

Dialog:UyusturucuAl(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    if(GetFactionType(playerid) != BIRLIK_LSPD) Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucular","{FFFFFF}Uyuþturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyuþturucu Al\t{ff0000}%d gram bagajda", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
    	else Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucular","{FFFFFF}Uyuþturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyuþturucu Al\t{ff0000}%d gram bagajda\n{FFFFFF}Uyuþturuculara El Koy", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
	}
	else
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, UyusturucuAl, DIALOG_STYLE_INPUT, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucu Al", "{E74C3C}» {FFFFFF}Lütfen aracýn bagajýndan almak istediðiniz uyuþturucu miktarýný girin:", "Al", "Geri");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, UyusturucuAl, DIALOG_STYLE_INPUT, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucu Al", "{E74C3C}» {FFFFFF}Lütfen aracýn bagajýndan almak istediðiniz uyuþturucu miktarýný girin:", "Al", "Geri");
	    if(strval(inputtext) < 1)
	    {
	        HataMesajGonder(playerid, "Geçersiz miktar girdiniz.");
	        return Dialog_Show(playerid, UyusturucuAl, DIALOG_STYLE_INPUT, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucu Al", "{E74C3C}» {FFFFFF}Lütfen aracýn bagajýndan almak istediðiniz uyuþturucu miktarýný girin:", "Al", "Geri");
	    }
	    if(AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu] < strval(inputtext))
	    {
	        HataMesajGonder(playerid, "Bagajda o kadar uyuþturucu yok.");
	        return Dialog_Show(playerid, UyusturucuAl, DIALOG_STYLE_INPUT, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucu Al", "{E74C3C}» {FFFFFF}Lütfen aracýn bagajýndan almak istediðiniz uyuþturucu miktarýný girin:", "Al", "Geri");
	    }
	    if(PlayerDrugData[playerid][Drugs] + strval(inputtext) > CARRY_LIMIT)
	    {
	        HataMesajGonder(playerid, "Üzerinizde en fazla %d gram uyuþturucu taþýyabilirsiniz.", CARRY_LIMIT);
	        return Dialog_Show(playerid, UyusturucuAl, DIALOG_STYLE_INPUT, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucu Al", "{E74C3C}» {FFFFFF}Lütfen aracýn bagajýndan almak istediðiniz uyuþturucu miktarýný girin:", "Al", "Geri");
	    }
	    AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu] -= strval(inputtext);
	    PlayerDrugData[playerid][Drugs] += strval(inputtext);
	    MesajGonder(playerid, "Bagajdan %d gram uyuþturucu aldýnýz.", strval(inputtext));
	    if(GetFactionType(playerid) != BIRLIK_LSPD) Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucular","{FFFFFF}Uyuþturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyuþturucu Al\t{ff0000}%d gram bagajda", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
    	else Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucular","{FFFFFF}Uyuþturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyuþturucu Al\t{ff0000}%d gram bagajda\n{FFFFFF}Uyuþturuculara El Koy", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
    	Arac_Kaydet(GetPVarInt(playerid, "AracBagaj"));
	}
	return 1;
}
Dialog:UyusturucuKoy(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    if(GetFactionType(playerid) != BIRLIK_LSPD) Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucular","{FFFFFF}Uyuþturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyuþturucu Al\t{ff0000}%d gram bagajda", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
    	else Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucular","{FFFFFF}Uyuþturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyuþturucu Al\t{ff0000}%d gram bagajda\n{FFFFFF}Uyuþturuculara El Koy", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
	}
	else
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, UyusturucuKoy, DIALOG_STYLE_INPUT, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucu Koy", "{E74C3C}» {FFFFFF}Lütfen araca koymak istediðiniz uyuþturucu miktarýný girin:", "Koy", "Geri");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, UyusturucuKoy, DIALOG_STYLE_INPUT, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucu Koy", "{E74C3C}» {FFFFFF}Lütfen araca koymak istediðiniz uyuþturucu miktarýný girin:", "Koy", "Geri");
	    if(strval(inputtext) < 1 || strval(inputtext) > 300)
	    {
	        HataMesajGonder(playerid, "Geçersiz miktar girdiniz. (1-300 arasýnda olmalýdýr)");
	        return Dialog_Show(playerid, UyusturucuKoy, DIALOG_STYLE_INPUT, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucu Koy", "{E74C3C}» {FFFFFF}Lütfen araca koymak istediðiniz uyuþturucu miktarýný girin:", "Koy", "Geri");
	    }
	    if(PlayerDrugData[playerid][Drugs] < strval(inputtext))
	    {
	        HataMesajGonder(playerid, "Üzerinizde o kadar uyuþturucu yok.");
	        return Dialog_Show(playerid, UyusturucuKoy, DIALOG_STYLE_INPUT, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucu Koy", "{E74C3C}» {FFFFFF}Lütfen araca koymak istediðiniz uyuþturucu miktarýný girin:", "Koy", "Geri");
	    }
	    if(IsVehicleBike(AracInfo[GetPVarInt(playerid, "AracBagaj")][aracVehicle]) && AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu] + strval(inputtext) >= 50)
	    {
	        HataMesajGonder(playerid, "Motor tipi araçlara en fazla 50 gram uyuþturucu koyabilirsiniz.");
	        return Dialog_Show(playerid, UyusturucuKoy, DIALOG_STYLE_INPUT, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucu Koy", "{E74C3C}» {FFFFFF}Lütfen araca koymak istediðiniz uyuþturucu miktarýný girin:", "Koy", "Geri");
	    }
	    if(AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu] + strval(inputtext) >= 100)
	    {
	        HataMesajGonder(playerid, "Aracýn bagajýnda maksimum 100 gram uyuþturucu olabilir.");
	        return Dialog_Show(playerid, UyusturucuKoy, DIALOG_STYLE_INPUT, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucu Koy", "{E74C3C}» {FFFFFF}Lütfen araca koymak istediðiniz uyuþturucu miktarýný girin:", "Koy", "Geri");
		}
	    PlayerDrugData[playerid][Drugs] -= strval(inputtext);
	    AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu] += strval(inputtext);
	    MesajGonder(playerid, "%d gram uyuþturucuyu aracýn bagajýna koydunuz.", strval(inputtext));
	    if(GetFactionType(playerid) != BIRLIK_LSPD) Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucular","{FFFFFF}Uyuþturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyuþturucu Al\t{ff0000}%d gram bagajda", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
    	else Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucular","{FFFFFF}Uyuþturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyuþturucu Al\t{ff0000}%d gram bagajda\n{FFFFFF}Uyuþturuculara El Koy", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
    	Arac_Kaydet(GetPVarInt(playerid, "AracBagaj"));
	}
	return 1;
}
Dialog:Silahlarim(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_LSMD || GetFactionType(playerid) == BIRLIK_FBI) return HataMesajGonder(playerid, "Bu bölüme eriþim izniniz yok. (LSPD ve LSMD üyeleri için engellendi)");
	    new silahid = strval(inputtext);
	    if(silahid > 0)
	    {
	        SetPVarInt(playerid, "SilahID", silahid);
	        new str[50];
	        format(str, sizeof(str), "Silah: {ff8300}%s (ID: %d, Mermi: %d)", ReturnWeaponName(silahid), silahid, PlayerData[playerid][pMermiler][g_aWeaponSlots[silahid]]);
	        Dialog_Show(playerid, Silahlarim2, DIALOG_STYLE_LIST, str,"{FFFFFF}Þarjör Tak\n{FFFFFF}Silahý Baþkasýna Ver\n{FFFFFF}Silahý Sat\n{FFFFFF}Silahý Yere At", "Seç", "Geri");
	    }
	}
	return 1;
}
Dialog:Silahlarim2(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::silahlarim(playerid);
	if(response)
	{
	    new sid = GetPVarInt(playerid, "SilahID");
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(PlayerData[playerid][pMermiler][g_aWeaponSlots[sid]] > 0) return HataMesajGonder(playerid, "Sadece mermisi bitmiþ silahlara þarjör takabilirsiniz.");
	            if(PlayerData[playerid][pEsyalar][13] < 1) return HataMesajGonder(playerid, "Þarjörünüz yok.");
	            //if(PlayerData[playerid][pSilahlar][g_aWeaponSlots[sid]] != sid) return HataMesajGonder(playerid, "Bu silah türü sizde var.");
	            PlayerData[playerid][pEsyalar][13]--;
	            GiveWeaponToPlayer(playerid, sid, GetWeaponMagazineAmmo(sid));
	            switch(sid)
	            {
	                case 22:
	                {
	                    ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 1, 1, 0, 2000, 1);
	                    ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 1, 1, 0, 2000, 1);
	                }
	                case 24:
	                {
	                    ApplyAnimation(playerid, "SILENCED", "Silence_reload", 4.1, 0, 1, 1, 0, 2000, 1);
	                    ApplyAnimation(playerid, "SILENCED", "Silence_reload", 4.1, 0, 1, 1, 0, 2000, 1);
	                }
	                case 28:
	                {
	                    ApplyAnimation(playerid, "UZI", "UZI_reload", 4.1, 0, 1, 1, 0, 2000, 1);
	                    ApplyAnimation(playerid, "UZI", "UZI_reload", 4.1, 0, 1, 1, 0, 2000, 1);
	                }
	                case 29:
	                {
	                    ApplyAnimation(playerid, "TEC", "TEC_reload", 4.1, 0, 1, 1, 0, 2000, 1);
	                    ApplyAnimation(playerid, "TEC", "TEC_reload", 4.1, 0, 1, 1, 0, 2000, 1);
	                }
	                case 30, 31:
	                {
	                    ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.1, 0, 1, 1, 0, 2000, 1);
	                    ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.1, 0, 1, 1, 0, 2000, 1);
	                }
	            }
	        }
	        case 1:
	        {
	            if(IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araç içerisinde bunu yapamazsýnýz.");
	            Dialog_Show(playerid, SilahVer, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}» {FFFFFF}Lütfen silahý vermek istediðiniz kiþinin ID'sini girin:", "SVer", "Kapat");
	        }
	        case 2:
			{
			    if(IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araç içerisinde bunu yapamazsýnýz.");
			    Dialog_Show(playerid, SilahSat, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}» {FFFFFF}Lütfen silahý satmak istediðiniz kiþinin ID'sini girin:", "Sat", "Kapat");
			}
			case 3:
			{
			    if(IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araç içerisinde bunu yapamazsýnýz.");
			    new Float:pos[3];
			    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			    DropWeapon(PlayerData[playerid][pID], GetPVarInt(playerid, "SilahID"), PlayerData[playerid][pMermiler][g_aWeaponSlots[GetPVarInt(playerid, "SilahID")]], pos[0], pos[1], pos[2]-0.9, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			    ResetWeapon(playerid, GetPVarInt(playerid, "SilahID"));
			    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s adlý kiþi %s model silahýný yere atar.", ReturnName(playerid, 0), ReturnWeaponName(GetPVarInt(playerid, "SilahID")));
			}
	    }
	}
	return 1;
}
Dialog:BagajSilahlar(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::bagaj(playerid);
	if(response)
	{
	    if(listitem == 5)
	    {
	        for(new i; i<5; i++)
	        {
	            AracInfo[GetPVarInt(playerid, "AracBagaj")][aracSilahlar][i] = 0;
	            AracInfo[GetPVarInt(playerid, "AracBagaj")][aracMermiler][i] = 0;
	        }
	        BilgiMesajGonder(playerid, "Araçta bulunan bütün silahlara el koydunuz.");
	        AracSilahlar(playerid, GetPVarInt(playerid, "AracBagaj"));
	        Arac_Kaydet(GetPVarInt(playerid, "AracBagaj"));
	        return 1;
		}
		if(GetFactionType(playerid) == BIRLIK_LSPD) return HataMesajGonder(playerid, "Polisler bunu yapamaz.");
		if(!Car_IsOwner(playerid, GetPVarInt(playerid, "AracBagaj"))) return HataMesajGonder(playerid, "Bu aracýn sahibi deðilsiniz.");
 		if(AracInfo[GetPVarInt(playerid, "AracBagaj")][aracSilahlar][listitem] < 1)
   		{
     		if(!GetWeapon(playerid))
       		{
         		HataMesajGonder(playerid, "Slot boþ, bu slota silah koymak için elinize silah almalýsýnýz.");
           		return AracSilahlar(playerid, GetPVarInt(playerid, "AracBagaj"));
         	}
          	new silahid = GetWeapon(playerid);
           	new ammo = GetPlayerAmmo(playerid);
            AracInfo[GetPVarInt(playerid, "AracBagaj")][aracSilahlar][listitem] = silahid;
            AracInfo[GetPVarInt(playerid, "AracBagaj")][aracMermiler][listitem] = ammo;
            ResetWeapon(playerid, silahid);
            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s adlý kiþi %s model silahýný aracýn bagajýna koyar.", ReturnName(playerid, 0), ReturnWeaponName(silahid));
            AracSilahlar(playerid, GetPVarInt(playerid, "AracBagaj"));
            Arac_Kaydet(GetPVarInt(playerid, "AracBagaj"));
		}
		else
		{
  			if(PlayerHasWeapon(playerid, AracInfo[GetPVarInt(playerid, "AracBagaj")][aracSilahlar][listitem]) || PlayerData[playerid][pSilahlar][g_aWeaponSlots[AracInfo[GetPVarInt(playerid, "AracBagaj")][aracSilahlar][listitem]]] > 0)
  			{
  			    HataMesajGonder(playerid, "Bu silaha sahipsiniz veya bu tür silahýnýz var.");
  			    return AracSilahlar(playerid, GetPVarInt(playerid, "AracBagaj"));
  			}
  			GiveWeaponToPlayer(playerid, AracInfo[GetPVarInt(playerid, "AracBagaj")][aracSilahlar][listitem], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracMermiler][listitem]);
  			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s adlý kiþi %s model silahýný aracýn bagajýndan alýr.", ReturnName(playerid, 0), ReturnWeaponName(AracInfo[GetPVarInt(playerid, "AracBagaj")][aracSilahlar][listitem]));
  			AracInfo[GetPVarInt(playerid, "AracBagaj")][aracSilahlar][listitem] = 0;
  			AracInfo[GetPVarInt(playerid, "AracBagaj")][aracMermiler][listitem] = 0;
  			AracSilahlar(playerid, GetPVarInt(playerid, "AracBagaj"));
  			Arac_Kaydet(GetPVarInt(playerid, "AracBagaj"));
		}
	}
	return 1;
}
Dialog:EvSilahlar(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::ev(playerid);
	if(response)
	{
	    new id = House_Inside(playerid);
	    if(id == -1) return 1;
 		if(house_info[id][evSilahlar][listitem] < 1)
   		{
     		if(!GetWeapon(playerid))
       		{
         		HataMesajGonder(playerid, "Slot boþ, bu slota silah koymak için elinize silah almalýsýnýz.");
           		return EvSilahlar(playerid, id);
         	}
          	new silahid = GetWeapon(playerid);
           	new ammo = GetPlayerAmmo(playerid);
            house_info[id][evSilahlar][listitem] = silahid;
            house_info[id][evMermiler][listitem] = ammo;
            ResetWeapon(playerid, silahid);
            EvSilahlar(playerid, id);
            Ev_Kaydet(id);
		}
		else
		{
  			if(PlayerHasWeapon(playerid, house_info[id][evSilahlar][listitem]) || PlayerData[playerid][pSilahlar][g_aWeaponSlots[house_info[id][evSilahlar][listitem]]] > 0)
  			{
  			    HataMesajGonder(playerid, "Bu silaha sahipsiniz veya bu tür silahýnýz var.");
  			    return EvSilahlar(playerid, id);
  			}
  			GiveWeaponToPlayer(playerid, house_info[id][evSilahlar][listitem], house_info[id][evMermiler][listitem]);
  			house_info[id][evSilahlar][listitem] = 0;
  			house_info[id][evMermiler][listitem] = 0;
  			EvSilahlar(playerid, id);
  			Ev_Kaydet(id);
		}
	}
	return 1;
}
stock EvSilahlar(playerid, id)
{
	new str[1000];
	for(new i; i<10; i++)
	{
	    if(house_info[id][evSilahlar][i] > 0) format(str, sizeof(str), "%s%s\t%d mermi\n", str, ReturnWeaponName(house_info[id][evSilahlar][i]), house_info[id][evMermiler][i]);
	    else format(str, sizeof(str), "%sBoþ Slot\t \n", str);
	}

	Dialog_Show(playerid, EvSilahlar, DIALOG_STYLE_TABLIST, "{E74C3C}Ev: {FFFFFF}Silahlar", str, "Seç", "Geri");
	return 1;
}
stock AracSilahlar(playerid, id)
{
	new str[700];
	if(AracInfo[id][aracSilahlar][0] < 1) format(str, sizeof(str), "Boþ Slot\n");
	else format(str, sizeof(str), "%s\t%d\n", ReturnWeaponName(AracInfo[id][aracSilahlar][0]), AracInfo[id][aracMermiler][0]);
	if(AracInfo[id][aracSilahlar][1] < 1) format(str, sizeof(str), "%sBoþ Slot\n", str);
	else format(str, sizeof(str), "%s%s\t%d\n", str, ReturnWeaponName(AracInfo[id][aracSilahlar][1]), AracInfo[id][aracMermiler][1]);
	if(AracInfo[id][aracSilahlar][2] < 1) format(str, sizeof(str), "%sBoþ Slot\n", str);
	else format(str, sizeof(str), "%s%s\t%d\n", str, ReturnWeaponName(AracInfo[id][aracSilahlar][2]), AracInfo[id][aracMermiler][2]);
	if(AracInfo[id][aracSilahlar][3] < 1) format(str, sizeof(str), "%sBoþ Slot\n", str);
	else format(str, sizeof(str), "%s%s\t%d\n", str, ReturnWeaponName(AracInfo[id][aracSilahlar][3]), AracInfo[id][aracMermiler][3]);
	if(AracInfo[id][aracSilahlar][4] < 1) format(str, sizeof(str), "%sBoþ Slot\n", str);
	else format(str, sizeof(str), "%s%s\t%d\n", str, ReturnWeaponName(AracInfo[id][aracSilahlar][4]), AracInfo[id][aracMermiler][4]);

	if(GetFactionType(playerid) == BIRLIK_LSPD) strcat(str, "{ff1d00}» {FFFFFF}Silahlara El Koy");
	Dialog_Show(playerid, BagajSilahlar, DIALOG_STYLE_TABLIST, "{E74C3C}Bagaj: {FFFFFF}Silahlar", str, "Seç", "Geri");
	return 1;
}

stock DropSil(id)
{
	new query[100];
	format(query, sizeof(query), "DELETE FROM `droppedWeapons` WHERE `dID` = '%d'", DroppedWeapon[id][droppedID]);
	mysql_query(baglanti, query, false);
	DroppedWeapon[id][droppedExists] = false;
 	DroppedWeapon[id][droppedPlayer] = -1;
  	DroppedWeapon[id][droppedPos][0] = 0;
   	DroppedWeapon[id][droppedPos][1] = 0;
    DroppedWeapon[id][droppedPos][2] = 0;
    DroppedWeapon[id][droppedWeapon] = 0;
    DroppedWeapon[id][droppedAmmo] = 0;
    DroppedWeapon[id][droppedInt] = 0;
    DroppedWeapon[id][droppedVw] = 0;
    DestroyDynamicObject(DroppedWeapon[id][droppedObject]);
    DestroyDynamic3DTextLabel(DroppedWeapon[id][droppedText]);
	return 1;
}
stock DropWeapon(sqlid, weaponid, ammo, Float:x, Float:y, Float:z, interior, world)
{
	new str[50], query[225];
	for(new i; i<MAX_DROPPED_WEAPONS; i++) if(!DroppedWeapon[i][droppedExists])
	{
	    DroppedWeapon[i][droppedExists] = true;
	    DroppedWeapon[i][droppedPlayer] = sqlid;
	    DroppedWeapon[i][droppedPos][0] = x;
	    DroppedWeapon[i][droppedPos][1] = y;
	    DroppedWeapon[i][droppedPos][2] = z;
	    DroppedWeapon[i][droppedWeapon] = weaponid;
	    DroppedWeapon[i][droppedAmmo] = ammo;
	    DroppedWeapon[i][droppedInt] = interior;
	    DroppedWeapon[i][droppedVw] = world;
	    DroppedWeapon[i][droppedObject] = CreateDynamicObject(GetWeaponModel(DroppedWeapon[i][droppedWeapon]), DroppedWeapon[i][droppedPos][0], DroppedWeapon[i][droppedPos][1], DroppedWeapon[i][droppedPos][2], 93.7, 120.0, 120.0, DroppedWeapon[i][droppedInt], DroppedWeapon[i][droppedVw]);
        format(str, sizeof(str), "%s (Mermi: %d)", ReturnWeaponName(DroppedWeapon[i][droppedWeapon]), DroppedWeapon[i][droppedAmmo]);
        DroppedWeapon[i][droppedText] = CreateDynamic3DTextLabel(str, COLOR_LIGHTBLUE, DroppedWeapon[i][droppedPos][0], DroppedWeapon[i][droppedPos][1], DroppedWeapon[i][droppedPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, DroppedWeapon[i][droppedVw], DroppedWeapon[i][droppedInt]);

        format(query, sizeof(query), "INSERT INTO `droppedWeapons` (`dPlayer`, `dropX`, `dropY`, `dropZ`, `dInterior`, `dVw`, `dWeapon`, `dAmmo`) VALUES ('%d', '%.4f','%.4f','%.4f','%d', '%d', '%d', '%d')",
        sqlid,
        x,
        y,
        z,
        interior,
        world,
        weaponid,
        ammo);
        new Cache:sawyer = mysql_query(baglanti, query);
        DroppedWeapon[i][droppedID] = cache_insert_id();
        cache_delete(sawyer);
        return i;
	}
	return -1;
}
GetWeaponMagazineAmmo(weaponid)
{
    switch (weaponid)
    {
        case 22: return 34;
        case 23: return 17;
        case 24: return 7;
        case 25: return 5;
        case 26: return 4;
        case 27: return 7;
        case 28: return 100;
        case 29: return 30;
        case 30: return 30;
        case 31: return 50;
        case 32: return 100;
        case 38: return 500;
    }
    return -1;
}
Dialog:SilahSat(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, SilahSat, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}» {FFFFFF}Lütfen silahý satmak istediðiniz kiþinin ID'sini girin:", "Sat", "Kapat");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, SilahSat, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}» {FFFFFF}Lütfen silahý satmak istediðiniz kiþinin ID'sini girin:", "Sat", "Kapat");
	    new id = strval(inputtext);
	    new sid = GetPVarInt(playerid, "SilahID");
	    if(!OyundaDegil(id))
	    {
	        HataMesajGonder(playerid, "Oyuncu oyunda deðil.");
	        return Dialog_Show(playerid, SilahSat, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}» {FFFFFF}Lütfen silahý satmak istediðiniz kiþinin ID'sini girin:", "Sat", "Kapat");
	    }
	    if(!IsPlayerNearPlayer(playerid, id, 4.0))
	    {
	        HataMesajGonder(playerid, "Kiþiye yeterince yakýn deðilsiniz.");
	        return Dialog_Show(playerid, SilahSat, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}» {FFFFFF}Lütfen silahý satmak istediðiniz kiþinin ID'sini girin:", "Sat", "Kapat");
	    }
	    if(id == playerid)
	    {
	        HataMesajGonder(playerid, "Kendine silah satamazsýn.");
	        return Dialog_Show(playerid, SilahSat, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}» {FFFFFF}Lütfen silahý satmak istediðiniz kiþinin ID'sini girin:", "Sat", "Kapat");
	    }
	    if(PlayerData[id][pSilahOffer] != -1)
	    {
	        HataMesajGonder(playerid, "Bu oyuncuya zaten silah verme/satma isteði gönderilmiþ.");
	        return Dialog_Show(playerid, SilahSat, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}» {FFFFFF}Lütfen silahý satmak istediðiniz kiþinin ID'sini girin:", "Sat", "Kapat");
		}
	    if(PlayerHasWeapon(id, sid) || PlayerData[id][pSilahlar][g_aWeaponSlots[sid]] != 0)
	    {
	        HataMesajGonder(playerid, "Kiþi bu silaha sahip veya ayný tür silahý var.");
	        return Dialog_Show(playerid, SilahSat, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}» {FFFFFF}Lütfen silahý satmak istediðiniz kiþinin ID'sini girin:", "Sat", "Kapat");
	    }
	    SetPVarInt(playerid, "SilahSatID", id);
	    Dialog_Show(playerid, SilahSat2, DIALOG_STYLE_INPUT, "Fiyat", "{ff1d00}» {FFFFFF}Lütfen silahý satmak istediðiniz fiyatý girin:", "Sat", "Geri");
	}
	return 1;
}
Dialog:SilahSat2(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, SilahSat2, DIALOG_STYLE_INPUT, "Fiyat", "{ff1d00}» {FFFFFF}Lütfen silahý satmak istediðiniz fiyatý girin:", "Sat", "Geri");
	if(response)
	{
	    new id = GetPVarInt(playerid, "SilahSatID");
	    if(!OyundaDegil(id))
	    {
	        HataMesajGonder(playerid, "Oyuncu oyundan çýktý.");
	        return 1;
	        //return Dialog_Show(playerid, SilahSat, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}» {FFFFFF}Lütfen silahý satmak istediðiniz kiþinin ID'sini girin:", "Sat", "Kapat");
	    }
	    if(!IsPlayerNearPlayer(playerid, id, 4.0))
	    {
	        HataMesajGonder(playerid, "Kiþi sizden uzaklaþtý.");
	        return 1;
	        //return Dialog_Show(playerid, SilahSat, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}» {FFFFFF}Lütfen silahý satmak istediðiniz kiþinin ID'sini girin:", "Sat", "Kapat");
	    }
	    if(PlayerData[id][pSilahOffer] != -1)
	    {
	        HataMesajGonder(playerid, "Bu oyuncuya baþkasý tarafýndan silah verme/satma isteði gönderildi.");
	        return 1;
	        //return Dialog_Show(playerid, SilahSat, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}» {FFFFFF}Lütfen silahý satmak istediðiniz kiþinin ID'sini girin:", "Sat", "Kapat");
		}
	    if(PlayerHasWeapon(id, GetPVarInt(playerid, "SilahID")) || PlayerData[id][pSilahlar][g_aWeaponSlots[GetPVarInt(playerid, "SilahID")]] != 0)
	    {
	        HataMesajGonder(playerid, "Kiþi bu silaha sahip veya ayný tür silahý var.");
	        return 1;
	        //return Dialog_Show(playerid, SilahSat, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}» {FFFFFF}Lütfen silahý satmak istediðiniz kiþinin ID'sini girin:", "Sat", "Kapat");
	    }
	    if(isnull(inputtext)) return Dialog_Show(playerid, SilahSat2, DIALOG_STYLE_INPUT, "Fiyat", "{ff1d00}» {FFFFFF}Lütfen silahý satmak istediðiniz fiyatý girin:", "Sat", "Geri");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, SilahSat2, DIALOG_STYLE_INPUT, "Fiyat", "{ff1d00}» {FFFFFF}Lütfen silahý satmak istediðiniz fiyatý girin:", "Sat", "Geri");
	    if(strval(inputtext) <= 0 || strval(inputtext) >= 1000000)
	    {
	        HataMesajGonder(playerid, "Geçersiz fiyat girdiniz.");
	        return Dialog_Show(playerid, SilahSat2, DIALOG_STYLE_INPUT, "Fiyat", "{ff1d00}» {FFFFFF}Lütfen silahý satmak istediðiniz fiyatý girin:", "Sat", "Geri");
	    }
      SetPVarInt(playerid, "OnayKOD", RandomEx(111111, 999999));
      PlayerData[id][pSilahOffer] = playerid;
	    PlayerData[id][pSilahOfferID] = GetPVarInt(playerid, "SilahID");
	    PlayerData[id][pSilahOfferFiyat] = strval(inputtext);
	    Dialog_Show(id, SilahSatmaaIstek, DIALOG_STYLE_MSGBOX, "Silah Satmak istiyormusun?", "{ff005d}%s (Mermi: %d) {FFFFFF}silahýný {04ff00}%s {FFFFFF}fiyatýna satmak istiyormusun?. Kabul ediyorsan %s Kodu aþaðýya gir.", "Evet", "Hayýr", ReturnWeaponName(GetPVarInt(playerid, "SilahID")), PlayerData[playerid][pMermiler][g_aWeaponSlots[GetPVarInt(playerid, "SilahID")]], FormatNumber(strval(inputtext)), GetPVarInt(playerid, "OnayKOD"));

	}
	return 1;
}
Dialog:SilahSatmaaIstek(playerid, response, listitem, inputtext[])
{
  if(strval(inputtext) == GetPVarInt(playerid, "OnayKOD"))
  {
  SetPVarInt(playerid, "OnayKOD", RandomEx(111111, 999999));
  new id = GetPVarInt(playerid, "SilahSatID");
  PlayerData[id][pSilahOffer] = playerid;
  PlayerData[id][pSilahOfferID] = GetPVarInt(playerid, "SilahID");
  PlayerData[id][pSilahOfferFiyat] = strval(inputtext);
  Dialog_Show(id, SilahSatmaIstek, DIALOG_STYLE_INPUT, "Silah Satma Ýsteði", "{AFAFAF}%s adlý kiþi sana {ff005d}%s (Mermi: %d) {FFFFFF}silahýný {04ff00}%s {FFFFFF}fiyatýna satmak istiyor. Kabul ediyor musun?\n Kabul ediyorsan %s kodu aþaðýya gir.", "Evet", "Hayýr", ReturnName(playerid, 0), ReturnWeaponName(GetPVarInt(playerid, "SilahID")), PlayerData[playerid][pMermiler][g_aWeaponSlots[GetPVarInt(playerid, "SilahID")]], FormatNumber(strval(inputtext)), GetPVarInt(playerid, "OnayKOD"));
  }
  else
  {
      MesajGonder(playerid, "Silah satýn alma kodunu hatalý girdiniz.");
  }
	return 1;
}
Dialog:SilahSatmaIstek(playerid, response, listitem, inputtext[])
{
  new id = PlayerData[playerid][pSilahOffer];
	new sid = PlayerData[playerid][pSilahOfferID];
	new fiyat = PlayerData[playerid][pSilahOfferFiyat];
	if (id == -1) return 1;
 	if(!PlayerHasWeapon(id, sid))
    {
		PlayerData[playerid][pSilahOffer] = -1;
		PlayerData[playerid][pSilahOfferID] = -1;
		PlayerData[playerid][pSilahOfferFiyat] = 0;
		return HataMesajGonder(playerid, "Kiþide bu silah bulunmuyor.");
    }
	if (!response)
	{
	    BilgiMesajGonder(id, "Silah satma isteðiniz reddedildi.");
	    PlayerData[playerid][pSilahOffer] = -1;
	    PlayerData[playerid][pSilahOfferID] = 0;
		PlayerData[playerid][pSilahOfferFiyat] = 0;
	}
	else
	{
	    if (!OyundaDegil(id) || !IsPlayerNearPlayer(playerid, id, 5.0))
	    {
	        PlayerData[playerid][pSilahOffer] = -1;
	        PlayerData[playerid][pSilahOfferID] = 0;
	        PlayerData[playerid][pSilahOfferFiyat] = 0;
	        return HataMesajGonder(playerid, "Oyuncu oyunda deðil veya sizden uzaklaþtý.");
	    }
	    if (!PlayerHasWeapon(id, sid))
	    {
	        PlayerData[playerid][pSilahOffer] = -1;
	        PlayerData[playerid][pSilahOfferID] = -1;
	        PlayerData[playerid][pSilahOfferFiyat] = 0;
	        return HataMesajGonder(playerid, "Oyuncu artýk bu silaha sahip deðil.");
	    }
	    if (PlayerData[playerid][pCash] < fiyat)
	    {
	    	PlayerData[playerid][pSilahOffer] = -1;
	    	PlayerData[playerid][pSilahOfferID] = 0;
   		    PlayerData[playerid][pSilahOfferFiyat] = 0;
		    return HataMesajGonder(playerid, "Bu silahý almak için yeterli paranýz yok!");
		}
    if(strval(inputtext) == GetPVarInt(playerid, "OnayKOD"))
    {
      ParaVer(playerid, -fiyat);
	    ParaVer(id, fiyat);
	    GiveWeaponToPlayer(playerid, sid, PlayerData[id][pMermiler][g_aWeaponSlots[sid]]);
	    if (PlayerData[id][pMermiler][g_aWeaponSlots[sid]] > 0) ResetWeapon(id, sid);
	    else PlayerData[id][pSilahlar][g_aWeaponSlots[sid]] = 0;
	    MesajGonder(id, "%s model silahýnýzý %s adlý kiþiye %s fiyatýna sattýnýz.", ReturnWeaponName(sid), ReturnName(playerid, 0), FormatNumber(fiyat));
	    MesajGonder(playerid, "%s adlý kiþi size %s model silahýný %s fiyatýna sattý. (silahýn mermisi yoksa envantere eklenir)", ReturnName(id, 0),ReturnWeaponName(sid), FormatNumber(fiyat));
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s adlý kiþi %s adlý kiþiye %s model silahýný %s fiyatýna satar.", ReturnName(id, 0), ReturnName(playerid, 0), ReturnWeaponName(sid), FormatNumber(fiyat));
	    PlayerData[playerid][pSilahOffer] = -1;
	    PlayerData[playerid][pSilahOfferID] = 0;
	    PlayerData[playerid][pSilahOfferFiyat] = 0;
      }
      else
      {
          MesajGonder(playerid, "Silah satýn alma kodunu hatalý girdiniz.");
      }
	}
	return 1;
}
Dialog:SilahVer(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, SilahVer, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}» {FFFFFF}Lütfen silahý vermek istediðiniz kiþinin ID'sini girin:", "Ver", "Kapat");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, SilahVer, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}» {FFFFFF}Lütfen silahý vermek istediðiniz kiþinin ID'sini girin:", "Ver", "Kapat");
	    new id = strval(inputtext);
	    new sid = GetPVarInt(playerid, "SilahID");
	    if(!OyundaDegil(id))
	    {
	        HataMesajGonder(playerid, "Oyuncu oyunda deðil.");
	        return Dialog_Show(playerid, SilahVer, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}» {FFFFFF}Lütfen silahý vermek istediðiniz kiþinin ID'sini girin:", "Ver", "Kapat");
	    }
	    if(!IsPlayerNearPlayer(playerid, id, 4.0))
	    {
	        HataMesajGonder(playerid, "Kiþiye yeterince yakýn deðilsiniz.");
	        return Dialog_Show(playerid, SilahVer, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}» {FFFFFF}Lütfen silahý vermek istediðiniz kiþinin ID'sini girin:", "Ver", "Kapat");
	    }
	    if(id == playerid)
	    {
	        HataMesajGonder(playerid, "Kendine silah veremezsin.");
	        return Dialog_Show(playerid, SilahVer, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}» {FFFFFF}Lütfen silahý vermek istediðiniz kiþinin ID'sini girin:", "Ver", "Kapat");
	    }
	    if(PlayerData[id][pSilahOffer] != -1)
	    {
	        HataMesajGonder(playerid, "Bu oyuncuya zaten silah verme isteði gönderilmiþ.");
	        return Dialog_Show(playerid, SilahVer, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}» {FFFFFF}Lütfen silahý vermek istediðiniz kiþinin ID'sini girin:", "Ver", "Kapat");
		}
	    if(PlayerHasWeapon(id, sid) || PlayerData[id][pSilahlar][g_aWeaponSlots[sid]] != 0)
	    {
	        HataMesajGonder(playerid, "Kiþi bu silaha sahip veya ayný tür silahý var.");
	        return Dialog_Show(playerid, SilahVer, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}» {FFFFFF}Lütfen silahý vermek istediðiniz kiþinin ID'sini girin:", "Ver", "Kapat");
	    }
	    PlayerData[id][pSilahOffer] = playerid;
	    PlayerData[id][pSilahOfferID] = sid;
	    Dialog_Show(id, SilahIstek, DIALOG_STYLE_MSGBOX, "Silah Verme Ýsteði", "{AFAFAF}%s adlý kiþi sana {ff005d}%s (Mermi: %d) {FFFFFF}silahýný vermek istiyor. Kabul ediyor musun?", "Evet", "Hayýr", ReturnName(playerid, 0), ReturnWeaponName(sid), PlayerData[playerid][pMermiler][g_aWeaponSlots[GetPVarInt(playerid, "SilahID")]]);
	    MesajGonder(playerid, "Silah verme isteði gönderildi, kiþinin yanýtýný bekleyin.");
 	}
	return 1;
}
Dialog:SilahIstek(playerid, response, listitem, inputtext[])
{
	new id = PlayerData[playerid][pSilahOffer];
	new sid = PlayerData[playerid][pSilahOfferID];
	if(id == -1) return 1;
	if(!response)
	{
	    BilgiMesajGonder(id, "Silah verme isteðiniz reddedildi.");
	    PlayerData[playerid][pSilahOffer] = -1;
	    PlayerData[playerid][pSilahOfferID] = 0;
	}
	else
	{
	    if(!OyundaDegil(id) || !IsPlayerNearPlayer(playerid, id, 5.0))
	    {
	        PlayerData[playerid][pSilahOffer] = -1;
	        PlayerData[playerid][pSilahOfferID] = 0;
	        return HataMesajGonder(playerid, "Oyuncu oyunda deðil veya sizden uzaklaþtý.");
	    }
	    if(!PlayerHasWeapon(id, sid))
	    {
	        PlayerData[playerid][pSilahOffer] = -1;
	        PlayerData[playerid][pSilahOfferID] = 0;
	        return HataMesajGonder(playerid, "Oyuncu artýk bu silaha sahip deðil.");
	    }
 	   GiveWeaponToPlayer(playerid, sid, PlayerData[id][pMermiler][g_aWeaponSlots[sid]]);
  	  if(PlayerData[id][pMermiler][g_aWeaponSlots[sid]] > 0) ResetWeapon(id, sid);
   	 else PlayerData[id][pSilahlar][g_aWeaponSlots[sid]] = 0;
		  	MesajGonder(id, "%s model silahýnýzý %s adlý kiþiye verdiniz.", ReturnWeaponName(sid), ReturnName(playerid, 0));
    	MesajGonder(playerid, "%s adlý kiþi size %s model silahýný verdi. (silahýn mermisi yoksa envantere eklenir)", ReturnName(id, 0),ReturnWeaponName(sid));
    	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s adlý kiþi %s adlý kiþiye %s model silahýný verir.", ReturnName(id, 0), ReturnName(playerid, 0), ReturnWeaponName(sid));
    	PlayerData[playerid][pSilahOffer] = -1;
    	PlayerData[playerid][pSilahOfferID] = 0;
	}
	return 1;
}
forward TamirExit(playerid, vehicleid);
public TamirExit(playerid, vehicleid)
{
	new id = GetPVarInt(playerid, "pnsID");
	SetVehiclePos(vehicleid, PayNSpray[id][0], PayNSpray[id][1], PayNSpray[id][2]);
	SetPVarInt(playerid, "pnsID", -1);
	TogglePlayerControllable(playerid, true);
	return 1;
}
forward DuzkontakYapiliyor(playerid);
public DuzkontakYapiliyor(playerid)
{
	new str[256];
	if(PlayerData[playerid][pDuzkontak] > 1)
	{
 		if(!IsPlayerInRangeOfPoint(playerid, 2.5, mekanikPos[playerid][0], mekanikPos[playerid][1], mekanikPos[playerid][2]))
	    {
			MesajGonder(playerid, "Hareket ettiðiniz için Düzkontak iþlemi iptal edildi.");
			PlayerData[playerid][pDuzkontak] = -1;
			return 1;
	    }
		PlayerData[playerid][pDuzkontak]--;
		format(str, sizeof str, "~b~Duzkontak ~w~%d", PlayerData[playerid][pDuzkontak]);
		GameTextForPlayer(playerid, str, 2000, 4);
	}
	if(PlayerData[playerid][pDuzkontak] == 1)
	{
	    GameTextForPlayer(playerid, "~g~Duzkontak Yapildi!", 1500, 4);
 		PlayerData[playerid][pDuzkontak] = -1;
		new vid = GetPlayerVehicleID(playerid), vehicle = Car_GetID(vid);
		SetEngineStatus(AracInfo[vehicle][aracVehicle], true);
		callcmd::me(playerid, "aracýn motorunu çalýþtýrýr.");
		AracInfo[vehicle][DuzKontak] = 1;
		Arac_Kaydet(vehicle);
		KillTimer(MekanikTimer[playerid]);
	}
	return 1;
}
forward KilitKiriliyor(playerid);
public KilitKiriliyor(playerid)
{
	new str[256];
	if(PlayerData[playerid][pKilitkir] > 1)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 2.5, mekanikPos[playerid][0], mekanikPos[playerid][1], mekanikPos[playerid][2]))
	    {
			MesajGonder(playerid, "Hareket ettiðiniz için kilit kýrma iþlemi iptal edildi.");
			ClearAnimations(playerid);
			PlayerData[playerid][pKilitkir] = -1;
			return 1;
	    }
		PlayerData[playerid][pKilitkir]--;
		format(str, sizeof str, "~b~Kilit Kiriliyor ~w~%d", PlayerData[playerid][pKilitkir]);
		GameTextForPlayer(playerid, str, 2000, 4);
	}
	if(PlayerData[playerid][pKilitkir] == 1)
	{
	    GameTextForPlayer(playerid, "~g~Kilit Kirildi!", 1500, 4);
	    ClearAnimations(playerid);
 		PlayerData[playerid][pKilitkir] = -1;
		new vehicle = Car_Nearest(playerid);
		AracInfo[vehicle][aracKilit] = 0;
		AracInfo[vehicle][KilitKir] = 1;
  		static
	        engine,
	        lights,
	        alarm,
	        doors,
	        bonnet,
	        boot,
	        objective;

	    GetVehicleParamsEx(AracInfo[vehicle][aracVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(AracInfo[vehicle][aracVehicle], engine, lights, alarm, 0, bonnet, boot, objective);
		Arac_Kaydet(vehicle);
		KillTimer(MekanikTimer[playerid]);
	}
	return 1;
}
forward AracRespawn(vehicleid);
public AracRespawn(vehicleid)
{
	if(OyundaDegil(GetVehicleDriver(vehicleid))) return 1;
	SetVehicleToRespawn(vehicleid);
	AracYuk[vehicleid] = 0;
	AracCP[vehicleid] = 0;
	LoadedTrash[vehicleid] = 0;
	return 1;
}
forward RepairCar(playerid, vehicleid);
public RepairCar(playerid, vehicleid)
{
    RepairVehicle(vehicleid);
    GameTextForPlayer(playerid, " ", 1, 3);
	SetPVarInt(playerid, "TamirEdiyor", 0);
    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s aracý tamir etti.", ReturnName(playerid, 0));
    return 1;
}
stock CadirID(playerid)
{
	for(new i; i<MAX_CADIR; i++) if(CadirData[i][cadirExists] == true && CadirData[i][cadirSahip] == playerid)
	{
	    return i;
	}
	return -1;
}
stock Cadir_Yakin(playerid)
{
	for(new i; i<MAX_CADIR; i++) if(CadirData[i][cadirExists] == true)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, CadirData[i][cadirPos][0], CadirData[i][cadirPos][1], CadirData[i][cadirPos][2])) return i;
	}
	return -1;
}
stock Cadir_Sil(playerid)
{
	for(new i; i<MAX_CADIR; i++) if(CadirData[i][cadirExists] == true && CadirData[i][cadirSahip] == playerid)
	{
	    CadirData[i][cadirExists] = false;
	    CadirData[i][cadirSahip] = -1;
	    CadirData[i][cadirPos][0] = 0.0;
	    CadirData[i][cadirPos][1] = 0.0;
	    CadirData[i][cadirPos][2] = 0.0;
	    DestroyDynamicObject(CadirData[i][cadirObject]);
	    DestroyDynamic3DTextLabel(CadirData[i][cadirText]);
	    break;
	}
	return 1;
}
stock Cadir_Kur(playerid)
{
	for(new i; i<MAX_CADIR; i++) if(CadirData[i][cadirExists] == false)
	{
	    new Float:angle;
	    CadirData[i][cadirExists] = true;
	    CadirData[i][cadirSahip] = playerid;
	    GetPlayerPos(playerid, CadirData[i][cadirPos][0], CadirData[i][cadirPos][1], CadirData[i][cadirPos][2]);
	    GetPlayerFacingAngle(playerid, angle);
	    CadirData[i][cadirPos][0] += (5 * floatsin(-angle, degrees));
    	CadirData[i][cadirPos][1] += (5 * floatcos(-angle, degrees));
    	CadirData[i][cadirPos][2] -= 1.0;
	    CadirData[i][cadirObject] = CreateDynamicObject(3243, CadirData[i][cadirPos][0], CadirData[i][cadirPos][1], CadirData[i][cadirPos][2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	    new str[80];
	    format(str, sizeof(str), "{f91313}Çadýr (#%d)\n\n{FFFFFF}Oluþturan: %s", i, ReturnName(playerid, 0));
	    CadirData[i][cadirText] = CreateDynamic3DTextLabel(str, -1, CadirData[i][cadirPos][0], CadirData[i][cadirPos][1], CadirData[i][cadirPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	    return 1;
	}
	return 0;
}
stock IsPlayerInLosSantos(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if(x >= 44.60 && y >= -2892.90 && x <= 2997.00 && y <= -768.00) return 1;
    else return 0;
}
/*IsPlayerInArea(playerid, Float:MinX, Float:MinY, Float:MaxX, Float:MaxY)
{
    new Float:X, Float:Y, Float:Z;

    GetPlayerPos(playerid, X, Y, Z);
    if(X >= MinX && X <= MaxX && Y >= MinY && Y <= MaxY) {
        return 1;
    }
    return 0;
}*/
forward RefillUpdate(playerid, vehicleid);
public RefillUpdate(playerid, vehicleid)
{
    if (GetPVarInt(playerid, "BenzinDolduruyor") == 0 || GetNearestVehicle(playerid) != AracInfo[vehicleid][aracVehicle])
        return 0;

    AracInfo[vehicleid][aracBenzin] = (AracInfo[vehicleid][aracBenzin] + 30.0 >= 100.0) ? (100.0) : (AracInfo[vehicleid][aracBenzin] + 30.0);

    SetPVarInt(playerid, "BenzinDolduruyor", 0);
    TogglePlayerControllable(playerid, true);
    MesajGonder(playerid, "Yakýt dolduruldu. (30L)");
    return 1;
}
/*stock AjansListele2(playerid)
{
    for(new i; i<MAX_BIRLIK; i++) if(Birlikler[i][birlikExists] && Birlikler[i][birlikTip] == BIRLIK_HABER)
	{
	    Birlik_Kaydet(i);
	}
	new str[1000], string[124];
    format(string, sizeof(string), "SELECT * FROM `birlikler` WHERE `btip` = '3' ORDER BY aktifdinleyici DESC LIMIT %d, 15", GetPVarInt(playerid, "AjansPage")*15);
    new Cache:sawyer = mysql_query(baglanti, string);
    new rows;
    cache_get_row_count(rows);
    if(rows)
    {
        new sqlid, pawnid, dinleyici, reklamalimi, reklamucreti, birlikad[32];
        strcat(str, "{FFFFFF}Kanal Adý\t{FFFFFF}Reklam Alýmý\t{FFFFFF}Reklam Ücreti\t{FFFFFF}Dinleyici\n");
        for(new i; i<rows; i++)
        {
            cache_get_value_name_int(i, "bid", sqlid);
            cache_get_value_name_int(i, "aktifdinleyici", dinleyici);
            cache_get_value_name_int(i, "reklamalimi", reklamalimi);
            cache_get_value_name_int(i, "reklamucreti", reklamucreti);
            cache_get_value_name(i, "bisim", birlikad, 32);
            pawnid = GetFactionByID(sqlid);
            AjansListeleme[playerid][i] = pawnid;
            format(string, sizeof(string), "{FFFFFF}%s\t%s\t{2ECC71}%s\t%d\n", birlikad, (reklamalimi == 1) ? ("{2ECC71}Alýnýyor") : ("{ff0000}Alýnmýyor"), FormatNumber(reklamucreti), dinleyici);
            strcat(str, string);
        }
        if(rows > 15) strcat(str, "{AFAFAF}» Ileri\n{AFAFAF}» Geri");
        format(string, sizeof(string), "{42f445}Yayýn Ajanslarý {AA3333}(Sayfa %d)", GetPVarInt(playerid, "AjansPage")+1);
        Dialog_Show(playerid, Reklam, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Devam", "Kapat");
    }
    cache_delete(sawyer);
	return 1;
}*/
/*Dialog:Reklam(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(strfind(inputtext, "Ileri", true) != -1)
        {
            SetPVarInt(playerid, "AjansPage", GetPVarInt(playerid, "AjansPage")+1);
            AjansListele2(playerid);
            return 1;
        }
        if(strfind(inputtext, "Geri", true) != -1)
        {
            if(GetPVarInt(playerid, "AjansPage") < 1)
            {
                AjansListele2(playerid);
                HataMesajGonder(playerid, "Zaten ilk sayfadasýnýz!");
            }
            else
            {
                SetPVarInt(playerid, "AjansPage", GetPVarInt(playerid, "AjansPage")-1);
                AjansListele2(playerid);
            }
            return 1;
        }
        new id = AjansListeleme[playerid][listitem];
        if(Birlikler[id][birlikExists] && Birlikler[id][birlikTip] == BIRLIK_HABER)
        {
            if(Birlikler[id][ReklamAlimi] == 0)
            {
                HataMesajGonder(playerid, "Seçtiðiniz kanal reklam almýyor.");
                return AjansListele2(playerid);
            }
            if(Birlikler[id][ReklamUcreti] > PlayerData[playerid][pCash])
            {
                HataMesajGonder(playerid, "Üzerinizde yeterli para yok. (%s)", FormatNumber(Birlikler[id][ReklamUcreti]));
                return AjansListele2(playerid);
            }
            SetPVarInt(playerid, "Reklam", id);
            Dialog_Show(playerid, ReklamVer, DIALOG_STYLE_INPUT, "{42f445}Reklam", "{FFFFFF}Lütfen reklam metnini girin:", "Gönder", "Kapat");
        }
	}
	return 1;
}*/
Dialog:ReklamVer(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, ReklamVer, DIALOG_STYLE_INPUT, "{42f445}Reklam", "{FFFFFF}Lütfen reklam metnini girin:", "Gönder", "Kapat");
	    if(strlen(inputtext) < 5 || strlen(inputtext) > 125) return Dialog_Show(playerid, ReklamVer, DIALOG_STYLE_INPUT, "{42f445}Reklam", "{FFFFFF}Lütfen reklam metnini girin:", "Gönder", "Kapat");
	    new id = Reklam_Olustur(playerid, inputtext);
	    if(id == -1) return HataMesajGonder(playerid, "Reklam gönderilemedi, lütfen daha sonra tekrar deneyin.");
	    MesajGonder(playerid, "Reklamýnýz iþleme alýndý, ajans üyeleri onayladýðýnda reklamýnýz yayýnlanacaktýr.");
	}
	return 1;
}
Dialog:Reklamlar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new id = strval(inputtext);
	    if(Reklamlar[id][reklamExists])
	    {
	        SetPVarInt(playerid, "reklamID", id);
	        Dialog_Show(playerid, ReklamSonuclandir, DIALOG_STYLE_LIST, "{FFFFFF}Reklam", "{FFFFFF}Onayla\n{FFFFFF}Reddet", "Seç", "Geri");
	    }
	}
	return 1;
}
Dialog:ReklamSonuclandir(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::reklamlar(playerid);
	if(response)
	{
	    new id = GetPVarInt(playerid, "reklamID");
	    if(Reklamlar[id][reklamExists])
	    {
	        new oyuncuid = GetPlayerIDWithSQLID(Reklamlar[id][reklamGonderen]);
	        if(listitem == 0)
	        {

	            if(oyuncuid != -1)
	            {
	                ParaVer(oyuncuid, -Reklamlar[id][reklamUcret]);
	                MesajGonder(oyuncuid, "Reklamýnýz onaylandý ve yayýnlandý.");
	            }
	            else
	            {
	                OfflineParaVer(Reklamlar[id][reklamGonderen], -Reklamlar[id][reklamUcret]);
	                BildirimEkle(Reklamlar[id][reklamGonderen],"Reklamýnýz onaylandý ve yayýnlandý.","Sistem");
	            }
	            if(strlen(Reklamlar[id][reklamIcerik]) > 64)
			    {
                    foreach (new i : Player) if(PlayerData[i][pDinle] != -1 && PlayerData[i][pAyarlar][2] == 0)
                    {
                        SendClientMessageEx(i, 0x42f445FF, "[%s]: %.64s", Birlikler[Reklamlar[id][ajansID]][birlikAd], Reklamlar[id][reklamIcerik]);
                        SendClientMessageEx(i, 0x42f445FF, "...%s (Ýletiþim: %d)", Reklamlar[id][reklamIcerik][64], (Reklamlar[id][reklamIletisim] == -1) ? (0) : (Reklamlar[id][reklamIletisim]));
                    }
			    }
			    else
			    {
			        foreach (new i : Player) if(PlayerData[i][pDinle] != -1 && PlayerData[i][pAyarlar][2] == 0)
			        {
			            SendClientMessageEx(i, 0x42f445FF, "[%s]: %s (Ýletiþim: %d)", Birlikler[Reklamlar[id][ajansID]][birlikAd], Reklamlar[id][reklamIcerik], (Reklamlar[id][reklamIletisim] == -1) ? (0) : (Reklamlar[id][reklamIletisim]));
			        }
			    }
			    Birlikler[Reklamlar[id][ajansID]][ReklamSayisi]++;
			    Birlikler[Reklamlar[id][ajansID]][birlikKasaPara] += Reklamlar[id][reklamUcret];
			    Reklamlar[id][reklamExists] = 0;
			    format(Reklamlar[id][reklamIcerik], 128, "");
			    Reklamlar[id][reklamIletisim] = -1;
			    Reklamlar[id][ajansID] = -1;
			    Reklamlar[id][reklamGonderen] = -1;
			    MesajGonder(playerid, "Reklam onaylanmýþtýr.");
			    callcmd::reklamlar(playerid);
	        }
	        if(listitem == 1)
	        {
	            if(oyuncuid != -1) BilgiMesajGonder(playerid, "Reklamýnýz onaylanmadý.");
	            else BildirimEkle(Reklamlar[id][reklamGonderen],"Reklamýnýz onaylanmadý.","Sistem");
	            Reklamlar[id][reklamExists] = 0;
			    format(Reklamlar[id][reklamIcerik], 128, "");
			    Reklamlar[id][reklamIletisim] = -1;
			    Reklamlar[id][ajansID] = -1;
			    Reklamlar[id][reklamGonderen] = -1;
			    MesajGonder(playerid, "Reklam reddedildi.");
			    callcmd::reklamlar(playerid);
	        }
	    }
	}
	return 1;
}
stock Reklam_Olustur(playerid, icerik[])
{
	for(new re; re<MAX_REKLAM; re++)
	{
	    if(!Reklamlar[re][reklamExists])
	    {
			Reklamlar[re][reklamExists] = 1;
	        format(Reklamlar[re][reklamIcerik], 128, icerik);
	        Reklamlar[re][ajansID] = GetPVarInt(playerid, "ajansID");
	        Reklamlar[re][reklamIletisim] = PlayerData[playerid][pTelefon];
	        Reklamlar[re][reklamGonderen] = PlayerData[playerid][pID];
	        Reklamlar[re][reklamUcret] = Birlikler[GetPVarInt(playerid, "ajansID")][ReklamUcreti];
	        return re;
	    }
	}
	return -1;
}
stock AjansListele(playerid)
{
	for(new i; i<MAX_BIRLIK; i++) if(Birlikler[i][birlikExists] && Birlikler[i][birlikTip] == BIRLIK_HABER)
	{
	    Birlik_Kaydet(i);
	}

	new str[1000], string[124];
    format(string, sizeof(string), "SELECT * FROM `birlikler` WHERE `btip` = '3' ORDER BY aktifdinleyici DESC LIMIT %d, 15", GetPVarInt(playerid, "AjansPage")*15);
    new Cache:sawyer = mysql_query(baglanti, string);
    new rows;
    cache_get_row_count(rows);
    if(rows)
    {
        new sqlid, pawnid, dinleyici, yayintipi, yayindurum, birlikad[32];
        strcat(str, "{FFFFFF}Kanal Adý\t{FFFFFF}Yayýn Durumu\t{FFFFFF}Yayýn Tipi\t{FFFFFF}Dinleyici\n");
        for(new i; i<rows; i++)
        {
            cache_get_value_name_int(i, "bid", sqlid);
            cache_get_value_name_int(i, "aktifdinleyici", dinleyici);
            cache_get_value_name_int(i, "yayintipi", yayintipi);
            cache_get_value_name_int(i, "yayindurum", yayindurum);
            cache_get_value_name(i, "bisim", birlikad, 32);
            pawnid = GetFactionByID(sqlid);
            AjansListeleme[playerid][i] = pawnid;
            format(string, sizeof(string), "{FFFFFF}%s\t%s\t{FFFFFF}%s\t{FFFFFF}%d\n", birlikad, (yayindurum == 1) ? ("{2ECC71}Açýk") : ("{ff0000}Kapalý"), (yayintipi == 0) ? ("Haber") : ("Müzik"), dinleyici);
            strcat(str, string);
        }
        if(rows > 15) strcat(str, "{AFAFAF}» Ileri\n{AFAFAF}» Geri");
        format(string, sizeof(string), "Yayýn Ajanslarý {AA3333}(Sayfa %d)", GetPVarInt(playerid, "AjansPage")+1);
        Dialog_Show(playerid, Dinle, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Dinle", "Kapat");
	}
	cache_delete(sawyer);
	return 1;
}
Dialog:Dinle(playerid, response, listitem, inputtext[])
{
	if(response)
	{
        if(strfind(inputtext, "Ileri", true) != -1)
        {
            SetPVarInt(playerid, "AjansPage", GetPVarInt(playerid, "AjansPage")+1);
            AjansListele(playerid);
            return 1;
        }
        if(strfind(inputtext, "Geri", true) != -1)
        {
            if(GetPVarInt(playerid, "AjansPage") < 1)
            {
                AjansListele(playerid);
                HataMesajGonder(playerid, "Zaten ilk sayfadasýnýz!");
            }
            else
            {
                SetPVarInt(playerid, "AjansPage", GetPVarInt(playerid, "AjansPage")-1);
                AjansListele(playerid);
            }
            return 1;
        }
        new id = AjansListeleme[playerid][listitem];
        if(Birlikler[id][birlikExists] && Birlikler[id][birlikTip] == BIRLIK_HABER)
        {
            PlayerData[playerid][pDinle] = id;
            MesajGonder(playerid, "Artýk %s adlý ajansýn yayýnýný dinliyorsunuz.", Birlikler[id][birlikAd]);
            Birlik_Kaydet(id);
        }
	}
	return 1;
}
stock IsNewsVehicle(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
	    case 488, 582: return 1;
	}
	return 0;
}
Dialog:Kumarhane(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(listitem == 0)
	    {
	    	if(PlayerData[playerid][pCash] < 100) return HataMesajGonder(playerid, "Yeterli paranýz bulunmuyor!");
	    	Dialog_Show(playerid, TekCiftBahis, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Tek/Çift", "{AA3333}» {FFFFFF}Lütfen oynamak istediðiniz bahis miktarýný girin ($100 ile $1500 arasýnda olmalýdýr)", "Devam", "Geri");
	    }
	    if(listitem == 1)
	    {
	        if(PlayerData[playerid][pCash] < 100) return HataMesajGonder(playerid, "Yeterli paranýz bulunmuyor!");
	        Dialog_Show(playerid, SupremeNumber, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Supreme Number", "{AA3333}» {FFFFFF}Lütfen oynamak istediðiniz bahis miktarýný girin ($100 ile $1500 arasýnda olmalýdýr)", "Devam", "Geri");
	    }
	    if(listitem == 2)
	    {
	        if(PlayerData[playerid][pCash] < 100) return HataMesajGonder(playerid, "Yeterli paranýz bulunmuyor!");
	        Dialog_Show(playerid, ZarDuellosu, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen oynamak istediðiniz bahis miktarýný girin:\n\n{AA3333}Uyarý: {FFFFFF}En az $100, en fazla $10,000 bahis oynayabilirsiniz.", "Devam", "Kapat");
	    }
	}
	return 1;
}
Dialog:ZarDuellosu(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, ZarDuellosu, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen oynamak istediðiniz bahis miktarýný girin:\n\n{AA3333}Uyarý: {FFFFFF}En az $100, en fazla $10,000 bahis oynayabilirsiniz.", "Devam", "Kapat");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, ZarDuellosu, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen oynamak istediðiniz bahis miktarýný girin:\n\n{AA3333}Uyarý: {FFFFFF}En az $100, en fazla $10,000 bahis oynayabilirsiniz.", "Devam", "Kapat");
	    if(strval(inputtext) < 100 || strval(inputtext) > 10000) return Dialog_Show(playerid, ZarDuellosu, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen oynamak istediðiniz bahis miktarýný girin:\n\n{AA3333}Uyarý: {FFFFFF}En az $100, en fazla $10,000 bahis oynayabilirsiniz.", "Devam", "Kapat");
	    if(strval(inputtext) > PlayerData[playerid][pCash])
	    {
	        HataMesajGonder(playerid, "O kadar paranýz yok.");
	        return Dialog_Show(playerid, ZarDuellosu, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen oynamak istediðiniz bahis miktarýný girin:\n\n{AA3333}Uyarý: {FFFFFF}En az $100, en fazla $10,000 bahis oynayabilirsiniz.", "Devam", "Kapat");
	    }
	    SetPVarInt(playerid, "kumar_para", strval(inputtext));
	    Dialog_Show(playerid, ZarDuellosu2, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen düello yapmak istediðiniz kiþinin ID'sini girin:", "Devam", "Geri");
	}
	return 1;
}
Dialog:ZarDuellosu2(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, ZarDuellosu, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen oynamak istediðiniz bahis miktarýný girin:\n\n{AA3333}Uyarý: {FFFFFF}En az $100, en fazla $10,000 bahis oynayabilirsiniz.", "Devam", "Kapat");
	if(response)
	{
	    if(isnull(inputtext) || !IsNumeric(inputtext)) return Dialog_Show(playerid, ZarDuellosu2, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen düello yapmak istediðiniz kiþinin ID'sini girin:", "Devam", "Geri");
	    new id = strval(inputtext);
	    if(!OyundaDegil(id))
	    {
	        HataMesajGonder(playerid, "Oyuncu oyunda deðil.");
	        return Dialog_Show(playerid, ZarDuellosu2, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen düello yapmak istediðiniz kiþinin ID'sini girin:", "Devam", "Geri");
	    }
	    if(playerid == id)
	    {
	        HataMesajGonder(playerid, "Kendi ID'ni yazamazsýn!");
	        return Dialog_Show(playerid, ZarDuellosu2, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen düello yapmak istediðiniz kiþinin ID'sini girin:", "Devam", "Geri");
	    }
	    if(!IsPlayerNearPlayer(playerid, id, 20.0))
	    {
	        HataMesajGonder(playerid, "Kiþiye yeterince yakýn deðilsiniz.");
	        return Dialog_Show(playerid, ZarDuellosu2, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen düello yapmak istediðiniz kiþinin ID'sini girin:", "Devam", "Geri");
	    }
	    if(IsPlayerPause(id))
	    {
	        HataMesajGonder(playerid, "Bu oyuncu AFK, zar düellosu yollayamazsýnýz.");
	        return Dialog_Show(playerid, ZarDuellosu2, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen düello yapmak istediðiniz kiþinin ID'sini girin:", "Devam", "Geri");
	    }
	    if(GetPVarInt(id, "kumar_id") != INVALID_PLAYER_ID)
	    {
	        HataMesajGonder(playerid, "Bu kiþi þuanda baþkasýyla düello yapýyor.");
	        return Dialog_Show(playerid, ZarDuellosu2, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen düello yapmak istediðiniz kiþinin ID'sini girin:", "Devam", "Geri");
	    }
	    new bahis = GetPVarInt(playerid, "kumar_para");
	    if(PlayerData[id][pCash] < bahis)
	    {
	        HataMesajGonder(playerid, "Bu kiþinin yeterli parasý yok.");
	        return Dialog_Show(playerid, ZarDuellosu2, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen düello yapmak istediðiniz kiþinin ID'sini girin:", "Devam", "Geri");
	    }
	    SetPVarInt(id, "kumar_para", bahis);
     	new para = GetPVarInt(playerid, "kumar_para");
      	SetPVarInt(playerid, "kumar_id", id);
       	SetPVarInt(id, "kumar_id", playerid);
       	MesajGonder(playerid, "%s kiþisine düello daveti gönderildi, yanýtýný bekleyin.", ReturnName(id, 0));
       	Dialog_Show(id, DuelloDavet, DIALOG_STYLE_MSGBOX, "Düello Daveti", "{ffffff}%s, {2ecc71}$%s {ffffff}miktarýnda bahisle sizi zar düellosuna davet ediyor. Kabul ediyor musunuz?", "Evet", "Hayýr", ReturnName(playerid, 0), FormatNumber(para));
	}
	return 1;
}
Dialog:DuelloDavet(playerid, response, listitem, inputtext[])
{
    if(!response)
   	{
  		new id = GetPVarInt(playerid, "kumar_id");
    	BilgiMesajGonder(id, "%s düello davetinizi reddetti.", ReturnName(playerid, 0));
       	SetPVarInt(id, "kumar_id", INVALID_PLAYER_ID);
        SetPVarInt(playerid, "kumar_id", INVALID_PLAYER_ID);
    }
    if(response)
    {
    	new id = GetPVarInt(playerid, "kumar_id");
     	MesajGonder(id, "%s zar düellosunu kabul etti.", ReturnName(playerid, 0));
       	SetPVarInt(playerid, "kumar_kimde", 0);
        SetPVarInt(id, "kumar_kimde", 1);
        KumarDondurme(playerid);
        KumarDondurme(id);
    }
	return 1;
}
Dialog:SupremeNumber(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::kumar(playerid);
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, SupremeNumber, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Supreme Number", "{AA3333}» {FFFFFF}Lütfen oynamak istediðiniz bahis miktarýný girin ($100 ile $1500 arasýnda olmalýdýr)", "Devam", "Geri");
	    if(strval(inputtext) < 100 || strval(inputtext) > 1500) return Dialog_Show(playerid, SupremeNumber, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Supreme Number", "{AA3333}» {FFFFFF}Lütfen oynamak istediðiniz bahis miktarýný girin ($100 ile $1500 arasýnda olmalýdýr)", "Devam", "Geri");
	    if(PlayerData[playerid][pCash] < strval(inputtext))
	    {
	        HataMesajGonder(playerid, "Yazdýðýnýz bahis kadar paranýz yok!");
	        return Dialog_Show(playerid, SupremeNumber, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Supreme Number", "{AA3333}» {FFFFFF}Lütfen oynamak istediðiniz bahis miktarýný girin ($100 ile $1500 arasýnda olmalýdýr)", "Devam", "Geri");
	    }
	    new sayi = RandomEx(1,7);
		new oyuncusayi = RandomEx(1,7);
		new id = Business_Inside(playerid);
  		if(id == -1 || Isyeri[id][isyeriTip] != 7) return 1;
		if(sayi == oyuncusayi)
		{
  			SendClientMessage(playerid, -1, "{C8C8C8}-------------------------------------------------------------------------");
			SendClientMessageEx(playerid, -1, "{C8C8C8}Kurpiyer bir zar attý ve {808080}%d {C8C8C8}geldi.", sayi);
			SendClientMessageEx(playerid, -1, "{C8C8C8}Siz bir zar attýnýz ve {808080}%d {C8C8C8}geldi.", oyuncusayi);
			SendClientMessage(playerid, -1, "{C8C8C8}Hiç bir kazanan olmadý!");
			SendClientMessage(playerid,-1, "{C8C8C8}-------------------------------------------------------------------------");
		}
		else if(sayi > oyuncusayi)
		{
		    SendClientMessage(playerid, -1, "{C8C8C8}-------------------------------------------------------------------------");
			SendClientMessageEx(playerid, -1, "{C8C8C8}Kurpiyer bir zar attý ve {808080}%d {C8C8C8}geldi.", sayi);
			SendClientMessageEx(playerid, -1, "{C8C8C8}Siz bir zar attýnýz ve {808080}%d {C8C8C8}geldi.", oyuncusayi);
			SendClientMessageEx(playerid, -1, "{C8C8C8}Üzgünüz, {E74C3C}%s {C8C8C8}kaybettiniz.", FormatNumber(strval(inputtext)));
			SendClientMessage(playerid, -1, "{C8C8C8}-------------------------------------------------------------------------");
			ParaVer(playerid, -strval(inputtext));
			Isyeri[id][isyeriKasa] += strval(inputtext);
			Isyeri_Kaydet(id);
		}
		else
		{
		    SendClientMessage(playerid, -1, "{C8C8C8}-------------------------------------------------------------------------");
			SendClientMessageEx(playerid, -1, "{C8C8C8}Kurpiyer bir zar attý ve {808080}%d {C8C8C8}geldi.", sayi);
			SendClientMessageEx(playerid, -1, "{C8C8C8}Siz bir zar attýnýz ve {808080}%d {C8C8C8}geldi.", oyuncusayi);
			SendClientMessageEx(playerid, -1, "{C8C8C8}Tebrikler, {2ECC71} %s {C8C8C8}kazandýnýz!", FormatNumber(strval(inputtext)*2));
			SendClientMessage(playerid,-1, "{C8C8C8}-------------------------------------------------------------------------");
			ParaVer(playerid, strval(inputtext));
			Isyeri[id][isyeriKasa] -= strval(inputtext);
			Isyeri_Kaydet(id);
		}
	}
	return 1;
}
Dialog:TekCiftBahis(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::kumar(playerid);
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, TekCiftBahis, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Tek/Çift", "{AA3333}» {FFFFFF}Lütfen oynamak istediðiniz bahis miktarýný girin ($100 ile $1500 arasýnda olmalýdýr)", "Devam", "Geri");
	    if(strval(inputtext) < 100 || strval(inputtext) > 1500) return Dialog_Show(playerid, TekCiftBahis, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Tek/Çift", "{AA3333}» {FFFFFF}Lütfen oynamak istediðiniz bahis miktarýný girin ($100 ile $1500 arasýnda olmalýdýr)", "Devam", "Geri");
	    if(PlayerData[playerid][pCash] < strval(inputtext))
	    {
	        HataMesajGonder(playerid, "Yazdýðýnýz bahis kadar paranýz yok!");
	        return Dialog_Show(playerid, TekCiftBahis, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Tek/Çift", "{AA3333}» {FFFFFF}Lütfen oynamak istediðiniz bahis miktarýný girin ($100 ile $1500 arasýnda olmalýdýr)", "Devam", "Geri");
	    }
	    SetPVarInt(playerid, "BahisPara", strval(inputtext));
	    Dialog_Show(playerid, TekCift, DIALOG_STYLE_LIST, "{FFFFFF}Kumarhane - {AA3333}Tek/Çift", "{FFFFFF}Tek\n{FFFFFF}Çift", "Seç", "Geri");
	}
	return 1;
}
Dialog:TekCift(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    DeletePVar(playerid, "BahisPara");
	    Dialog_Show(playerid, TekCiftBahis, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Tek/Çift", "{AA3333}» {FFFFFF}Lütfen oynamak istediðiniz bahis miktarýný girin ($100 ile $1500 arasýnda olmalýdýr)", "Devam", "Geri");
	    return 1;
	}
	else
	{
	    if(listitem == 0)
	    {
	        new sayi = RandomEx(1,7);
	        new id = Business_Inside(playerid);
	        if(id == -1 || Isyeri[id][isyeriTip] != 7) return 1;
	        if(sayi == 1 || sayi == 3 || sayi == 5)
	        {
	            ParaVer(playerid, GetPVarInt(playerid, "BahisPara"));
				SendClientMessage(playerid,-1, "{C8C8C8}-------------------------------------------------------------------------");
				SendClientMessageEx(playerid, -1, "{C8C8C8}Kurpiyer bir zar attý ve {808080}%d {C8C8C8}geldi. Tebrikler {2ECC71}%s {C8C8C8}kazandýnýz!", sayi, FormatNumber(GetPVarInt(playerid, "BahisPara")*2));
				SendClientMessage(playerid,-1, "{C8C8C8}-------------------------------------------------------------------------");
				Isyeri[id][isyeriKasa] -= GetPVarInt(playerid, "BahisPara");
				Isyeri_Kaydet(id);
				DeletePVar(playerid, "BahisPara");
	        }
	        else
	        {
	            ParaVer(playerid, -GetPVarInt(playerid, "BahisPara"));
				SendClientMessage(playerid,-1, "{C8C8C8}-------------------------------------------------------------------------");
				SendClientMessageEx(playerid, -1, "{C8C8C8}Kurpiyer bir zar attý ve {808080}%d {C8C8C8}geldi. Üzgünüz, {E74C3C}%s {C8C8C8}kaybettiniz!", sayi, FormatNumber(GetPVarInt(playerid, "BahisPara")));
				SendClientMessage(playerid,-1, "{C8C8C8}-------------------------------------------------------------------------");
				Isyeri[id][isyeriKasa] += GetPVarInt(playerid, "BahisPara");
				Isyeri_Kaydet(id);
				DeletePVar(playerid, "BahisPara");
	        }

	    }
	    if(listitem == 1)
	    {
	        new sayi = RandomEx(1,7);
	        new id = Business_Inside(playerid);
	        if(id == -1 || Isyeri[id][isyeriTip] != 7) return 1;
	        if(sayi == 2 || sayi == 4 || sayi == 6)
	        {
	            ParaVer(playerid, GetPVarInt(playerid, "BahisPara"));
				SendClientMessage(playerid,-1, "{C8C8C8}-------------------------------------------------------------------------");
				SendClientMessageEx(playerid, -1, "{C8C8C8}Kurpiyer bir zar attý ve {808080}%d {C8C8C8}geldi. Tebrikler {2ECC71}%s {C8C8C8}kazandýnýz!", sayi, FormatNumber(GetPVarInt(playerid, "BahisPara")*2));
				SendClientMessage(playerid,-1, "{C8C8C8}-------------------------------------------------------------------------");
				Isyeri[id][isyeriKasa] -= GetPVarInt(playerid, "BahisPara");
				Isyeri_Kaydet(id);
				DeletePVar(playerid, "BahisPara");
	        }
	        else
	        {
	            ParaVer(playerid, -GetPVarInt(playerid, "BahisPara"));
				SendClientMessage(playerid,-1, "{C8C8C8}-------------------------------------------------------------------------");
				SendClientMessageEx(playerid, -1, "{C8C8C8}Kurpiyer bir zar attý ve {808080}%d {C8C8C8}geldi. Üzgünüz, {E74C3C}%s {C8C8C8}kaybettiniz!", sayi, FormatNumber(GetPVarInt(playerid, "BahisPara")));
				SendClientMessage(playerid,-1, "{C8C8C8}-------------------------------------------------------------------------");
				Isyeri[id][isyeriKasa] += GetPVarInt(playerid, "BahisPara");
				Isyeri_Kaydet(id);
				DeletePVar(playerid, "BahisPara");
	        }
	    }
	}
	return 1;
}
KumarReset(playerid, kumar_mode = 0){
    if(kumar_mode == 0){
        SetPVarInt(playerid, "kumar_id", INVALID_PLAYER_ID);
        SetPVarInt(playerid, "kumar_para", 0);
        SetPVarInt(playerid, "kumar_para2", 0);
        SetPVarInt(playerid, "kumar_kimde", 0);
    }else{
        SetPVarInt(playerid, "kumar_id", INVALID_PLAYER_ID);
        SetPVarInt(playerid, "kumar_para", 0);
        SetPVarInt(playerid, "kumar_para2", 0);
        SetPVarInt(playerid, "kumar_kimde", 0);
        ShowPlayerDialog(playerid, -1, DIALOG_STYLE_MSGBOX, "", "", "", "");
    }
}
KumarDondurme(playerid)
{
    new sz[325];
    new id = GetPVarInt(playerid, "kumar_id");
    new bahis = GetPVarInt(playerid, "kumar_para");
    format(sz, sizeof(sz), "{3498db}» Partner: {ffffff}%s\n", ReturnName(id, 0));
    format(sz, sizeof(sz), "%s{3498db}» Bahis: {ffffff}%s (Deðiþtir)\n", sz, FormatNumber(bahis));
    format(sz, sizeof(sz), "%s{3498db}» {ffffff}Döndür\n", sz);
    format(sz, sizeof(sz), "%s\t\n", sz);
    format(sz, sizeof(sz), "%s\t\n ", sz);
    format(sz, sizeof(sz), "%s{e74c3c}» {ffffff}Düelloyu Bitir\n", sz);
    Dialog_Show(playerid, KumarDondurme, DIALOG_STYLE_LIST, "Zar Düellosu", sz, "Seç", "");
    return 1;
}
Dialog:KumarDondurme(playerid, response, listitem, inputtext[])
{
	if(!response) return KumarDondurme(playerid);
	if(response)
	{
	    switch(listitem)
	    {
	        case 0, 3, 4: KumarDondurme(playerid);
	        case 1: Dialog_Show(playerid, BahisDegistir, DIALOG_STYLE_INPUT, "Bahis Deðiþtir", "Lütfen deðiþtirmek istediðiniz bahis tutarýný girin.\n\nUyarý: En az $100 en fazla $10,000 girebilirsin.", "Deðiþtir", "Iptal");
	        case 2:
         	{
                    new durum = GetPVarInt(playerid, "kumar_kimde");
                    if(!durum) {
                        KumarDondurme(playerid);
                        HataMesajGonder(playerid, "Oyun sýrasý sizde deðil.");
                        return 1;
                    }
                    if(durum){
                        new
                            ben[3],
                            karsi[3],
                            sz[300],
                            id = GetPVarInt(playerid, "kumar_id"),
                            bahis = GetPVarInt(playerid, "kumar_para")
                        ;

                        if(PlayerData[playerid][pCash] < bahis)
                        {
                            BilgiMesajGonder(playerid, "Yeterli paranýz kalmadýðý için zar düellosu sonlandýrýldý.");
                            BilgiMesajGonder(id, "Karþý tarafýn yeterli parasý kalmadýðý için zar düellosu sonlandýrýldý.");
                            KumarReset(playerid, 1);
                            KumarReset(id, 1);
                            return 1;
                        }

                        if(PlayerData[id][pCash] < bahis)
                        {
                            BilgiMesajGonder(id, "Yeterli paranýz kalmadýðý için zar düellosu sonlandýrýldý.");
                            BilgiMesajGonder(playerid, "Karþý tarafýn yeterli parasý kalmadýðý için zar düellosu sonlandýrýldý.");
                            KumarReset(playerid, 1);
                            KumarReset(id, 1);
                            return 1;
                        }

                        SetPVarInt(playerid, "kumar_kimde", 0);
                        SetPVarInt(id, "kumar_kimde", 1);

                        ben[0] = ZAR_NXR();
                        ben[1] = ZAR_NXR();
                        ben[2] = ben[0] + ben[1];

                        karsi[0] = ZAR_NXR();
                        karsi[1] = ZAR_NXR();
                        karsi[2] = karsi[0] + karsi[1];
                        SendClientMessage(playerid, 0xFFFFFF, "");
                        SendClientMessage(playerid, 0xFFFFFF, "");
                        SendClientMessage(playerid, 0xFFFFFF, "");
                        SendClientMessage(playerid, 0xFFFFFF, "");
                        SendClientMessage(playerid, 0xFFFFFF, "");

                        SendClientMessage(id, 0xFFFFFF, "");
                        SendClientMessage(id, 0xFFFFFF, "");
                        SendClientMessage(id, 0xFFFFFF, "");
                        SendClientMessage(id, 0xFFFFFF, "");
                        SendClientMessage(id, 0xFFFFFF, "");

                        SendClientMessage(playerid, 0xffC8C8C8, "--------------------------------------------");
                        SendClientMessage(id, 0xffC8C8C8, "--------------------------------------------");
                        format(sz, sizeof(sz), "%s, (1. Zar: %d), (2. Zar: %d), (Toplam: %d)", ReturnName(playerid, 0), ben[0], ben[1], ben[2]);
                        SendClientMessage(playerid, 0xffC8C8C8, sz);
                        SendClientMessage(id, 0xffC8C8C8, sz);

                        format(sz, sizeof(sz), "%s, (1. Zar: %d), (2. Zar: %d), (Toplam: %d)", ReturnName(id, 0), karsi[0], karsi[1], karsi[2]);
                        SendClientMessage(playerid, 0xffC8C8C8, sz);
                        SendClientMessage(id, 0xffC8C8C8, sz);

                        if(ben[2] > karsi[2]){
                            format(sz, sizeof(sz), "Bu roundu %s (%s) kazandý !", ReturnName(playerid, 0), FormatNumber(bahis));
                            ParaVer(playerid, bahis);
                            ParaVer(id, -bahis);
                        }
                        if(karsi[2] > ben[2]){
                            format(sz, sizeof(sz), "Bu roundu %s (%s) kazandý !", ReturnName(id, 0), FormatNumber(bahis));
                            ParaVer(playerid, -bahis);
                            ParaVer(id, bahis);
                        }
                        if(ben[2] == karsi[2]){
                            format(sz, sizeof(sz), "Bu roundu kimse kazanamadý !");
                        }
                        SendClientMessage(playerid, 0xffC8C8C8, sz);
                        SendClientMessage(id, 0xffC8C8C8, sz);

                        SendClientMessage(playerid, 0xffC8C8C8, "--------------------------------------------");
                        SendClientMessage(id, 0xffC8C8C8, "--------------------------------------------");

                        KumarDondurme(playerid);
                        KumarDondurme(id);
			}

		}
		case 5:
   			{
      			//new sz[300];
         		new id = GetPVarInt(playerid, "kumar_id");
           		MesajGonder(id, "%s zar düellosunu bitirdi.", ReturnName(playerid, 0));
				MesajGonder(playerid, "Zar düellosunu bitirdiniz.");
				ShowPlayerDialog(id, -1, DIALOG_STYLE_MSGBOX, "", "", "", "");
    			ShowPlayerDialog(playerid, -1, DIALOG_STYLE_MSGBOX, "", "", "", "");
       			KumarReset(playerid, 1);
          		KumarReset(id, 1);
      		}
	    }
	}
	return 1;
}
Dialog:BahisDegistir(playerid, response, listitem, inputtext[])
{
    if(!response) return KumarDondurme(playerid);
    if(response)
    {
        if(isnull(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 100 || strval(inputtext) > 10000) return Dialog_Show(playerid, BahisDegistir, DIALOG_STYLE_INPUT, "Bahis Deðiþtir", "Lütfen deðiþtirmek istediðiniz bahis tutarýný girin.\n\nUyarý: En az $100 en fazla $10,000 girebilirsin.", "Deðiþtir", "Iptal");
        if(strval(inputtext) > PlayerData[playerid][pCash])
        {
            HataMesajGonder(playerid, "O kadar paranýz yok.");
            return Dialog_Show(playerid, BahisDegistir, DIALOG_STYLE_INPUT, "Bahis Deðiþtir", "Lütfen deðiþtirmek istediðiniz bahis tutarýný girin.\n\nUyarý: En az $100 en fazla $10,000 girebilirsin.", "Deðiþtir", "Iptal");
        }
       	new id = GetPVarInt(playerid, "kumar_id");
		if(strval(inputtext) > PlayerData[id][pCash])
		{
		    HataMesajGonder(playerid, "Karþýdaki kiþinin o kadar parasý yok.");
		    return Dialog_Show(playerid, BahisDegistir, DIALOG_STYLE_INPUT, "Bahis Deðiþtir", "Lütfen deðiþtirmek istediðiniz bahis tutarýný girin.\n\nUyarý: En az $100 en fazla $10,000 girebilirsin.", "Deðiþtir", "Iptal");
		}
		SetPVarInt(playerid, "kumar_para2", strval(inputtext));
		MesajGonder(playerid, "%s adlý kiþiye bahis deðiþtirme teklifi gönderildi.", ReturnName(id, 0));
		Dialog_Show(id, BahisDegistir2, DIALOG_STYLE_MSGBOX, "Bahis Deðiþtirme", "{ffffff}%s, bahis tutarýný {2ecc71}$%s {ffffff}olarak güncellemek istiyor.", "Kabul Et", "Reddet", ReturnName(playerid, 0), FormatNumber(strval(inputtext)));
    }
	return 1;
}
Dialog:BahisDegistir2(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    //new sz[128];
     	new id = GetPVarInt(playerid, "kumar_id");
      	SetPVarInt(playerid, "kumar_para2", 0);
       	SetPVarInt(id, "kumar_para2", 0);
       	BilgiMesajGonder(id, "%s, göndermiþ olduðunuz bahis tutarýný kabul etmedi.", ReturnName(playerid, 0));
        KumarDondurme(playerid);
        KumarDondurme(id);
	}
	if(response)
	{
	    new id = GetPVarInt(playerid, "kumar_id");
     	new bahis = GetPVarInt(id, "kumar_para2");
      	SetPVarInt(playerid, "kumar_para2", 0);
       	SetPVarInt(id, "kumar_para2", 0);
       	SetPVarInt(playerid, "kumar_para", bahis);
        SetPVarInt(id, "kumar_para", bahis);
        MesajGonder(id, "%s, göndermiþ olduðunuz bahis tutarýný kabul etti.", ReturnName(playerid, 0));
        KumarDondurme(playerid);
        KumarDondurme(id);
	}
	return 1;
}
forward Refuel(playerid, aracid);
public Refuel(playerid, aracid)
{
    new price = floatround(0.5 * GetServerBilgi("BenzinFiyat"));
    if(PlayerData[playerid][pCash] < price)
    {
        HataMesajGonder(playerid, "Yeterli paranýz yok!");
        Fuel_ResetPlayer(playerid);
        return 1;
    }
    FuelBought[playerid] += 0.5;
    AracInfo[aracid][aracBenzin] += 0.5;
    new string[64];
	format(string, sizeof(string), "~b~~h~Dolduruluyor...~n~~n~~w~Fiyat: ~g~~h~$%d ~y~~h~(%.2f L)", floatround(FuelBought[playerid] * LITRE_PRICE), FuelBought[playerid]);
	PlayerTextDrawSetString(playerid, FuelText[playerid], string);
	ParaVer(playerid, -price);

	if(AracInfo[aracid][aracBenzin] >= 100.0)
	{
		AracInfo[aracid][aracBenzin] = 100.0;
		Fuel_ResetPlayer(playerid);
	}
	return 1;
}
Fuel_ResetPlayer(playerid)
{
	if(UsingPumpID[playerid] != -1)
	{
	    PumpData[ UsingPumpID[playerid] ][pumpUser] = INVALID_PLAYER_ID;
	    Pump_Update(UsingPumpID[playerid]);
	}

	if(RefuelTimer[playerid] != -1)
	{
	    KillTimer(RefuelTimer[playerid]);
	    RefuelTimer[playerid] = -1;

	    PlayerTextDrawHide(playerid, FuelText[playerid]);
	}

    UsingPumpID[playerid] = -1;
 	FuelBought[playerid] = 0.0;
	return 1;
}
stock PayDay(playerid)
{
    new maas = GetServerBilgi("SaatlikMaas");
    new vergi = GetServerBilgi("MaasVergi");
    new olusummaas;
    switch(GetFactionType(playerid))
    {
        case BIRLIK_LSPD, BIRLIK_FBI, BIRLIK_LSMD, BIRLIK_GOV:
        {
            switch(PlayerData[playerid][pFactionRutbe])
            {
                case 1..12:
                {
                    olusummaas = 50*PlayerData[playerid][pFactionRutbe] + 150;
                }
                case 13:
                {
                    olusummaas = 800;
                }
                case 14:
                {
                    olusummaas = 900;
                }
                case 15:
                {
                    olusummaas = 1000;
                }
            }
        }
        case BIRLIK_LEGAL:
        {
            switch(PlayerData[playerid][pFactionRutbe])
            {
	            case 1..6: olusummaas = 25*PlayerData[playerid][pFactionRutbe] + 25;
	            case 7: olusummaas = 300;
	            case 8: olusummaas = 325;
	            case 9: olusummaas = 350;
	            case 10: olusummaas = 375;
	            case 11..14: olusummaas = 400;
	            case 15: olusummaas = 450;
            }
        }
	}
	maas -= vergi;
	new kiraid = EvKiraID(playerid);
	if(kiraid != -1 && house_info[kiraid][evKiralik] == 1 && house_info[kiraid][evKiralayan] == PlayerData[playerid][pID])
	{
	    if(maas+PlayerData[playerid][pMaas] < house_info[kiraid][evKiraUcret])
	    {
	        house_info[kiraid][evKiralayan] = -1;
	        Ev_Kaydet(kiraid);
	        Ev_Yenile(kiraid);
	        if(GetPlayerIDWithSQLID(house_info[kiraid][evSahip]) != -1)
	        {
	            BilgiMesajGonder(playerid, "%s adlý kiþi kirayý ödemediði için evden otomatik olarak atýldý.",ReturnName(playerid, 0));
	        }
	        else
			{
			    new str[100];
			    format(str, sizeof(str), "%s adlý kiþi kirayý ödemediði için evden otomatik olarak atýldý.", ReturnName(playerid, 0));
			    BildirimEkle(house_info[kiraid][evSahip], str, "Sistem");
			}
	    }
	    else
	    {
	        if(maas > house_info[kiraid][evKiraUcret]) maas -= house_info[kiraid][evKiraUcret];
	        else PlayerData[playerid][pMaas] -= house_info[kiraid][evKiraUcret];
	        house_info[kiraid][evCash] += house_info[kiraid][evKiraUcret];
	        Ev_Kaydet(kiraid);
	    }
	}
	PlayerData[playerid][pMaas] += maas+olusummaas;
	switch(PlayerData[playerid][pVip])
	{
	    case 1: PlayerData[playerid][pMaas] += 200;
	    case 2: PlayerData[playerid][pMaas] += 400;
	    case 3: PlayerData[playerid][pMaas] += 600;
	}
	if(olusummaas > 0 && kiraid != -1)
	{
	    SendClientMessage(playerid, 0x80808080, "-----------------[ Maaþ Bordrosu ]----------------");
	    SendClientMessageEx(playerid, -1, "{C8C8C8}Saatlik Maaþ: {2ECC71}%s", FormatNumber(maas));
	    SendClientMessageEx(playerid, -1, "{C8C8C8}Vergi: {E74C3C}%s", FormatNumber(vergi));
	    SendClientMessageEx(playerid, -1, "{C8C8C8}Oluþum Maaþý: {2ECC71}%s", FormatNumber(olusummaas));
	    SendClientMessageEx(playerid, -1, "{C8C8C8}Kira Ücreti: {E74C3C}%s", FormatNumber(house_info[kiraid][evKiraUcret]));
	    switch(PlayerData[playerid][pVip])
	    {
	        case 1: SendClientMessageEx(playerid, -1, "{C8C8C8}VIP maaþý: {2ECC71}$200");
	        case 2: SendClientMessageEx(playerid, -1, "{C8C8C8}VIP maaþý: {2ECC71}$400");
	        case 3: SendClientMessageEx(playerid, -1, "{C8C8C8}VIP maaþý: {2ECC71}$600");
	    }
	    SendClientMessageEx(playerid, -1, "{FFFFFF}Maaþ Hesabý: {2ECC71}%s", FormatNumber(PlayerData[playerid][pMaas]));
	    SendClientMessage(playerid, 0x80808080, "---------------------------------------------------------");
	}
	else if(olusummaas > 0 && kiraid == -1)
	{
	    SendClientMessage(playerid, 0x80808080, "-----------------[ Maaþ Bordrosu ]----------------");
	    SendClientMessageEx(playerid, -1, "{C8C8C8}Saatlik Maaþ: {2ECC71}%s", FormatNumber(maas));
	    SendClientMessageEx(playerid, -1, "{C8C8C8}Vergi: {FF0000}%s", FormatNumber(vergi));
	    SendClientMessageEx(playerid, -1, "{C8C8C8}Oluþum Maaþý: {2ECC71}%s", FormatNumber(olusummaas));
	    switch(PlayerData[playerid][pVip])
	    {
	        case 1: SendClientMessageEx(playerid, -1, "{C8C8C8}VIP maaþý: {2ECC71}$200");
	        case 2: SendClientMessageEx(playerid, -1, "{C8C8C8}VIP maaþý: {2ECC71}$400");
	        case 3: SendClientMessageEx(playerid, -1, "{C8C8C8}VIP maaþý: {2ECC71}$600");
	    }
	    SendClientMessageEx(playerid, -1, "{C8C8C8}Toplam Eklenen Maaþ: {2ECC71}%s", FormatNumber(maas+olusummaas+PlayerData[playerid][pVip]*50));
	    SendClientMessageEx(playerid, -1, "{C8C8C8}Maaþ Hesabý: {2ECC71}%s", FormatNumber(PlayerData[playerid][pMaas]));
	    SendClientMessage(playerid, 0x80808080, "---------------------------------------------------------");
	}
	else if(olusummaas <= 0 && kiraid != -1)
	{
	    SendClientMessage(playerid, 0x80808080, "-----------------[ Maaþ Bordrosu ]----------------");
	    SendClientMessageEx(playerid, -1, "{C8C8C8}Saatlik Maaþ: {2ECC71}%s", FormatNumber(maas));
	    SendClientMessageEx(playerid, -1, "{C8C8C8}Vergi: {E74C3C}%s", FormatNumber(vergi));
	    SendClientMessageEx(playerid, -1, "{C8C8C8}Kira Ücreti: {E74C3C}%s", FormatNumber(house_info[kiraid][evKiraUcret]));
	    switch(PlayerData[playerid][pVip])
	    {
	        case 1: SendClientMessageEx(playerid, -1, "{C8C8C8}VIP maaþý: {2ECC71}$200");
	        case 2: SendClientMessageEx(playerid, -1, "{C8C8C8}VIP maaþý: {2ECC71}$400");
	        case 3: SendClientMessageEx(playerid, -1, "{C8C8C8}VIP maaþý: {2ECC71}$600");
	    }
	    SendClientMessageEx(playerid, -1, "{C8C8C8}Toplam Eklenen Maaþ: {2ECC71}%s", FormatNumber(maas+PlayerData[playerid][pVip]*200 - house_info[kiraid][evKiraUcret]));
	    SendClientMessageEx(playerid, -1, "{C8C8C8}Maaþ Hesabý: {2ECC71}%s", FormatNumber(PlayerData[playerid][pMaas]));
	    SendClientMessage(playerid, 0x80808080, "---------------------------------------------------------");
	}
	else if(olusummaas <= 0 && kiraid == -1)
	{
	    SendClientMessage(playerid, 0x80808080, "-----------------[ Maaþ Bordrosu ]----------------");
	    SendClientMessageEx(playerid, -1, "{C8C8C8}Saatlik Maaþ: {2ECC71}%s", FormatNumber(maas));
	    SendClientMessageEx(playerid, -1, "{C8C8C8}Vergi: {E74C3C}%s", FormatNumber(vergi));
	    switch(PlayerData[playerid][pVip])
	    {
	        case 1: SendClientMessageEx(playerid, -1, "{C8C8C8}VIP maaþý: {2ECC71}$200");
	        case 2: SendClientMessageEx(playerid, -1, "{C8C8C8}VIP maaþý: {2ECC71}$400");
	        case 3: SendClientMessageEx(playerid, -1, "{C8C8C8}VIP maaþý: {2ECC71}$600");
	    }
	    SendClientMessageEx(playerid, -1, "{C8C8C8}Maaþ Hesabý: {2ECC71}%s", FormatNumber(PlayerData[playerid][pMaas]));
	    SendClientMessage(playerid, 0x80808080, "--------------------------------------------------------");
	}
	if(PlayerData[playerid][pHediye] == 1) SendClientMessage(playerid, 0x80808080, "Maaþ ikramiyenizi almak için [/ikramiyeal]");
	return 1;
}
stock Boombox_SetURL(playerid, url[])
{
	if (BoomboxData[playerid][boomboxPlaced])
	{
	    strpack(BoomboxData[playerid][boomboxURL], url, 128 char);

		foreach (new i : Player) if (PlayerData[i][pMuzikKutusu] == playerid)
		{
 			StopAudioStreamForPlayer(i);
   			PlayAudioStreamForPlayer(i, url, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2], 30.0, 1);
  		}
	}
	return 1;
}
stock Boombox_Destroy(playerid)
{
	if (BoomboxData[playerid][boomboxPlaced])
	{
		if (IsValidDynamicObject(BoomboxData[playerid][boomboxObject]))
		    DestroyDynamicObject(BoomboxData[playerid][boomboxObject]);

		if (IsValidDynamic3DTextLabel(BoomboxData[playerid][boomboxText3D]))
		    DestroyDynamic3DTextLabel(BoomboxData[playerid][boomboxText3D]);

		foreach (new i : Player) if (PlayerData[i][pMuzikKutusu] == playerid) {
		    StopAudioStreamForPlayer(i);
		}
        BoomboxData[playerid][boomboxPlaced] = false;
        BoomboxData[playerid][boomboxInterior] = 0;
        BoomboxData[playerid][boomboxWorld] = 0;
	}
	return 1;
}
stock Boombox_Nearest(playerid)
{
	foreach (new i : Player) if (BoomboxData[i][boomboxPlaced] && GetPlayerInterior(playerid) == BoomboxData[i][boomboxInterior] && GetPlayerVirtualWorld(playerid) == BoomboxData[i][boomboxWorld] && IsPlayerInRangeOfPoint(playerid, 30.0, BoomboxData[i][boomboxPos][0], BoomboxData[i][boomboxPos][1], BoomboxData[i][boomboxPos][2])) {
     	return i;
	}
	return INVALID_PLAYER_ID;
}
stock Boombox_Place(playerid)
{
	new
	    Float:angle;

	GetPlayerFacingAngle(playerid, angle);

	strpack(BoomboxData[playerid][boomboxURL], "", 128 char);
	GetPlayerPos(playerid, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]);

	BoomboxData[playerid][boomboxPlaced] = true;
	BoomboxData[playerid][boomboxInterior] = GetPlayerInterior(playerid);
	BoomboxData[playerid][boomboxWorld] = GetPlayerVirtualWorld(playerid);
	new string[512];
	format(string, sizeof(string), "[Boombox]\n\nOluþturan: %s.", ReturnName(playerid, 0));
    BoomboxData[playerid][boomboxObject] = CreateDynamicObject(2226, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2] - 0.9, 0.0, 0.0, angle, BoomboxData[playerid][boomboxWorld], BoomboxData[playerid][boomboxInterior]);
    BoomboxData[playerid][boomboxText3D] = CreateDynamic3DTextLabel(string, 0x39D8EDFF, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2] - 0.7, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BoomboxData[playerid][boomboxWorld], BoomboxData[playerid][boomboxInterior]);

	return 1;
}
stock Lokasyon_Sil(id)
{
	new query[100];
	format(query, sizeof(query), "DELETE FROM `lokasyon` WHERE `ID` = '%d'", Lokasyon[id][ID]);
	mysql_query(baglanti, query, false);
	Lokasyon[id][Exists] = false;
	format(Lokasyon[id][lokasyonAd], 30, "");
	Lokasyon[id][lokasyonPos][0] = 0.0;
	Lokasyon[id][lokasyonPos][1] = 0.0;
	Lokasyon[id][lokasyonPos][2] = 0.0;
	return 1;
}
stock Lokasyon_Ekle(ad[], Float:posX, Float:posY, Float:posZ)
{
	for(new i; i<MAX_LOKASYON; i++)
	{
	    if(Lokasyon[i][Exists] == false)
	    {
	        Lokasyon[i][Exists] = true;
	        format(Lokasyon[i][lokasyonAd], 30, ad);
	        Lokasyon[i][lokasyonPos][0] = posX;
	        Lokasyon[i][lokasyonPos][1] = posY;
	        Lokasyon[i][lokasyonPos][2] = posZ;
	        new query[150];
			format(query, sizeof(query), "INSERT INTO `lokasyon` (`Ad`, `posX`, `posY`, `posZ`) VALUES ('%s', '%f', '%f', '%f')", ad, posX, posY, posZ);
			new Cache:sawyer = mysql_query(baglanti, query);
			Lokasyon[i][ID] = cache_insert_id();
			cache_delete(sawyer);
			return i;
	    }
	}
	return -1;
}
stock CagriKapat(playerid)
{
	new targetid = PlayerData[playerid][pCallLine];
	if(PlayerData[playerid][pAramada] == ARAMA_ARANIYOR)
	{
		BilgiMesajGonder(targetid, "Giden çaðrý reddedildi.");
		BilgiMesajGonder(playerid, "Gelen çaðrý reddedildi.");
		PlayerData[playerid][pAramada] = 0;
		PlayerData[targetid][pAramada] = 0;
		PlayerData[playerid][pCallLine] = -1;
		PlayerData[targetid][pCallLine] = -1;
		DeletePVar(playerid, "Arayan");
		DeletePVar(targetid, "Arayan");
	}
	else if(PlayerData[playerid][pAramada] == ARAMA_ARIYOR)
	{
		PlayerData[playerid][pAramada] = 0;
		PlayerData[targetid][pAramada] = 0;
		PlayerData[playerid][pCallLine] = -1;
		PlayerData[targetid][pCallLine] = -1;
		DeletePVar(playerid, "Arayan");
		DeletePVar(targetid, "Arayan");
		MesajGonder(playerid, "Çaðrý bitirildi.");
	}
	else if(PlayerData[playerid][pAramada] == ARAMA_KONUSUYOR)
	{
		MesajGonder(playerid, "Telefonu kapattýnýz.");
		MesajGonder(targetid, "Konuþtuðunuz kiþi telefonu kapattý.");
		PlayerData[playerid][pAramada] = 0;
		PlayerData[targetid][pAramada] = 0;
		PlayerData[playerid][pCallLine] = -1;
		PlayerData[targetid][pCallLine] = -1;
		DeletePVar(playerid, "Arayan");
		DeletePVar(targetid, "Arayan");
	}
	return 1;
}
SetFactionMarker(playerid, type, color)
{
    foreach (new i : Player) if (GetFactionType(i) == type) {
    	SetPlayerMarkerForPlayer(i, playerid, color);
	}
	return 1;
}
stock Telefon_Menu(playerid)
{
	new str[100];
	format(str, sizeof(str), "Numara: {AA3333}%d", PlayerData[playerid][pTelefon]);
	Dialog_Show(playerid, TelefonMenu, DIALOG_STYLE_LIST, str, "{FFBF00}» {FFFFFF}Ara\n{FFBF00}» {FFFFFF}SMS Yolla\n{FFBF00}» {FFFFFF}Rehber\n{FFBF00}» {FFFFFF}Tarayýcý\n{FFBF00}» {FFFFFF}Tarifem\n{FFBF00}» {FFFFFF}Ayarlar\n\n{AA3333}» %s", "Seç", "Kapat", (PlayerData[playerid][pTelefonAyar][0] == 0) ? ("{F22C2C}Telefonu Kapat") : ("{2CF26B}Telefonu Aç"));
	return 1;
}
Dialog:HizmetSecin(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		SetPVarInt(playerid, "Hizmet", listitem+1);
		Dialog_Show(playerid, Aciklama, DIALOG_STYLE_INPUT, "Operatör ~ Açýklama", "Lütfen olay hakkýnda kýsa bir açýklama yazýn:", "Gönder", "Kapat");
	}
	return 1;
}
Dialog:Aciklama(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, Aciklama, DIALOG_STYLE_INPUT, "Operatör ~ Açýklama", "Lütfen olay hakkýnda kýsa bir açýklama yazýn:", "Gönder", "Kapat");
	    if(GetPVarInt(playerid, "Hizmet") == 1)
	    {
	        new Float:pos[3];
	        format(PlayerData[playerid][pIhbar], 128, inputtext);
	        PlayerData[playerid][pIhbarSayac] = 300;
	        SetFactionMarker(playerid, BIRLIK_LSPD, 0x00D700FF);
	    	SetFactionMarker(playerid, BIRLIK_FBI, 0x00D700FF);
	    	GetPlayerPosEx(playerid, pos[0], pos[1], pos[2]);
	    	SendBirlikMessageEx(BIRLIK_LSPD, COLOR_RADIO, "** (Radyo) 911 ÇAÐRISI: %s (Yer: %s - Tel No: %d)", ReturnName(playerid, 0), GetLocation(pos[0], pos[1], pos[2]), PlayerData[playerid][pTelefon]);
	    	SendBirlikMessageEx(BIRLIK_LSPD, COLOR_RADIO, "** (Radyo) Açýklama: %s", inputtext);
	    	SendBirlikMessageEx(BIRLIK_FBI, COLOR_RADIO, "** (Radyo) 911 ÇAÐRISI: %s (Yer: %s - Tel No: %d)", ReturnName(playerid, 0), GetLocation(pos[0], pos[1], pos[2]), PlayerData[playerid][pTelefon]);
	    	SendBirlikMessageEx(BIRLIK_FBI, COLOR_RADIO, "** (Radyo) Açýklama: %s", inputtext);
	    	MesajGonder(playerid, "Tüm birimler bilgilendirildi, teþekkürler.");
	    	DeletePVar(playerid, "Hizmet");
	    }
	    else if(GetPVarInt(playerid, "Hizmet") == 2)
	    {
	        new Float:pos[3];
	        GetPlayerPosEx(playerid, pos[0], pos[1], pos[2]);
	        SendBirlikMessageEx(BIRLIK_LSMD, 0xFF8282FF, "** 911 ÇAÐRISI: %s (Yer: %s - Tel No: %d)", ReturnName(playerid, 0), GetLocation(pos[0], pos[1], pos[2]), PlayerData[playerid][pTelefon]);
	        SendBirlikMessageEx(BIRLIK_LSMD, 0xFF8282FF, "** AÇIKLAMA: %s", inputtext);
	        SetFactionMarker(playerid, BIRLIK_LSMD, 0xFF8282FF);
	        MesajGonder(playerid, "Tüm saðlýk birimleri bilgilendirildi, teþekkürler.");
	    }
	    DeletePVar(playerid, "Hizmet");
	}
	return 1;
}
Dialog:TelefonMenu(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    switch(listitem)
	    {
	        case 0: // Arama
	        {
	            if(PlayerData[playerid][pTelefonAyar][0] == 1) return HataMesajGonder(playerid, "Telefonunuz kapalý.");
	            if(PlayerData[playerid][pAramada] != 0) return HataMesajGonder(playerid, "Þu an aramada olduðunuz için kimseyi arayamazsýnýz.");
	            Dialog_Show(playerid, Arama, DIALOG_STYLE_INPUT, "Telefon ~ Arama", "Lütfen aramak istediðiniz numarayý girin:\n\n{FFBF00}911 - Acil Durum | 333 - Taksi | 555 - Tarifeci", "Ara", "Geri");
	        }
	        case 1: // SMS Yolla
	        {
	        	if(PlayerData[playerid][pTelefonAyar][0] == 1) return HataMesajGonder(playerid, "Telefonunuz kapalý.");
	        	if(PlayerData[playerid][pTarife] == -1 || PlayerData[playerid][pTarifeKalan][1] == 0) return HataMesajGonder(playerid, "Tarifeniz yok veya SMS hakkýnýz bitmiþ.");
	        	Dialog_Show(playerid, SMSGonder, DIALOG_STYLE_INPUT, "Telefon ~ SMS Yolla", "Lütfen SMS yollamak istediðiniz numarayý girin:", "Devam", "Geri");
	        }
	        case 2: // Rehber
	        {
	        	if(PlayerData[playerid][pTelefonAyar][0] == 1) return HataMesajGonder(playerid, "Telefonunuz kapalý.");
	            Telefon_Rehber(playerid);
	        }
	        case 3: // Tarayici
	        {
	            if(PlayerData[playerid][pTelefonAyar][0] == 1) return HataMesajGonder(playerid, "Telefonunuz kapalý.");
	        	if(PlayerData[playerid][pTarife] == -1 || PlayerData[playerid][pTarifeKalan][2] <= 2) return HataMesajGonder(playerid, "Tarifeniz yok veya internet paketiniz yetmiyor. Tarife satýn almak için /ara 555");
	        	PlayerData[playerid][pTarifeKalan][2] -= 3;
	        	Dialog_Show(playerid, Tarayici, DIALOG_STYLE_LIST, "Telefon ~ Tarayýcý", "{FFBF00}» {FFFFFF}Araç Ýlanlarý\n{FFBF00}» {FFFFFF}BitCoin\n{FFBF00}» {FFFFFF}Müzik Çalar\n{FFBF00}» {FFFFFF}Konum Gönder", "Seç", "Kapat");
	        }
	        case 4: // Tarifem
	        {
	        	if(PlayerData[playerid][pTarife] == -1)
	        	{
	        		HataMesajGonder(playerid, "Tarifeniz yok, 555 numarasýný arayarak tarife satýn alabilirsiniz.");
	        		return Telefon_Menu(playerid);
	        	}
	        	Dialog_Show(playerid, Tarifem, DIALOG_STYLE_LIST, "Telefon ~ Tarife", "{FFBF00}» {FFFFFF}Tarifeniz:\t\t{FFFFFF}%s\n{FFBF00}» {FFFFFF}Kalan Dakika:\t\t{FFFFFF}%d/%d\n{FFBF00}» {FFFFFF}Kalan SMS:\t\t{FFFFFF}%d/%d\n{FFBF00}» {FFFFFF}Kalan Internet:\t{FFFFFF}%d/%d\n\n{F22C2C}» {FFFFFF}Tarifeyi Iptal Et", "Seç", "Kapat",
	        	Tarifeler[PlayerData[playerid][pTarife]][TarifeAdi], PlayerData[playerid][pTarifeKalan][0], Tarifeler[PlayerData[playerid][pTarife]][TarifeDakika],  PlayerData[playerid][pTarifeKalan][1], Tarifeler[PlayerData[playerid][pTarife]][TarifeSMS], PlayerData[playerid][pTarifeKalan][2],  Tarifeler[PlayerData[playerid][pTarife]][TarifeNet]);
			}
			case 5: // Ayarlar
			{
				if(PlayerData[playerid][pTelefonAyar][0] == 1) return HataMesajGonder(playerid, "Telefonunuz kapali.");
	            Dialog_Show(playerid, TelefonAyarlar, DIALOG_STYLE_LIST, "Telefon ~ Ayarlar", "{FFBF00}» {FFFFFF}Titreþim:\t\t%s\n{FFBF00}» {FFFFFF}Hoparlör:\t\t%s\n{FFBF00}» {FFFFFF}Bilinmeyen Numara Engeli:\t%s\n{FFBF00}» {FFFFFF}SMS Engeli:\t\t%s\n{FFBF00}» {FFFFFF}Arama Engeli:\t\t%s", "Seç", "Geri",(PlayerData[playerid][pTelefonAyar][1] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),
				(PlayerData[playerid][pTelefonAyar][2] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),  (PlayerData[playerid][pTelefonAyar][3] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),  (PlayerData[playerid][pTelefonAyar][4] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"), (PlayerData[playerid][pTelefonAyar][5] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"));
			}
			case 6: // Telefonu Kapat
			{
			    if(PlayerData[playerid][pTelefonAyar][0] == 0)
			    {
			        PlayerData[playerid][pTelefonAyar][0] = 1;
			        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s iþaret parmaðýný telefon kapatma düðmesine doðru götürür ve telefonu kapatýr.", ReturnName(playerid, 0));
			        if(PlayerData[playerid][pAramada] != 0) CagriKapat(playerid);
			    }
			    else
			    {
			        PlayerData[playerid][pTelefonAyar][0] = 0;
			        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s iþaret parmaðýný telefon açma düðmesine doðru götürür ve telefonu açar.", ReturnName(playerid, 0));
			    }
			}
	    }
	}
	return 1;
}
Dialog:Tarayici(playerid, response, listitem, inputtext[])
{
	if(!response) return Telefon_Menu(playerid);
	if(response)
	{
	    if(listitem == 0)
	    {
	        if(PlayerData[playerid][pTarife] == -1 || PlayerData[playerid][pTarifeKalan][2] < 2) return HataMesajGonder(playerid, "Tarifeniz yok veya internet paketiniz yetmiyor. Tarife satýn almak için /ara 555");
	        PlayerData[playerid][pTarifeKalan][2] -= 2;
	        Dialog_Show(playerid, AracIlanlari, DIALOG_STYLE_INPUT, "{FFFFFF}Tarayýcý ~ Araç Ýlanlarý", "{FFBF00}» {FFFFFF}Lütfen aratmak istediðiniz aracýn modelini veya adýný girin:", "Ara", "Geri");
	    }
	    if(listitem == 1)
	    {
            if(PlayerData[playerid][pTarife] == -1 || PlayerData[playerid][pTarifeKalan][2] < 2) return HataMesajGonder(playerid, "Tarifeniz yok veya internet paketiniz yetmiyor. Tarife satýn almak için /ara 555.");
            PlayerData[playerid][pTarifeKalan][2] -= 2;
            Bitcoin_Menu(playerid);
	    }
	    if(listitem == 2)
	    {
	        if(PlayerData[playerid][pTarife] == -1 || PlayerData[playerid][pTarifeKalan][2] < 10) return HataMesajGonder(playerid, "Tarifeniz yok veya internet paketiniz yetmiyor. Tarife satýn almak için /ara 555");
	        Dialog_Show(playerid, MuzikCalar, DIALOG_STYLE_INPUT, "Tarayýcý ~ Müzik Çalar", "{FFBF00}» {FFFFFF}Lütfen oynatmak istediðiniz müziðin .mp3 uzantýlý linkini girin:", "Oynat", "Geri");
	    }
	    if(listitem == 3)
	    {
	        if(PlayerData[playerid][pTarife] == -1 || PlayerData[playerid][pTarifeKalan][2] < 5) return HataMesajGonder(playerid, "Tarifeniz yok veya internet paketiniz yetmiyor. Tarife satýn almak için /ara 555");
	        Dialog_Show(playerid, KonumGonder, DIALOG_STYLE_INPUT, "Konum Gönder", "{FFBF00}» {FFFFFF}Konum göndermek istediðiniz numarayý girin:", "Gönder", "Geri");
	    }
	}
	return 1;
}
Dialog:GPS(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	            GlobalLokasyonlar(playerid);
	        }
	        case 1:
	        {
	            if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	            Dialog_Show(playerid, FindHouse, DIALOG_STYLE_INPUT, "Ev Bul", "{FFBF00}» {FFFFFF}Lütfen bulmak istediðiniz evin ID'sini girin:", "Devam", "Geri");
	        }
	        case 2:
	        {
	            if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	            Dialog_Show(playerid, FindBiz, DIALOG_STYLE_INPUT, "Ýþyeri Bul", "{FFBF00}» {FFFFFF}Lütfen bulmak istediðiniz iþyerinin adýný girin:", "Devam", "Geri");
			}
			case 3:
			{
			    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			    Dialog_Show(playerid, FindEntrance, DIALOG_STYLE_INPUT, "Bina Bul", "{FFBF00}» {FFFFFF}Lütfen bulmak istediðiniz binanýn numarasýný girin:", "Bul", "Geri");
			}
	    }
	}
	return 1;
}
Dialog:FindEntrance(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, GPS, DIALOG_STYLE_LIST, "GPS", "{FFBF00}» {FFFFFF}Global Lokasyonlar\n{FFBF00}» {FFFFFF}Ev Bul\n{FFBF00}» {FFFFFF}Ýþyeri Bul\n{FFBF00}» {FFFFFF}Bina Bul\n{FFBF00}» {FFFFFF}Konum Gönder", "Seç", "Geri");
	if(response)
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	    if(isnull(inputtext)) return Dialog_Show(playerid, FindEntrance, DIALOG_STYLE_INPUT, "Bina Bul", "{FFBF00}» {FFFFFF}Lütfen bulmak istediðiniz binanýn numarasýný girin:", "Bul", "Geri");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, FindEntrance, DIALOG_STYLE_INPUT, "Bina Bul", "{FFBF00}» {FFFFFF}Lütfen bulmak istediðiniz binanýn numarasýný girin:", "Bul", "Geri");
	    new id = strval(inputtext);
	    if ((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
	    {
	        HataMesajGonder(playerid, "Geçersiz bina numarasý girdiniz.");
	        return Dialog_Show(playerid, FindEntrance, DIALOG_STYLE_INPUT, "Bina Bul", "{FFBF00}» {FFFFFF}Lütfen bulmak istediðiniz binanýn numarasýný girin:", "Bul", "Geri");
	    }
     	if(PlayerData[playerid][pGPS] != -1 || GetPVarInt(playerid, "IsyeriBuluyor") != -1 || GetPVarInt(playerid, "EvBuluyor") != -1)
      	{
       		SetPVarInt(playerid, "IsyeriBuluyor", -1);
       		SetPVarInt(playerid, "EvBuluyor", -1);
         	PlayerData[playerid][pGPS] = -1;
          	DisablePlayerCheckpoint(playerid);
       	}
        SetPVarInt(playerid, "BinaBuluyor", id);
        PlayerTextDrawShow(playerid, MesafeTD[playerid]);
        SetPlayerCheckpoint(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2], 4.0);
        MesajGonder(playerid, "'%s' adlý bina haritada iþaretlenmiþtir.", EntranceData[id][entranceName]);
	}
	return 1;
}
Dialog:KonumGonder(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, Tarayici, DIALOG_STYLE_LIST, "Telefon ~ Tarayýcý", "{FFBF00}» {FFFFFF}Araç Ýlanlarý\n{FFBF00}» {FFFFFF}BitCoin\n{FFBF00}» {FFFFFF}Müzik Çalar\n{FFBF00}» {FFFFFF}Konum Gönder", "Seç", "Kapat");
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, KonumGonder, DIALOG_STYLE_INPUT, "Konum Gönder", "{FFBF00}» {FFFFFF}Konum göndermek istediðiniz numarayý girin:", "Gönder", "Geri");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, KonumGonder, DIALOG_STYLE_INPUT, "Konum Gönder", "{FFBF00}» {FFFFFF}Konum göndermek istediðiniz numarayý girin:", "Gönder", "Geri");
	    new targetid = GetNumberOwner(strval(inputtext));
	    if(targetid == INVALID_PLAYER_ID || targetid == playerid || PlayerData[targetid][pBaygin] > 0 || PlayerData[targetid][pKelepce] > 0 || PlayerData[targetid][pHapisSure] > 0 || PlayerData[targetid][pTelefonAyar][0] == 1)
	    {
	        HataMesajGonder(playerid, "Geçersiz numara girdiniz veya kiþi müsait deðil.");
	        return Dialog_Show(playerid, KonumGonder, DIALOG_STYLE_INPUT, "Konum Gönder", "{FFBF00}» {FFFFFF}Konum göndermek istediðiniz numarayý girin:", "Gönder", "Geri");
	    }
	    if(!spamProtect(playerid, "KonumGonder", 60)) return HataMesajGonder(playerid, "Tekrar konum göndermek için 1 dakika beklemelisiniz.");
	    PlayerData[playerid][pTarifeKalan][2] -= 15;
	    SetPVarInt(targetid, "KonumKabul", playerid);
	    MesajGonder(playerid, "%d numaralý telefona konumunuz gönderildi, sabit kalmaya çalýþýn.", strval(inputtext));
	    BilgiMesajGonder(targetid, "%d numaralý telefon size konumunu gönderdi, (\"/kabulet konum\") ile kabul edebilirsiniz.", PlayerData[playerid][pTelefon]);
	}
	return 1;
}
Dialog:FindBiz(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, GPS, DIALOG_STYLE_LIST, "GPS", "{FFBF00}» {FFFFFF}Global Lokasyonlar\n{FFBF00}» {FFFFFF}Ev Bul\n{FFBF00}» {FFFFFF}Ýþyeri Bul\n{FFBF00}» {FFFFFF}Bina Bul", "Seç", "Geri");
	if(response)
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	    if(isnull(inputtext)) return Dialog_Show(playerid, FindBiz, DIALOG_STYLE_INPUT, "Ýþyeri Bul", "{FFBF00}» {FFFFFF}Lütfen bulmak istediðiniz iþyerinin adýný girin:", "Devam", "Geri");
	    FindBusiness(playerid, inputtext);
	}
	return 1;
}
Dialog:FindHouse(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, GPS, DIALOG_STYLE_LIST, "GPS", "{FFBF00}» {FFFFFF}Global Lokasyonlar\n{FFBF00}» {FFFFFF}Ev Bul\n{FFBF00}» {FFFFFF}Ýþyeri Bul\n{FFBF00}» {FFFFFF}Bina Bul", "Seç", "Geri");
	if(response)
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	    if(isnull(inputtext)) return Dialog_Show(playerid, FindHouse, DIALOG_STYLE_INPUT, "Ev Bul", "{FFBF00}» {FFFFFF}Lütfen bulmak istediðiniz evin ID'sini girin:", "Devam", "Geri");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, FindHouse, DIALOG_STYLE_INPUT, "Ev Bul", "{FFBF00}» {FFFFFF}Lütfen bulmak istediðiniz evin ID'sini girin:", "Devam", "Geri");
	    new id = strval(inputtext);
	    if ((id < 0 || id >= MAX_EV) || !house_info[id][evExists])
	    {
	        HataMesajGonder(playerid, "Bu ID'de bir ev bulunmuyor.");
	        return Dialog_Show(playerid, FindHouse, DIALOG_STYLE_INPUT, "Ev Bul", "{FFBF00}» {FFFFFF}Lütfen bulmak istediðiniz evin ID'sini girin:", "Devam", "Geri");
	    }
     	if(PlayerData[playerid][pGPS] != -1 || GetPVarInt(playerid, "IsyeriBuluyor") != -1 || GetPVarInt(playerid, "BinaBuluyor") != -1)
      	{
       		SetPVarInt(playerid, "IsyeriBuluyor", -1);
       		SetPVarInt(playerid, "BinaBuluyor", -1);
         	PlayerData[playerid][pGPS] = -1;
          	DisablePlayerCheckpoint(playerid);
       	}
        SetPVarInt(playerid, "EvBuluyor", id);
        PlayerTextDrawShow(playerid, MesafeTD[playerid]);
        SetPlayerCheckpoint(playerid, house_info[id][evPos][0], house_info[id][evPos][1], house_info[id][evPos][2], 4.0);
        MesajGonder(playerid, "Ev haritada iþaretlendi.");
	}
	return 1;
}
Dialog:GlobalLokasyonlar(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, GPS, DIALOG_STYLE_LIST, "GPS", "{FFBF00}» {FFFFFF}Global Lokasyonlar\n{FFBF00}» {FFFFFF}Ev Bul\n{FFBF00}» {FFFFFF}Ýþyeri Bul\n{FFBF00}» {FFFFFF}Bina Bul", "Seç", "Geri");
	if(response)
	{
	    new id = strval(inputtext);
	    if(Lokasyon[id][Exists] == true)
	    {
	        if(GetPVarInt(playerid, "EvBuluyor") != -1 || GetPVarInt(playerid, "IsyeriBuluyor") != -1 || GetPVarInt(playerid, "BinaBuluyor") != -1)
	        {
	            SetPVarInt(playerid, "IsyeriBuluyor", -1);
	            SetPVarInt(playerid, "EvBuluyor", -1);
	            SetPVarInt(playerid, "BinaBuluyor", -1);
	            DisablePlayerCheckpoint(playerid);
	        }
	        PlayerData[playerid][pGPS] = id;
	        PlayerTextDrawShow(playerid, MesafeTD[playerid]);
	        SetPlayerCheckpoint(playerid, Lokasyon[id][lokasyonPos][0], Lokasyon[id][lokasyonPos][1], Lokasyon[id][lokasyonPos][2], 3.0);
	        MesajGonder(playerid, "'%s' adlý yer haritada iþaretlendi.", Lokasyon[id][lokasyonAd]);
	    }
	}
	return 1;
}
Dialog:EvBul(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, GPS, DIALOG_STYLE_LIST, "GPS", "{FFBF00}» {FFFFFF}Global Lokasyonlar\n{FFBF00}» {FFFFFF}Ev Bul\n{FFBF00}» {FFFFFF}Ýþyeri Bul\n{FFBF00}» {FFFFFF}Bina Bul", "Seç", "Geri");
	if(response)
	{
	    new id = strval(inputtext);
	    if(house_info[id][evExists])
	    {
	        if(PlayerData[playerid][pGPS] != -1 || GetPVarInt(playerid, "IsyeriBuluyor") != -1 || GetPVarInt(playerid, "BinaBuluyor") != -1)
	        {
	            SetPVarInt(playerid, "IsyeriBuluyor", -1);
	            SetPVarInt(playerid, "BinaBuluyor", -1);
	            PlayerData[playerid][pGPS] = -1;
	            DisablePlayerCheckpoint(playerid);
	        }
	        SetPVarInt(playerid, "EvBuluyor", id);
	        PlayerTextDrawShow(playerid, MesafeTD[playerid]);
	        SetPlayerCheckpoint(playerid, house_info[id][evPos][0], house_info[id][evPos][1], house_info[id][evPos][2], 4.0);
	        MesajGonder(playerid, "Ev haritada iþaretlendi.");
	    }
	}
	return 1;
}
Dialog:IsyeriBul(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, GPS, DIALOG_STYLE_LIST, "GPS", "{FFBF00}» {FFFFFF}Global Lokasyonlar\n{FFBF00}» {FFFFFF}Ev Bul\n{FFBF00}» {FFFFFF}Ýþyeri Bul\n{FFBF00}» {FFFFFF}Bina Bul", "Seç", "Geri");
	if(response)
	{
	    new id = strval(inputtext);
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	    if(Isyeri[id][isyeriExists])
	    {
	        if(PlayerData[playerid][pGPS] != -1 || GetPVarInt(playerid, "EvBuluyor") != -1 || GetPVarInt(playerid, "BinaBuluyor") != -1)
	        {
	            SetPVarInt(playerid, "EvBuluyor", -1);
	            SetPVarInt(playerid, "BinaBuluyor", -1);
	            PlayerData[playerid][pGPS] = -1;
	            DisablePlayerCheckpoint(playerid);
	        }
	        SetPVarInt(playerid, "IsyeriBuluyor", id);
	        PlayerTextDrawShow(playerid, MesafeTD[playerid]);
	        SetPlayerCheckpoint(playerid, Isyeri[id][isyeriPos][0], Isyeri[id][isyeriPos][1], Isyeri[id][isyeriPos][2], 4.0);
	        MesajGonder(playerid, "Ýþyeri haritada iþaretlendi.");
	    }
	}
	return 1;
}
stock FindBusiness(playerid, bizname[])
{
    new str[1000], string[124], sayi, tip[30];
	strcat(str, "ID\tAd\tÝþyeri Türü\tMesafe\n");
	for(new i; i<MAX_ISYERI; i++) if(Isyeri[i][isyeriExists])
	{
	    if(strfind(Isyeri[i][isyeriName], bizname, true) != -1)
	    {
	        switch(Isyeri[i][isyeriTip])
			{
			    case 1: tip = "Market";
			    case 2: tip = "Kiyafet Maðazasý";
			    case 3: tip = "Fast Food";
			    case 4: tip = "Araç Galerisi";
			    case 5: tip = "Elektronik";
			    case 6: tip = "Bar/Pub";
			    case 7: tip = "Kumarhane";
			    default: tip = "Bilinmiyor";
			}
            format(string, sizeof(string), "{FFFFFF}%d\t{FFFFFF}%s\t{FFFFFF}%s\t{FFBF00}%.2f metre\n", i, Isyeri[i][isyeriName], tip, GetPlayerDistanceFromPoint(playerid, Isyeri[i][isyeriPos][0], Isyeri[i][isyeriPos][1], Isyeri[i][isyeriPos][2]));
            strcat(str, string);
            sayi++;
	    }
	}
	if(sayi == 0)
	{
	    HataMesajGonder(playerid, "Ýþyeri bulunamadý.");
	    return Dialog_Show(playerid, FindBiz, DIALOG_STYLE_INPUT, "Ýþyeri Bul", "{FFBF00}» {FFFFFF}Lütfen bulmak istediðiniz iþyerinin adýný girin:", "Devam", "Geri");
	}
	format(string, sizeof(string), "Bulunan Ýþyerleri (%d adet)", sayi);
	Dialog_Show(playerid, IsyeriBul, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Ýþaretle", "Geri");
	return 1;
}
stock GlobalLokasyonlar(playerid)
{
	new str[1700], string[124], sayi;
	strcat(str, "ID\tAd\tMesafe\n");
	for(new i; i<MAX_LOKASYON; i++)
	{
	    if(Lokasyon[i][Exists] == true)
	    {
	        sayi++;
	        format(string, sizeof(string), "{FFFFFF}%d\t{FFFFFF}%s\t{FFBF00}%.2f metre\n", i, Lokasyon[i][lokasyonAd], GetPlayerDistanceFromPoint(playerid, Lokasyon[i][lokasyonPos][0],Lokasyon[i][lokasyonPos][1], Lokasyon[i][lokasyonPos][2]));
	        strcat(str, string);
	    }
	}
	if(sayi == 0) return HataMesajGonder(playerid, "Hiç lokasyon bulunamadý.");
	format(string, sizeof(string), "Global Lokasyonlar (%d konum)", sayi);
	Dialog_Show(playerid, GlobalLokasyonlar, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Ýþaretle", "Geri");
	return 1;
}
Bitcoin_Menu(playerid)
{
	if(GetServerBilgi("BitcoinAlma") == 0 || GetServerBilgi("BitcoinSatma") == 0) return HataMesajGonder(playerid, "BitCoin sistemi devre dýþý.");
	new str[50];
	format(str, sizeof(str), "{FFFFFF}BitCoin Sayýnýz: {FFBF00}%d", PlayerData[playerid][pBitcoin]);
	Dialog_Show(playerid, BitCoin, DIALOG_STYLE_LIST, str, "{FFBF00}» {FFFFFF}BitCoin Al\t\t{FFBF00}%s\n{FFBF00}» {FFFFFF}BitCoin Sat\t\t{FFBF00}%s", "Seç", "Geri", FormatNumber(GetServerBilgi("BitcoinAlma")), FormatNumber(GetServerBilgi("BitcoinSatma")));
	return 1;
}
Dialog:MuzikCalar(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, Tarayici, DIALOG_STYLE_LIST, "Telefon ~ Tarayýcý", "{FFBF00}» {FFFFFF}Araç Ýlanlarý\n{FFBF00}» {FFFFFF}BitCoin\n{FFBF00}» {FFFFFF}Müzik Çalar\n{FFBF00}» {FFFFFF}Konum Gönder", "Seç", "Kapat");
	if(response)
	{
	    if(isnull(inputtext) || strlen(inputtext) < 5) return Dialog_Show(playerid, MuzikCalar, DIALOG_STYLE_INPUT, "Tarayýcý ~ Müzik Çalar", "{FFBF00}» {FFFFFF}Lütfen oynatmak istediðiniz müziðin .mp3 uzantýlý linkini girin:", "Oynat", "Geri");
	    PlayAudioStreamForPlayer(playerid, inputtext);
	    PlayerData[playerid][pTarifeKalan][2] -= 10;
	}
	return 1;
}
Dialog:BitCoin(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, Tarayici, DIALOG_STYLE_LIST, "Telefon ~ Tarayýcý", "{FFBF00}» {FFFFFF}Araç Ýlanlarý\n{FFBF00}» {FFFFFF}BitCoin\n{FFBF00}» {FFFFFF}Müzik Çalar\n{FFBF00}» {FFFFFF}Konum Gönder", "Seç", "Kapat");
	if(response)
	{
	    if(listitem == 0)
	    {
	        Dialog_Show(playerid, BitcoinAl, DIALOG_STYLE_INPUT, "{FFFFFF}BitCoin Alma", "{FFBF00}» {FFFFFF}Lütfen almak istediðiniz BitCoin sayýsýný girin:", "Al", "Geri");
	    }
	    if(listitem == 1)
	    {
	        Dialog_Show(playerid, BitcoinSat, DIALOG_STYLE_INPUT, "{FFFFFF}BitCoin Sat", "{FFBF00}» {FFFFFF}Lütfen satmak istediðiniz BitCoin sayýsýný girin:", "Sat", "Geri");
	    }
	}
	return 1;
}
Dialog:BitcoinSat(playerid, response, listitem, inputtext[])
{
	if(!response) return Bitcoin_Menu(playerid);
	if(response)
	{
        if(isnull(inputtext)) return Dialog_Show(playerid, BitcoinSat, DIALOG_STYLE_INPUT, "{FFFFFF}BitCoin Sat", "{FFBF00}» {FFFFFF}Lütfen satmak istediðiniz BitCoin sayýsýný girin:", "Sat", "Geri");
        if(!IsNumeric(inputtext)) return Dialog_Show(playerid, BitcoinSat, DIALOG_STYLE_INPUT, "{FFFFFF}BitCoin Sat", "{FFBF00}» {FFFFFF}Lütfen satmak istediðiniz BitCoin sayýsýný girin:", "Sat", "Geri");
        if(strval(inputtext) <= 0) return Dialog_Show(playerid, BitcoinSat, DIALOG_STYLE_INPUT, "{FFFFFF}BitCoin Sat", "{FFBF00}» {FFFFFF}Lütfen satmak istediðiniz BitCoin sayýsýný girin:", "Sat", "Geri");
        if(PlayerData[playerid][pBitcoin] < strval(inputtext))
        {
            HataMesajGonder(playerid, "O kadar BitCoin'iniz bulunmuyor.");
            return Dialog_Show(playerid, BitcoinSat, DIALOG_STYLE_INPUT, "{FFFFFF}BitCoin Sat", "{FFBF00}» {FFFFFF}Lütfen satmak istediðiniz BitCoin sayýsýný girin:", "Sat", "Geri");
        }
        PlayerData[playerid][pBitcoin] -= strval(inputtext);
        ParaVer(playerid, strval(inputtext)*GetServerBilgi("BitcoinSatma"));
        PlayerData[playerid][pTarifeKalan][2] -= RandomEx(3, 9);
	    if(PlayerData[playerid][pTarifeKalan][2] < 0) PlayerData[playerid][pTarifeKalan][2] = 0;
	    Oyuncu_Kaydet(playerid);
	    MesajGonder(playerid, "{FFBF00}%d {FFFFFF}BitCoin {FFBF00}%s {FFFFFF}karþýlýðýnda satýldý.",strval(inputtext), FormatNumber(strval(inputtext)*GetServerBilgi("BitcoinSatma")));
	}
	return 1;
}
Dialog:BitcoinAl(playerid, response, listitem, inputtext[])
{
	if(!response) return Bitcoin_Menu(playerid);
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, BitcoinAl, DIALOG_STYLE_INPUT, "{FFFFFF}BitCoin Alma", "{FFBF00}» {FFFFFF}Lütfen almak istediðiniz BitCoin sayýsýný girin:", "Al", "Geri");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, BitcoinAl, DIALOG_STYLE_INPUT, "{FFFFFF}BitCoin Alma", "{FFBF00}» {FFFFFF}Lütfen almak istediðiniz BitCoin sayýsýný girin:", "Al", "Geri");
	    if(strval(inputtext) <= 0 || strval(inputtext) >= 1001)
	    {
	        HataMesajGonder(playerid, "BitCoin sayýsý 1 ile 1000 arasýnda olmalýdýr.");
	        return Dialog_Show(playerid, BitcoinAl, DIALOG_STYLE_INPUT, "{FFFFFF}BitCoin Alma", "{FFBF00}» {FFFFFF}Lütfen almak istediðiniz BitCoin sayýsýný girin:", "Al", "Geri");
	    }
	    if(PlayerData[playerid][pCash] < strval(inputtext)*GetServerBilgi("BitcoinAlma"))
	    {
	        HataMesajGonder(playerid, "Yeterli paranýz yok.");
	        return Dialog_Show(playerid, BitcoinAl, DIALOG_STYLE_INPUT, "{FFFFFF}BitCoin Alma", "{FFBF00}» {FFFFFF}Lütfen almak istediðiniz BitCoin sayýsýný girin:", "Al", "Geri");
	    }
	    PlayerData[playerid][pTarifeKalan][2] -= RandomEx(5, 12);
	    if(PlayerData[playerid][pTarifeKalan][2] < 0) PlayerData[playerid][pTarifeKalan][2] = 0;
	    ParaVer(playerid, -strval(inputtext)*GetServerBilgi("BitcoinAlma"));
	    PlayerData[playerid][pBitcoin] += strval(inputtext);
	    Oyuncu_Kaydet(playerid);
	    MesajGonder(playerid, "{FFBF00}%s {FFFFFF}ödeyerek {FFBF00}%d {FFFFFF}BitCoin satýn aldýnýz.", FormatNumber(strval(inputtext)*GetServerBilgi("BitcoinAlma")), strval(inputtext));
	}
	return 1;
}
Dialog:AracIlanlari(playerid, response, listitem, inputtext[])
{
	if(!response) return Telefon_Menu(playerid);
	if(response)
	{
	    if(PlayerData[playerid][pTarife] == -1 || PlayerData[playerid][pTarifeKalan][2] <= 2) return HataMesajGonder(playerid, "Tarifeniz yok veya internet paketiniz yetmiyor. Tarife satýn almak için /ara 555");
	    if(isnull(inputtext)) return Dialog_Show(playerid, AracIlanlari, DIALOG_STYLE_INPUT, "{FFFFFF}Tarayýcý ~ Araç Ýlanlarý", "{FFBF00}» {FFFFFF}Lütfen aratmak istediðiniz aracýn modelini veya adýný girin:", "Ara", "Geri");
		new veh = GetVehicleModelIDFromName(inputtext);
		if(veh != -1)
		{
  			PlayerData[playerid][pTarifeKalan][2] -= 3;
		    AracIlanlari(playerid, veh);
		    return 1;
		}
		if(strval(inputtext) >= 411 && strval(inputtext) <= 611)
		{
		    PlayerData[playerid][pTarifeKalan][2] -= 3;
		    AracIlanlari(playerid, strval(inputtext));
		    return 1;
		}
		HataMesajGonder(playerid, "Böyle bir araç yok!");
		Dialog_Show(playerid, AracIlanlari, DIALOG_STYLE_INPUT, "{FFFFFF}Tarayýcý ~ Araç Ýlanlarý", "{FFBF00}» {FFFFFF}Lütfen aratmak istediðiniz aracýn modelini veya adýný girin:", "Ara", "Geri");
	}
	return 1;
}
AracIlanlari(playerid, aracid)
{
    if(aracid < 411 || aracid > 611) return HataMesajGonder(playerid, "Böyle bir araç yok!");
    new str[1000], string[200], sayi;
    strcat(str, "{FFFFFF}ID\t{FFFFFF}Fiyat\t{FFFFFF}Kilometre\t{FFFFFF}Vergi\n");
	for(new i; i<MAX_ARAC; i++)
	{
	    if(AracInfo[i][aracExists] && AracInfo[i][aracModel] == aracid && AracInfo[i][aracSatilik] == 1 && AracInfo[i][aracTip] == 4)
	    {
	        sayi++;
	        format(string, sizeof(string), "{FFFFFF}%d\t{FFBF00}%s\t{FFFFFF}%.1f\t{FFBF00}%s\n",i, FormatNumber(AracInfo[i][aracFiyat]), AracInfo[i][aracKM], FormatNumber(AracInfo[i][aracVergi]));
	        strcat(str, string);
	    }
	}
	if(sayi == 0)
	{
	    HataMesajGonder(playerid, "Satýlýk araç bulunamadý.");
	    return Dialog_Show(playerid, AracIlanlari, DIALOG_STYLE_INPUT, "{FFFFFF}Tarayýcý ~ Araç Ýlanlarý", "{FFBF00}» {FFFFFF}Lütfen aratmak istediðiniz aracýn modelini veya adýný girin:", "Ara", "Geri");
	}
	format(string, sizeof(string), "Satýlýk Araçlar (%d)", sayi);
	Dialog_Show(playerid, SatilikAraclar, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Ýþaretle", "Geri");
	return 1;
}
Dialog:SatilikAraclar(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, AracIlanlari, DIALOG_STYLE_INPUT, "{FFFFFF}Tarayýcý ~ Araç Ýlanlarý", "{FFBF00}» {FFFFFF}Lütfen aratmak istediðiniz aracýn modelini veya adýný girin:", "Ara", "Geri");
	if(response)
	{
	    if(PlayerData[playerid][pTarifeKalan][2] < 3) return HataMesajGonder(playerid, "Tarifeniz yok veya internet paketiniz yetmiyor. Tarife satýn almak için /ara 555");
	    new id = strval(inputtext);
	    if(AracInfo[id][aracExists])
	    {
	        if(AracInfo[id][aracDisplay] == 0)
	        {
	            HataMesajGonder(playerid, "Aracýn yeri tespit edilemedi.");
	            return AracIlanlari(playerid, AracInfo[id][aracModel]);
	        }
	        if(GetVehicleVirtualWorld(AracInfo[id][aracVehicle]) != GetPlayerVirtualWorld(playerid))
	        {
	            HataMesajGonder(playerid, "Aracýn yeri tespit edilemedi.");
	            return AracIlanlari(playerid, AracInfo[id][aracModel]);
	        }
	        new Float:pos[3];
	        GetVehiclePos(AracInfo[id][aracVehicle], pos[0], pos[1], pos[2]);
	        SetPVarInt(playerid, "AraciniBuluyor", 1);
	        SetPlayerCheckpoint(playerid, pos[0], pos[1], pos[2], 5.0);
	        MesajGonder(playerid, "Aracýn yeri haritada iþaretlendi.");
	        PlayerData[playerid][pTarifeKalan][2] -= 3;
	    }
	}
	return 1;
}
Dialog:Tarifem(playerid, response, listitem, inputtext[])
{
	if(!response) return Telefon_Menu(playerid);
	if(response)
	{
		if(listitem == 4)
		{
			PlayerData[playerid][pTarife] = -1;
			PlayerData[playerid][pTarifeKalan][0] = 0;
			PlayerData[playerid][pTarifeKalan][1] = 0;
			PlayerData[playerid][pTarifeKalan][2] = 0;
			PlayerData[playerid][pTarifeSure] = 0;
			Oyuncu_Kaydet(playerid);
			MesajGonder(playerid, "Tarifeniz iptal edildi.");
			Telefon_Menu(playerid);
		}
	}
	return 1;
}
Dialog:SMSGonder(playerid, response, listitem, inputtext[])
{
	if(!response) return Telefon_Menu(playerid);
	if(response)
	{
		if(isnull(inputtext)) return Dialog_Show(playerid, SMSGonder, DIALOG_STYLE_INPUT, "Telefon ~ SMS Yolla", "Lütfen SMS yollamak istediðiniz numarayý girin:", "Devam", "Geri");
		if(!IsNumeric(inputtext)) return Dialog_Show(playerid, SMSGonder, DIALOG_STYLE_INPUT, "Telefon ~ SMS Yolla", "Lütfen SMS yollamak istediðiniz numarayý girin:", "Devam", "Geri");
		if(strval(inputtext) == 911 || strval(inputtext) == 121 || strval(inputtext) == 555)
		{
			HataMesajGonder(playerid, "Bu numaraya SMS gönderemezsiniz.");
			return Dialog_Show(playerid, SMSGonder, DIALOG_STYLE_INPUT, "Telefon ~ SMS Yolla", "Lütfen SMS yollamak istediðiniz numarayý girin:", "Devam", "Geri");
		}
		new targetid = GetNumberOwner(strval(inputtext));
		if(targetid == INVALID_PLAYER_ID || targetid == playerid || Jammer_Near(targetid) == 1)
		{
			HataMesajGonder(playerid, "Geçersiz numara girdiniz.");
			return Dialog_Show(playerid, SMSGonder, DIALOG_STYLE_INPUT, "Telefon ~ SMS Yolla", "Lütfen SMS yollamak istediðiniz numarayý girin:", "Devam", "Geri");
		}
		if(PlayerData[targetid][pTelefonAyar][0] == 1 || PlayerData[targetid][pTelefonAyar][4] == 1)
		{
			HataMesajGonder(playerid, "Bu numara SMS alýmlarýný kapatmýþ.");
			return Dialog_Show(playerid, SMSGonder, DIALOG_STYLE_INPUT, "Telefon ~ SMS Yolla", "Lütfen SMS yollamak istediðiniz numarayý girin:", "Devam", "Geri");
		}
		SetPVarInt(playerid, "SMSNumara", strval(inputtext));
		Dialog_Show(playerid, SMSGonder2, DIALOG_STYLE_INPUT, "Telefon ~ SMS Gönder", "Lütfen göndermek istediðiniz mesajý girin:", "Gönder", "Kapat");
		/*SendClientMessageEx(targetid, COLOR_YELLOW, "[SMS]: %s - %s", text, TelNo(targetid, playerid));
		SendClientMessageEx(playerid, COLOR_YELLOW, "[SMS]: %s - %s", text, TelNo(targetid, playerid));

        PlayerPlaySoundEx(targetid, 21001);*/
	}
	return 1;
}
Dialog:SMSGonder2(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
		DeletePVar(playerid, "SMSNumara");
		Dialog_Show(playerid, SMSGonder, DIALOG_STYLE_INPUT, "Telefon ~ SMS Yolla", "Lütfen SMS yollamak istediðiniz numarayý girin:", "Devam", "Geri");
	}
	if(response)
	{
		if(isnull(inputtext)) return Dialog_Show(playerid, SMSGonder2, DIALOG_STYLE_INPUT, "Telefon ~ SMS Gönder", "Lütfen göndermek istediðiniz mesajý girin:", "Gönder", "Kapat");
		if(strlen(inputtext) < 3 || strlen(inputtext) > 128)
		{
			HataMesajGonder(playerid, "Mesaj uzunluðu 3 ile 128 karakter arasýnda olmalýdýr.");
			return Dialog_Show(playerid, SMSGonder2, DIALOG_STYLE_INPUT, "Telefon ~ SMS Gönder", "Lütfen göndermek istediðiniz mesajý girin:", "Gönder", "Kapat");
		}
		new targetid = GetNumberOwner(GetPVarInt(playerid, "SMSNumara"));
		if(targetid == INVALID_PLAYER_ID)
		{
			HataMesajGonder(playerid, "Geçersiz numara girdiniz.");
			DeletePVar(playerid, "SMSNumara");
			return 1;
		}
		if(PlayerData[targetid][pTelefonAyar][0] == 1 || PlayerData[targetid][pTelefonAyar][4] == 1)
		{
			HataMesajGonder(playerid, "Bu numara SMS alýmlarýný kapatmýþ.");
			DeletePVar(playerid, "SMSNumara");
			return 1;
		}
		PlayerData[playerid][pTarifeKalan][1]--;
		DeletePVar(playerid, "SMSNumara");
		SendClientMessageEx(targetid, COLOR_YELLOW, "[SMS]: %s - %s", inputtext, TelNo(targetid, playerid));
		SendClientMessageEx(playerid, COLOR_YELLOW, "[SMS]: %s - %s", inputtext, ReturnName(playerid, 0));

        PlayerPlaySoundEx(targetid, 21001);

	}
	return 1;
}
Dialog:Arama(playerid, response, listitem, inputtext[])
{
	if(!response) return Telefon_Menu(playerid);
	if(response)
	{
	    if(PlayerData[playerid][pAramada] != 0) return HataMesajGonder(playerid, "Þu an aramada olduðunuz için kimseyi arayamazsýnýz.");
	    if(isnull(inputtext)) return Dialog_Show(playerid, Arama, DIALOG_STYLE_INPUT, "Telefon ~ Arama", "Lütfen aramak istediðiniz numarayý girin:\n\n{FFBF00}911 - Acil Durum | 333 - Taksi | 555 - Tarifeci", "Ara", "Geri");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, Arama, DIALOG_STYLE_INPUT, "Telefon ~ Arama", "Lütfen aramak istediðiniz numarayý girin:\n\n{FFBF00}911 - Acil Durum | 333 - Taksi | 555 - Tarifeci", "Ara", "Geri");
	    if(strval(inputtext) == PlayerData[playerid][pTelefon])
	    {
	        HataMesajGonder(playerid, "Kendinizi aramayazsýnýz.");
	        return Dialog_Show(playerid, Arama, DIALOG_STYLE_INPUT, "Telefon ~ Arama", "Lütfen aramak istediðiniz numarayý girin:\n\n{FFBF00}911 - Acil Durum | 121 - Taksi | 555 - Tarifeci", "Ara", "Geri");
	    }
	    if(strval(inputtext) == 555)
	    {
	    	new string[750], sayi;
	    	for(new i; i<sizeof(Tarifeler); i++)
	    	{
	    		sayi++;
	    		format(string, sizeof(string), "%s{FFFFFF}%s {FFBF00}(%s){FFFFFF} - %d dakika / %d SMS / %d MB\n", string, Tarifeler[i][TarifeAdi], FormatNumber(Tarifeler[i][TarifeFiyat]), Tarifeler[i][TarifeDakika], Tarifeler[i][TarifeSMS], Tarifeler[i][TarifeNet]);
	    	}
	    	if(sayi == 0) return HataMesajGonder(playerid, "Hiç tarife yok.");
	    	Dialog_Show(playerid, Tarifeler, DIALOG_STYLE_LIST, "Tarifeci", string, "Seç", "Kapat");
	    	return 1;
	    }
	    if(strval(inputtext) == 911)
	    {
	        if(!spamProtect(playerid, "AcilDurum", 120)) return HataMesajGonder(playerid, "Tekrar ihbar vermek için 2 dakika beklemelisiniz.");
	        Dialog_Show(playerid, HizmetSecin, DIALOG_STYLE_LIST, "{FFFFFF}Operatör ~ Hizmet Seçin:", "{9189EF}Los Santos Polis Departmaný\n{FF8282}Los Santos Medical Department", "Seç", "Kapat");
	        return 1;
	    }
	    if(strval(inputtext) == 333)
    	{
	        PlayerData[playerid][pTaxiCalled] = 1;
	        PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s telefonunda bir kaç numara tuþlar.", ReturnName(playerid, 0));
	        MesajGonder(playerid, "Taksi çaðýrdýnýz, lütfen bekleyin...");
	        new Float:pos[3];
	        GetPlayerPosEx(playerid, pos[0], pos[1], pos[2]);
	        foreach(new i:Player) if(GetPlayerState(i) == PLAYER_STATE_DRIVER && PlayerData[i][pTaxiDuty] == true)
	        {
	            SendClientMessageEx(i, 0x42f445FF, "%s adlý kiþi %s bölgesine taksi talep ediyor.", ReturnName(playerid, 0), GetLocation(pos[0], pos[1], pos[2]));
	        }
	        return 1;
    	}
	    if(PlayerData[playerid][pTarife] == -1 || PlayerData[playerid][pTarifeKalan][0] == 0)
		{
		    HataMesajGonder(playerid, "Tarifeniz yok veya tarifenizde dakika kalmamýþ.");
		    return Dialog_Show(playerid, Arama, DIALOG_STYLE_INPUT, "Telefon ~ Arama", "Lütfen aramak istediðiniz numarayý girin:\n\n{FFBF00}911 - Acil Durum | 333 - Taksi | 555 - Tarifeci", "Ara", "Geri");
		}
	    new targetid = GetNumberOwner(strval(inputtext));
	    if(targetid == INVALID_PLAYER_ID || targetid == playerid || PlayerData[targetid][pBaygin] > 0 || PlayerData[targetid][pKelepce] > 0 || PlayerData[targetid][pHapisSure] > 0 || PlayerData[targetid][pTelefonAyar][0] == 1 || PlayerData[targetid][pTelefonAyar][5] == 1 || Jammer_Near(targetid) == 1) return HataMesajGonder(playerid, "Aradýðýnýz numaraya þu anda ulaþýlamýyor, lütfen daha sonra tekrar deneyiniz.");
	    if(PlayerData[targetid][pAramada] != 0) return HataMesajGonder(playerid, "Meþgül tonu aldýn...");
	    if(PlayerData[targetid][pTelefonAyar][3] == 1 && !RehberdeVar(targetid, PlayerData[playerid][pTelefon])) return HataMesajGonder(playerid, "Bu numara bilinmeyen numaralarý engellemiþ.");
	    PlayerData[playerid][pAramada] = ARAMA_ARIYOR;
	    PlayerData[targetid][pAramada] = ARAMA_ARANIYOR;
	    PlayerData[playerid][pCallLine] = targetid;
	    PlayerData[targetid][pCallLine] = playerid;
	    SetPVarInt(playerid, "Arayan", 1);
	    MesajGonder(playerid, "Numara aranýyor, lütfen cevap vermesini bekleyin. /cagrikapat ile çaðrýyý bitirebilirsiniz.");
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s telefonunda bir kaç numara tuþlar.", ReturnName(playerid, 0));
	    BilgiMesajGonder(targetid, "Gelen Arama: %s  - /cagrikabul ile çaðrýyý kabul edebilir, /cagrikapat ile çaðrýyý kapatabilirsiniz.", TelNo(targetid, playerid));
	    PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
	    if(PlayerData[targetid][pTelefonAyar][1]) SendNearbyMessage(targetid, 30.0, COLOR_CYAN, "** Telefonu titremektedir. (( %s ))", ReturnName(targetid, 0));
	    else
		{
			SendNearbyMessage(targetid, 30.0, COLOR_CYAN, "** Telefon çalmaktadýr. (( %s ))", ReturnName(targetid, 0));
            PlayerPlaySoundEx(targetid, 23000);
		}
	}
	return 1;
}
TelNo(playerid, targetid)
{
	new query[200], returnn[24] = "Bilinmeyen";
    if(!OyundaDegil(targetid)) return returnn;
    format(query, sizeof(query), "SELECT `Isim` FROM `rehber` WHERE `Numara` = '%d' AND `RehberNumara` = '%d'", PlayerData[playerid][pTelefon], PlayerData[targetid][pTelefon]);
    new Cache:cachee = mysql_query(baglanti, query);
    new rows;
    cache_get_row_count(rows);
    if(rows)
    {
        new name[24];
        cache_get_value_name(0, "Isim", name, 24);
        format(returnn, sizeof(returnn), "%s", name);
    }
    else
    {
        format(returnn, sizeof(returnn), "%d", PlayerData[targetid][pTelefon]);
    }
    cache_delete(cachee);
	return returnn;
}
RehberdeVar(playerid, numara)
{
	new query[200];
	format(query, sizeof(query), "SELECT null FROM `rehber` WHERE `Numara` = '%d' AND `RehberNumara` = '%d'", PlayerData[playerid][pTelefon], numara);
	new Cache:cachee = mysql_query(baglanti, query);
	new rows;
    cache_get_row_count(rows);
    cache_delete(cachee);
    if(rows) return 1;
    return 0;
}
GetNumberOwner(number)
{
	foreach (new i : Player) if (PlayerData[i][pTelefon] != -1 && PlayerData[i][pTelefon] == number) {
		return i;
	}
	return INVALID_PLAYER_ID;
}
GetVehicleModelIDFromName(vname[])
{
        for(new i = 0; i < 211; i++)
        {
                if ( strfind(VehicleNames[i], vname, true) != -1 )
                        return i + 400;
        }
        return -1;
}
stock Telefon_Rehber(playerid)
{
	if(PlayerData[playerid][pTelefon] == -1) return 1;
	new query[124], str[500];
	format(query, sizeof(query), "SELECT * FROM `rehber` WHERE `Numara` = '%d' ORDER BY `Numara` DESC LIMIT 15", PlayerData[playerid][pTelefon]);
	new Cache:cachee = mysql_query(baglanti, query);
	new rows;
	cache_get_row_count(rows);
	if(rows)
	{
		new number, name[24], tarih[20];
		for(new i; i<rows; i++)
		{
			cache_get_value_name_int(i, "RehberNumara", number);
			cache_get_value_name(i, "Isim", name, 24);
			cache_get_value_name(i, "Tarih", tarih, 20);
			RehberListeleme[playerid][i] = number;
			format(str, sizeof(str), "%s{FFFFFF}%s (Numara: %d) - %s\n", str, name, number, tarih);

		}
		strcat(str, "{FFBF00}» {FFFFFF}Kiþi Ekle");
	}
	else
	{
		format(str, sizeof(str), "{FFBF00}» {FFFFFF}Kiþi Ekle");
	}
	SetPVarInt(playerid, "RehberSayi", rows);
	cache_delete(cachee);
	Dialog_Show(playerid, TelefonRehber, DIALOG_STYLE_LIST, "Rehber", str, "Seç", "Geri");
	return 1;
}
Dialog:Tarifeler(playerid, response, listitem, inputtext[])
{
	if(!response) return Telefon_Menu(playerid);
	if(response)
	{
		if(PlayerData[playerid][pTarife] != -1) return HataMesajGonder(playerid, "Zaten tarifeniz var, önce mevcut tarifenizi iptal etmelisiniz.");
		if(PlayerData[playerid][pCash] < Tarifeler[listitem][TarifeFiyat]) return HataMesajGonder(playerid, "Bu tarifeyi almak için yeterli paranýz yok.");
		ParaVer(playerid, -Tarifeler[listitem][TarifeFiyat]);
		PlayerData[playerid][pTarife] = listitem;
		PlayerData[playerid][pTarifeKalan][0] = Tarifeler[listitem][TarifeDakika];
		PlayerData[playerid][pTarifeKalan][1] = Tarifeler[listitem][TarifeSMS];
		PlayerData[playerid][pTarifeKalan][2] = Tarifeler[listitem][TarifeNet];
		PlayerData[playerid][pTarifeSure] = gettime()+7*86400;
		Oyuncu_Kaydet(playerid);
		MesajGonder(playerid, "{FFBF00}'%s' {FFFFFF}adlý tarifeyi satýn aldýnýz. ", Tarifeler[listitem][TarifeAdi]);
	}
	return 1;
}
Dialog:TelefonRehber(playerid, response, listitem, inputtext[])
{
	if(!response) return Telefon_Menu(playerid), DeletePVar(playerid, "RehberSayi");
	if(response)
	{
		if(listitem == GetPVarInt(playerid, "RehberSayi"))
		{
            new rehbersayi = 15;
		    switch(PlayerData[playerid][pVip])
		    {
		        case 1: rehbersayi += 10;
		        case 2: rehbersayi += 20;
		        case 3: rehbersayi += 25;
		    }
			if(GetPVarInt(playerid, "RehberSayi") >= rehbersayi)
			{
				Telefon_Rehber(playerid);
				return HataMesajGonder(playerid, "Telefon rehberine en fazla %d kiþi ekleyebilirsiniz.", rehbersayi);
			}
			else
			{
				Dialog_Show(playerid, RehberEkle, DIALOG_STYLE_INPUT, "Kiþi Ekle", "{FFFFFF}Lütfen rehberinize eklemek istediðiniz numarayý girin:", "Devam", "Geri");
			}
		}
		else
		{
			new number = RehberListeleme[playerid][listitem];
			if(number != 0)
			{
				SetPVarInt(playerid, "RehberNumber", number);
				Dialog_Show(playerid, RehberAyar, DIALOG_STYLE_LIST, "Rehber", "{FFBF00}» {FFFFFF}Ara\n{FFBF00}» {FFFFFF}SMS Yolla\n{FFBF00}» {FFFFFF}Sil", "Seç", "Geri");
			}
		}
	}
	return 1;
}
Dialog:RehberAyar(playerid, response, listitem, inputtext[])
{
	if(!response) Telefon_Rehber(playerid);
	if(response)
	{
		if(listitem == 0)
		{
			new targetid = GetNumberOwner(GetPVarInt(playerid, "RehberNumber"));
			if(PlayerData[playerid][pAramada] != 0) return HataMesajGonder(playerid, "Þu an aramada olduðunuz için kimseyi arayamazsýnýz.");
			if(targetid == INVALID_PLAYER_ID || /*targetid == playerid ||*/ PlayerData[targetid][pBaygin] > 0 || PlayerData[targetid][pKelepce] > 0 || PlayerData[targetid][pHapisSure] > 0 || PlayerData[targetid][pTelefonAyar][0] == 1 || PlayerData[targetid][pTelefonAyar][5] == 1 || Jammer_Near(targetid) == 1)
			{
				Telefon_Rehber(playerid);
				return HataMesajGonder(playerid, "Aradýðýnýz numaraya þu anda ulaþýlamýyor, lütfen daha sonra tekrar deneyiniz.");
			}
			if(PlayerData[playerid][pTarife] == -1 || PlayerData[playerid][pTarifeKalan][0] == 0)
			{
			    HataMesajGonder(playerid, "Tarifeniz yok veya tarifenizde dakika kalmamýþ, 555 numarasýný arayarak yenileyebilirsiniz.");
			    return Telefon_Rehber(playerid);
			}
			if(PlayerData[targetid][pAramada] != 0)
			{
				Telefon_Rehber(playerid);
				return HataMesajGonder(playerid, "Mesgul tonu aldýn...");
			}
			PlayerData[playerid][pAramada] = ARAMA_ARIYOR;
		    PlayerData[targetid][pAramada] = ARAMA_ARANIYOR;
		    PlayerData[playerid][pCallLine] = targetid;
		    PlayerData[targetid][pCallLine] = playerid;
		    SetPVarInt(playerid, "Arayan", 1);
		    SetPVarInt(targetid, "Arayan", 0);
		    MesajGonder(playerid, "Numara aranýyor, lütfen cevap vermesini bekleyin. /cagrikapat ile çaðrýyý bitirebilirsiniz.");
		    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s telefonunda bir kaç numara tuþlar.", ReturnName(playerid, 0));
		    BilgiMesajGonder(targetid, "Gelen Arama: %s  - /cagrikabul ile çaðrýyý kabul edebilir, /cagrikapat ile çaðrýyý kapatabilirsiniz.", TelNo(targetid, playerid));
		    PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
		    if(PlayerData[targetid][pTelefonAyar][1]) SendNearbyMessage(targetid, 30.0, COLOR_CYAN, "** Telefonu titremektedir. (( %s ))", ReturnName(targetid, 0));
		    else
			{
				SendNearbyMessage(targetid, 30.0, COLOR_CYAN, "** Telefon çalmaktadýr. (( %s ))", ReturnName(targetid, 0));
	            PlayerPlaySoundEx(targetid, 23000);
			}
			DeletePVar(playerid, "RehberSayi");
			DeletePVar(playerid, "RehberNumber");

		}
		if(listitem == 1)
		{
		    if(PlayerData[playerid][pTarife] == -1 || PlayerData[playerid][pTarifeKalan][1] == 0)
	 		{
	 		    HataMesajGonder(playerid, "Tarifeniz yok veya SMS hakkýnýz bitmiþ.");
			 	return Telefon_Rehber(playerid);
	 		}
			new targetid = GetNumberOwner(GetPVarInt(playerid, "RehberNumber"));
			if(targetid == INVALID_PLAYER_ID || targetid == playerid || Jammer_Near(targetid) == 1)
			{
				HataMesajGonder(playerid, "Bu numaraya þu anda ulaþýlamýyor.");
				Telefon_Rehber(playerid);
				return 1;
			}
			if(PlayerData[targetid][pTelefonAyar][0] == 1 || PlayerData[targetid][pTelefonAyar][4] == 1)
			{
				HataMesajGonder(playerid, "Bu numara SMS alýmlarýný kapatmýþ.");
				return Telefon_Rehber(playerid);
			}
			SetPVarInt(playerid, "SMSNumara", GetPVarInt(playerid, "RehberNumber"));
			Dialog_Show(playerid, SMSGonder2, DIALOG_STYLE_INPUT, "Telefon ~ SMS Gönder", "Lütfen göndermek istediðiniz mesajý girin:", "Gönder", "Kapat");
		}
		if(listitem == 2)
		{
			new query[124];
			format(query, sizeof(query), "DELETE FROM `rehber` WHERE `Numara` = '%d' AND `RehberNumara` = '%d'", PlayerData[playerid][pTelefon], GetPVarInt(playerid, "RehberNumber"));
			mysql_query(baglanti, query, false);
			DeletePVar(playerid, "RehberNumber");
			Telefon_Rehber(playerid);
		}
	}
	return 1;
}
Dialog:RehberEkle(playerid, response, listitem, inputtext[])
{
	if(!response) return Telefon_Rehber(playerid);
	if(response)
	{
		if(isnull(inputtext)) return Dialog_Show(playerid, RehberEkle, DIALOG_STYLE_INPUT, "Kiþi Ekle", "{FFFFFF}Lütfen rehberinize eklemek istediðiniz numarayý girin:", "Devam", "Geri");
		if(!IsNumeric(inputtext)) return Dialog_Show(playerid, RehberEkle, DIALOG_STYLE_INPUT, "Kiþi Ekle", "{FFFFFF}Lütfen rehberinize eklemek istediðiniz numarayý girin:", "Devam", "Geri");
		if(strval(inputtext) == 911 || strval(inputtext) == 121 || strval(inputtext) == 555) return Dialog_Show(playerid, RehberEkle, DIALOG_STYLE_INPUT, "Kiþi Ekle", "{FFFFFF}Lütfen rehberinize eklemek istediðiniz numarayý girin:", "Devam", "Geri");
		if(RehberdeVar(playerid, strval(inputtext))) return Dialog_Show(playerid, RehberEkle, DIALOG_STYLE_INPUT, "Kiþi Ekle", "{FFFFFF}Lütfen rehberinize eklemek istediðiniz numarayý girin:", "Devam", "Geri");
		if(strval(inputtext) == PlayerData[playerid][pTelefon])
		{
		    HataMesajGonder(playerid, "Kendi numaranýzý ekleyemezsiniz.");
		    return Dialog_Show(playerid, RehberEkle, DIALOG_STYLE_INPUT, "Kiþi Ekle", "{FFFFFF}Lütfen rehberinize eklemek istediðiniz numarayý girin:", "Devam", "Geri");
		}
		SetPVarInt(playerid, "RehberNumara", strval(inputtext));
		Dialog_Show(playerid, RehberEkleAd, DIALOG_STYLE_INPUT, "Kiþi Ekle", "{FFFFFF}Lütfen kiþinin ismini girin:", "Devam", "Geri");
	}
	return 1;
}
Dialog:RehberEkleAd(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, RehberEkle, DIALOG_STYLE_INPUT, "Kiþi Ekle", "{FFFFFF}Lütfen rehberinize eklemek istediðiniz numarayý girin:", "Devam", "Geri");
	if(response)
	{
		if(isnull(inputtext)) return Dialog_Show(playerid, RehberEkleAd, DIALOG_STYLE_INPUT, "Kiþi Ekle", "{FFFFFF}Lütfen kiþinin ismini girin:", "Devam", "Geri");
		new query[300];
		format(query, sizeof(query), "INSERT INTO `rehber` (`Numara`, `RehberNumara`, `Isim`, `Tarih`) VALUES ('%d', '%d', '%s', '%s')", PlayerData[playerid][pTelefon],GetPVarInt(playerid, "RehberNumara"), SQL_ReturnEscaped(inputtext), ReturnDate());
		mysql_query(baglanti, query, false);
		DeletePVar(playerid, "RehberNumara");
		MesajGonder(playerid, "Rehberinize '%s' adli kiþi eklenmiþtir.", inputtext);
		Telefon_Rehber(playerid);
	}
	return 1;
}
Dialog:TelefonAyarlar(playerid, response, listitem, inputtext[])
{
	if(!response) return Telefon_Menu(playerid);
	if(response)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(PlayerData[playerid][pTelefonAyar][1] == 0) PlayerData[playerid][pTelefonAyar][1] = 1;
	            else PlayerData[playerid][pTelefonAyar][1] = 0;
	            Dialog_Show(playerid, TelefonAyarlar, DIALOG_STYLE_LIST, "Telefon ~ Ayarlar", "{FFBF00}» {FFFFFF}Titreþim:\t\t%s\n{FFBF00}» {FFFFFF}Hoparlör:\t\t%s\n{FFBF00}» {FFFFFF}Bilinmeyen Numara Engeli:\t%s\n{FFBF00}» {FFFFFF}SMS Engeli:\t\t%s\n{FFBF00}» {FFFFFF}Arama Engeli:\t\t%s", "Seç", "Geri",(PlayerData[playerid][pTelefonAyar][1] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),
				(PlayerData[playerid][pTelefonAyar][2] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),  (PlayerData[playerid][pTelefonAyar][3] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),  (PlayerData[playerid][pTelefonAyar][4] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"), (PlayerData[playerid][pTelefonAyar][5] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"));
	        }
	        case 1:
	        {
	            if(PlayerData[playerid][pTelefonAyar][2] == 0) PlayerData[playerid][pTelefonAyar][2] = 1;
	            else PlayerData[playerid][pTelefonAyar][2] = 0;
	            Dialog_Show(playerid, TelefonAyarlar, DIALOG_STYLE_LIST, "Telefon ~ Ayarlar", "{FFBF00}» {FFFFFF}Titreþim:\t\t%s\n{FFBF00}» {FFFFFF}Hoparlör:\t\t%s\n{FFBF00}» {FFFFFF}Bilinmeyen Numara Engeli:\t%s\n{FFBF00}» {FFFFFF}SMS Engeli:\t\t%s\n{FFBF00}» {FFFFFF}Arama Engeli:\t\t%s", "Seç", "Geri",(PlayerData[playerid][pTelefonAyar][1] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),
				(PlayerData[playerid][pTelefonAyar][2] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),  (PlayerData[playerid][pTelefonAyar][3] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),  (PlayerData[playerid][pTelefonAyar][4] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"), (PlayerData[playerid][pTelefonAyar][5] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"));
	        }
	        case 2:
	        {
	            if(PlayerData[playerid][pTelefonAyar][3] == 0) PlayerData[playerid][pTelefonAyar][3] = 1;
	            else PlayerData[playerid][pTelefonAyar][3] = 0;
	            Dialog_Show(playerid, TelefonAyarlar, DIALOG_STYLE_LIST, "Telefon ~ Ayarlar", "{FFBF00}» {FFFFFF}Titreþim:\t\t%s\n{FFBF00}» {FFFFFF}Hoparlör:\t\t%s\n{FFBF00}» {FFFFFF}Bilinmeyen Numara Engeli:\t%s\n{FFBF00}» {FFFFFF}SMS Engeli:\t\t%s\n{FFBF00}» {FFFFFF}Arama Engeli:\t\t%s", "Seç", "Geri",(PlayerData[playerid][pTelefonAyar][1] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),
				(PlayerData[playerid][pTelefonAyar][2] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),  (PlayerData[playerid][pTelefonAyar][3] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),  (PlayerData[playerid][pTelefonAyar][4] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"), (PlayerData[playerid][pTelefonAyar][5] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"));
	        }
	        case 3:
	        {
	            if(PlayerData[playerid][pTelefonAyar][4] == 0) PlayerData[playerid][pTelefonAyar][4] = 1;
	            else PlayerData[playerid][pTelefonAyar][4] = 0;
	            Dialog_Show(playerid, TelefonAyarlar, DIALOG_STYLE_LIST, "Telefon ~ Ayarlar", "{FFBF00}» {FFFFFF}Titreþim:\t\t%s\n{FFBF00}» {FFFFFF}Hoparlör:\t\t%s\n{FFBF00}» {FFFFFF}Bilinmeyen Numara Engeli:\t%s\n{FFBF00}» {FFFFFF}SMS Engeli:\t\t%s\n{FFBF00}» {FFFFFF}Arama Engeli:\t\t%s", "Seç", "Geri",(PlayerData[playerid][pTelefonAyar][1] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),
				(PlayerData[playerid][pTelefonAyar][2] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),  (PlayerData[playerid][pTelefonAyar][3] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),  (PlayerData[playerid][pTelefonAyar][4] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"), (PlayerData[playerid][pTelefonAyar][5] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"));
	        }
	        case 4:
	        {
	            if(PlayerData[playerid][pTelefonAyar][5] == 0) PlayerData[playerid][pTelefonAyar][5] = 1;
	            else PlayerData[playerid][pTelefonAyar][5] = 0;
	            Dialog_Show(playerid, TelefonAyarlar, DIALOG_STYLE_LIST, "Telefon ~ Ayarlar", "{FFBF00}» {FFFFFF}Titreþim:\t\t%s\n{FFBF00}» {FFFFFF}Hoparlör:\t\t%s\n{FFBF00}» {FFFFFF}Bilinmeyen Numara Engeli:\t%s\n{FFBF00}» {FFFFFF}SMS Engeli:\t\t%s\n{FFBF00}» {FFFFFF}Arama Engeli:\t\t%s", "Seç", "Geri",(PlayerData[playerid][pTelefonAyar][1] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),
				(PlayerData[playerid][pTelefonAyar][2] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),  (PlayerData[playerid][pTelefonAyar][3] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),  (PlayerData[playerid][pTelefonAyar][4] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"), (PlayerData[playerid][pTelefonAyar][5] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"));
	        }
	    }
	}
	return 1;
}
stock YaraliListesi(playerid)
{
	new str[500], string[200], sayi;
	strcat(str, "{FF8282}Ad\t{FF8282}Bölge\t{FF8282}Durum\n");
	foreach(new i:Player)
	{
	    if(PlayerData[i][pBaygin] == 1)
	    {
	        new Float:pos[3];
	        GetPlayerPosEx(i, pos[0], pos[1], pos[2]);
	        format(string, sizeof(string), "{FFFFFF}%s\t{FFFFFF}%s\t%s\n", ReturnName(i), GetLocation(pos[0], pos[1], pos[2]), (EMSAccepted(i) != INVALID_PLAYER_ID) ? ("{00FF6E}Kabul Edildi") : ("{FF0000}Bekliyor"));
	        strcat(str, string);
	        sayi++;
	    }
	}
	if(sayi == 0) return HataMesajGonder(playerid,  "Hiç yaralý yok.");
	format(string, sizeof(string), "Yaralýlar (%d)", sayi);
	Dialog_Show(playerid, Yaralilar, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Kabul Et", "Kapat");
	return 1;
}
stock EMSAccepted(playerid)
{
	foreach(new i:Player)
	{
	    if(EMSKabul[i] == playerid && GetFactionType(i) == BIRLIK_LSMD)
	    {
	        return i;
	    }
	}
	return INVALID_PLAYER_ID;
}
stock SetPlayerLookAt(playerid, Float:X, Float:Y)
{
    new Float:Px, Float:Py, Float: Pa;
    GetPlayerPos(playerid, Px, Py, Pa);
    Pa = floatabs(atan((Y-Py)/(X-Px)));
    if (X <= Px && Y >= Py) Pa = floatsub(180, Pa);
    else if (X < Px && Y < Py) Pa = floatadd(Pa, 180);
    else if (X >= Px && Y <= Py) Pa = floatsub(360.0, Pa);
    Pa = floatsub(Pa, 90.0);
    if (Pa >= 360.0) Pa = floatsub(Pa, 360.0);
    SetPlayerFacingAngle(playerid, Pa);
}
ReturnHealth(playerid)
{
	static
	    Float:amount;

	GetPlayerHealth(playerid, amount);
	return floatround(amount, floatround_round);
}
ReturnArmour(playerid)
{
	static
	    Float:amount;

	GetPlayerArmour(playerid, amount);
	return floatround(amount, floatround_round);
}
stock GetAracVergi(aracmodel)
{
	if(aracmodel < 400 || aracmodel > 611) return 0;
	new Float:vergi = GetGaleriFiyat(aracmodel)/1000*0.3;
	return floatround(vergi);
}
stock GetAracMaksVergi(aracmodel)
{
	if(aracmodel < 400 || aracmodel > 611) return 0;
	new Float:vergi = GetGaleriFiyat(aracmodel) * 0.2;
	return floatround(vergi);
}
stock Car_LSPDTrunk(playerid, carid)
{
	new string[550];
	string[0] = EOS;

	strcat(string, "{1394BF}Ad\t{1394BF}Mermi\n");
	for(new i; i<5; i++)
	{
	    if(PolisAraci[carid][Silahlar][i] != 0 && PolisAraci[carid][Mermiler][i] != 0)
	    {
	        new silahadi[15];
	        GetWeaponName(PolisAraci[carid][Silahlar][i], silahadi, sizeof(silahadi));
	        format(string, sizeof(string), "%s{FFFFFF}%s\t{FFFFFF}%d\n",string,silahadi,PolisAraci[carid][Mermiler][i]);

		}
		else
		{
		    format(string, sizeof(string), "%s{FFFFFF}Boþ Silah Yuvasý\t{FFFFFF}0\n",string);
		}
	}
 	format(string, sizeof(string), "%s{FFFFFF}Aðrý Kesici (%d adet)\n",string, PolisAraci[carid][AgriKesici]);
	format(string, sizeof(string), "%s{FFFFFF}Çelik Yelek (%d adet)",string, PolisAraci[carid][CelikYelek]);
	SetPVarInt(playerid, "AracBagaj", carid);
	Dialog_Show(playerid, LSPDTrunk, DIALOG_STYLE_TABLIST_HEADERS, "{1394BF}LSPD ~ Bagaj", string, "Seç", "Kapat");
	return 1;
}
Dialog:LSMDLobi(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(listitem == 0)
	    {
	        if(ReturnHealth(playerid) >= 90 && PlayerData[playerid][pTopallama] == false) return HataMesajGonder(playerid, "Tedavi olmaya ihtiyacýnýz yok.");
	        CanAyarla(playerid, 100);
	        PlayerData[playerid][pTopallama] = false;
	        PlayerData[playerid][pTopallamaSayac] = 0;
	        MesajGonder(playerid, "Tedavi edildiniz.");
	    }
	    if(listitem == 1)
	    {
	        if(!spamProtect(playerid, "DoktorCagir", 60)) return HataMesajGonder(playerid, "Tekrar doktor çaðýrmak için 1 dakika beklemelisiniz.");
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s masada bulunan zile basar ve doktor çaðýrýr.", ReturnName(playerid, 0));
	        SendBirlikMessageEx(BIRLIK_LSMD, 0xFF8282AA, "%s adlý kiþi lobiye Doktor talep ediyor.", ReturnName(playerid, 0));
	    }
	    if(listitem == 2)
	    {
	        if(PlayerData[playerid][pBagimlilik] == 0) return HataMesajGonder(playerid, "Uyuþturucu baðýmlýsý deðilsiniz.");
	        PlayerData[playerid][pBagimlilik] = 0;
	        PlayerData[playerid][pBagimlilikSayac][0] = 0;
	        PlayerData[playerid][pBagimlilikSayac][1] = 0;
	        MesajGonder(playerid, "Uyuþturucu baðýmlýlýðýndan kurtuldunuz.");
		}
	}
	return 1;
}
stock IsyeriMaksVergi(id)
{
	new maksvergi = 0;
	switch(Isyeri[id][isyeriTip])
	{
	    case 1: maksvergi = 75000;
	    case 2: maksvergi = 55000;
	    case 3: maksvergi = 49000;
	    case 4: maksvergi = 85000;
	    case 5: maksvergi = 60000;
	    case 6: maksvergi = 53000;
	    case 7: maksvergi = 155000;
	}
	return maksvergi;
}
stock GetIsyeriVergi(id)
{
	new vergi = 0;
	switch(Isyeri[id][isyeriTip])
	{
	    case 1: vergi = 80;
	    case 2: vergi = 65;
	    case 3: vergi = 50;
	    case 4: vergi = 100;
	    case 5: vergi = 75;
	    case 6: vergi = 60;
	    case 7: vergi = 200;
	}
	return vergi;
}
stock GetGaleriFiyat(amodel)
{
	new query[100];
	format(query, sizeof(query), "SELECT `vehPrice` FROM `galeriaraclar` WHERE `vehModel` = '%d'", amodel);
	new Cache:sawyer = mysql_query(baglanti, query);
	new rows;
	cache_get_row_count(rows);
	if(rows)
	{
		new fiyat = 0;
		cache_get_value_name_int(0, "vehPrice", fiyat);
		cache_delete(sawyer);
		return fiyat;
	}

	else return 0;

}
Dialog:LSPDTrunk(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new vehicleid = GetPVarInt(playerid, "AracBagaj");
	    if(strfind(inputtext, "Aðrý Kesici", true) != -1)
	    {
	        if(PolisAraci[vehicleid][AgriKesici] > 0)
	        {
	            PolisAraci[vehicleid][AgriKesici]--;
	            CanAyarla(playerid, 100.0);
	            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s araçtan aðrý kesici alýr ve yutar.", ReturnName(playerid, 0));
			}
			else
			{
			    HataMesajGonder(playerid, "Bagajda hiç aðrý kesici kalmamýþ.");
			}
			return 1;
		}
		if(strfind(inputtext, "Çelik Yelek", true) != -1)
		{
		    if(PolisAraci[vehicleid][CelikYelek] > 0)
		    {
		        PolisAraci[vehicleid][CelikYelek]--;
		        ZirhAyarla(playerid, 100.0);
		        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s araçtan çelik yelek alýr ve giyer.", ReturnName(playerid, 0));
			}
			else
			{
			    HataMesajGonder(playerid, "Bagajda hiç çelik yelek kalmamýþ.");
			}
			return 1;
		}
		new silahad[15];
		if(PolisAraci[vehicleid][Silahlar][listitem] == 0)
		{
		    if (!GetWeapon(playerid))
		    {
		        HataMesajGonder(playerid, "Elinizde silah yok!");
		        return Car_LSPDTrunk(playerid, vehicleid);
		    }
		    if (GetWeapon(playerid) == 23 && PlayerData[playerid][pTazer])
		    {
		        HataMesajGonder(playerid, "Bagaja Tazer koyamazsýnýz!");
		        return Car_LSPDTrunk(playerid, vehicleid);
		    }
		    if (GetWeapon(playerid) == 25 && PlayerData[playerid][pBeanbag])
		    {
		        HataMesajGonder(playerid, "Bagaja Beanbag koyamazsýnýz!");
		        return Car_LSPDTrunk(playerid, vehicleid);
		    }
		    if(GetPlayerAmmo(playerid) < 2)
		    {
		        HataMesajGonder(playerid, "Mermisi bitmiþ bir silahý bagaja koyamazsýnýz!");
		        return Car_LSPDTrunk(playerid, vehicleid);
		    }
		    PolisAraci[vehicleid][Silahlar][listitem] = GetWeapon(playerid);
		    PolisAraci[vehicleid][Mermiler][listitem] = GetPlayerAmmo(playerid);
		    ResetWeapon(playerid, GetWeapon(playerid));
		    GetWeaponName(PolisAraci[vehicleid][Silahlar][listitem], silahad, sizeof(silahad));
		    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s '%s' model silahý aracýn bagajýna koyar.", ReturnName(playerid, 0), silahad);
		}
		else
		{
		    if(PlayerHasWeapon(playerid, PolisAraci[vehicleid][Silahlar][listitem]))
		    {
		        HataMesajGonder(playerid, "Bu silaha zaten sahipsin!");
		        return Car_LSPDTrunk(playerid, vehicleid);
		    }
		    GiveWeaponToPlayer(playerid,PolisAraci[vehicleid][Silahlar][listitem], PolisAraci[vehicleid][Mermiler][listitem]);
		    GetWeaponName(PolisAraci[vehicleid][Silahlar][listitem], silahad, sizeof(silahad));
		    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s polis aracýnýn bagajýndan '%s' model silahý alýr.", ReturnName(playerid, 0), silahad);
		    PolisAraci[vehicleid][Silahlar][listitem] = 0;
		    PolisAraci[vehicleid][Mermiler][listitem] = 0;

		}
	}
	return 1;
}
stock SetPlayerInPrison(playerid)
{
	SetPlayerPos(playerid, 264.8745,77.5741,1001.0391);
	SetPlayerInterior(playerid, 6);
	SetPlayerVirtualWorld(playerid, playerid+10);
	SetCameraBehindPlayer(playerid);
	return 1;
}
Arrest_Nearest(playerid)
{
    for (new i = 0; i != MAX_ARREST_POINTS; i ++) if (ArrestData[i][arrestExists] && IsPlayerInRangeOfPoint(playerid, 4.0, ArrestData[i][arrestPos][0], ArrestData[i][arrestPos][1], ArrestData[i][arrestPos][2]))
	{
		if (GetPlayerInterior(playerid) == ArrestData[i][arrestInterior] && GetPlayerVirtualWorld(playerid) == ArrestData[i][arrestWorld])
			return i;
	}
	return -1;
}
stock IsPlayerNearArrest(playerid)
{
	new
	    id = Arrest_Nearest(playerid);

	return (id != -1);
}
stock MenuMVB(playerid)
{
	if(GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_FBI)
	{
	    Dialog_Show(playerid, MenuMVB, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný", "{1394BF}» {FFFFFF}Kriminal Veritabaný\n{1394BF}» {FFFFFF}Plaka Ýnceleme\n{1394BF}» {FFFFFF}Telefon Sorgulat\n{1394BF}» {FFFFFF}Aranmalar\n{1394BF}» {FFFFFF}Ihbarlar\n{1394BF}» {FFFFFF}Dashcam Aç/Kapat\n{1394BF}» {FFFFFF}Gecikmiþ Vatandaþ Cezalarý", "Seç", "Kapat");
	}
}
Dialog:MenuMVB(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
		    case 0: // Kriminal Veritabaný
		    {
				Dialog_Show(playerid, MVBIDYaz, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabaný ~ Kriminal Veritabaný", "Lütfen incelemek istediðiniz kiþinin ID'sini girin:", "Devam", "Geri");
		    }
		    case 1: // Plaka Inceleme
		    {
				Dialog_Show(playerid, PlakaGir, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabaný ~ Plaka Incele", "{FFFFFF}Lütfen incelemek istediðiniz plakayý girin:", "Devam", "Geri");
		    }
		    case 2: // Telefon Sorgulat
		    {
				Dialog_Show(playerid, TelefonSorgulat, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabaný ~ Telefon Sorgulat", "{FFFFFF}Lütfen sorgulatmak istediðiniz telefon numarasýný girin:", "Devam", "Geri");
		    }
		    case 3: // Aranmalar
		    {
		        new str[500], string[100],sayi;
		        strcat(str, "{1394BF}ID\t{1394BF}Ad/Soyad\t{1394BF}Aranma Seviyesi\n");
		        foreach(new i:Player)
		        {
		            if(PlayerData[i][pAranma] > 0)
		            {
		                sayi++;
		                format(string, sizeof(string), "{FFFFFF}%d\t{FFFFFF}%s\t{FFFFFF}%d", i, ReturnName(i, 0), PlayerData[i][pAranma]);
		                strcat(str, string);
		            }
		        }
		        if(sayi == 0) return HataMesajGonder(playerid, "Arananlar listesi boþ.");
		        format(string, sizeof(string), "{1394BF}Mobil Veritabaný - Arananlar: %d", sayi);
		        Dialog_Show(playerid, Arananlar, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Geri", "");
		    }
		    case 4: // Ihbarlar
		    {
		        new string[1024], sayi;
			 	foreach (new i : Player)
				{
				    if(strlen(PlayerData[i][pIhbar]) > 0)
					{
			 			format(string, sizeof(string), "%s[Tel No: %d] %s: %s\n", string, PlayerData[i][pTelefon], ReturnName(i, 0), PlayerData[i][pIhbar]);
					    sayi++;
					}
				}
				if(sayi == 0) return HataMesajGonder(playerid, "Hiç ihbar yok.");
				Dialog_Show(playerid, Ihbarlar, DIALOG_STYLE_MSGBOX, "Ýhbarlar", string, "Tamam", "");
		    }
		    case 5: // Dashcam
		    {
		        if(IsPlayerInAnyVehicle(playerid))
		        {
		            new vehicleid = GetPlayerVehicleID(playerid);
	    			if(vehRadar[vehicleid] == true)
    				{
    				    for(new i; i<5; i++) TextDrawDestroy(carMDC[vehicleid][i]);
      					vehRadar[vehicleid] = false;
      					vehRadarLimit[vehicleid] = 100;
	        			KillTimer(timerMDC[vehicleid]);
	        			MesajGonder(playerid, "Dashcam kapandý.");
						for(new i; i < 5; i++) TextDrawHideForPlayer(playerid, carMDC[GetPlayerVehicleID(playerid)][i]);
	    			}
	    			else
    				{
    				    CreateMDCTextdraws(vehicleid);
				    	vehRadar[vehicleid] = true;
      					vehRadarLimit[vehicleid] = 100;
            			timerMDC[vehicleid] = SetTimerEx ("RadarGuncelle", 100, 1, "d", vehicleid);
           				MesajGonder(playerid, "Dashcam açýldý.");
					}
		        }
		    }
		}
	}
	return 1;
}
stock CreateMDCTextdraws(vehicleid)
{
    carMDC[vehicleid][0] = TextDrawCreate(546.749938, 159.083328, "box");
	TextDrawLetterSize(carMDC[vehicleid][0], 0.000000, 5.830162);
	TextDrawTextSize(carMDC[vehicleid][0], 619.000000, 0.000000);
	TextDrawAlignment(carMDC[vehicleid][0], 1);
	TextDrawColor(carMDC[vehicleid][0], -1);
	TextDrawUseBox(carMDC[vehicleid][0], 1);
	TextDrawBoxColor(carMDC[vehicleid][0], 80);
	TextDrawSetShadow(carMDC[vehicleid][0], 0);
	TextDrawSetOutline(carMDC[vehicleid][0], 0);
	TextDrawBackgroundColor(carMDC[vehicleid][0], 255);
	TextDrawFont(carMDC[vehicleid][0], 1);
	TextDrawSetProportional(carMDC[vehicleid][0], 1);
	TextDrawSetShadow(carMDC[vehicleid][0], 0);

	carMDC[vehicleid][1] = TextDrawCreate(567.833374, 149.750045, "mdc");
	TextDrawLetterSize(carMDC[vehicleid][1], 0.400000, 1.600000);
	TextDrawAlignment(carMDC[vehicleid][1], 1);
	TextDrawColor(carMDC[vehicleid][1], -2147483393);
	TextDrawSetShadow(carMDC[vehicleid][1], 0);
	TextDrawSetOutline(carMDC[vehicleid][1], -2);
	TextDrawBackgroundColor(carMDC[vehicleid][1], 255);
	TextDrawFont(carMDC[vehicleid][1], 3);
	TextDrawSetProportional(carMDC[vehicleid][1], 1);
	TextDrawSetShadow(carMDC[vehicleid][1], 0);

	carMDC[vehicleid][2] = TextDrawCreate(550.497985, 168.416625, "~r~PLAKA: ~y~N/A");
	TextDrawLetterSize(carMDC[vehicleid][2], 0.276309, 1.179998);
	TextDrawAlignment(carMDC[vehicleid][2], 1);
	TextDrawColor(carMDC[vehicleid][2], -1);
	TextDrawSetShadow(carMDC[vehicleid][2], 0);
	TextDrawSetOutline(carMDC[vehicleid][2], -1);
	TextDrawBackgroundColor(carMDC[vehicleid][2], 255);
	TextDrawFont(carMDC[vehicleid][2], 1);
	TextDrawSetProportional(carMDC[vehicleid][2], 1);
	TextDrawSetShadow(carMDC[vehicleid][2], 0);

	carMDC[vehicleid][3] = TextDrawCreate(549.561096, 181.833236, "~r~MODEL: ~y~N/A");
	TextDrawLetterSize(carMDC[vehicleid][3], 0.276309, 1.179998);
	TextDrawAlignment(carMDC[vehicleid][3], 1);
	TextDrawColor(carMDC[vehicleid][3], -1);
	TextDrawSetShadow(carMDC[vehicleid][3], 0);
	TextDrawSetOutline(carMDC[vehicleid][3], -1);
	TextDrawBackgroundColor(carMDC[vehicleid][3], 255);
	TextDrawFont(carMDC[vehicleid][3], 1);
	TextDrawSetProportional(carMDC[vehicleid][3], 1);
	TextDrawSetShadow(carMDC[vehicleid][3], 0);

	carMDC[vehicleid][4] = TextDrawCreate(550.029541, 195.833236, "~r~HIZ: ~y~N/A");
	TextDrawLetterSize(carMDC[vehicleid][4], 0.276309, 1.179998);
	TextDrawAlignment(carMDC[vehicleid][4], 1);
	TextDrawColor(carMDC[vehicleid][4], -1);
	TextDrawSetShadow(carMDC[vehicleid][4], 0);
	TextDrawSetOutline(carMDC[vehicleid][4], -1);
	TextDrawBackgroundColor(carMDC[vehicleid][4], 255);
	TextDrawFont(carMDC[vehicleid][4], 1);
	TextDrawSetProportional(carMDC[vehicleid][4], 1);
	TextDrawSetShadow(carMDC[vehicleid][4], 0);
	return 1;
}
Dialog:TelefonSorgulat(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::mdc(playerid);
	if(response)
	{
	    if(isnull(inputtext) || !IsNumeric(inputtext)) return Dialog_Show(playerid, TelefonSorgulat, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabaný ~ Telefon Sorgulat", "{FFFFFF}Lütfen sorgulatmak istediðiniz telefon numarasýný girin:", "Devam", "Geri");
	    new oyuncuid = -1;
	    foreach(new i:Player)
	    {
	        if(PlayerData[i][pTelefon] == strval(inputtext))
	        {
	            oyuncuid = i;
	            break;
	        }
	    }
	    if(oyuncuid == -1)
	    {
	        HataMesajGonder(playerid, "Girdiðiniz numara bulunamadý.");
	        return Dialog_Show(playerid, TelefonSorgulat, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabaný ~ Telefon Sorgulat", "{FFFFFF}Lütfen sorgulatmak istediðiniz telefon numarasýný girin:", "Devam", "Geri");
	    }
	    Dialog_Show(playerid, TelefonSorgulat2, DIALOG_STYLE_MSGBOX, "Telefon Sorgulatma Sonuçlarý", "{AFAFAF}Ad Soyad: {FFFFFF}%s (%d)\n{AFAFAF}Yaþ: {FFFFFF}%d\n{AFAFAF}Doðum Yeri: {FFFFFF}%s\n{AFAFAF}Cinsiyet: {FFFFFF}%s", "Tamam", "Geri",ReturnName(oyuncuid, 0), oyuncuid, PlayerData[oyuncuid][pYas], PlayerData[oyuncuid][pDogum], (PlayerData[oyuncuid][pCinsiyet] == 1) ? ("Bay") : ("Bayan"));
	}
	return 1;
}
Dialog:TelefonSorgulat2(playerid, response, listitem, inputtext[])
{
	if(!response || response) return Dialog_Show(playerid, TelefonSorgulat, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabaný ~ Telefon Sorgulat", "{FFFFFF}Lütfen sorgulatmak istediðiniz telefon numarasýný girin:", "Devam", "Geri");
	return 1;
}
Dialog:Ihbarlar(playerid, response, listitem, inputtext[])
{
	if(response) return callcmd::mdc(playerid);
	return 1;
}
Dialog:Arananlar(playerid, response, listitem, inputtext[])
{
	if(response) return callcmd::mdc(playerid);
	return 1;
}
Dialog:MVBIDYaz(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::mdc(playerid);
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, MVBIDYaz, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabaný ~ Kriminal Veritabaný", "Lütfen incelemek istediðiniz kiþinin ID'sini girin:", "Devam", "Geri");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, MVBIDYaz, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabaný ~ Kriminal Veritabaný", "Lütfen incelemek istediðiniz kiþinin ID'sini girin:", "Devam", "Geri");
	    if(!OyundaDegil(strval(inputtext)))
	    {
	        HataMesajGonder(playerid, "Böyle bir kiþi yok!");
	        return Dialog_Show(playerid, MVBIDYaz, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabaný ~ Kriminal Veritabaný", "Lütfen incelemek istediðiniz kiþinin ID'sini girin:", "Devam", "Geri");
	    }
	    SetPVarInt(playerid, "KriminalVeritabani", strval(inputtext));
	    Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Kriminal Veritabaný", "{1394BF}» {FFFFFF}Kimlik Bilgileri\n{1394BF}» {FFFFFF}Sicil Kaydý\n{1394BF}» {FFFFFF}Mülkler\n{1394BF}» {FFFFFF}Aranma Ekle\n{1394BF}» {FFFFFF}Aranma Sil\n{1394BF}» {FFFFFF}Ceza Yaz\n{1394BF}» {FFFFFF}Lokasyon Bul\n{1394BF}» {FFFFFF}Cezalar", "Seç", "Geri");
	}
	return 1;
}
Dialog:Kriminal(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    DeletePVar(playerid, "KriminalVeritabani");
	    callcmd::mdc(playerid);
	}
	else
	{
	    new hedefid = GetPVarInt(playerid, "KriminalVeritabani");
	    if(listitem == 0)
	    {
	        if(!OyundaDegil(hedefid)) return HataMesajGonder(playerid, "Kiþi oyundan çýkmýþ.");
	        new str[700], string[100];
	        format(string, sizeof(string), "{FFFFFF}Ad Soyad: {9189EF}%s (%d)\n", ReturnName(hedefid, 0), hedefid);
	        strcat(str, string);
	        format(string, sizeof(string), "{FFFFFF}Cinsiyet: {9189EF}%s\n", (PlayerData[hedefid][pCinsiyet] == 1) ? ("Erkek") : ("Kadýn"));
	        strcat(str, string);
	        format(string, sizeof(string), "{FFFFFF}Yaþ: {9189EF}%d\n", PlayerData[hedefid][pYas]);
	        strcat(str, string);
	        format(string, sizeof(string), "{FFFFFF}Doðum Yeri: {9189EF}%s\n", PlayerData[hedefid][pDogum]);
	        strcat(str, string);
	        format(string, sizeof(string), "{FFFFFF}Ten Rengi: {9189EF}%s\n", (PlayerData[hedefid][pTen] == 1) ? ("Beyaz") : ("Siyah"));
	        strcat(str, string);
	        format(string, sizeof(string), "{FFFFFF}Partner: {9189EF}Yok\n");
	        strcat(str, string);
	        if(PlayerData[hedefid][pTelefon] == -1) format(string, sizeof(string), "{FFFFFF}Telefon: {9189EF}Yok\n");
	        else format(string, sizeof(string), "{FFFFFF}Telefon: {9189EF}%d\n", PlayerData[hedefid][pTelefon]);
	        strcat(str, string);
	        format(string, sizeof(string), "{FFFFFF}Ehliyet: {9189EF}%s\n", (PlayerData[hedefid][pEhliyet] == 1) ? ("Var") : ("Yok"));
	        strcat(str, string);
	        format(string, sizeof(string), "{FFFFFF}Aranma: {9189EF}%s\n", (PlayerData[hedefid][pAranma] > 0) ? ("Evet") : ("Hayýr"));
	        strcat(str, string);

	        Dialog_Show(playerid, KimlikBilgileri, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Kimlik Bilgileri", str, "Geri", "");
	    }
	    if(listitem == 1) // Sicil Kaydi
	    {
	        if(!OyundaDegil(hedefid)) return HataMesajGonder(playerid, "Kiþi oyundan çýkmýþ.");
	        if(ICSicil_GetCount(PlayerData[hedefid][pID]) < 1)
	        {
	            HataMesajGonder(playerid, "Bu oyuncunun hiç sicil kaydý yok.");
	            return Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Kriminal Veritabaný", "{1394BF}» {FFFFFF}Kimlik Bilgileri\n{1394BF}» {FFFFFF}Sicil Kaydý\n{1394BF}» {FFFFFF}Mülkler\n{1394BF}» {FFFFFF}Aranma Ekle\n{1394BF}» {FFFFFF}Aranma Sil\n{1394BF}» {FFFFFF}Ceza Yaz\n{1394BF}» {FFFFFF}Lokasyon Bul\n{1394BF}» {FFFFFF}Cezalar", "Seç", "Geri");
	        }
	        SetPVarInt(playerid, "ListPage", 0);
	        SicilGoruntule(playerid, hedefid);
	    }
	    if(listitem == 2) // Mulkler
	    {
	        if(!OyundaDegil(hedefid)) return HataMesajGonder(playerid, "Kiþi oyundan çýkmýþ.");
	        Dialog_Show(playerid, Mulkler, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Mülkler", "{1394BF}» {FFFFFF}Evler\n{1394BF}» {FFFFFF}Araçlar\n{1394BF}» {FFFFFF}Ýþyerleri\n{1394BF}» {FFFFFF}Gateler", "Seç", "Kapat");
	    }
	    if(listitem == 3) // Aranma Ekle
	    {
	        if(!OyundaDegil(hedefid)) return HataMesajGonder(playerid, "Kiþi oyundan çýkmýþ.");
	        if(PlayerData[hedefid][pAranma] >=6)
	        {
	            HataMesajGonder(playerid, "Bir kiþiye en fazla 6 suç eklenebilir.");
	            return Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Kriminal Veritabaný", "{1394BF}» {FFFFFF}Kimlik Bilgileri\n{1394BF}» {FFFFFF}Sicil Kaydý\n{1394BF}» {FFFFFF}Mülkler\n{1394BF}» {FFFFFF}Aranma Ekle\n{1394BF}» {FFFFFF}Aranma Sil\n{1394BF}» {FFFFFF}Ceza Yaz\n{1394BF}» {FFFFFF}Lokasyon Bul\n{1394BF}» {FFFFFF}Cezalar", "Seç", "Geri");
	        }
	        Dialog_Show(playerid, AranmaEkle, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabaný ~ Aranma Ekle", "{FFFFFF}Lütfen kiþiye eklemek istediðiniz suçu girin:", "Ekle", "Geri");
	    }
	    if(listitem == 4) // Aranma Sil
	    {
	        if(!OyundaDegil(hedefid)) return HataMesajGonder(playerid, "Kiþi oyundan çýkmýþ.");
	        if(PlayerData[hedefid][pAranma] < 1)
	        {
	            HataMesajGonder(playerid, "Bu kiþinin zaten aranmasý yok.");
	            return Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Kriminal Veritabaný", "{1394BF}» {FFFFFF}Kimlik Bilgileri\n{1394BF}» {FFFFFF}Sicil Kaydý\n{1394BF}» {FFFFFF}Mülkler\n{1394BF}» {FFFFFF}Aranma Ekle\n{1394BF}» {FFFFFF}Aranma Sil\n{1394BF}» {FFFFFF}Ceza Yaz\n{1394BF}» {FFFFFF}Lokasyon Bul\n{1394BF}» {FFFFFF}Cezalar", "Seç", "Geri");
	        }
	        PlayerData[hedefid][pAranma] = 0;
	        SetPlayerWantedLevel(hedefid, 0);
	        SendBirlikMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "** (Telsiz) %s %s, %s adlý kiþinin aranmalarýný temizledi.",Birlik_GetRutbe(playerid), ReturnName(playerid, 0), ReturnName(hedefid, 0));
	        MesajGonder(hedefid, "%s adlý memur tarafýndan aranmalarýnýz temizlendi.", ReturnName(playerid, 0));
	    }
		if(listitem == 5) // Ceza Yaz
		{
		    if(!OyundaDegil(hedefid)) return HataMesajGonder(playerid, "Kiþi oyundan çýkmýþ.");
		    Dialog_Show(playerid, CezaYaz, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabaný ~ Ceza Yaz", "Lütfen ceza sebebini girin:", "Devam", "Geri");
		}
		if(listitem == 6) // Lokasyon Bul
		{
            if(!OyundaDegil(hedefid)) return HataMesajGonder(playerid, "Kiþi oyundan çýkmýþ.");
            if(PlayerData[hedefid][pTelefon] == -1 || PlayerData[hedefid][pTelefonAyar][0] == 1)
            {
                HataMesajGonder(playerid, "Kiþinin telefonu yok veya telefonunu kapatmýþ.");
                return Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Kriminal Veritabaný", "{1394BF}» {FFFFFF}Kimlik Bilgileri\n{1394BF}» {FFFFFF}Sicil Kaydý\n{1394BF}» {FFFFFF}Mülkler\n{1394BF}» {FFFFFF}Aranma Ekle\n{1394BF}» {FFFFFF}Aranma Sil\n{1394BF}» {FFFFFF}Ceza Yaz\n{1394BF}» {FFFFFF}Lokasyon Bul\n{1394BF}» {FFFFFF}Cezalar", "Seç", "Geri");
            }
            if(!spamProtect(playerid, "LokasyonBul", 20))
            {
                HataMesajGonder(playerid, "Tekrar lokasyon bulmak için biraz bekleyin.");
                Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Kriminal Veritabaný", "{1394BF}» {FFFFFF}Kimlik Bilgileri\n{1394BF}» {FFFFFF}Sicil Kaydý\n{1394BF}» {FFFFFF}Mülkler\n{1394BF}» {FFFFFF}Aranma Ekle\n{1394BF}» {FFFFFF}Aranma Sil\n{1394BF}» {FFFFFF}Ceza Yaz\n{1394BF}» {FFFFFF}Lokasyon Bul\n{1394BF}» {FFFFFF}Cezalar", "Seç", "Geri");
                return 1;
            }
            new Float:pos[3];
            GetPlayerPosEx(hedefid, pos[0], pos[1], pos[2]);
            SetPlayerCheckpoint(playerid, pos[0], pos[1], pos[2], 5.0);
            SetTimerEx("IsaretSil", 10000, false, "i", playerid);
            MesajGonder(playerid, "%s adlý kiþi en son %s bölgesinde görüldü, 10 saniye sonra iþaret kaybolacak.", ReturnName(hedefid, 0), GetLocation(pos[0], pos[1], pos[2]));
		}
		if(listitem == 7) // Cezalar
		{
		    if(!OyundaDegil(hedefid)) return HataMesajGonder(playerid, "Kiþi oyundan çýkmýþ.");
		    new str[1000], string[100], sayi;
		    strcat(str, "Memur\tSebep\tMiktar\tTarih\n");
		    for(new i; i<MAX_PLAYER_TICKETS; i++) if(TicketData[hedefid][i][ticketExists])
		    {
		        format(string, sizeof(string), "%s\t%s\t{2aff00}%.20s\t{FFFFFF}%s\n", TicketData[hedefid][i][ticketMemur], TicketData[hedefid][i][ticketReason], FormatNumber(TicketData[hedefid][i][ticketFee]),TicketData[hedefid][i][ticketDate]);
		        strcat(str, string);
		        sayi++;
		    }
		    if(sayi == 0)
		    {
		        HataMesajGonder(playerid, "Bu kiþiye ait ceza bulunamadý.");
		        return Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Kriminal Veritabaný", "{1394BF}» {FFFFFF}Kimlik Bilgileri\n{1394BF}» {FFFFFF}Sicil Kaydý\n{1394BF}» {FFFFFF}Mülkler\n{1394BF}» {FFFFFF}Aranma Ekle\n{1394BF}» {FFFFFF}Aranma Sil\n{1394BF}» {FFFFFF}Ceza Yaz\n{1394BF}» {FFFFFF}Lokasyon Bul\n{1394BF}» {FFFFFF}Cezalar", "Seç", "Geri");
		    }
		    format(string, sizeof(string), "{FFFFFF}%s Cezalarý (%d adet)", ReturnName(hedefid, 0), sayi);
		    Dialog_Show(playerid, Cezalar, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Geri", "");
		}
	}
	return 1;
}
forward IsaretSil(playerid);
public IsaretSil(playerid)
{
	DisablePlayerCheckpoint(playerid);
	return 1;
}
Dialog:Cezalar(playerid, response, listitem, inputtext[])
{
	if(response) return Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Kriminal Veritabaný", "{1394BF}» {FFFFFF}Kimlik Bilgileri\n{1394BF}» {FFFFFF}Sicil Kaydý\n{1394BF}» {FFFFFF}Mülkler\n{1394BF}» {FFFFFF}Aranma Ekle\n{1394BF}» {FFFFFF}Aranma Sil\n{1394BF}» {FFFFFF}Ceza Yaz\n{1394BF}» {FFFFFF}Lokasyon Bul\n{1394BF}» {FFFFFF}Cezalar", "Seç", "Geri");
	return 1;
}
Dialog:CezaYaz(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Kriminal Veritabaný", "{1394BF}» {FFFFFF}Kimlik Bilgileri\n{1394BF}» {FFFFFF}Sicil Kaydý\n{1394BF}» {FFFFFF}Mülkler\n{1394BF}» {FFFFFF}Aranma Ekle\n{1394BF}» {FFFFFF}Aranma Sil\n{1394BF}» {FFFFFF}Ceza Yaz\n{1394BF}» {FFFFFF}Lokasyon Bul\n{1394BF}» {FFFFFF}Cezalar", "Seç", "Geri");
	if(response)
	{
	    if(isnull(inputtext) || strlen(inputtext) < 3) return Dialog_Show(playerid, CezaYaz, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabaný ~ Ceza Yaz", "Lütfen ceza sebebini girin:", "Devam", "Geri");
	    if(strlen(inputtext) > 64)
	    {
	        HataMesajGonder(playerid, "Ceza sebebi 64 karakteri geçemez.");
	        return Dialog_Show(playerid, CezaYaz, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabaný ~ Ceza Yaz", "Lütfen ceza sebebini girin:", "Devam", "Geri");
	    }
	    SetPVarString(playerid, "CezaSebebi", inputtext);
	    Dialog_Show(playerid, CezaYaz2, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabaný ~ Ceza Yaz", "Lütfen ceza miktarýný girin:", "Devam", "Geri");
	}
	return 1;
}
Dialog:CezaYaz2(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    DeletePVar(playerid, "CezaSebebi");
	    return Dialog_Show(playerid, CezaYaz, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabaný ~ Ceza Yaz", "Lütfen ceza sebebini girin:", "Devam", "Geri");
	}
	else
	{
	    if(!OyundaDegil(GetPVarInt(playerid, "KriminalVeritabani"))) return HataMesajGonder(playerid, "Kiþi oyundan çýkmýþ.");
	    if(isnull(inputtext) || !IsNumeric(inputtext)) return Dialog_Show(playerid, CezaYaz2, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabaný ~ Ceza Yaz", "Lütfen ceza miktarýný girin:", "Devam", "Geri");
	    if(strval(inputtext) <= 5 || strval(inputtext) > 5000)
	    {
	        HataMesajGonder(playerid, "Geçersiz miktar girdiniz, $10 ile $5000 arasýnda olmalýdýr.");
	        return Dialog_Show(playerid, CezaYaz2, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabaný ~ Ceza Yaz", "Lütfen ceza miktarýný girin:", "Devam", "Geri");
	    }
	    new sebep[64], miktar = strval(inputtext);
	    GetPVarString(playerid, "CezaSebebi", sebep, sizeof(sebep));
	    new id = Ticket_Add(GetPVarInt(playerid, "KriminalVeritabani"), miktar, sebep, ReturnName(playerid, 0));
	    if(id != -1)
	    {
	        MesajGonder(playerid, "%s adlý kiþiye %s sebebiyle %s para cezasý yazdýnýz.", ReturnName(GetPVarInt(playerid, "KriminalVeritabani"), 0), sebep, FormatNumber(miktar));
	        BilgiMesajGonder(GetPVarInt(playerid, "KriminalVeritabani"), "Memur %s, %s sebebiyle size %s para cezasý yazdý.", ReturnName(playerid, 0), sebep, FormatNumber(miktar));
	        BilgiMesajGonder(GetPVarInt(playerid, "KriminalVeritabani"), "Cezayý ödeyene kadar devlet hizmetlerinden yararlanamayacaksýnýz. (PD binasýndan ödeyebilirsiniz)", ReturnName(playerid, 0), sebep, FormatNumber(miktar));
	        SendBirlikMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "** (Telsiz) %s %s, %s adlý kiþiye %s sebebiyle %s para cezasý yazdý.", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), ReturnName(GetPVarInt(playerid, "KriminalVeritabani"), 0), sebep, FormatNumber(miktar));
	    }
	    else
	    {
	        HataMesajGonder(playerid, "Bu oyuncunun zaten ödenmemiþ %d cezasý var.", MAX_PLAYER_TICKETS);
	    }
	}
	return 1;
}
Dialog:AranmaEkle(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Kriminal Veritabaný", "{1394BF}» {FFFFFF}Kimlik Bilgileri\n{1394BF}» {FFFFFF}Sicil Kaydý\n{1394BF}» {FFFFFF}Mülkler\n{1394BF}» {FFFFFF}Aranma Ekle\n{1394BF}» {FFFFFF}Aranma Sil\n{1394BF}» {FFFFFF}Ceza Yaz\n{1394BF}» {FFFFFF}Lokasyon Bul\n{1394BF}» {FFFFFF}Cezalar", "Seç", "Geri");
	if(response)
	{
	    new hedefid = GetPVarInt(playerid, "KriminalVeritabani");
	    if(!OyundaDegil(hedefid)) return HataMesajGonder(playerid, "Kiþi oyundan çýkmýþ.");
	    if(isnull(inputtext)) return Dialog_Show(playerid, AranmaEkle, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabaný ~ Aranma Ekle", "{FFFFFF}Lütfen kiþiye eklemek istediðiniz suçu girin:", "Ekle", "Geri");
	    if(strlen(inputtext) < 3) return Dialog_Show(playerid, AranmaEkle, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabaný ~ Aranma Ekle", "{FFFFFF}Lütfen kiþiye eklemek istediðiniz suçu girin:", "Ekle", "Geri");
	    PlayerData[hedefid][pAranma]++;
	    SetPlayerWantedLevel(hedefid,PlayerData[hedefid][pAranma]);
	    SendBirlikMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "** (Telsiz) %s %s, %s adlý kiþiye %s sebebiyle aranma ekledi.", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), ReturnName(hedefid, 0), inputtext);
	    BilgiMesajGonder(hedefid, "%s adlý memur size %s sebebiyle aranma ekledi. (Suç seviyeniz: %d)", ReturnName(playerid, 0), inputtext, PlayerData[hedefid][pAranma]);
	    Sicil_Ekle(PlayerData[hedefid][pID], ReturnName(playerid, 0), inputtext);
	    Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Kriminal Veritabaný", "{1394BF}» {FFFFFF}Kimlik Bilgileri\n{1394BF}» {FFFFFF}Sicil Kaydý\n{1394BF}» {FFFFFF}Mülkler\n{1394BF}» {FFFFFF}Aranma Ekle\n{1394BF}» {FFFFFF}Aranma Sil\n{1394BF}» {FFFFFF}Ceza Yaz\n{1394BF}» {FFFFFF}Lokasyon Bul\n{1394BF}» {FFFFFF}Cezalar", "Seç", "Geri");
	}
	return 1;
}
stock GetTicketCount(playerid)
{
	new sayi = 0;
	for(new i; i<MAX_PLAYER_TICKETS; i++) if(TicketData[playerid][i][ticketExists])
	{
	    sayi++;
	}
	return sayi;
}
stock SicilGoruntule(playerid, id)
{
	new query[124];
	format(query, sizeof(query), "SELECT * FROM `icsicil` WHERE `playersqlid` = '%d' ORDER BY tarih DESC LIMIT %d, 15", PlayerData[id][pID], GetPVarInt(playerid, "ListPage")*15);
	new Cache:sawyer = mysql_query(baglanti, query);
	new rows;
	cache_get_row_count(rows);
	if(rows)
	{
	    new str[1500], string[100], sebep[50], memuradi[24], tarih[22];
	    strcat(str, "{1394BF}Sebep\t{1394BF}Memur\t{1394BF}Tarih\n");
	    for(new i; i<rows; i++)
	    {
	        cache_get_value_name(i, "sebep", sebep, 50);
	        cache_get_value_name(i, "memuradi", memuradi, 24);
	        cache_get_value_name(i, "tarih", tarih, 22);
	        format(string, sizeof(string), "{FFFFFF}%s\t{FFFFFF}%s\t{FFFFFF}%s\n", sebep, memuradi, tarih);
	        strcat(str, string);
	    }
	    cache_delete(sawyer);
	    format(string, sizeof(string), "%s Sicil (Sayfa %d)", ReturnName(GetPVarInt(playerid, "KriminalVeritabani")), GetPVarInt(playerid, "ListPage")+1);
	    Dialog_Show(playerid, SicilGoruntule, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Sonraki Sayfa", "Geri");
	}
	else
	{
	    cache_delete(sawyer);
	    HataMesajGonder(playerid, "Daha fazla sicil kaydý bulunamadý.");
	    return Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Kriminal Veritabaný", "{1394BF}» {FFFFFF}Kimlik Bilgileri\n{1394BF}» {FFFFFF}Sicil Kaydý\n{1394BF}» {FFFFFF}Mülkler\n{1394BF}» {FFFFFF}Aranma Ekle\n{1394BF}» {FFFFFF}Aranma Sil\n{1394BF}» {FFFFFF}Ceza Yaz\n{1394BF}» {FFFFFF}Lokasyon Bul\n{1394BF}» {FFFFFF}Cezalar", "Seç", "Geri");
	}
	return 1;
}
Dialog:SicilGoruntule(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    SetPVarInt(playerid, "ListPage", GetPVarInt(playerid, "ListPage")-1);
	    if(GetPVarInt(playerid, "ListPage") < 0)
	    {
	        DeletePVar(playerid, "ListPage");
	        Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Kriminal Veritabaný", "{1394BF}» {FFFFFF}Kimlik Bilgileri\n{1394BF}» {FFFFFF}Sicil Kaydý\n{1394BF}» {FFFFFF}Mülkler\n{1394BF}» {FFFFFF}Aranma Ekle\n{1394BF}» {FFFFFF}Aranma Sil\n{1394BF}» {FFFFFF}Ceza Yaz\n{1394BF}» {FFFFFF}Lokasyon Bul\n{1394BF}» {FFFFFF}Cezalar", "Seç", "Geri");
	        return 1;
	    }

	}
	else SetPVarInt(playerid, "ListPage", GetPVarInt(playerid, "ListPage")+1);

	SicilGoruntule(playerid, GetPVarInt(playerid, "KriminalVeritabani"));
	return 1;
}
stock ICSicil_GetCount(sqlid)
{
	new query[100];
	format(query, sizeof(query), "SELECT null FROM `icsicil` WHERE `playersqlid` = '%d'", sqlid);
	new Cache:sawyer = mysql_query(baglanti, query);
	new rows;
	cache_get_row_count(rows);
	cache_delete(sawyer);
	return rows;
}
stock Sicil_Ekle(oyuncusqlid, memuradi[], sebep[])
{
	new query[275];
	format(query, sizeof(query), "INSERT INTO `icsicil` (`playersqlid`, `memuradi`, `sebep`, `tarih`) VALUES ('%d', '%s', '%s', '%s')", oyuncusqlid, memuradi, SQL_ReturnEscaped(sebep), ReturnDate());
	mysql_query(baglanti, query, false);
	return 1;
}
Dialog:Mulkler(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Kriminal Veritabaný", "{1394BF}» {FFFFFF}Kimlik Bilgileri\n{1394BF}» {FFFFFF}Sicil Kaydý\n{1394BF}» {FFFFFF}Mülkler\n{1394BF}» {FFFFFF}Aranma Ekle\n{1394BF}» {FFFFFF}Aranma Sil\n{1394BF}» {FFFFFF}Ceza Yaz\n{1394BF}» {FFFFFF}Lokasyon Bul\n{1394BF}» {FFFFFF}Cezalar", "Seç", "Geri");
	if(response)
	{
	    new str[500], string[100];
	    new id = GetPVarInt(playerid, "KriminalVeritabani");
	    if(!OyundaDegil(id)) return HataMesajGonder(playerid, "Kiþi oyundan çýkmýþ.");
	    if(listitem == 0)
	    {
	        if(Ev_GetCount(id) < 1)
	        {
	            HataMesajGonder(playerid, "Bu kiþiye ait ev bulunamadý.");
	            return Dialog_Show(playerid, Mulkler, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Mülkler", "{1394BF}» {FFFFFF}Evler\n{1394BF}» {FFFFFF}Araçlar\n{1394BF}» {FFFFFF}Ýþyerleri\n{1394BF}» {FFFFFF}Gateler", "Seç", "Kapat");
	        }
	        strcat(str, "{1394BF}ID\t{1394BF}Ev Adý\t{1394BF}Adres\n");
	        for(new i; i<MAX_EV; i++) if(house_info[i][evExists] && house_info[i][evSahip] == PlayerData[id][pID])
	        {
	            format(string, sizeof(string), "{FFFFFF}%d\t{FFFFFF}%s\t{FFFFFF}%d, %s, %s\n", i, house_info[i][evIsim], i, GetLocation(house_info[i][evPos][0], house_info[i][evPos][1], house_info[i][evPos][2]), GetCityName(house_info[i][evPos][0], house_info[i][evPos][1], house_info[i][evPos][2]));
	            strcat(str, string);
	        }
	        format(string, sizeof(string), "%s'in Evleri (%d adet)", ReturnName(id, 0), Ev_GetCount(id));
	        Dialog_Show(playerid, Evler, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Ýþaretle", "Geri");
	    }
	    if(listitem == 1)
	    {
	        if(Car_GetCount(id) < 1)
	        {
	            HataMesajGonder(playerid, "Bu kiþiye ait araç bulunamadý.");
	            return Dialog_Show(playerid, Mulkler, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Mülkler", "{1394BF}» {FFFFFF}Evler\n{1394BF}» {FFFFFF}Araçlar\n{1394BF}» {FFFFFF}Ýþyerleri\n{1394BF}» {FFFFFF}Gateler", "Seç", "Kapat");
	        }
	        strcat(str, "{1394BF}Model\t{1394BF}Plaka\t{1394BF}Durum\n");
	        for(new i; i<MAX_ARAC; i++) if(AracInfo[i][aracExists] && AracInfo[i][aracSahip] == PlayerData[id][pID])
	        {
				format(string, sizeof(string), "{FFFFFF}%s\t{FFFFFF}%s\t{FFFFFF}%s\n",ReturnVehicleModelName(AracInfo[i][aracModel]), AracInfo[i][aracPlaka], (AracInfo[i][aracDisplay]) ? ("{2ECC71}Aktif") : ("{FF0000}Pasif"));
				strcat(str, string);
	        }
	        format(string, sizeof(string), "%s'in Araçlarý (%d adet)", ReturnName(id, 0), Car_GetCount(id));
	        Dialog_Show(playerid, Araclar, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Geri", "");
	    }
	    if(listitem == 2)
	    {
	        if(Isyeri_GetCount(id) < 1)
	        {
	            HataMesajGonder(playerid, "Bu kiþiye ait iþyeri bulunamadý.");
	            return Dialog_Show(playerid, Mulkler, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Mülkler", "{1394BF}» {FFFFFF}Evler\n{1394BF}» {FFFFFF}Araçlar\n{1394BF}» {FFFFFF}Ýþyerleri\n{1394BF}» {FFFFFF}Gateler", "Seç", "Kapat");
	        }
	        strcat(str, "{1394BF}ID\t{1394BF}Ýþyeri Adý\t{1394BF}Adres\n");
	        for(new i; i<MAX_ISYERI; i++) if(Isyeri[i][isyeriExists] && Isyeri[i][isyeriSahip] == PlayerData[id][pID])
	        {
	            format(string, sizeof(string), "{FFFFFF}%d\t{FFFFFF}%s\t{FFFFFF}%s\n", i, Isyeri[i][isyeriName], GetLocation(Isyeri[i][isyeriPos][0],Isyeri[i][isyeriPos][1], Isyeri[i][isyeriPos][2]));
	            strcat(str, string);
	        }
	        format(string, sizeof(string), "%s'in Ýþyerleri (%d adet)", ReturnName(id, 0), Isyeri_GetCount(id));
	        Dialog_Show(playerid, Isyerler, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Ýþaretle", "Geri");
	    }
	    if(listitem == 3)
	    {
	        new sayi;
	        strcat(str, "{1394BF}ID\t{1394BF}Model ID\t{1394BF}Adres\n");
	        for(new i; i<MAX_GATES; i++) if(GateData[i][gateExists] && GateData[i][gateOwner] == PlayerData[id][pID])
	        {
	            sayi++;
	            format(string, sizeof(string), "{FFFFFF}%d\t{FFFFFF}%d\t{FFFFFF}%s\n", i, GateData[i][gateModel], GetLocation(GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2]));
	            strcat(str, string);
	        }
	        if(sayi == 0) return HataMesajGonder(playerid, "Bu kiþiye ait gate bulunmuyor.");
	        format(string, sizeof(string), "%s'in Gateleri (%d adet)", ReturnName(id, 0), sayi);
	        Dialog_Show(playerid, Gateler, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Geri", "");
	    }
	}
	return 1;
}
Dialog:Gateler(playerid, response, listitem, inputtext[])
{
	if(response) return Dialog_Show(playerid, Mulkler, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Mülkler", "{1394BF}» {FFFFFF}Evler\n{1394BF}» {FFFFFF}Araçlar\n{1394BF}» {FFFFFF}Ýþyerleri\n{1394BF}» {FFFFFF}Gateler", "Seç", "Kapat");
	return 1;
}
Dialog:Araclar(playerid, response, listitem, inputtext[])
{
	if(response) return Dialog_Show(playerid, Mulkler, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Mülkler", "{1394BF}» {FFFFFF}Evler\n{1394BF}» {FFFFFF}Araçlar\n{1394BF}» {FFFFFF}Ýþyerleri\n{1394BF}» {FFFFFF}Gateler", "Seç", "Kapat");
	return 1;
}
Dialog:Isyerler(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, Mulkler, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Mülkler", "{1394BF}» {FFFFFF}Evler\n{1394BF}» {FFFFFF}Araçlar\n{1394BF}» {FFFFFF}Ýþyerleri\n{1394BF}» {FFFFFF}Gateler", "Seç", "Kapat");
	if(response)
	{
	    new isid = strval(inputtext);
	    if(Isyeri[isid][isyeriExists])
	    {
	        SetPVarInt(playerid, "AraciniBuluyor", 1);
	        DeletePVar(playerid, "KriminalVeritabani");
	        SetPlayerCheckpoint(playerid, Isyeri[isid][isyeriPos][0],Isyeri[isid][isyeriPos][1], Isyeri[isid][isyeriPos][2], 5.0);
	        MesajGonder(playerid, "Ýþyeri haritada iþaretlendi.");
	    }
	}
	return 1;
}
Dialog:Evler(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, Mulkler, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Mülkler", "{1394BF}» {FFFFFF}Evler\n{1394BF}» {FFFFFF}Araçlar\n{1394BF}» {FFFFFF}Ýþyerleri\n{1394BF}» {FFFFFF}Gateler", "Seç", "Kapat");
	if(response)
	{
	    new evid = strval(inputtext);
	    if(house_info[evid][evExists])
	    {
	        SetPVarInt(playerid, "AraciniBuluyor", 1);
	        DeletePVar(playerid, "KriminalVeritabani");
	        SetPlayerCheckpoint(playerid, house_info[evid][evPos][0],house_info[evid][evPos][1], house_info[evid][evPos][2], 5.0);
	        MesajGonder(playerid, "Ev haritada iþaretlendi.");
	    }
	}
	return 1;
}
Dialog:KimlikBilgileri(playerid, response, listitem, inputtext[])
{
	if(response) return Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Kriminal Veritabaný", "{1394BF}» {FFFFFF}Kimlik Bilgileri\n{1394BF}» {FFFFFF}Sicil Kaydý\n{1394BF}» {FFFFFF}Mülkler\n{1394BF}» {FFFFFF}Aranma Ekle\n{1394BF}» {FFFFFF}Aranma Sil\n{1394BF}» {FFFFFF}Ceza Yaz\n{1394BF}» {FFFFFF}Lokasyon Bul\n{1394BF}» {FFFFFF}Cezalar", "Seç", "Geri");
	return 1;
}
Dialog:PlakaGir(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::mdc(playerid);
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, PlakaGir, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabaný ~ Plaka Incele", "{FFFFFF}Lütfen incelemek istediðiniz plakayý girin:", "Devam", "Geri");
	    new bulundu = -1;
	    for(new i; i<MAX_ARAC; i++) if(AracInfo[i][aracExists])
	    {
	        if(strcmp(inputtext, AracInfo[i][aracPlaka], false) == 0)
	        {
	            bulundu = i;
	            break;
	        }
	    }
	    if(bulundu == -1)
	    {
	        HataMesajGonder(playerid, "Geçersiz plaka girdiniz.");
	        return Dialog_Show(playerid, PlakaGir, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabaný ~ Plaka Incele", "{FFFFFF}Lütfen incelemek istediðiniz plakayý girin:", "Devam", "Geri");
	    }
	    else
	    {
	        SetPVarInt(playerid, "PlakaInceleID", bulundu);
	        Dialog_Show(playerid, PlakaIncele, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Plaka Incele", "{1394BF}» {FFFFFF}Araç Bilgileri\n{1394BF}» {FFFFFF}Araca Ceza Yaz\n{1394BF}» {FFFFFF}Lokasyon Bul", "Seç", "Geri");
	    }
	}
	return 1;
}
Dialog:PlakaIncele(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    DeletePVar(playerid, "PlakaInceleID");
	    callcmd::mdc(playerid);
	}
	else
	{
	    new id = GetPVarInt(playerid, "PlakaInceleID");
	    if(listitem == 0)
	    {
	        new str[500], string[100], factname[30];
	        format(string, sizeof(string), "{FFFFFF}Sahip: {9189EF}%s\n", (AracInfo[id][aracSahip] == -1) ? ("Yok") : SQLName(AracInfo[id][aracSahip], 0));
	        strcat(str, string);
	        format(string, sizeof(string), "{FFFFFF}Model: {9189EF}%s\n", ReturnVehicleModelName(AracInfo[id][aracModel]));
	        strcat(str, string);
         	format(string, sizeof(string), "{FFFFFF}Plaka: {9189EF}%s\n", AracInfo[id][aracPlaka]);
	        strcat(str, string);
	        if(AracInfo[id][aracFaction] == -1) format(factname, sizeof(factname), "Yok");
	        else format(factname, sizeof(factname), "%s", Birlikler[GetFactionByID(AracInfo[id][aracFaction])][birlikAd]);
	        format(string, sizeof(string), "{FFFFFF}Birlik/Kurum: {9189EF}%s\n", factname);
	        strcat(str, string);
	        format(string, sizeof(string), "{FFFFFF}Vergi: {9189EF}%s/%s\n",FormatNumber(AracInfo[id][aracVergi]), FormatNumber(GetAracMaksVergi(AracInfo[id][aracModel])));
	        strcat(str, string);
	        format(string, sizeof(string), "{FFFFFF}Ceza: {9189EF}%s",FormatNumber(AracInfo[id][aracTicket]));
	        strcat(str, string);

	        Dialog_Show(playerid, MVBAracBilgileri, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Araç Bilgileri", str, "Geri", "");
	    }
	    if(listitem == 1)
	    {
	        if(AracInfo[id][aracTip] != 4)
	        {
	            HataMesajGonder(playerid, "Bu araca ceza yazamazsýn.");
	            return Dialog_Show(playerid, PlakaIncele, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Plaka Incele", "{1394BF}» {FFFFFF}Araç Bilgileri\n{1394BF}» {FFFFFF}Araca Ceza Yaz\n{1394BF}» {FFFFFF}Lokasyon Bul", "Seç", "Geri");
	        }
	        Dialog_Show(playerid, AracCeza, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabaný ~ Araç Ceza Yaz", "Lütfen ceza miktarýný girin:", "Ceza Kes", "Geri");
	    }
	    if(listitem == 2)
	    {
	        new Float:pos[3];
	        if(IsValidVehicle(AracInfo[id][aracVehicle]) && AracInfo[id][aracDisplay] == 1)
	        {
	            GetVehiclePos(AracInfo[id][aracVehicle], pos[0], pos[1], pos[2]);
	            MesajGonder(playerid, "Araçtan alýnan son sinyal: %s", GetLocation(pos[0], pos[1], pos[2]));
	        }
	        else HataMesajGonder(playerid, "Araçtan sinyal alýnamadý.");
	    }
	}
	return 1;
}
Dialog:AracCeza(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid, PlakaIncele, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Plaka Incele", "{1394BF}» {FFFFFF}Araç Bilgileri\n{1394BF}» {FFFFFF}Araca Ceza Yaz\n{1394BF}» {FFFFFF}Lokasyon Bul", "Seç", "Geri");
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, AracCeza, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabaný ~ Araç Ceza Yaz", "Lütfen ceza miktarýný girin:", "Ceza Kes", "Geri");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, AracCeza, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabaný ~ Araç Ceza Yaz", "Lütfen ceza miktarýný girin:", "Ceza Kes", "Geri");
	    if(strval(inputtext) < 50 || strval(inputtext) > 10000)
	    {
	        HataMesajGonder(playerid, "Ceza miktarý $50 ile $10,000 arasýnda olmalýdýr.");
	        return Dialog_Show(playerid, AracCeza, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabaný ~ Araç Ceza Yaz", "Lütfen ceza miktarýný girin:", "Ceza Kes", "Geri");
	    }
	    new id = GetPVarInt(playerid, "PlakaInceleID");
		if(AracInfo[id][aracModel] == 509) return HataMesajGonder(playerid, "Bu araca ceza yazamazsýn!");
	    AracInfo[id][aracTicket] += strval(inputtext);
	    if(AracInfo[id][aracTicketTime] < gettime()) AracInfo[id][aracTicketTime] = gettime()+3*86400;
	    SendBirlikMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "** (Telsiz) %s %s, %s plakalý araca %s miktar ceza kesti.", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), AracInfo[id][aracPlaka], FormatNumber(strval(inputtext)));
	    if(AracInfo[id][aracSahip] != -1)
	    {
	        if(GetPlayerIDWithSQLID(AracInfo[id][aracSahip]) != -1)
	        {
	            BilgiMesajGonder(GetPlayerIDWithSQLID(AracInfo[id][aracSahip]), "%s adlý memur %s model aracýnýza %s miktar ceza kesti.", ReturnName(playerid, 0), ReturnVehicleModelName(AracInfo[id][aracModel]), FormatNumber(strval(inputtext)));
	            BilgiMesajGonder(GetPlayerIDWithSQLID(AracInfo[id][aracSahip]), "Cezayý 72 saat içerisinde ödemezseniz aracýnýza devlet tarafýndan el koyulacak.");
	        }
	        else
	        {
	            new str[80];
	            format(str, sizeof(str), "%s adlý memur %s model aracýnýza %s ceza kesti.", ReturnName(playerid, 0), ReturnVehicleModelName(AracInfo[id][aracModel]), FormatNumber(strval(inputtext)));
	            BildirimEkle(AracInfo[id][aracSahip], str, "LSPD");
	        }
	    }
	}
	return 1;
}
Dialog:MVBAracBilgileri(playerid, response, listitem, inputtext[])
{
	if(response) return Dialog_Show(playerid, PlakaIncele, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabaný ~ Plaka Incele", "{1394BF}» {FFFFFF}Araç Bilgileri\n{1394BF}» {FFFFFF}Araca Ceza Yaz\n{1394BF}» {FFFFFF}Lokasyon Bul", "Seç", "Geri");
	return 1;
}
stock CCTVMenu(playerid)
{
	new str[1000], string[100],sayi;
	strcat(str, "ID\tAd\n");
	foreach(new i:CCTVIter)
	{
 		sayi++;
   		format(string, sizeof(string), "{FFFFFF}%d\t{FFFFFF}%s\n",i, CCTVInfo[i][cctv_Name]);
     	strcat(str, string);
	}
	if(sayi == 0) return HataMesajGonder(playerid, "Hiç CCTV bulunamadý.");
	format(string, sizeof(string), "{00FF26}CCTV (Toplam %d/%d)", sayi, MAX_CCTV);
	Dialog_Show(playerid, CCTV, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Ýzle", "Kapat");
	return 1;
}
Dialog:CCTV(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new cid = strval(inputtext);
		if(Iter_Contains(CCTVIter, cid))
		{
			PlayerViewCCTV(playerid, cid);
		}
	}
	return 1;
}
PlayerViewCCTV(playerid, id)
{
	if(PlayerData[playerid][pCCTV] == -1)
	{
		new Float: x, Float: y, Float: z;

		GetPlayerPos(playerid, x, y, z);
		CCTV_oldSkin[playerid] = GetPlayerSkinEx(playerid);

		CCTV_oldX[playerid] = x;
		CCTV_oldY[playerid] = y;
		CCTV_oldZ[playerid] = z;
		CCTV_oldVW[playerid] = GetPlayerVirtualWorld(playerid);
		CCTV_oldInterior[playerid] = GetPlayerInterior(playerid);
	}
	SetPlayerVirtualWorld(playerid, CCTVInfo[id][cctv_VW]);
	SetPlayerInterior(playerid, CCTVInfo[id][cctv_Interior]);
	PlayerData[playerid][pCCTV] = id;
	TogglePlayerSpectating(playerid, 1);
	AttachCameraToObject(playerid, CCTVInfo[id][cctv_Object]);

	MesajGonder(playerid, "%s adlý bölgeyi izlemeye baþladýn, (/cctvcik) ile çýkabilirsiniz.", CCTVInfo[id][cctv_Name]);
	return 1;
}
PlayerCancelCCTV(playerid)
{
	TogglePlayerSpectating(playerid, 0);
	PlayerData[playerid][pCCTV] = -1;
	SetPlayerPos(playerid, CCTV_oldX[playerid], CCTV_oldY[playerid], CCTV_oldZ[playerid]);
	SetPlayerVirtualWorld(playerid, CCTV_oldVW[playerid]);
	SetPlayerInterior(playerid, CCTV_oldInterior[playerid]);
	SetPlayerSkin(playerid, CCTV_oldSkin[playerid]);
	ObjelerYukleniyor(playerid);
	SetWeapons(playerid);

	CCTV_oldX[playerid] = CCTV_oldY[playerid] = CCTV_oldZ[playerid] = 0.0;
	CCTV_oldVW[playerid] = CCTV_oldInterior[playerid] = CCTV_oldSkin[playerid] = -1;
	return 1;
}
stock GetClosestCar(iPlayer, iException = INVALID_VEHICLE_ID, Float: fRange = Float: 0x7F800000) {

	new
		iReturnID = -1,
		Float: fVehiclePos[4];

	for(new i = 1; i <= MAX_VEHICLES; ++i) if(GetVehicleModel(i) && i != iException) {
		GetVehiclePos(i, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2]);
		if((fVehiclePos[3] = GetPlayerDistanceFromPoint(iPlayer, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2])) < fRange) {
			fRange = fVehiclePos[3];
			iReturnID = i;
		}
	}
	return iReturnID;
}
stock Float:Vehicle_GetSpeed(vehicleid)
{
    new Float: vx, Float: vy, Float: vz, Float: vel;
    vel = GetVehicleVelocity(vehicleid, vx, vy, vz);
    vel = (floatsqroot(((vx*vx)+(vy*vy))+(vz*vz)) * 181.5);
    return vel;
}
forward RadarGuncelle (vehid);
public RadarGuncelle (vehid)
{
    	new id = GetVehicleInfrontID (vehid);
        if (id < 0 || GetVehicleVirtualWorld(vehid) != GetVehicleVirtualWorld(id))
        {
 				TextDrawSetString(carMDC[vehid][2], "PLAKA: ~y~N/A");
 				TextDrawSetString(carMDC[vehid][3], "MODEL: ~y~N/A");
     			TextDrawSetString(carMDC[vehid][4], "HIZ: ~y~N/A");
        }
        else
        {
				new str[256];
                new ids = Car_GetID(id);
                format(str, sizeof(str), "PLAKA: ~y~%s", AracInfo[ids][aracPlaka]);
	            TextDrawSetString(carMDC[vehid][2], str);
	            format(str, sizeof(str), "MODEL: ~y~%s", ReturnVehicleModelName(GetVehicleModel(id)));
	            TextDrawSetString(carMDC[vehid][3], str);
				format(str, sizeof(str), "HIZ: ~y~%d KMH", GetPlayerSpeed(id));
	            TextDrawSetString(carMDC[vehid][4], str);
	            foreach(new i: Player)
		        {
		                if (IsPlayerInVehicle (i, vehid))
		            	{
							if(GetPlayerSpeed(id) > vehRadarLimit[vehid])
							    BilgiMesajGonder(i, "DÝKKAT! %s plakalý %s model araç hýz limitini aþtý! (Aracýn hýzý: %d KMH)", AracInfo[ids][aracPlaka], ReturnVehicleModelName(GetVehicleModel(id)), GetPlayerSpeed(id));
		                }
		        }
        }
        foreach(new i: Player)
        {
                if (IsPlayerInVehicle (i, vehid) && GetFactionType(i) == BIRLIK_LSPD)
            	{
                    for(new ia; ia < 5; ia++) TextDrawShowForPlayer(i, carMDC[vehid][ia]);
                }
        }
        return 1;
}
stock GetVehicleInfrontID (vehid)
{
    	new Float: temp = 7.0;
        new j = 0;
        for (new i = 0; i < MAX_VEHICLES; i++)
        {
        new Float: a, Float: x1, Float: y1, Float: z1, Float: x2, Float: y2, Float: z2;
        GetVehiclePos (vehid, x1, y1, z1);
        GetVehicleZAngle (vehid, a);
        if (i != vehid)
                {
                        if (GetVehiclePos (i, x2, y2, z2))
                        {
                                new Float: distance = floatsqroot (floatpower ((x1 - x2), 2) + floatpower ((y1 - y2), 2) + floatpower ((z1 - z2), 2));
                                GetVehicleZAngle (vehid, a);

                                if (distance < 300.0)
                                {
                                x1 = x1 + (distance * floatsin(-a, degrees));
                                y1 = y1 + (distance * floatcos(-a, degrees));

								distance = floatsqroot ((floatpower ((x1 - x2), 2)) + (floatpower ((y1 - y2), 2)));

								if (temp > distance)
                                        {
                                                temp = distance;
                                                j = i;
                                        }
                                }
                        }
                }
        }
        if (temp < 7.0) return j;
        return -1;
}
/*stock BirlikAdKisalt(bid)
{
	if(bid == -1) return 1;
	new kisaltma[30];
	format(kisaltma,sizeof(kisaltma),"%s",Birlikler[bid][birlikAd]);
	if(Birlikler[bid][birlikTip] == BIRLIK_LSPD) format(kisaltma,sizeof(kisaltma),"LSPD");
	if(Birlikler[bid][birlikTip] == BIRLIK_LSMD) format(kisaltma,sizeof(kisaltma),"LSMD");
	if(Birlikler[bid][birlikTip] == BIRLIK_FBI)  format(kisaltma,sizeof(kisaltma),"FBI");
	if(Birlikler[bid][birlikTip] == BIRLIK_DEVLET) format(kisaltma,sizeof(kisaltma),"GOV");
	return kisaltma;
}*/
stock GetVehicleMaxSeats(vehicleid)
{
    static const g_arrMaxSeats[] = {
		4, 2, 2, 2, 4, 4, 1, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 1, 4, 4, 4, 2,
		1, 7, 1, 2, 2, 0, 2, 7, 4, 2, 4, 1, 2, 2, 2, 4, 1, 2, 1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 4, 4,
		2, 2, 2, 2, 1, 1, 4, 4, 2, 2, 4, 2, 1, 1, 2, 2, 1, 2, 2, 4, 2, 1, 4, 3, 1, 1, 1, 4, 2, 2,
		4, 2, 4, 1, 2, 2, 2, 4, 4, 2, 2, 1, 2, 2, 2, 2, 2, 4, 2, 1, 1, 2, 1, 1, 2, 2, 4, 2, 2, 1,
		1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 2, 2, 2, 2, 7, 7, 1, 4, 2, 2, 2, 2, 2, 4, 4, 2, 2,
		4, 4, 2, 1, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 1, 2, 4, 4, 1, 0, 0, 1, 1, 2, 1, 2, 2, 1, 2, 4,
		4, 2, 4, 1, 0, 4, 2, 2, 2, 2, 0, 0, 7, 2, 2, 1, 4, 4, 4, 2, 2, 2, 2, 2, 4, 2, 0, 0, 0, 4,
		0, 0
	};
	new
	    model = GetVehicleModel(vehicleid);

	if (400 <= model <= 611)
	    return g_arrMaxSeats[model - 400];

	return 0;
}
stock GetAvailableSeat(vehicleid, start = 1)
{
	new seats = GetVehicleMaxSeats(vehicleid);

	for (new i = start; i < seats; i ++) if (!IsVehicleSeatUsed(vehicleid, i)) {
	    return i;
	}
	return -1;
}
stock IsVehicleSeatUsed(vehicleid, seat)
{
	foreach (new i : Player) if (IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) == seat) {
	    return 1;
	}
	return 0;
}
stock SendRadioMessage(frequency, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pRadyo] == 1 && PlayerData[i][pFrekans] == frequency) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pRadyo] == 1 && PlayerData[i][pFrekans] == frequency) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}
stock SendBirlikMessageEx(type, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pFaction] != -1 && GetFactionType(i) == type && PlayerData[i][pAyarlar][0] == 0) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pFaction] != -1 && GetFactionType(i) == type && PlayerData[i][pAyarlar][0] == 0) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}
forward DragUpdate(playerid, targetid);
public DragUpdate(playerid, targetid)
{
	if (PlayerData[targetid][pDragged] && PlayerData[targetid][pDraggedBy] == playerid)
	{
	    static
	        Float:fX,
	        Float:fY,
	        Float:fZ,
			Float:fAngle;

		GetPlayerPos(playerid, fX, fY, fZ);
		GetPlayerFacingAngle(playerid, fAngle);

		fX -= 1.5 * floatsin(-fAngle, degrees);
		fY -= 1.5 * floatcos(-fAngle, degrees);

		SetPlayerPos(targetid, fX, fY, fZ);
		SetPlayerInterior(targetid, GetPlayerInterior(playerid));
		SetPlayerVirtualWorld(targetid, GetPlayerVirtualWorld(playerid));
	}
	return 1;
}
CanAyarla(playerid, Float:amount)
{
	PlayerData[playerid][pHealth] = amount;
	SetPlayerHealth(playerid, amount);
    return 1;
}

ZirhAyarla(playerid, Float:amount)
{
	PlayerData[playerid][pArmour] = amount;
	SetPlayerArmour(playerid, amount);
    return 1;
}
Dialog:LSMDDolap(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(GetFactionType(playerid) != BIRLIK_LSMD) return 1;
	    if(listitem == 0)
	    {
	        if(!PlayerData[playerid][pOnDuty])
	        {
	            PlayerData[playerid][pOnDuty] = true;
                SetFactionColor(playerid);
                SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s dolabý açar ve ekipmanlarýný alýr.", ReturnName(playerid, 0));
	        }
	        else
	        {
	            PlayerData[playerid][pOnDuty] = false;
                SetPlayerColor(playerid, 0xFFFFFFFF);
                SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
                ResetWeapons(playerid);
                SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s dolabý açar ve ekipmanlarýný dolaba býrakýr.", ReturnName(playerid, 0));
	        }
	    }
	    if(listitem == 1)
	    {
	        new yazi[200];
	        for(new i; i<sizeof(DoktorSkinler); i++)
         	{
          		format(yazi,sizeof(yazi),"%s%d\n",yazi,DoktorSkinler[i]);
          	}
            ShowPlayerDialog(playerid, 69, DIALOG_STYLE_PREVMODEL, "Kiyafetler",yazi,"Sec","Iptal");
	    }
	    if(listitem == 2)
	    {
	        Dialog_Show(playerid, LSMDEkipmanlar, DIALOG_STYLE_LIST, "{FF8282}Ekipmanlar","{FF8282}» {FFFFFF}Sprey\n{FF8282}» {FFFFFF}Yangýn Söndürücü\n{FF8282}» {FFFFFF}Aðrý Kesici", "Seç", "Kapat");
		}
	}
	return 1;
}
Dialog:LSMDEkipmanlar(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::dolap(playerid);
	if(response)
	{
	    if(listitem == 0)
	    {
	        if(PlayerHasWeapon(playerid, 41))
	        {
	            HataMesajGonder(playerid, "Zaten spreyiniz var!");
	            return Dialog_Show(playerid, LSMDEkipmanlar, DIALOG_STYLE_LIST, "{FF8282}Ekipmanlar","{FF8282}» {FFFFFF}Sprey\n{FF8282}» {FFFFFF}Yangýn Söndürücü\n{FF8282}» {FFFFFF}Aðrý Kesici", "Seç", "Kapat");
	        }
	        GiveWeaponToPlayer(playerid, 41, 1000);
	        Dialog_Show(playerid, LSMDEkipmanlar, DIALOG_STYLE_LIST, "{FF8282}Ekipmanlar","{FF8282}» {FFFFFF}Sprey\n{FF8282}» {FFFFFF}Yangýn Söndürücü\n{FF8282}» {FFFFFF}Aðrý Kesici", "Seç", "Kapat");
	    }
	    if(listitem == 1)
	    {
	        if(PlayerHasWeapon(playerid, 42))
	        {
	            HataMesajGonder(playerid, "Zaten yangýn söndürücünüz var!");
	            return Dialog_Show(playerid, LSMDEkipmanlar, DIALOG_STYLE_LIST, "{FF8282}Ekipmanlar","{FF8282}» {FFFFFF}Sprey\n{FF8282}» {FFFFFF}Yangýn Söndürücü\n{FF8282}» {FFFFFF}Aðrý Kesici", "Seç", "Kapat");
	        }
	        GiveWeaponToPlayer(playerid, 42, 1000);
         	Dialog_Show(playerid, LSMDEkipmanlar, DIALOG_STYLE_LIST, "{FF8282}Ekipmanlar","{FF8282}» {FFFFFF}Sprey\n{FF8282}» {FFFFFF}Yangýn Söndürücü\n{FF8282}» {FFFFFF}Aðrý Kesici", "Seç", "Kapat");
		}
		if(listitem == 2)
		{
		    CanAyarla(playerid,100.0);
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s dolaptan aðrý kesici alýr ve içer.", ReturnName(playerid, 0));
		}
	}
	return 1;
}
Dialog:LSPDDolap(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(PlayerData[playerid][pFaction] == -1) return 1;
	    if(listitem == 0)
	    {
            if (!PlayerData[playerid][pOnDuty])
            {
                PlayerData[playerid][pOnDuty] = true;
                SetFactionColor(playerid);
                SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s dolabý açar ve ekipmanlarýný alýr.", ReturnName(playerid, 0));
            }
            else
            {
                PlayerData[playerid][pOnDuty] = false;
                SetPlayerColor(playerid, 0xFFFFFFFF);
                SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
                SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s dolabý açar ve ekipmanlarýný dolaba býrakýr.", ReturnName(playerid, 0));
            }
	    }
	    if(listitem == 1)
	    {
	        new yazi[500];
	        for(new i; i<sizeof(PolisSkinler); i++)
         	{
          		format(yazi,sizeof(yazi),"%s%d\n",yazi,PolisSkinler[i]);
          	}
            ShowPlayerDialog(playerid, 61, DIALOG_STYLE_PREVMODEL, "Polis Kiyafetler",yazi,"Sec","Iptal");
	    }
	    if(listitem == 2)
	    {

	        Dialog_Show(playerid,LSPDEkipmanlar,DIALOG_STYLE_LIST,"{1394BF}Ekipmanlar","{1394BF}» {FFFFFF}Devriye Ekipmanlarý\n{1394BF}» {FFFFFF}Özel Ekipmanlar\n{1394BF}» {FFFFFF}Aksesuarlar\n{1394BF}» {FFFFFF}Aðrý Kesici\n{1394BF}» {FFFFFF}Çelik Yelek","Seç","Kapat");
	    }
	    if(listitem == 3)
	    {
	        ResetWeapons(playerid);
	    }
	}
	return 1;
}
Dialog:LSPDEkipmanlar(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::dolap(playerid);
	if(response)
	{
	    if(listitem == 0)
	    {
	        Dialog_Show(playerid,DevriyeEkipmanlari,DIALOG_STYLE_LIST,"{1394BF}Devriye Ekipmanlari","{1394BF}» {FFFFFF}Deagle\n{1394BF}» {FFFFFF}Sprey\n{1394BF}» {FFFFFF}Jop","Seç","Geri");
	    }
	    if(listitem == 1)
	    {
	        Dialog_Show(playerid,OzelEkipmanlar,DIALOG_STYLE_LIST,"{1394BF}Özel Ekipmanlar","{1394BF}» {FFFFFF}M4\n{1394BF}» {FFFFFF}MP5\n{1394BF}» {FFFFFF}Shotgun\n{1394BF}» {FFFFFF}Göz Yaþartýcý Gaz","Seç","Geri");
	    }
	    if(listitem == 2) // Aksesuarlar
	    {
	        AksesuarlariGoster(playerid,2);
	    }
	    if(listitem == 3)
	    {
	        CanAyarla(playerid,100.0);
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s dolaptan aðrý kesici alýr ve içer.", ReturnName(playerid, 0));
	    }
	    if(listitem == 4)
	    {
	        ZirhAyarla(playerid,100.0);
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s dolaptan çelik yelek alýr ve giyer.", ReturnName(playerid, 0));
	    }
	}
	return 1;
}
Dialog:DevriyeEkipmanlari(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid,LSPDEkipmanlar,DIALOG_STYLE_LIST,"{1394BF}Ekipmanlar","{1394BF}» {FFFFFF}Devriye Ekipmanlarý\n{1394BF}» {FFFFFF}Özel Ekipmanlar\n{1394BF}» {FFFFFF}Aksesuarlar\n{1394BF}» {FFFFFF}Aðrý Kesici\n{1394BF}» {FFFFFF}Çelik Yelek","Seç","Kapat");
	if(response)
	{
	    if(listitem == 0)
	    {
		    if(PlayerHasWeapon(playerid, 24)) return HataMesajGonder(playerid,"Zaten bu silaha sahipsin.");
		    if(PlayerData[playerid][pSilahlar][g_aWeaponSlots[24]] != 0) return HataMesajGonder(playerid, "Bu silah türü sizde var.");
		    GiveWeaponToPlayer(playerid, 24, 110);
		    Dialog_Show(playerid,DevriyeEkipmanlari,DIALOG_STYLE_LIST,"{1394BF}Devriye Ekipmanlari","{1394BF}» {FFFFFF}Deagle\n{1394BF}» {FFFFFF}Sprey\n{1394BF}» {FFFFFF}Jop","Seç","Geri");
	    }
	    if(listitem == 1)
	    {
	        if(PlayerHasWeapon(playerid, 41)) return HataMesajGonder(playerid,"Zaten bu silaha sahipsin.");
	        if(PlayerData[playerid][pSilahlar][g_aWeaponSlots[41]] != 0) return HataMesajGonder(playerid, "Bu silah türü sizde var.");
	        GiveWeaponToPlayer(playerid, 41, 1000);
	        Dialog_Show(playerid,DevriyeEkipmanlari,DIALOG_STYLE_LIST,"{1394BF}Devriye Ekipmanlari","{1394BF}» {FFFFFF}Deagle\n{1394BF}» {FFFFFF}Sprey\n{1394BF}» {FFFFFF}Jop","Seç","Geri");
	    }
	    if(listitem == 2)
	    {
	        if(PlayerHasWeapon(playerid, 3)) return HataMesajGonder(playerid,"Zaten bu silaha sahipsin.");
	        if(PlayerData[playerid][pSilahlar][g_aWeaponSlots[3]] != 0) return HataMesajGonder(playerid, "Bu silah türü sizde var.");
	        GiveWeaponToPlayer(playerid, 3, 1);
	        Dialog_Show(playerid,DevriyeEkipmanlari,DIALOG_STYLE_LIST,"{1394BF}Devriye Ekipmanlari","{1394BF}» {FFFFFF}Deagle\n{1394BF}» {FFFFFF}Sprey\n{1394BF}» {FFFFFF}Jop","Seç","Geri");
	    }
	}
	return 1;
}
Dialog:OzelEkipmanlar(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid,LSPDEkipmanlar,DIALOG_STYLE_LIST,"{1394BF}Ekipmanlar","{1394BF}» {FFFFFF}Devriye Ekipmanlarý\n{1394BF}» {FFFFFF}Özel Ekipmanlar\n{1394BF}» {FFFFFF}Aksesuarlar\n{1394BF}» {FFFFFF}Aðrý Kesici\n{1394BF}» {FFFFFF}Çelik Yelek","Seç","Kapat");
	if(response)
	{
	    if(listitem == 0)
	    {
		    if(PlayerHasWeapon(playerid, 31)) return HataMesajGonder(playerid,"Zaten bu silaha sahipsin.");
		    if(PlayerData[playerid][pSilahlar][g_aWeaponSlots[31]] != 0) return HataMesajGonder(playerid, "Bu silah türü sizde var.");
		    GiveWeaponToPlayer(playerid, 31, 1000);
		    Dialog_Show(playerid,OzelEkipmanlar,DIALOG_STYLE_LIST,"{1394BF}Özel Ekipmanlar","{1394BF}» {FFFFFF}M4\n{1394BF}» {FFFFFF}MP5\n{1394BF}» {FFFFFF}Shotgun\n{1394BF}» {FFFFFF}Göz Yaþartýcý Gaz","Seç","Geri");
	    }
	    if(listitem == 1)
	    {
	        if(PlayerHasWeapon(playerid, 29)) return HataMesajGonder(playerid,"Zaten bu silaha sahipsin.");
	        if(PlayerData[playerid][pSilahlar][g_aWeaponSlots[29]] != 0) return HataMesajGonder(playerid, "Bu silah türü sizde var.");
	        GiveWeaponToPlayer(playerid, 29, 1000);
	        Dialog_Show(playerid,OzelEkipmanlar,DIALOG_STYLE_LIST,"{1394BF}Özel Ekipmanlar","{1394BF}» {FFFFFF}M4\n{1394BF}» {FFFFFF}MP5\n{1394BF}» {FFFFFF}Shotgun\n{1394BF}» {FFFFFF}Göz Yaþartýcý Gaz","Seç","Geri");
	    }
	    if(listitem == 2)
	    {
	        if(PlayerHasWeapon(playerid, 25)) return HataMesajGonder(playerid,"Zaten bu silaha sahipsin.");
	        if(PlayerData[playerid][pSilahlar][g_aWeaponSlots[25]] != 0) return HataMesajGonder(playerid, "Bu silah türü sizde var.");
	        GiveWeaponToPlayer(playerid, 25, 150);
	        Dialog_Show(playerid,OzelEkipmanlar,DIALOG_STYLE_LIST,"{1394BF}Özel Ekipmanlar","{1394BF}» {FFFFFF}M4\n{1394BF}» {FFFFFF}MP5\n{1394BF}» {FFFFFF}Shotgun\n{1394BF}» {FFFFFF}Göz Yaþartýcý Gaz","Seç","Geri");
	    }
	    if(listitem == 3)
	    {
	        if(PlayerHasWeapon(playerid, 17)) return HataMesajGonder(playerid,"Zaten bu silaha sahipsin.");
	        if(PlayerData[playerid][pSilahlar][g_aWeaponSlots[17]] != 0) return HataMesajGonder(playerid, "Bu silah türü sizde var.");
	        GiveWeaponToPlayer(playerid, 17, 50);
	        Dialog_Show(playerid,OzelEkipmanlar,DIALOG_STYLE_LIST,"{1394BF}Özel Ekipmanlar","{1394BF}» {FFFFFF}M4\n{1394BF}» {FFFFFF}MP5\n{1394BF}» {FFFFFF}Shotgun\n{1394BF}» {FFFFFF}Göz Yaþartýcý Gaz","Seç","Geri");
	    }
	}
	return 1;
}
SaveWeapons(playerid)
{
	if(pbOda[playerid] != -1 && !IsPlayerSpawned(playerid)) return 1;
	new a;
	for(new i; i<13; i++)
	{
	    GetPlayerWeaponData(playerid, i, a, PlayerData[playerid][pMermiler][i]);
	}
	return 1;
}
ResetWeapons(playerid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) {
		PlayerData[playerid][pSilahlar][i] = 0;
		PlayerData[playerid][pMermiler][i] = 0;
	}
	return 1;
}
stock PlayerHasWeapon(playerid, weaponid)
{
	new
	    weapon,
	    ammo;

	for (new i = 0; i < 13; i ++) if (PlayerData[playerid][pSilahlar][i] == weaponid) {
	    GetPlayerWeaponData(playerid, i, weapon, ammo);

	    if (weapon == weaponid) return 1;
	}
	return 0;
}
GiveWeaponToPlayer(playerid, weaponid, ammo)
{
	if (weaponid < 0 || weaponid > 46)
	    return 0;

	PlayerData[playerid][pSilahlar][g_aWeaponSlots[weaponid]] = weaponid;
	PlayerData[playerid][pMermiler][g_aWeaponSlots[weaponid]] += ammo;
	return GivePlayerWeapon(playerid, weaponid, ammo);
}
Entrance_Delete(entranceid)
{
    if (entranceid != -1 && EntranceData[entranceid][entranceExists])
    {
        new
            string[64];

        format(string, sizeof(string), "DELETE FROM `entrances` WHERE `entranceID` = '%d'", EntranceData[entranceid][entranceID]);
        mysql_tquery(baglanti, string);

        if (IsValidDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]))
            DestroyDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]);

        if (IsValidDynamicPickup(EntranceData[entranceid][entrancePickup]))
            DestroyDynamicPickup(EntranceData[entranceid][entrancePickup]);

        if (IsValidDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]))
            DestroyDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]);


        EntranceData[entranceid][entranceExists] = false;
        EntranceData[entranceid][entranceID] = 0;
    }
    return 1;
}
Dialog:AracAlimOnay(playerid, response, listitem, inputtext[])
{
	if (!response) return RemovePlayerFromVehicle(playerid);
	if (response)
	{
	    if(strval(inputtext) == GetPVarInt(playerid, "OnayKOD"))
	    {
		    new id = Car_GetID(GetPlayerVehicleID(playerid));
		    if (Car_GetCount(playerid) >= MAX_OWNABLE_CARS) return HataMesajGonder(playerid, "En fazla %d araca sahip olabilirsiniz.",MAX_OWNABLE_CARS);
		    if (AracInfo[id][aracFiyat] <=0) return 1;
		    if (AracInfo[id][aracSahip] == PlayerData[playerid][pID]) return 1;
		    if (PlayerData[playerid][pCash] < AracInfo[id][aracFiyat]) return HataMesajGonder(playerid, "Yeterli paranýz yok.");
		    ParaVer(playerid,-AracInfo[id][aracFiyat]);
		    if (AracInfo[id][aracSahip] != -1)
		    {
			    if (GetPlayerIDWithSQLID(AracInfo[id][aracSahip]) != -1)
			    {
			        ParaVer(GetPlayerIDWithSQLID(AracInfo[id][aracSahip]),AracInfo[id][aracFiyat]);
			        MesajGonder(GetPlayerIDWithSQLID(AracInfo[id][aracSahip]), "%s adlý kiþi aracýnýzý {48FF00}%s {FFFFFF}ödeyerek satýn aldý.",ReturnName(playerid,0),FormatNumber(AracInfo[id][aracFiyat]));
			    }
			    else
			    {
			        OfflineParaVer(AracInfo[id][aracSahip],AracInfo[id][aracFiyat]);
			        new str[100];
			        format(str,sizeof(str), "%s adlý kiþi aracýnýzý %s ödeyerek satýn aldý.",ReturnName(playerid,0),FormatNumber(AracInfo[id][aracFiyat]));
			        BildirimEkle(AracInfo[id][aracSahip],str, "Sistem");
			    }
		    }
		    if (Arac_GetKeyCount(id) > 0)
			{
			    new query[60];
				format(query, sizeof(query), "DELETE FROM `anahtarlar` WHERE `sqlid` = '%d' AND `tip` = '2'",AracInfo[id][aracID]);
				mysql_query(baglanti, query, false);
			}
			MesajGonder(playerid, "'%s' model aracý {48FF00}%s {FFFFFF}ödeyerek satýn aldýnýz.",ReturnVehicleModelName(GetVehicleModel(GetPlayerVehicleID(playerid))),FormatNumber(AracInfo[id][aracFiyat]));
		    AracInfo[id][aracSahip] = PlayerData[playerid][pID];
		    AracInfo[id][aracFiyat] = 0;
		    AracInfo[id][aracSatilik] = 0;
		    UpdateDynamic3DTextLabelText(AracInfo[id][aracLabel], -1, " ");
		    DestroyDynamic3DTextLabel(AracInfo[id][aracLabel]);
		    Arac_Kaydet(id);
	    }
	    else
	    {
	        MesajGonder(playerid, "Araç satýn alma kodunu hatalý girdiniz.");
	        RemovePlayerFromVehicle(playerid);
	    }
	}
	return 1;
}
stock IsVehicleBike(vehicleid)
{
	new Bike[] = { 509, 481, 510, 462, 448,522, 581, 521, 523, 463, 586, 468, 471
};
	for(new i = 0; i < sizeof(Bike); i++)
    {
        if(GetVehicleModel(vehicleid) == Bike[i]) return 1;
    }
	return 0;
}
stock IsWindowedVehicle(vehicleid)
{
	static const g_aWindowStatus[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1,
	    1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1,
		1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
	new modelid = GetVehicleModel(vehicleid);

    if (modelid < 400 || modelid > 611)
        return 0;

    return (g_aWindowStatus[modelid - 400]);
}
Dialog:AracAyarlari(playerid, response, listitem, inputtext[])
{
	if(!response) return DeletePVar(playerid,"CarID");
	if(response)
	{
	    new id = GetPVarInt(playerid,"CarID");
	    if(strfind(inputtext, "Araç Bilgileri", true) != -1)
	    {
		    new string[650];
		    format(string,sizeof(string),"{C2A2DA}Araç ID: {FFFFFF}%d\n{C2A2DA}Araç Vergi: {FFFFFF}%s/%s\n{C2A2DA}Araç Plaka: {FFFFFF}%s\n{C2A2DA}Araç Kilometre: {FFFFFF}%.1f\n{C2A2DA}Araç Benzin: {FFFFFF}%.2f\n{C2A2DA}Zýrh: %s\n{C2A2DA}Taksi Plakasý: %s\n{C2A2DA}Galeri Fiyatý: {2ECC71}%s\n{C2A2DA}Sigorta: {2ECC71}%s\n",
			id,FormatNumber(AracInfo[id][aracVergi]),FormatNumber(GetAracMaksVergi(AracInfo[id][aracModel])), AracInfo[id][aracPlaka],AracInfo[id][aracKM],AracInfo[id][aracBenzin], (AracInfo[id][aracZirh] > 0) ? ("{2CF26B}Evet") : ("{E74C3C}Hayýr"), (AracInfo[id][TaksiPlaka] == 1) ? ("{2CF26B}Evet") : ("{E74C3C}Hayýr"),FormatNumber(GetGaleriFiyat(AracInfo[id][aracModel])), (AracInfo[id][aracSigorta] == 1) ? ("Evet") : ("Hayýr"));
		    Dialog_Show(playerid,AracBilgileri,DIALOG_STYLE_MSGBOX,"Araç Bilgileri",string,"Tamam","Geri");
	    }
	    if(strfind(inputtext, "Motor", true) != -1)
	    {
	        callcmd::motor(playerid);
	        callcmd::arac(playerid);
		}
		if(strfind(inputtext, "Kilit", true) != -1)
	    {
	        callcmd::kilit(playerid);
	        callcmd::arac(playerid);
		}
		if(strfind(inputtext, "Farlar", true) != -1)
	    {
	        callcmd::afarlar(playerid);
	        callcmd::arac(playerid);
		}
		if(strfind(inputtext, "Camlar", true) != -1)
	    {
	        callcmd::acamlar(playerid);
	        callcmd::arac(playerid);
		}
		if(strfind(inputtext, "Kaput", true) != -1)
	    {
	        callcmd::kaput(playerid);
	        callcmd::arac(playerid);
		}
		if(strfind(inputtext, "Bagaj", true) != -1)
	    {
	        callcmd::bagaj(playerid);
		}
	    if(strfind(inputtext,"Birlik aracý yap/çýkart", true) != -1)
	    {
    		 if (AracInfo[id][aracFaction] == -1)
	         {
	            if(PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid, "Birliðiniz yok.");
	            if(GetFactionType(playerid) != BIRLIK_CETE && GetFactionType(playerid) != BIRLIK_MAFYA && GetFactionType(playerid) != BIRLIK_HABER && GetFactionType(playerid) != BIRLIK_LEGAL) return HataMesajGonder(playerid, "Bu birliðe araç ekleyemezsiniz.");
				AracInfo[id][aracFactionType] = GetFactionType(playerid);
				AracInfo[id][aracFaction] = Birlikler[PlayerData[playerid][pFaction]][birlikID];
	            MesajGonder(playerid, "Aracýnýzý artýk birliðinizin üyeleri kullanabilecek.");
	            Arac_Kaydet(id);
				callcmd::arac(playerid);
			 }
			 else
			 {
			   	AracInfo[id][aracFactionType] = 0;
				AracInfo[id][aracFaction] = -1;
			    MesajGonder(playerid, "Aracýnýzý artýk birliðinizin üyeleri kullanamayacak.");
			    Arac_Kaydet(id);
			    callcmd::arac(playerid);
			 }
	    }
	    if(strfind(inputtext,"Parket", true) != -1)
		{
		    new vehicleid = GetPlayerVehicleID(playerid);
		    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid,"Sürücü deðilsin.");
		    new Float:health;
 			GetVehicleHealth(vehicleid, health);
 			if(health < 750) return HataMesajGonder(playerid, "Araç hasarlý olduðu için aracý park edemiyorsunuz.");
 			if ((vehicleid = Car_GetID(vehicleid)) != -1 && Car_IsOwner(playerid, vehicleid))
 			{
 			    new garajid = Garage_Inside(playerid);
 			    if(PlayerData[playerid][pCash] < 100) return HataMesajGonder(playerid,"Aracýnýzý park etmek için $100 gerekli.");
 			    if(garajid != -1 && ParkedilenAracSayisi(garajid) >= GarageData[garajid][gAracLimit]) return HataMesajGonder(playerid, "Bu garaja daha fazla araç park edilemez.");
 			    if(garajid != -1 && GarageData[garajid][gParkDurum] == 0) return HataMesajGonder(playerid, "Bu garaja araç park edilmesi yasak.");
 			    if(!spamProtect(playerid, "ParkEtme", 160)) return HataMesajGonder(playerid, "Aracýnýzý 2 dakikada bir parkedebilirsiniz!");

 			    ParaVer(playerid,-100);
 			    static
					g_arrSeatData[10] = {INVALID_PLAYER_ID, ...},
					g_arrDamage[4],
					seatid;

				GetVehicleDamageStatus(AracInfo[vehicleid][aracVehicle], g_arrDamage[0], g_arrDamage[1], g_arrDamage[2], g_arrDamage[3]);
				GetVehicleHealth(AracInfo[vehicleid][aracVehicle], health);

				foreach (new i : Player) if (IsPlayerInVehicle(i, AracInfo[vehicleid][aracVehicle])) {
				    seatid = GetPlayerVehicleSeat(i);

				    g_arrSeatData[seatid] = i;
				}
				GetVehiclePos(AracInfo[vehicleid][aracVehicle], AracInfo[vehicleid][aracPos][0],AracInfo[vehicleid][aracPos][1], AracInfo[vehicleid][aracPos][2]);
				GetVehicleZAngle(AracInfo[vehicleid][aracVehicle], AracInfo[vehicleid][aracPos][3]);
				if(garajid != -1) AracInfo[vehicleid][aracGaraj] = garajid;
				else AracInfo[vehicleid][aracGaraj] = -1;
				AracInfo[vehicleid][aracInterior] = GetPlayerInterior(playerid);
				AracInfo[vehicleid][aracWorld] = GetPlayerVirtualWorld(playerid);
				Arac_Kaydet(vehicleid);
				Arac_Spawn(vehicleid);
		        SetPlayerArmedWeapon(playerid, 0);
				BilgiMesajGonder(playerid, "Araç baþarýyla bulunduðunuz yere park edildi.");

		        UpdateVehicleDamageStatus(AracInfo[vehicleid][aracVehicle], g_arrDamage[0], g_arrDamage[1], g_arrDamage[2], g_arrDamage[3]);
				SetVehicleHealth(AracInfo[vehicleid][aracVehicle], health);
				AracInfo[vehicleid][aracDisplay] = true;
		        SetVehicleVirtualWorld(AracInfo[vehicleid][aracVehicle], GetPlayerVirtualWorld(playerid));

				for (new i = 0; i < sizeof(g_arrSeatData); i ++) if (g_arrSeatData[i] != INVALID_PLAYER_ID) {
				    PutPlayerInVehicle(g_arrSeatData[i], AracInfo[vehicleid][aracVehicle], i);

				    g_arrSeatData[i] = INVALID_PLAYER_ID;
				}
 			}
		}
		if (strfind(inputtext, "Piyasa Kontrolü", true) != -1)
		{
		    Dialog_Show(playerid, AracPiyassa, DIALOG_STYLE_MSGBOX, "Araç Piyasasý", "Bu aracýn galeri fiyatý: {00ff00}%s", "Tamam", "Kapat", FormatNumber(GetGaleriFiyat(AracInfo[id][aracModel])));
		}
		if (strfind(inputtext, "Kanca Ýzni", true) != -1)
		{
  			if (AracInfo[id][aracTip] != 4 && AracInfo[id][aracSahip] != PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Bu menüye eriþemezsiniz.");
		    Dialog_Show(playerid, KancaIzinVerme, DIALOG_STYLE_INPUT, "{FF9900}ARAÇ: {ffffff}Kanca Izni", "Kanca izni vermek istediðiniz aracýn ID'sini giriniz (Kaldýrmak için boþ býrakýn):", "Tamam", "Geri");
		}
		if(strfind(inputtext,"Aracý Sat", true) != -1)
		{
		    Dialog_Show(playerid,AracSat,DIALOG_STYLE_INPUT,"{FFFFFF}Araç Sat","Lutfen aracýn satýþ fiyatýný yazýn.\n\n{FFBF00}[Ýnfo] {FFFFFF}0 yazarsanýz aracýnýz artýk satýlýk olmaz.","Tamam","Geri");
		}
		if(strfind(inputtext,"Anahtarlar", true) != -1)
		{
		    if(Arac_GetKeyCount(id) < 1)
		    {
		        callcmd::arac(playerid);
		        return HataMesajGonder(playerid, "Bu aracýn anahtarý kimseye verilmemiþ, /anahtarver ile verebilirsiniz.");
		    }
		    Arac_KeyDialog(playerid, id);
		}
		if(strfind(inputtext,"Modifiye Kontrolü", true) != -1)
		{
		    SetPVarInt(playerid, "ModifiyeID", id);
		    AracModifiyeler(playerid, id);
		}
	}
	return 1;
}
Dialog:KancaIzinVerme(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = GetPVarInt(playerid, "CarID"), yid = Car_GetID(strval(inputtext));
		if(isnull(inputtext))
		{
	 		AracInfo[id][KancaIzin] = -1;
			MesajGonder(playerid, "Kanca izinleri kaldýrýldý.");
			DeletePVar(playerid, "CarID");
			Arac_Kaydet(id);
			return callcmd::arac(playerid);
		}
		if(!IsValidVehicle(strval(inputtext))) return HataMesajGonder(playerid, "Geçersiz araç ID");
		if(yid == id) return HataMesajGonder(playerid, "Kendi aracýnýza takamazsýnýz.");
		AracInfo[id][KancaIzin] = AracInfo[yid][aracID];
		MesajGonder(playerid, "%s model araca kanca izni verildi.", ReturnVehicleModelName(AracInfo[yid][aracModel]));
		DeletePVar(playerid, "CarID");
		Arac_Kaydet(id);
		callcmd::arac(playerid);
	}
	if(!response) return callcmd::arac(playerid);
	return 1;
}
stock ParkedilenAracSayisi(id)
{
	new sayi = 0;
	for(new i; i<MAX_ARAC; i++) if(AracInfo[i][aracExists] && AracInfo[i][aracGaraj] == id)
	{
	    sayi++;
	}
	return sayi;
}
stock AracModifiyeler(playerid, id)
{
	new str[600], sayi;
	strcat(str, "{FF0000}Paintjob Sil\n");
	for(new i; i<14; i++) if(AracInfo[id][aracMods][i] > 0)
	{
	    ModifiyeListeleme[playerid][sayi] = i;
	    sayi++;
	    format(str, sizeof(str), "%s(ID: %d) %s\n", str, AracInfo[id][aracMods][i], GetComponentName(AracInfo[id][aracMods][i]));
	}
	Dialog_Show(playerid, AracModifiyeler, DIALOG_STYLE_LIST, "{C9A527}Araç Modifiyeleri", str, "Kaldýr", "Kapat");
	return 1;
}
Dialog:AracModifiyeler(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new aracid = GetPVarInt(playerid, "ModifiyeID");
	    if(listitem == 0)
	    {
	        if(AracInfo[aracid][aracPaintjob] == -1)
	        {
	            HataMesajGonder(playerid, "Paintjob yok.");
	            return AracModifiyeler(playerid, aracid);
	        }
	        AracInfo[aracid][aracPaintjob] = -1;
	        ChangeVehiclePaintjob(AracInfo[aracid][aracVehicle], 3);
	        MesajGonder(playerid, "Paintjob kaldýrýldý.");
	        AracModifiyeler(playerid, aracid);
	        return 1;
	    }
	    new id = ModifiyeListeleme[playerid][listitem-1];
	    if(AracInfo[aracid][aracMods][id] > 0)
	    {
	        RemoveVehicleComponent(AracInfo[aracid][aracVehicle], AracInfo[aracid][aracMods][id]);
	        AracInfo[aracid][aracMods][id] = 0;
	        AracModifiyeler(playerid, aracid);
	        MesajGonder(playerid, "Modifiye kaldýrýldý.");
	    }
	}
	return 1;
}
Dialog:AracSat(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::arac(playerid);
	if(response)
	{
	    new id = GetPVarInt(playerid,"CarID");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid,AracSat,DIALOG_STYLE_INPUT,"{FFFFFF}Araç Sat","Lutfen aracýn satýþ fiyatýný yazýn.\n\n{FFBF00}[Ýnfo] {FFFFFF}0 yazarsanýz aracýnýz artýk satýlýk olmaz.","Tamam","Geri");
	    if(strval(inputtext) < 0)
	    {
	        HataMesajGonder(playerid, "Geçersiz sayý girdiniz.");
	        return Dialog_Show(playerid,AracSat,DIALOG_STYLE_INPUT,"{FFFFFF}Araç Sat","Lutfen aracýn satýþ fiyatýný yazýn.\n\n{FFBF00}[Ýnfo] {FFFFFF}0 yazarsanýz aracýnýz artýk satýlýk olmaz.","Tamam","Geri");
	    }
	    if(strval(inputtext) <= 0)
	    {
	        AracInfo[id][aracSatilik] = 0;
	        AracInfo[id][aracFiyat] = 0;
	        Arac_Kaydet(id);
	        UpdateDynamic3DTextLabelText(AracInfo[id][aracLabel], -1, " ");
	        DestroyDynamic3DTextLabel(AracInfo[id][aracLabel]);
	        //Arac_Spawn(id);
	        BilgiMesajGonder(playerid,"Araç artýk satýlýk deðil.");
	    }
	    else
	    {
	        UpdateDynamic3DTextLabelText(AracInfo[id][aracLabel], -1, " ");
	        DestroyDynamic3DTextLabel(AracInfo[id][aracLabel]);
	        AracInfo[id][aracSatilik] = 1;
	        AracInfo[id][aracFiyat] = strval(inputtext);
	        Arac_Kaydet(id);
	        new str[120];
		    format(str,sizeof(str),"{00FF00}.:SATILIK:.\n{00FF00}Fiyat: %s\n{00FF00}%d",FormatNumber(AracInfo[id][aracFiyat]), (PlayerData[playerid][pTelefon] == -1) ? (0) : (PlayerData[playerid][pTelefon]));
		    AracInfo[id][aracLabel] = CreateDynamic3DTextLabel(str,-1, 0.0, -2.5, 0.4,30.0,INVALID_PLAYER_ID,AracInfo[id][aracVehicle], 1);

		    MesajGonder(playerid, "Aracýnýz satýlýða çýkarýldý. (Fiyat: %s)", FormatNumber(AracInfo[id][aracFiyat]));
	    }
	}
	return 1;
}
stock GetSQLPhoneNumber(sqlid)
{
	if(sqlid == -1) return 0;
	new id = GetPlayerIDWithSQLID(sqlid);
	if(OyundaDegil(id))
	{
	    if(PlayerData[id][pTelefon] == -1) return 0;
	    else return PlayerData[id][pTelefon];
	}
	else
	{
	    new query[120];
	    format(query, sizeof(query), "SELECT `Telefon` FROM `oyuncular` WHERE `ID` = '%d'", sqlid);
	    new Cache:sawyer = mysql_query(baglanti, query);
	    new rows;
	    cache_get_row_count(rows);
	    if(rows)
	    {
			new numara;
			cache_get_value_name_int(0, "Telefon", numara);
			cache_delete(sawyer);
			if(numara == -1) return 0;
			else return numara;
	    }
	    cache_delete(sawyer);
	}
	return 0;
}
Dialog:AracBilgileri(playerid, response, listitem, inputtext[])
{
	if(!response || response) return callcmd::arac(playerid);
	return 1;
}
stock Birlik_Sil(factionid)
{
	if (factionid != -1 && Birlikler[factionid][birlikExists])
	{
	    new
	        string[150];

		format(string, sizeof(string), "DELETE FROM `birlikler` WHERE `bid` = '%d'",Birlikler[factionid][birlikID]);
		mysql_query(baglanti, string, false);

		format(string, sizeof(string), "UPDATE `oyuncular` SET `Birlik` = '-1',`BirlikRutbe` = '0',`BirlikDivizyon` = '0' WHERE `Birlik` = '%d'", factionid);
		mysql_query(baglanti, string, false);

  		foreach (new i : Player)
		{
			if (PlayerData[i][pFaction] == factionid) {
		    	PlayerData[i][pFaction] = -1;
		    	PlayerData[i][pFactionRutbe] = 0;
		    	PlayerData[i][pFactionDivizyon] = 0;
			}
		}
        if(IsValidDynamicPickup(Birlikler[factionid][reklamPickup])) DestroyDynamicPickup(Birlikler[factionid][reklamPickup]);
        if(IsValidDynamic3DTextLabel(Birlikler[factionid][reklamLabel])) DestroyDynamic3DTextLabel(Birlikler[factionid][reklamLabel]);
	    Birlikler[factionid][birlikExists] = false;
	    Birlikler[factionid][birlikTip] = 0;
	    Birlikler[factionid][birlikID] = 0;
	    Iter_Clear(CekilisKatilimcilar[factionid]);
	}
	return 1;
}
stock IsPlayerNearHood(playerid, vehicleid)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetVehicleHood(vehicleid, fX, fY, fZ);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 4.0, fX, fY, fZ);
}
stock GetHoodStatus(vehicleid)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (bonnet != 1)
		return 0;

	return 1;
}
stock IsVehicleImpounded(vehicleid)
{
	new id = Car_GetID(vehicleid);
 	if (id != -1 && AracInfo[id][aracBaglandi] != 0 && AracInfo[id][aracBaglandi] > 0)
	    return 1;

	return 0;
}
stock GetVehicleHood(vehicleid, &Float:x, &Float:y, &Float:z)
{
    if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	static
	    Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] + (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
	y = pos[4] + (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}
stock SetHoodStatus(vehicleid, status)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, status, boot, objective);
}
stock GetLightStatus(vehicleid)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (lights != 1)
		return 0;

	return 1;
}
stock SetLightStatus(vehicleid, status)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, status, alarm, doors, bonnet, boot, objective);
}
stock GetFactionType(playerid)
{
	if (PlayerData[playerid][pFaction] == -1)
	    return 0;

	return (Birlikler[PlayerData[playerid][pFaction]][birlikTip]);
}
Car_IsOwner(playerid, carid)
{
	if (!OyundaDegil(playerid))
	    return 0;

    if ((AracInfo[carid][aracExists] && AracInfo[carid][aracSahip] > 0) && AracInfo[carid][aracSahip] == PlayerData[playerid][pID])
		return 1;

	return 0;
}
Car_Birlik(playerid, carid)
{
    if(PlayerData[playerid][pFaction] == -1 || carid == -1) return 0;
    if(AracInfo[carid][aracFaction] == Birlikler[PlayerData[playerid][pFaction]][birlikID] && AracInfo[carid][aracFactionType] != BIRLIK_LSPD && AracInfo[carid][aracFactionType] != BIRLIK_LSMD && AracInfo[carid][aracFactionType] != BIRLIK_FBI)
		return 1;

	return 0;
}
stock IsDoorVehicle(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 400..424, 426..429, 431..440, 442..445, 451, 455, 456, 458, 459, 466, 467, 470, 474, 475:
		    return 1;

		case 477..480, 482, 483, 486, 489, 490..492, 494..496, 498..500, 502..508, 514..518, 524..529, 533..536:
		    return 1;

		case 540..547, 549..552, 554..562, 565..568, 573, 575, 576, 578..580, 582, 585, 587..589, 596..605, 609:
			return 1;
	}
	return 0;
}
Car_Nearest(playerid)
{
	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	for (new i = 0; i != MAX_ARAC; i ++) if (AracInfo[i][aracExists]) {
		GetVehiclePos(AracInfo[i][aracVehicle], fX, fY, fZ);

		if (IsPlayerInRangeOfPoint(playerid, 4.0, fX, fY, fZ)) {
		    return i;
		}
	}
	return -1;
}
stock GetNearestVehicle(playerid)
{
	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && GetVehiclePos(i, fX, fY, fZ))
	{
	    if (IsPlayerInRangeOfPoint(playerid, 3.5, fX, fY, fZ)) return i;
	}
	return INVALID_VEHICLE_ID;
}
Dialog:AracimiBul(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new notreal[128], idx;
		notreal = strtok(inputtext, idx);
		new vehicleid = strval(notreal), carid = Car_GetID(vehicleid);
		if(!AracInfo[carid][aracDisplay]) return HataMesajGonder(playerid,"Bu araç pasif durumda. (/araclarim)");
		new Float:x,Float:y,Float:z;
		GetVehiclePos(vehicleid,x,y,z);
	 	SetPlayerCheckpoint(playerid, x, y, z, 5.0);
	 	BilgiMesajGonder(playerid,"Aracýnýzýn son görüldüðü yer: %s (haritada iþaretlendi)",GetLocation(x,y,z));
	 	SetPVarInt(playerid,"AraciniBuluyor",1);
	}
	return 1;
}
Dialog:AracSigortaYap(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new notreal[128], idx;
		notreal = strtok(inputtext, idx);
		new vehicleid = strval(notreal), carid = Car_GetID(vehicleid);
		if(AracInfo[carid][aracSigorta] == 1) return HataMesajGonder(playerid, "Bu aracýn sigortasý zaten var.");
  		if (AracInfo[carid][aracBaglandi] == 1) return HataMesajGonder(playerid, "Aracýnýz baðlanmýþ.");
  		if (AracInfo[carid][aracElKonuldu] == 1) return HataMesajGonder(playerid, "Aracýnýza el koyulmuþ.");
		MesajGonder(playerid, "%s model araca $3000 ödeyerek sigorta yaptýrdýnýz.", ReturnVehicleModelName(AracInfo[carid][aracModel]));
		ParaVer(playerid, -3000);
		AracInfo[carid][aracSigorta] = 1;
	}
	return 1;
}
Dialog:Araclarim(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new notreal[128], idx;
		notreal = strtok(inputtext, idx);
		new vehicleid = strval(notreal), carid = Car_GetID(vehicleid);

		if(AracInfo[carid][aracDisplay])
		{
		    if(AracInfo[carid][aracGaraj] != -1) return HataMesajGonder(playerid, "Garajdaki araçlarý saklayamazsýn.");
			if(!IsPlayerInVehicle(playerid, AracInfo[carid][aracVehicle])) return HataMesajGonder(playerid, "Aracýnýzda deðilsiniz.");
			SetPlayerCheckpoint(playerid, AracInfo[carid][aracPos][0], AracInfo[carid][aracPos][1], AracInfo[carid][aracPos][2], 5.0);
			MesajGonder(playerid, "Park alaný haritada iþaretlendi.");
			SetPVarInt(playerid, "AracSakliyor", carid);
		}
		else
		{
		    if(AracInfo[carid][aracBaglandi] == 1) return HataMesajGonder(playerid,"Aracýnýz baðlanmýþ.");
		    if(AracInfo[carid][aracElKonuldu] == 1) return HataMesajGonder(playerid, "Aracýnýza el koyulmuþ.");
		    AracInfo[carid][aracDisplay] = true;
		    BilgiMesajGonder(playerid, "Aracýnýz en son park ettiðiniz yere spawn edildi. (/aracimibul)");
      		SetVehicleVirtualWorld(vehicleid, AracInfo[carid][aracWorld]);
		    LinkVehicleToInteriorEx(vehicleid, AracInfo[carid][aracInterior]);
		}
	}
	return 1;
}
stock IsVehicleTowing(vehicleid)
{
	foreach(new i:Player)
	{
	    if(AracCekiyor[i] == vehicleid) return 1;
	}
	return 0;
}
stock GetLocation(Float:fX, Float:fY, Float:fZ)
{
	new
	    name[32] = "San Andreas";

	for (new i = 0; i != sizeof(g_arrZoneData); i ++) if ((fX >= g_arrZoneData[i][e_ZoneArea][0] && fX <= g_arrZoneData[i][e_ZoneArea][3]) && (fY >= g_arrZoneData[i][e_ZoneArea][1] && fY <= g_arrZoneData[i][e_ZoneArea][4]) && (fZ >= g_arrZoneData[i][e_ZoneArea][2] && fZ <= g_arrZoneData[i][e_ZoneArea][5])) {
    strunpack(name, g_arrZoneData[i][e_ZoneName]);

	break;
	}
	return name;
}
stock GetCityName(Float:fX, Float:fY, Float:fZ)
{
	new
	    name[32] = "San Andreas";

	for (new i = 356; i < sizeof(g_arrZoneData); i ++) if ((fX >= g_arrZoneData[i][e_ZoneArea][0] && fX <= g_arrZoneData[i][e_ZoneArea][3]) && (fY >= g_arrZoneData[i][e_ZoneArea][1] && fY <= g_arrZoneData[i][e_ZoneArea][4]) && (fZ >= g_arrZoneData[i][e_ZoneArea][2] && fZ <= g_arrZoneData[i][e_ZoneArea][5])) {
    strunpack(name, g_arrZoneData[i][e_ZoneName]);

	break;
	}
	return name;
}
stock Isyeri_Sil(bizid)
{
	if (bizid != -1 && Isyeri[bizid][isyeriExists])
	{
	    new
	        string[82];

		format(string, sizeof(string), "DELETE FROM `isyerleri` WHERE `ID` = '%d'", Isyeri[bizid][isyeriID]);
		mysql_query(baglanti, string, false);

        if (IsValidDynamic3DTextLabel(Isyeri[bizid][bizText3D]))
		    DestroyDynamic3DTextLabel(Isyeri[bizid][bizText3D]);

		if (IsValidDynamicPickup(Isyeri[bizid][isyeriPickup]))
		    DestroyDynamicPickup(Isyeri[bizid][isyeriPickup]);

		Isyeri_AraclariSil(bizid);

	    Isyeri[bizid][isyeriExists] = false;
	    Isyeri[bizid][isyeriSahip] = -1;
	    Isyeri[bizid][isyeriID] = 0;
	}
	return 1;
}
Dialog:IsyeriDialog(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new id = GetPVarInt(playerid,"IsyeriID");
	    if(strfind(inputtext, "Kilit Durumu", true) != -1)
	    {
	        if(Isyeri[id][isyeriSahip] != PlayerData[playerid][pID] && (PlayerData[playerid][pAdmin] < 2 || PlayerData[playerid][pAdminDuty] != 1)) return 1;
	        if(!Isyeri[id][isyeriKilit])
	        {
	            Isyeri[id][isyeriKilit] = true;
	            callcmd::isyeri(playerid);
	            Isyeri_Yenile(id);
	            Isyeri_Kaydet(id);
	        }
	        else
	        {
	            Isyeri[id][isyeriKilit] = false;
	            callcmd::isyeri(playerid);
	            Isyeri_Yenile(id);
	            Isyeri_Kaydet(id);
	        }
	    }
	    if(strfind(inputtext, "Ýþyeri Adý", true) != -1)
	    {
	        if(Isyeri[id][isyeriSahip] != PlayerData[playerid][pID] && (PlayerData[playerid][pAdmin] < 2 || PlayerData[playerid][pAdminDuty] != 1)) return 1;
	        Dialog_Show(playerid,IsyeriAdDuzenleme,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Ad Düzenleme","Lütfen bu iþyeri için yeni bir ad girin;\nÞu anki ad: %s","Deðiþtir","Geri",Isyeri[id][isyeriName]);
		}
		if(strfind(inputtext, "Giriþ Ücreti", true) != -1)
		{
		    if(Isyeri[id][isyeriSahip] != PlayerData[playerid][pID] && (PlayerData[playerid][pAdmin] < 2 || PlayerData[playerid][pAdminDuty] != 1)) return 1;
		    Dialog_Show(playerid,IsyeriUcretDuzenleme,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Giriþ Ücreti","{FFFFFF}Lütfen iþyeriniz için yeni bir giriþ ücreti belirleyin;\n{FFFFFF}Þu anki ücret: {FF9900}%s","Deðiþtir","Geri",FormatNumber(Isyeri[id][isyeriGirisUcret]));
		}
		if(strfind(inputtext, "Ýþyeri Kasasý", true) != -1)
		{
		    if(Isyeri[id][isyeriSahip] != PlayerData[playerid][pID] && (PlayerData[playerid][pAdmin] < 2 || PlayerData[playerid][pAdminDuty] != 1)) return 1;
		    Dialog_Show(playerid,IsyeriKasa,DIALOG_STYLE_LIST,"{2ECC71}Ýþyeri - Kasa","Para Al\nPara Koy","Seç","Geri");
		}
		if(strfind(inputtext,"Satýlýða Çýkar",true) != -1)
		{
		    if(Isyeri[id][isyeriSahip] != PlayerData[playerid][pID] && (PlayerData[playerid][pAdmin] < 2 || PlayerData[playerid][pAdminDuty] != 1)) return 1;
		    Dialog_Show(playerid,IsyeriSatilik,DIALOG_STYLE_LIST,"{2ECC71}Ýþyeri - Satýlýða Çýkar","Satýlýða Çýkar\nSisteme Sat {2ECC71}(%s)\nÝþyerini Satmaktan Vazgeç","Seç","Geri",FormatNumber(Isyeri[id][isyeriKendiFiyati]/2));
		}
		if(strfind(inputtext,"Giriþ Mesajý",true) != -1)
		{
		    if(Isyeri[id][isyeriSahip] != PlayerData[playerid][pID] && (PlayerData[playerid][pAdmin] < 2 || PlayerData[playerid][pAdminDuty] != 1)) return 1;
		    Dialog_Show(playerid,IsyeriMesaj,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Giriþ Mesajý","{FFFFFF}Lütfen iþyeri giriþ mesajý yazýn ('yok' yazarsanýz iþyeri mesajý kaldýrýlýr.)","Deðiþtir","Geri");
		}
		if(strfind(inputtext, "Müzik Aç/Kapat", true) != -1)
		{
		    if(Isyeri[id][isyeriSahip] != PlayerData[playerid][pID] && (PlayerData[playerid][pAdmin] < 2 || PlayerData[playerid][pAdminDuty] != 1)) return 1;
		    Dialog_Show(playerid,IsyeriMuzik,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Müzik","{FFFFFF}Lütfen müziðin URL adresini girin ('yok' yazarak müziði kapatabilirsiniz.)\n{FFFFFF}Þu anki URL: %s","Deðiþtir","Geri",Isyeri[id][isyeriMuzik]);
		}
		if(strfind(inputtext,"Ürün Al",true) != -1)
		{
		    if(Isyeri[id][isyeriSahip] != PlayerData[playerid][pID] && (PlayerData[playerid][pAdmin] < 2 || PlayerData[playerid][pAdminDuty] != 1)) return 1;
		    Isyeri_UrunAl(playerid,id);
		}
		if(strfind(inputtext,"Araç Ekle",true) != -1)
		{
		    if(Isyeri[id][isyeriSahip] != PlayerData[playerid][pID] && (PlayerData[playerid][pAdmin] < 2 || PlayerData[playerid][pAdminDuty] != 1)) return 1;
		    Dialog_Show(playerid,AracEkle,DIALOG_STYLE_INPUT,"{2ECC71}Araç Ekle","Lütfen iþyerine eklemek istediðiniz aracýn adýný veya modelini girin:","Devam","Kapat");
		}
		if(strfind(inputtext,"Araç Düzenle",true) != -1)
		{
		    if(Isyeri[id][isyeriSahip] != PlayerData[playerid][pID] && (PlayerData[playerid][pAdmin] < 2 || PlayerData[playerid][pAdminDuty] != 1)) return 1;
		    Dialog_Show(playerid,AracDuzenle,DIALOG_STYLE_LIST,"{2ECC71}Araç Düzenle","{FFFFFF}Araç Fiyat Deðiþtir\n{FFFFFF}Araç Sil","Seç","Geri");
		}
		if(strfind(inputtext,"Ürün Fiyatlarýný Deðiþtir",true) != -1)
		{
		    HataMesajGonder(playerid, "Bu sistem pasif.");
		    /*if(Isyeri[id][isyeriSahip] != PlayerData[playerid][pID] && (PlayerData[playerid][pAdmin] < 2 || PlayerData[playerid][pAdminDuty] != 1)) return 1;
		    Isyeri_UrunFiyatDegistir(playerid,id);*/
		}
	}
	return 1;
}
Dialog:AracDuzenle(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::isyeri(playerid);
	if(response)
	{
	    new id;
	    if((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1)
	    {
		    if(listitem == 0)
		    {
		    	SetPVarInt(playerid,"AracDuzenle",1);
		        Isyeri_AracDuzenle(playerid,id);
		    }
		    if(listitem == 1)
		    {
		        SetPVarInt(playerid,"AracDuzenle",2);
		        Isyeri_AracDuzenle(playerid,id);
		    }
	    }
	}
	return 1;
}
stock Isyeri_AraclariSil(bizid)
{
	if (Isyeri[bizid][isyeriExists] && Isyeri[bizid][isyeriTip] == 4)
	{
	    static
	        string[50];

		for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
		{
  			DealershipCars[bizid][i][vehModel] = 0;
    		DealershipCars[bizid][i][vehPrice] = 0;
		}
		format(string, sizeof(string), "DELETE FROM `galeriaraclar` WHERE `ID` = '%d'", Isyeri[bizid][isyeriID]);
		mysql_query(baglanti, string, false);
	}
	return 1;
}
Isyeri_AracDuzenle(playerid, bizid)
{
	new string[2056];
	string[0] = 0;
    for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
	{
		if (DealershipCars[bizid][i][vehModel]) {
			format(string, sizeof(string), "%s%d\t~g~%s\n", string, DealershipCars[bizid][i][vehModel], FormatNumber(DealershipCars[bizid][i][vehPrice]));
		}
	}
    ShowPlayerDialog(playerid, 58, DIALOG_STYLE_PREVMODEL, "Arac Sec", string, "Sec", "Iptal");
	return 1;
}
Dialog:AracEkle(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::isyeri(playerid);
	if(response)
	{
	    new id = -1;
	    if((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1)
	    {
	        if(Isyeri[id][isyeriTip] != 4 || !Isyeri[id][isyeriExists]) return 1;
	        if (isnull(inputtext)) return Dialog_Show(playerid,AracEkle,DIALOG_STYLE_INPUT,"{2ECC71}Araç Ekle","Lütfen iþyerine eklemek istediðiniz aracýn adýný veya modelini girin:","Devam","Kapat");
	        new model = GetVehicleModelByName(inputtext);
	        if(!model)
	        {
	            HataMesajGonder(playerid,"Geçersiz araç modeli girdiniz.");
	            return Dialog_Show(playerid,AracEkle,DIALOG_STYLE_INPUT,"{2ECC71}Araç Ekle","Lütfen iþyerine eklemek istediðiniz aracýn adýný veya modelini girin:","Devam","Kapat");
	        }
	        for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
	        {
	            if (DealershipCars[id][i][vehModel] == model)
	            {
	                HataMesajGonder(playerid,"Bu araç zaten bu galeride satýlýyor.");
	                return Dialog_Show(playerid,AracEkle,DIALOG_STYLE_INPUT,"{2ECC71}Araç Ekle","Lütfen iþyerine eklemek istediðiniz aracýn adýný veya modelini girin:","Devam","Kapat");
	            }
	        }
	        SetPVarInt(playerid,"AracEkleModel",model);
	        Dialog_Show(playerid,AracEkleFiyat,DIALOG_STYLE_INPUT,"{2ECC71}Araç Fiyat","Lütfen '%s' model araç için bir fiyat girin:","Ekle","Geri",ReturnVehicleModelName(model));
	    }
	}
	return 1;
}
Dialog:AracEkleFiyat(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid,AracEkle,DIALOG_STYLE_INPUT,"{2ECC71}Araç Ekle","Lütfen iþyerine eklemek istediðiniz aracýn adýný veya modelini girin:","Devam","Kapat"),DeletePVar(playerid,"AracEkleModel");
	if(response)
	{
	    new id = -1;
	    if((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1)
	    {
	        if(Isyeri[id][isyeriTip] != 4 || !Isyeri[id][isyeriExists]) return 1;
	        if (isnull(inputtext) || strval(inputtext) < 1)
	        {
	            HataMesajGonder(playerid,"Geçersiz fiyat.");
	            return Dialog_Show(playerid,AracEkleFiyat,DIALOG_STYLE_INPUT,"{2ECC71}Araç Fiyat","Lütfen '%s' model araç için bir fiyat girin:","Ekle","Geri",ReturnVehicleModelName(GetPVarInt(playerid,"AracEkleModel")));
	        }
	        Isyeri_AracEkle(id,GetPVarInt(playerid,"AracEkleModel"),strval(inputtext));
	        BilgiMesajGonder(playerid,"Galerinize '%s' adlý araç eklendi.",ReturnVehicleModelName(GetPVarInt(playerid,"AracEkleModel")));
	    }
	}
	return 1;
}
Isyeri_AracEkle(bizid, modelid, price)
{
	static
	    query[128];

	for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++) if (!DealershipCars[bizid][i][vehModel])
	{
	    DealershipCars[bizid][i][vehModel] = modelid;
	    DealershipCars[bizid][i][vehPrice] = price;

	    format(query, sizeof(query), "INSERT INTO `galeriaraclar` (`ID`, `vehModel`, `vehPrice`) VALUES('%d', '%d', '%d')", Isyeri[bizid][isyeriID], modelid, price);
	    mysql_tquery(baglanti, query, "OnDealerCarCreated", "dd", bizid, i);

	    return 1;
	}
	return 0;
}
forward OnDealerCarCreated(bizid, slotid);
public OnDealerCarCreated(bizid, slotid)
{
	DealershipCars[bizid][slotid][vehID] = cache_insert_id();
	return 1;
}
stock GetVehicleModelByName(const name[])
{
	if (IsNumeric(name) && (strval(name) >= 400 && strval(name) <= 611))
	    return strval(name);

	for (new i = 0; i < sizeof(g_arrVehicleNames); i ++)
	{
	    if (strfind(g_arrVehicleNames[i], name, true) != -1)
	    {
	        return i + 400;
		}
	}
	return 0;
}
stock Isyeri_UrunFiyatDegistir(playerid,id)
{
	if(id == -1 || !Isyeri[id][isyeriExists]) return 0;

	new str[1000],string[550];
	strcat(str,"Ürün\tKalan\tFiyat\n");
	switch(Isyeri[id][isyeriTip])
	{
	    case 1:
	    {
	        format(string,sizeof(string),"Zar\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][0],FormatNumber(Isyeri[id][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string),"Sigara\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][1],FormatNumber(Isyeri[id][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string),"Ip\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][2],FormatNumber(Isyeri[id][isyeriFiyatlar][2]));
	        strcat(str,string);
	        format(string,sizeof(string),"Göz Baðý\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][3],FormatNumber(Isyeri[id][isyeriFiyatlar][3]));
	        strcat(str,string);
	        format(string,sizeof(string),"Sprey\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][4],FormatNumber(Isyeri[id][isyeriFiyatlar][4]));
	        strcat(str,string);
	        format(string,sizeof(string),"Gazoz\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][5],FormatNumber(Isyeri[id][isyeriFiyatlar][5]));
	        strcat(str,string);
	        format(string,sizeof(string),"Beyzbol Sopasý\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][6],FormatNumber(Isyeri[id][isyeriFiyatlar][6]));
	        strcat(str,string);
	        format(string,sizeof(string),"Maske\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][7],FormatNumber(Isyeri[id][isyeriFiyatlar][7]));
	        strcat(str,string);
	        format(string,sizeof(string),"Benzin Kutusu\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][8],FormatNumber(Isyeri[id][isyeriFiyatlar][8]));
	        strcat(str,string);
	        format(string,sizeof(string),"Barbekü\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][9],FormatNumber(Isyeri[id][isyeriFiyatlar][9]));
	        strcat(str,string);
	        format(string,sizeof(string),"Köfte\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][10],FormatNumber(Isyeri[id][isyeriFiyatlar][10]));
	        strcat(str,string);
	        format(string,sizeof(string),"Tavuk Eti\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][11],FormatNumber(Isyeri[id][isyeriFiyatlar][11]));
	        strcat(str,string);
	        format(string,sizeof(string),"Dana Eti\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][12],FormatNumber(Isyeri[id][isyeriFiyatlar][12]));
	        strcat(str,string);
	        format(string,sizeof(string),"Tamir kiti\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][13],FormatNumber(Isyeri[id][isyeriFiyatlar][13]));
	        strcat(str,string);
	        format(string,sizeof(string),"Portatif Çadýr\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][14],FormatNumber(Isyeri[id][isyeriFiyatlar][14]));
	        strcat(str,string);
	        format(string,sizeof(string),"Kamp Ateþi\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][15],FormatNumber(Isyeri[id][isyeriFiyatlar][15]));
	        strcat(str,string);
	        format(string,sizeof(string),"Yan Keski\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][16],FormatNumber(Isyeri[id][isyeriFiyatlar][16]));
	        strcat(str,string);
	    }
	    case 2:
	    {
	        format(string,sizeof(string),"Normal Kiyafetler\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][0],FormatNumber(Isyeri[id][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string),"Özel Kiyafetler\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][1],FormatNumber(Isyeri[id][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string),"Aksesuarlar\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][2],FormatNumber(Isyeri[id][isyeriFiyatlar][2]));
	        strcat(str,string);
	    }
	    case 3:
	    {
	        format(string,sizeof(string),"Su\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][0],FormatNumber(Isyeri[id][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string),"Kola\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][1],FormatNumber(Isyeri[id][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string),"Salata\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][2],FormatNumber(Isyeri[id][isyeriFiyatlar][2]));
	        strcat(str,string);
	        format(string,sizeof(string),"Tavuk\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][3],FormatNumber(Isyeri[id][isyeriFiyatlar][3]));
	        strcat(str,string);
	        format(string,sizeof(string),"Patates Kýzartmasý\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][4],FormatNumber(Isyeri[id][isyeriFiyatlar][4]));
	        strcat(str,string);
	        format(string,sizeof(string),"Hamburger\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][5],FormatNumber(Isyeri[id][isyeriFiyatlar][5]));
	        strcat(str,string);
	    }
	    case 5:
	    {
	        format(string,sizeof(string),"Telefon\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][0],FormatNumber(Isyeri[id][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string),"Portatif Radyo\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][1],FormatNumber(Isyeri[id][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string),"Boombox\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][2],FormatNumber(Isyeri[id][isyeriFiyatlar][2]));
	        strcat(str,string);
	        format(string,sizeof(string),"Kamera\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][3],FormatNumber(Isyeri[id][isyeriFiyatlar][3]));
	        strcat(str,string);
	    }
	    case 6:
	    {
	        format(string,sizeof(string),"Bira\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][0],FormatNumber(Isyeri[id][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string),"Viski\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][1],FormatNumber(Isyeri[id][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string),"Tekila\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][2],FormatNumber(Isyeri[id][isyeriFiyatlar][2]));
	        strcat(str,string);
	        format(string,sizeof(string),"Þarap\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][3],FormatNumber(Isyeri[id][isyeriFiyatlar][3]));
	        strcat(str,string);
	        format(string,sizeof(string),"Votka\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][4],FormatNumber(Isyeri[id][isyeriFiyatlar][4]));
	        strcat(str,string);
	        format(string,sizeof(string),"Þampanya\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][5],FormatNumber(Isyeri[id][isyeriFiyatlar][5]));
	        strcat(str,string);
	    }
	}
	Dialog_Show(playerid,UrunFiyat,DIALOG_STYLE_TABLIST_HEADERS,"{2ECC71}Ýþyeri - Ürün Fiyat Deðiþtir",str,"Seç","Geri");
	return 1;
}
Dialog:UrunFiyat(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::isyeri(playerid);
	if(response)
	{
	     new id = GetPVarInt(playerid,"IsyeriID");
 		 SetPVarInt(playerid,"SectigiUrun",listitem);
 		 Dialog_Show(playerid,UrunFiyatDegistirme,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Ürün Fiyat Deðiþtir","{FFFFFF}Lütfen bu ürün için yeni bir fiyat girin;\n{FFFFFF}Þu anki fiyat: %s","Deðiþtir","Geri",FormatNumber(Isyeri[id][isyeriFiyatlar][listitem]));
	}
	return 1;
}
stock Isyeri_UrunAl(playerid,id)
{
	if(id == -1 || !Isyeri[id][isyeriExists]) return 0;

	new str[1000],string[550];
	strcat(str,"Ürün\tKalan\tFiyat\n");
	switch(Isyeri[id][isyeriTip])
	{
	    case 1:
	    {
	        format(string,sizeof(string),"Zar\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][0],FormatNumber(Isyeri[id][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string),"Sigara\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][1],FormatNumber(Isyeri[id][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string),"Ip\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][2],FormatNumber(Isyeri[id][isyeriFiyatlar][2]));
	        strcat(str,string);
	        format(string,sizeof(string),"Göz Baðý\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][3],FormatNumber(Isyeri[id][isyeriFiyatlar][3]));
	        strcat(str,string);
	        format(string,sizeof(string),"Sprey\t}%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][4],FormatNumber(Isyeri[id][isyeriFiyatlar][4]));
	        strcat(str,string);
	        format(string,sizeof(string),"Gazoz\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][5],FormatNumber(Isyeri[id][isyeriFiyatlar][5]));
	        strcat(str,string);
	        format(string,sizeof(string),"Beyzbol Sopasý\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][6],FormatNumber(Isyeri[id][isyeriFiyatlar][6]));
	        strcat(str,string);
	        format(string,sizeof(string),"Maske\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][7],FormatNumber(Isyeri[id][isyeriFiyatlar][7]));
	        strcat(str,string);
	        format(string,sizeof(string),"Benzin Kutusu\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][8],FormatNumber(Isyeri[id][isyeriFiyatlar][8]));
	        strcat(str,string);
	        format(string,sizeof(string),"Barbekü\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][9],FormatNumber(Isyeri[id][isyeriFiyatlar][9]));
	        strcat(str,string);
	        format(string,sizeof(string),"Köfte\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][10],FormatNumber(Isyeri[id][isyeriFiyatlar][10]));
	        strcat(str,string);
	        format(string,sizeof(string),"Tavuk Eti\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][11],FormatNumber(Isyeri[id][isyeriFiyatlar][11]));
	        strcat(str,string);
	        format(string,sizeof(string),"Dana Eti\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][12],FormatNumber(Isyeri[id][isyeriFiyatlar][12]));
	        strcat(str,string);
	        format(string,sizeof(string),"Tamir kiti\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][13],FormatNumber(Isyeri[id][isyeriFiyatlar][13]));
	        strcat(str,string);
	        format(string,sizeof(string),"Portatif Çadýr\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][14],FormatNumber(Isyeri[id][isyeriFiyatlar][14]));
	        strcat(str,string);
	        format(string,sizeof(string),"Kamp Ateþi\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][15],FormatNumber(Isyeri[id][isyeriFiyatlar][15]));
	        strcat(str,string);
	        format(string,sizeof(string),"Yan Keski\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][15],FormatNumber(Isyeri[id][isyeriFiyatlar][15]));
	        strcat(str,string);
	    }
	    case 2:
	    {
	        format(string,sizeof(string),"Normal Kiyafetler\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][0],FormatNumber(Isyeri[id][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string),"Özel Kiyafetler\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][1],FormatNumber(Isyeri[id][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string),"Aksesuarlar\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][2],FormatNumber(Isyeri[id][isyeriFiyatlar][2]));
	        strcat(str,string);
	    }
	    case 3:
	    {
	        format(string,sizeof(string),"Su\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][0],FormatNumber(Isyeri[id][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string),"Kola\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][1],FormatNumber(Isyeri[id][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string),"Salata\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][2],FormatNumber(Isyeri[id][isyeriFiyatlar][2]));
	        strcat(str,string);
	        format(string,sizeof(string),"Tavuk\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][3],FormatNumber(Isyeri[id][isyeriFiyatlar][3]));
	        strcat(str,string);
	        format(string,sizeof(string),"Patates Kýzartmasý\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][4],FormatNumber(Isyeri[id][isyeriFiyatlar][4]));
	        strcat(str,string);
	        format(string,sizeof(string),"Hamburger\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][5],FormatNumber(Isyeri[id][isyeriFiyatlar][5]));
	        strcat(str,string);
	    }
	    case 5:
	    {
	        format(string,sizeof(string),"Telefon\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][0],FormatNumber(Isyeri[id][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string),"Portatif Radyo\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][1],FormatNumber(Isyeri[id][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string),"Boombox\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][2],FormatNumber(Isyeri[id][isyeriFiyatlar][2]));
	        strcat(str,string);
	        format(string,sizeof(string),"Kamera\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][3],FormatNumber(Isyeri[id][isyeriFiyatlar][3]));
	        strcat(str,string);
	    }
	    case 6:
	    {
	        format(string,sizeof(string),"Bira\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][0],FormatNumber(Isyeri[id][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string),"Viski\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][1],FormatNumber(Isyeri[id][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string),"Tekila\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][2],FormatNumber(Isyeri[id][isyeriFiyatlar][2]));
	        strcat(str,string);
	        format(string,sizeof(string),"Þarap\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][3],FormatNumber(Isyeri[id][isyeriFiyatlar][3]));
	        strcat(str,string);
	        format(string,sizeof(string),"Votka\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][4],FormatNumber(Isyeri[id][isyeriFiyatlar][4]));
	        strcat(str,string);
	        format(string,sizeof(string),"Þampanya\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][5],FormatNumber(Isyeri[id][isyeriFiyatlar][5]));
	        strcat(str,string);
	    }
	}
	Dialog_Show(playerid,UrunlerDialog,DIALOG_STYLE_TABLIST_HEADERS,"{2ECC71}Ýþyeri - Ürün Al",str,"Seç","Geri");
	return 1;
}
Dialog:UrunlerDialog(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::isyeri(playerid);
	if(response)
	{
		    new id = GetPVarInt(playerid,"IsyeriID");
		    SetPVarInt(playerid,"SectigiUrun",listitem);
		    Dialog_Show(playerid,UrunAl,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Ürün Al","{FFFFFF}Seçtiðiniz üründen kaç adet almak istiyorsunuz? {2ECC71}(1 adet = %s)","Al","Geri",FormatNumber(GetUrunFiyat(id,listitem)));
	}
	return 1;
}
Dialog:UrunFiyatDegistirme(playerid, response, listitem, inputtext[])
{
    if(!response) return Isyeri_UrunFiyatDegistir(playerid,GetPVarInt(playerid,"IsyeriID"));
    if(response)
    {
        new id = GetPVarInt(playerid,"IsyeriID");
	    new urun = GetPVarInt(playerid,"SectigiUrun");
	    if(isnull(inputtext)) return Dialog_Show(playerid,UrunFiyatDegistirme,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Ürün Fiyat Deðiþtir","{FFFFFF}Lütfen bu ürün için yeni bir fiyat girin;\n{FFFFFF}Þu anki fiyat: %s","Deðiþtir","Geri",FormatNumber(Isyeri[id][isyeriFiyatlar][urun]));
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid,UrunFiyatDegistirme,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Ürün Fiyat Deðiþtir","{FFFFFF}Lütfen bu ürün için yeni bir fiyat girin;\n{FFFFFF}Þu anki fiyat: %s","Deðiþtir","Geri",FormatNumber(Isyeri[id][isyeriFiyatlar][urun]));
	    if(strval(inputtext) < 1 || strval(inputtext) > 100000)
	    {
	        HataMesajGonder(playerid,"En az $1, en fazla $100,000 girebilirsiniz.");
	        return Dialog_Show(playerid,UrunFiyatDegistirme,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Ürün Fiyat Deðiþtir","{FFFFFF}Lütfen bu ürün için yeni bir fiyat girin;\n{FFFFFF}Þu anki fiyat: %s","Deðiþtir","Geri",FormatNumber(Isyeri[id][isyeriFiyatlar][urun]));
	    }
	    Isyeri[id][isyeriFiyatlar][urun] = strval(inputtext);
	    Isyeri_Kaydet(id);

	    BilgiMesajGonder(playerid,"Ürün fiyatý {2ECC71}%s {FFFFFF}olarak deðiþtirildi.",FormatNumber(strval(inputtext)));
	    Isyeri_UrunFiyatDegistir(playerid,id);
    }
	return 1;
}
Dialog:UrunAl(playerid, response, listitem, inputtext[])
{
	if(!response) return Isyeri_UrunAl(playerid,GetPVarInt(playerid,"IsyeriID"));
	if(response)
	{
	    new id = GetPVarInt(playerid,"IsyeriID");
	    new urun = GetPVarInt(playerid,"SectigiUrun");
	    if(isnull(inputtext)) return Dialog_Show(playerid,UrunAl,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Ürün Al","{FFFFFF}Seçtiðiniz üründen kaç adet almak istiyorsunuz? {2ECC71}(1 adet = %s)","Al","Geri",FormatNumber(GetUrunFiyat(id,urun)));
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid,UrunAl,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Ürün Al","{FFFFFF}Seçtiðiniz üründen kaç adet almak istiyorsunuz? {2ECC71}(1 adet = %s)","Al","Geri",FormatNumber(GetUrunFiyat(id,urun)));
	    if(strval(inputtext) < 1 || strval(inputtext)+Isyeri[id][isyeriUrunSayisi][urun] > 1000)
	    {
	        HataMesajGonder(playerid,"Adet 1'den küçük, veya 1000'den fazla olmamalý.");
	        return Dialog_Show(playerid,UrunAl,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Ürün Al","{FFFFFF}Seçtiðiniz üründen kaç adet almak istiyorsunuz? {2ECC71}(1 adet = %s)","Al","Geri",FormatNumber(GetUrunFiyat(id,urun)));
	    }
	    if(Isyeri[id][isyeriKasa] < strval(inputtext)*GetUrunFiyat(id,urun))
	    {
	        HataMesajGonder(playerid,"Ýþyeri kasasýnda yeterli para yok.");
	        return Dialog_Show(playerid,UrunAl,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Ürün Al","{FFFFFF}Seçtiðiniz üründen kaç adet almak istiyorsunuz? {2ECC71}(1 adet = %s)","Al","Geri",FormatNumber(GetUrunFiyat(id,urun)));
	    }
	    Isyeri[id][isyeriUrunSayisi][urun] += strval(inputtext);
	    Isyeri[id][isyeriKasa] -= strval(inputtext)*GetUrunFiyat(id,urun);
	    BilgiMesajGonder(playerid,"%d adet ürün {2ECC71}%s {FFFFFF}karþýlýðýnda satýn alýndý.",strval(inputtext),FormatNumber(strval(inputtext)*GetUrunFiyat(id,urun)));
	    Isyeri_UrunAl(playerid,id);
	}
	return 1;
}
stock GetUrunFiyat(id,urunid)
{
	return Isyeri[id][isyeriFiyatlar][urunid]/2;
}
Dialog:IsyeriMuzik(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::isyeri(playerid);
	if(response)
	{
	    new id = GetPVarInt(playerid, "IsyeriID");
	    if (!strcmp(inputtext, "yok", true))
	    {
	        Isyeri[id][isyeriMuzik][0] = '\0';
	        Isyeri_Kaydet(id);
	        foreach (new i : Player)
			{
				if (PlayerData[i][pIsyeri] == Isyeri[id][isyeriID])
				{
					StopAudioStreamForPlayer(i);
				}
			}
			BilgiMesajGonder(playerid,"Ýþyeri müziði kaldýrýldý.");
	    }
	    else
	    {
	        format(Isyeri[id][isyeriMuzik], 256, inputtext);
            foreach (new i : Player)
			{
				if (PlayerData[i][pIsyeri] == Isyeri[id][isyeriID])
				{
					PlayAudioStreamForPlayer(i, inputtext);
				}
			}
			Isyeri_Kaydet(id);
	    }
	    callcmd::isyeri(playerid);
	}
	return 1;
}
Dialog:IsyeriMesaj(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::isyeri(playerid);
	if(response)
	{
	    new id = GetPVarInt(playerid,"IsyeriID");
	    if(!strcmp(inputtext, "yok", true))
		{
		    Isyeri[id][isyeriMesaj][0] = '\0';
			Isyeri_Kaydet(id);
			BilgiMesajGonder(playerid, "Ýþyeri mesajý kaldýrýldý.");
		}
		else
		{
			format(Isyeri[id][isyeriMesaj], 100, inputtext);

			Isyeri_Kaydet(id);
		}
        callcmd::isyeri(playerid);

	}
	return 1;
}
Dialog:IsyeriSatilik(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::isyeri(playerid);
	if(response)
	{
	    new id = GetPVarInt(playerid,"IsyeriID");
	    if(listitem == 0)
	    {
	        Dialog_Show(playerid,IsyeriSatiligaCikar,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Satýlýða Çýkar","Ýþyerinizi kaç dolara satýlýða çýkarmak istiyorsunuz?:","Tamam","Geri");
	    }
	    if(listitem == 1)
	    {
	        if(Isyeri[id][isyeriSatilik] == 1) return HataMesajGonder(playerid,"Ýþyeriniz satýlýk.");
	        new fiyat = floatround(Isyeri[id][isyeriKendiFiyati]/2);
	        Dialog_Show(playerid,IsyeriSistemeSat,DIALOG_STYLE_MSGBOX,"{2ECC71}Ýþyeri - Sisteme Sat","Ýþyerinizi %s karþýlýðýnda sisteme satmak istediðinize emin misiniz?\n{FF0000}UYARI: Kasadaki paralarý almayý unutmayýn!","Sat","Geri",FormatNumber(fiyat));
	    }
	    if(listitem == 2)
	    {
	        if(Isyeri[id][isyeriSatilik] == 0)
	        {
	            Dialog_Show(playerid,IsyeriSatilik,DIALOG_STYLE_LIST,"{2ECC71}Ýþyeri - Satýlýða Çýkar","{2ECC71}Satýlýða Çýkar\n{2ECC71}Sisteme Sat {FF0000}(%s)\n{2ECC71}Ýþyerini Satmaktan Vazgeç","Seç","Geri",FormatNumber(Isyeri[id][isyeriKendiFiyati]/2));
				return HataMesajGonder(playerid,"Ýþyeriniz satýlýk deðil.");
			}
			Isyeri[id][isyeriSatilik] = 0;
			Isyeri[id][isyeriFiyat] = Isyeri[id][isyeriKendiFiyati];
			Isyeri_Yenile(id);
			Isyeri_Kaydet(id);
			callcmd::isyeri(playerid);
	    }
	}
	return 1;
}
Dialog:IsyeriSatiligaCikar(playerid, response, listitem, inputtext[])
{
    new id = GetPVarInt(playerid,"IsyeriID");
	if(!response) return Dialog_Show(playerid,IsyeriSatilik,DIALOG_STYLE_LIST,"{2ECC71}Ýþyeri - Satýlýða Çýkar","Satýlýða Çýkar\nSisteme Sat {FF0000}(%s)\nÝþyerini Satmaktan Vazgeç","Seç","Geri",FormatNumber(Isyeri[id][isyeriKendiFiyati]/2));
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid,IsyeriSatiligaCikar,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Satýlýða Çýkar","Ýþyerinizi kaç dolara satýlýða çýkarmak istiyorsunuz?:","Tamam","Geri");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid,IsyeriSatiligaCikar,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Satýlýða Çýkar","Ýþyerinizi kaç dolara satýlýða çýkarmak istiyorsunuz?:","Tamam","Geri");
	    if(strval(inputtext) < 1)
	    {
	        HataMesajGonder(playerid,"Geçersiz fiyat girdiniz.");
	        return Dialog_Show(playerid,IsyeriSatiligaCikar,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Satýlýða Çýkar","Ýþyerinizi kaç dolara satýlýða çýkarmak istiyorsunuz?:","Tamam","Geri");
		}
		Isyeri[id][isyeriSatilik] = 1;
		Isyeri[id][isyeriFiyat] = strval(inputtext);
		Isyeri_Yenile(id);
		Isyeri_Kaydet(id);
		callcmd::isyeri(playerid);
	}
	return 1;
}
Dialog:IsyeriSistemeSat(playerid, response, listitem, inputtext[])
{
	new id = GetPVarInt(playerid,"IsyeriID");
	if(!response) return Dialog_Show(playerid,IsyeriSatilik,DIALOG_STYLE_LIST,"{2ECC71}Ýþyeri - Satýlýða Çýkar","Satýlýða Çýkar\nSisteme Sat {FF0000}(%s)\nÝþyerini Satmaktan Vazgeç","Seç","Geri",FormatNumber(Isyeri[id][isyeriKendiFiyati]/2));
	if(response)
	{
	    Isyeri[id][isyeriSahip] = -1;
	    format(Isyeri[id][isyeriName],32,"Adsýz Ýþyeri");
	    format(Isyeri[id][isyeriMuzik],256,"");
	    Isyeri[id][isyeriSatilik] = 0;
	    Isyeri[id][isyeriKilit] = 0;
	    Isyeri[id][isyeriKasa] = 0;
	    ParaVer(playerid,Isyeri[id][isyeriKendiFiyati]/2);
	    BilgiMesajGonder(playerid,"Ýþyeriniz {2ECC71}%s {FFFFFF}miktar para karþýlýðýnda satýldý.",FormatNumber(Isyeri[id][isyeriKendiFiyati]/2));
	    Isyeri[id][isyeriFiyat] = Isyeri[id][isyeriKendiFiyati];
	    Isyeri_Yenile(id);
	    Isyeri_Kaydet(id);
	}
	return 1;
}
Dialog:IsyeriKasa(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::isyeri(playerid);
	if(response)
	{
	    if(listitem == 0)
	    {
	        new id = GetPVarInt(playerid,"IsyeriID");
			Dialog_Show(playerid,IsyeriKasaParaAl,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Para Al","{FFFFFF}Lütfen iþyeri kasasýndan almak istediðiniz para miktarýný girin;\n{FFFFFF}Kasadaki para miktarý: {2ECC71}%s ","Al","Geri",FormatNumber(Isyeri[id][isyeriKasa]));
		}
		if(listitem == 1)
		{
		    Dialog_Show(playerid,IsyeriKasaParaKoy,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Para Koy","{FFFFFF}Lütfen iþyeri kasasýna koymak istediðiniz para miktarýný girin;","Koy","Geri");
		}
	}
	return 1;
}
Dialog:IsyeriKasaParaAl(playerid, response, listitem, inputtext[])
{
    if(!response) return Dialog_Show(playerid,IsyeriKasa,DIALOG_STYLE_LIST,"{2ECC71}Ýþyeri - Kasa","{2ECC71}Para Al\n{2ECC71}Para Koy","Seç","Geri");
    if(response)
    {
        new id = GetPVarInt(playerid,"IsyeriID");
        if(isnull(inputtext)) return Dialog_Show(playerid,IsyeriKasaParaAl,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Para Al","{FFFFFF}Lütfen iþyeri kasasýndan almak istediðiniz para miktarýný girin;\n{FFFFFF}Kasadaki para miktarý: {2ECC71}%s ","Al","Geri",FormatNumber(Isyeri[id][isyeriKasa]));
        if(!IsNumeric(inputtext)) return Dialog_Show(playerid,IsyeriKasaParaAl,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Para Al","{FFFFFF}Lütfen iþyeri kasasýndan almak istediðiniz para miktarýný girin;\n{FFFFFF}Kasadaki para miktarý: {2ECC71}%s ","Al","Geri",FormatNumber(Isyeri[id][isyeriKasa]));
        if(strval(inputtext) < 1)
        {
            HataMesajGonder(playerid,"Geçersiz miktar!");
            return Dialog_Show(playerid,IsyeriKasaParaAl,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Para Al","{FFFFFF}Lütfen iþyeri kasasýndan almak istediðiniz para miktarýný girin;\n{FFFFFF}Kasadaki para miktarý: {2ECC71}%s ","Al","Geri",FormatNumber(Isyeri[id][isyeriKasa]));
        }
        if(strval(inputtext) > Isyeri[id][isyeriKasa])
        {
            HataMesajGonder(playerid,"Ýþyeri kasasýnda yeterli para yok.");
            return Dialog_Show(playerid,IsyeriKasaParaAl,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Para Al","{FFFFFF}Lütfen iþyeri kasasýndan almak istediðiniz para miktarýný girin;\n{FFFFFF}Kasadaki para miktarý: {2ECC71}%s ","Al","Geri",FormatNumber(Isyeri[id][isyeriKasa]));
        }
        Isyeri[id][isyeriKasa] -= strval(inputtext);
        ParaVer(playerid,strval(inputtext));
        Isyeri_Kaydet(id);
        BilgiMesajGonder(playerid,"{FFFFFF}Ýþyeri kasasýndan {2ECC71}%s {FFFFFF}miktar para aldýnýz.",FormatNumber(strval(inputtext)));
        Dialog_Show(playerid,IsyeriKasa,DIALOG_STYLE_LIST,"{2ECC71}Ýþyeri - Kasa","{2ECC71}Para Al\n{2ECC71}Para Koy","Seç","Geri");
    }
	return 1;
}
Dialog:IsyeriKasaParaKoy(playerid, response, listitem, inputtext[])
{
    if(!response) return Dialog_Show(playerid,IsyeriKasa,DIALOG_STYLE_LIST,"{2ECC71}Ýþyeri - Kasa","{2ECC71}Para Al\n{2ECC71}Para Koy","Seç","Geri");
    if(response)
    {
        new id = GetPVarInt(playerid,"IsyeriID");
        if(isnull(inputtext)) return Dialog_Show(playerid,IsyeriKasaParaKoy,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Para Koy","{FFFFFF}Lütfen iþyeri kasasýna koymak istediðiniz para miktarýný girin;","Koy","Geri");
        if(!IsNumeric(inputtext)) return Dialog_Show(playerid,IsyeriKasaParaKoy,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Para Koy","{FFFFFF}Lütfen iþyeri kasasýna koymak istediðiniz para miktarýný girin;","Koy","Geri");
        if(strval(inputtext) < 1)
        {
            HataMesajGonder(playerid,"Geçersiz miktar!");
            return Dialog_Show(playerid,IsyeriKasaParaKoy,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Para Koy","{FFFFFF}Lütfen iþyeri kasasýna koymak istediðiniz para miktarýný girin;","Koy","Geri");
		}
		if(strval(inputtext) > PlayerData[playerid][pCash])
		{
		    HataMesajGonder(playerid,"Üzerinizde yeterli para yok.");
		    return Dialog_Show(playerid,IsyeriKasaParaKoy,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Para Koy","{FFFFFF}Lütfen iþyeri kasasýna koymak istediðiniz para miktarýný girin;","Koy","Geri");
		}
		Isyeri[id][isyeriKasa] += strval(inputtext);
		ParaVer(playerid,-strval(inputtext));
        Isyeri_Kaydet(id);
        BilgiMesajGonder(playerid,"{FFFFFF}Ýþyeri kasasýna {2ECC71}%s {FFFFFF}miktar para koydunuz.",FormatNumber(strval(inputtext)));
        Dialog_Show(playerid,IsyeriKasa,DIALOG_STYLE_LIST,"{2ECC71}Ýþyeri - Kasa","{2ECC71}Para Al\n{2ECC71}Para Koy","Seç","Geri");
	}
	return 1;
}
Dialog:IsyeriUcretDuzenleme(playerid, response, listitem, inputtext[])
{
    if(!response) return callcmd::isyeri(playerid);
    if(response)
    {
        new id = GetPVarInt(playerid, "IsyeriID");
        if(isnull(inputtext))
	    {
	        HataMesajGonder(playerid,"Ýþyeri ücreti boþ býrakýlamaz. Eðer giriþ ücreti almasýný istemiyorsan '0' yaz.");
	        return Dialog_Show(playerid,IsyeriUcretDuzenleme,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Giriþ Ücreti","{FFFFFF}Lütfen iþyeriniz için yeni bir giriþ ücreti belirleyin;\n{FFFFFF}Þu anki ücret: {FF9900}%s","Deðiþtir","Geri",FormatNumber(Isyeri[id][isyeriGirisUcret]));
	    }
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid,IsyeriUcretDuzenleme,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Giriþ Ücreti","{FFFFFF}Lütfen iþyeriniz için yeni bir giriþ ücreti belirleyin;\n{FFFFFF}Þu anki ücret: {FF9900}%s","Deðiþtir","Geri",FormatNumber(Isyeri[id][isyeriGirisUcret]));
	    if(strval(inputtext) < 0 || strval(inputtext) > 500)
	    {
	        HataMesajGonder(playerid,"Ýþyeri giriþ ücreti 0'dan düþük, 500'den büyük olamaz.");
	        return Dialog_Show(playerid,IsyeriUcretDuzenleme,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Giriþ Ücreti","{FFFFFF}Lütfen iþyeriniz için yeni bir giriþ ücreti belirleyin;\n{FFFFFF}Þu anki ücret: {FF9900}%s","Deðiþtir","Geri",FormatNumber(Isyeri[id][isyeriGirisUcret]));
	    }
	    Isyeri[id][isyeriGirisUcret] = strval(inputtext);
	    callcmd::isyeri(playerid);
	    Isyeri_Yenile(id);
	    Isyeri_Kaydet(id);
    }
	return 1;
}
Dialog:IsyeriAdDuzenleme(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::isyeri(playerid);
	if(response)
	{
	    new id = GetPVarInt(playerid, "IsyeriID");
	    if(isnull(inputtext))
	    {
	        HataMesajGonder(playerid,"Ýþyeri adý boþ býrakýlamaz!");
	        return Dialog_Show(playerid,IsyeriAdDuzenleme,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Ad Düzenleme","Lütfen bu iþyeri için yeni bir ad girin;\nÞu anki ad: %s","Deðiþtir","Geri",Isyeri[id][isyeriName]);
	    }
	    if(strlen(inputtext) > 32)
	    {
	        HataMesajGonder(playerid,"Ýþyeri adý 32 karakterden uzun olamaz!");
	        return Dialog_Show(playerid,IsyeriAdDuzenleme,DIALOG_STYLE_INPUT,"{2ECC71}Ýþyeri - Ad Düzenleme","Lütfen bu iþyeri için yeni bir ad girin;\nÞu anki ad: %s","Deðiþtir","Geri",Isyeri[id][isyeriName]);
	    }
	    format(Isyeri[id][isyeriName], 32, inputtext);
	    Isyeri_Yenile(id);
	    Isyeri_Kaydet(id);
	    callcmd::isyeri(playerid);
	}
	return 1;
}
Business_Inside(playerid)
{
	if (PlayerData[playerid][pIsyeri] != -1)
	{
	    for (new i = 0; i != MAX_ISYERI; i ++) if (Isyeri[i][isyeriExists] && Isyeri[i][isyeriID] == PlayerData[playerid][pIsyeri] && GetPlayerInterior(playerid) == Isyeri[i][isyeriInterior] && GetPlayerVirtualWorld(playerid) > 0) {
	        return i;
		}
	}
	return -1;
}
stock Isyeri_Olustur(playerid,tip,fiyat)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
		Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
	    for (new i = 0; i != MAX_ISYERI; i ++)
	    {
			if(!Isyeri[i][isyeriExists])
			{
			    Isyeri[i][isyeriExists] = true;
			    Isyeri[i][isyeriSahip] = -1;
			    Isyeri[i][isyeriFiyat] = fiyat;
			    Isyeri[i][isyeriKendiFiyati] = fiyat;
			    Isyeri[i][isyeriTip] = tip;
			    Isyeri[i][isyeriGirisUcret] = 0;
			    format(Isyeri[i][isyeriName],32,"Adsýz Ýþyeri");
		     	format(Isyeri[i][isyeriMuzik],256,"");
		     	Isyeri[i][isyeriPos][0] = x;
		     	Isyeri[i][isyeriPos][1] = y;
		     	Isyeri[i][isyeriPos][2] = z;
		     	Isyeri[i][isyeriPos][3] = angle;
		     	Isyeri[i][isyeriSpawn][0] = x;
		     	Isyeri[i][isyeriSpawn][1] = y;
		     	Isyeri[i][isyeriSpawn][2] = z;
		     	Isyeri[i][isyeriSpawn][3] = angle;
		     	Isyeri[i][isyeriSatilik] = 0;
		     	Isyeri[i][isyeriVergiSure] = 0;
		     	switch(tip)
		     	{
		     		case 1: // Market
		     		{
		     		    Isyeri[i][isyeriInt][0] = -27.3074;
	                	Isyeri[i][isyeriInt][1] = -30.8741;
	                	Isyeri[i][isyeriInt][2] = 1003.5573;
	                	Isyeri[i][isyeriInt][3] = 0.0000;
						Isyeri[i][isyeriInterior] = 4;

						Isyeri[i][isyeriFiyatlar][0] = 5; // Zar
						Isyeri[i][isyeriFiyatlar][1] = 10; // Sigara
						Isyeri[i][isyeriFiyatlar][2] = 50; // Ip
						Isyeri[i][isyeriFiyatlar][3] = 50; // Goz bagi
						Isyeri[i][isyeriFiyatlar][4] = 60; // Sprey
						Isyeri[i][isyeriFiyatlar][5] = 5; // Gazoz
						Isyeri[i][isyeriFiyatlar][6] = 500; // Beyzbol Sopasi
						Isyeri[i][isyeriFiyatlar][7] = 500; // Maske
						Isyeri[i][isyeriFiyatlar][8] = 200; // Benzin Kutusu
						Isyeri[i][isyeriFiyatlar][9] = 1000; // Barbeku
						Isyeri[i][isyeriFiyatlar][10] = 20; // Köfte
						Isyeri[i][isyeriFiyatlar][11] = 25; // Tavuk Eti
						Isyeri[i][isyeriFiyatlar][12] = 30; // Dana Eti
						Isyeri[i][isyeriFiyatlar][13] = 200; // Tamir kiti
						Isyeri[i][isyeriFiyatlar][14] = 2000; // Çadýr
						Isyeri[i][isyeriFiyatlar][15] = 500; // Kamp atesi
						Isyeri[i][isyeriFiyatlar][16] = 1000; // Yan keski

						Isyeri[i][isyeriUrunSayisi][0] = 5;
						Isyeri[i][isyeriUrunSayisi][1] = 5;
						Isyeri[i][isyeriUrunSayisi][2] = 5;
						Isyeri[i][isyeriUrunSayisi][3] = 5;
						Isyeri[i][isyeriUrunSayisi][4] = 5;
						Isyeri[i][isyeriUrunSayisi][5] = 5;
						Isyeri[i][isyeriUrunSayisi][6] = 5;
						Isyeri[i][isyeriUrunSayisi][7] = 5;
						Isyeri[i][isyeriUrunSayisi][8] = 5;
						Isyeri[i][isyeriUrunSayisi][9] = 5;
						Isyeri[i][isyeriUrunSayisi][10] = 5;
						Isyeri[i][isyeriUrunSayisi][11] = 5;
						Isyeri[i][isyeriUrunSayisi][12] = 5;
						Isyeri[i][isyeriUrunSayisi][13] = 5;
						Isyeri[i][isyeriUrunSayisi][14] = 5;
						Isyeri[i][isyeriUrunSayisi][15] = 5;
						Isyeri[i][isyeriUrunSayisi][16] = 5;
		     		}
		     		case 2: // Kiyafet Maðazasý
		     		{
		     		    Isyeri[i][isyeriInt][0] = 161.4801;
	                	Isyeri[i][isyeriInt][1] = -96.5368;
	                	Isyeri[i][isyeriInt][2] = 1001.8047;
	                	Isyeri[i][isyeriInt][3] = 0.0000;
						Isyeri[i][isyeriInterior] = 18;

						Isyeri[i][isyeriFiyatlar][0] = 100;
						Isyeri[i][isyeriFiyatlar][1] = 250;
						Isyeri[i][isyeriFiyatlar][2] = 50;

						Isyeri[i][isyeriUrunSayisi][0] = 5;
						Isyeri[i][isyeriUrunSayisi][1] = 5;
						Isyeri[i][isyeriUrunSayisi][2] = 5;
		     		}
		     		case 3: // Fast Food
		     		{
		     		    Isyeri[i][isyeriInt][0] = 363.3402; //
	                	Isyeri[i][isyeriInt][1] = -74.6679;
	                	Isyeri[i][isyeriInt][2] = 1001.5078;
	                	Isyeri[i][isyeriInt][3] = 315.0000;
						Isyeri[i][isyeriInterior] = 10;
						Isyeri[i][isyeriFiyatlar][0] = 3; // Su
						Isyeri[i][isyeriFiyatlar][1] = 8; // Kola
						Isyeri[i][isyeriFiyatlar][2] = 10; // Salata
						Isyeri[i][isyeriFiyatlar][3] = 12; // Tavuk
						Isyeri[i][isyeriFiyatlar][4] = 15; // Patates
						Isyeri[i][isyeriFiyatlar][5] = 20; // Hamburger

						Isyeri[i][isyeriUrunSayisi][0] = 5;
						Isyeri[i][isyeriUrunSayisi][1] = 5;
						Isyeri[i][isyeriUrunSayisi][2] = 5;
						Isyeri[i][isyeriUrunSayisi][3] = 5;
						Isyeri[i][isyeriUrunSayisi][4] = 5;
						Isyeri[i][isyeriUrunSayisi][5] = 5;
		     		}
		     		case 4: // Galeri
		     		{
		     		    Isyeri[i][isyeriInt][0] = 1494.5612;
		            	Isyeri[i][isyeriInt][1] = 1304.2061;
		            	Isyeri[i][isyeriInt][2] = 1093.2891;
		            	Isyeri[i][isyeriInt][3] = 0.0000;
						Isyeri[i][isyeriInterior] = 3;
		     		}
		     		case 5: // Elektronik
		     		{
		     		    Isyeri[i][isyeriInt][0] = 2310.3713;
	   					Isyeri[i][isyeriInt][1] = 997.7480;
				   		Isyeri[i][isyeriInt][2] = -53.9590;
	      				Isyeri[i][isyeriInt][3] = 271.6157;
						Isyeri[i][isyeriInterior] = 0;

						Isyeri[i][isyeriFiyatlar][0] = 500; // Telefon
						Isyeri[i][isyeriFiyatlar][1] = 200; // Portatif Radyo (TELSIZ)
						Isyeri[i][isyeriFiyatlar][2] = 1000; //  Boombox
						Isyeri[i][isyeriFiyatlar][3] = 50; // Kamera

						Isyeri[i][isyeriUrunSayisi][0] = 5;
						Isyeri[i][isyeriUrunSayisi][1] = 5;
						Isyeri[i][isyeriUrunSayisi][2] = 5;
						Isyeri[i][isyeriUrunSayisi][3] = 5;
		     		}
		     		case 6: // Bar/Pub
		     		{
		     		    Isyeri[i][isyeriInt][0] = 493.3361;
		   				Isyeri[i][isyeriInt][1] = -24.2685;
					   	Isyeri[i][isyeriInt][2] = 1000.6797;
		      			Isyeri[i][isyeriInt][3] = 3.3758;
						Isyeri[i][isyeriInterior] = 17;

						Isyeri[i][isyeriFiyatlar][0] = 10; // Bira
						Isyeri[i][isyeriFiyatlar][1] = 50; // Viski
						Isyeri[i][isyeriFiyatlar][2] = 15; // Tekila
						Isyeri[i][isyeriFiyatlar][3] = 30; // Þarap
						Isyeri[i][isyeriFiyatlar][4] = 50; // Votka
						Isyeri[i][isyeriFiyatlar][5] = 100; // Þampanya

						Isyeri[i][isyeriUrunSayisi][0] = 5;
						Isyeri[i][isyeriUrunSayisi][1] = 5;
						Isyeri[i][isyeriUrunSayisi][2] = 5;
						Isyeri[i][isyeriUrunSayisi][3] = 5;
						Isyeri[i][isyeriUrunSayisi][4] = 5;
						Isyeri[i][isyeriUrunSayisi][5] = 5;
		     		}
		     		case 7:
		     		{
			     		Isyeri[i][isyeriInt][0] = 1133.1000;
	  					Isyeri[i][isyeriInt][1] = -15.8102;
				   		Isyeri[i][isyeriInt][2] = 1000.6797;
	     				Isyeri[i][isyeriInt][3] = 3.0235;
	     				Isyeri[i][isyeriInterior] = 12;
		     		}
		 		}
		 		Isyeri[i][isyeriKilit] = 1;
   				Isyeri[i][isyeriKasa] = 0;
	     		Isyeri_Yenile(i);
	     		mysql_tquery(baglanti, "INSERT INTO `isyerleri` (`iSahip`) VALUES(-1)", "OnBusinessCreated", "d", i);
	     		return i;
			}
	    }
	}
	return -1;
}
forward OnBusinessCreated(bizid);
public OnBusinessCreated(bizid)
{
	if (bizid == -1 || !Isyeri[bizid][isyeriExists])
	    return 0;

	Isyeri[bizid][isyeriID] = cache_insert_id();
	Isyeri_Kaydet(bizid);

	return 1;
}
stock IsyerleriYukle()
{
	mysql_query(baglanti,"SELECT * FROM `isyerleri`");
	new rows;
	cache_get_row_count(rows);
	new str[124];
	for (new i = 0; i < rows; i ++) if (i < MAX_ISYERI)
	{
	    Isyeri[i][isyeriExists] = true;
	    cache_get_value_name_int(i,"ID",Isyeri[i][isyeriID]);
	    cache_get_value_name(i,"iIsim",Isyeri[i][isyeriName],32);
	    cache_get_value_name(i,"iMessage",Isyeri[i][isyeriMesaj],100);
	    cache_get_value_name_int(i,"iSahip",Isyeri[i][isyeriSahip]);
	    cache_get_value_name_int(i,"iTip",Isyeri[i][isyeriTip]);
	    cache_get_value_name_int(i,"iFiyat",Isyeri[i][isyeriFiyat]);
	    cache_get_value_name_int(i,"iKendiFiyat",Isyeri[i][isyeriKendiFiyati]);
	    cache_get_value_name_int(i,"iSatilik",Isyeri[i][isyeriSatilik]);
	    cache_get_value_name_int(i,"iVergi",Isyeri[i][isyeriVergi]);
	    cache_get_value_name_int(i,"iVergiSure",Isyeri[i][isyeriVergiSure]);
	    cache_get_value_name_int(i,"iGirisUcret",Isyeri[i][isyeriGirisUcret]);
	    cache_get_value_name(i,"iMuzik",Isyeri[i][isyeriMuzik],256);
	    cache_get_value_name_float(i,"iPosX",Isyeri[i][isyeriPos][0]);
	    cache_get_value_name_float(i,"iPosY",Isyeri[i][isyeriPos][1]);
	    cache_get_value_name_float(i,"iPosZ",Isyeri[i][isyeriPos][2]);
	    cache_get_value_name_float(i,"iPosA",Isyeri[i][isyeriPos][3]);
	    cache_get_value_name_float(i,"iIntX",Isyeri[i][isyeriInt][0]);
	    cache_get_value_name_float(i,"iIntY",Isyeri[i][isyeriInt][1]);
	    cache_get_value_name_float(i,"iIntZ",Isyeri[i][isyeriInt][2]);
	    cache_get_value_name_float(i,"iIntA",Isyeri[i][isyeriInt][3]);
	    cache_get_value_name_float(i,"iSpawnX",Isyeri[i][isyeriSpawn][0]);
	    cache_get_value_name_float(i,"iSpawnY",Isyeri[i][isyeriSpawn][1]);
	    cache_get_value_name_float(i,"iSpawnZ",Isyeri[i][isyeriSpawn][2]);
	    cache_get_value_name_float(i,"iSpawnA",Isyeri[i][isyeriSpawn][3]);
	    cache_get_value_name_int(i,"iInterior",Isyeri[i][isyeriInterior]);
	    cache_get_value_name_int(i,"iKilit",Isyeri[i][isyeriKilit]);
	    cache_get_value_name_int(i,"iKasa",Isyeri[i][isyeriKasa]);
	    for (new j = 0; j < 20; j ++)
		{
			format(str, 32, "iFiyat%d", j + 1);
			cache_get_value_name_int(i,str,Isyeri[i][isyeriFiyatlar][j]);

			format(str,32,"iUrun%d",j+1);
			cache_get_value_name_int(i,str,Isyeri[i][isyeriUrunSayisi][j]);
		}
	}
	for(new i; i<MAX_ISYERI; i++) if(Isyeri[i][isyeriExists])
	{
	    if (Isyeri[i][isyeriTip] == 4) {
			format(str, sizeof(str), "SELECT * FROM `galeriaraclar` WHERE `ID` = '%d'", Isyeri[i][isyeriID]);

			mysql_tquery(baglanti, str, "Business_LoadCars", "d", i);
		}
	    Isyeri_Yenile(i);
	}
}
forward Business_LoadCars(bizid);
public Business_LoadCars(bizid)
{
	new rows;

	cache_get_row_count(rows);

	for (new i = 0; i != rows; i ++) {
		cache_get_value_name_int(i,"vehID",DealershipCars[bizid][i][vehID]);
		cache_get_value_name_int(i,"vehModel",DealershipCars[bizid][i][vehModel]);
		cache_get_value_name_int(i,"vehPrice",DealershipCars[bizid][i][vehPrice]);
	}
	return 1;
}
stock Isyeri_Urun(playerid,bizid)
{
    if (bizid == -1 || !Isyeri[bizid][isyeriExists])
	    return 0;

	new str[850],string[400];
	strcat(str,"Ürün Adý\tFiyat\n");
	switch(Isyeri[bizid][isyeriTip])
	{
	    case 1:
	    {
	        format(string,sizeof(string),"Zar\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string),"Sigara\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string),"Ip\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][2]));
	        strcat(str,string);
	        format(string,sizeof(string),"Göz Baðý\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][3]));
	        strcat(str,string);
	        format(string,sizeof(string),"Sprey\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][4]));
	        strcat(str,string);
	        format(string,sizeof(string),"Gazoz\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][5]));
	        strcat(str,string);
	        format(string,sizeof(string),"Beyzbol Sopasý\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][6]));
	        strcat(str,string);
	        format(string,sizeof(string),"Maske\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][7]));
	        strcat(str,string);
	        format(string,sizeof(string),"Benzin Kutusu\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][8]));
	        strcat(str,string);
	        format(string,sizeof(string),"Barbekü\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][9]));
	        strcat(str,string);
	        format(string,sizeof(string),"Köfte\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][10]));
	        strcat(str,string);
	        format(string,sizeof(string),"Tavuk Eti\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][11]));
	        strcat(str,string);
	        format(string,sizeof(string),"Dana Eti\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][12]));
	        strcat(str,string);
            format(string,sizeof(string),"Tamir Kiti\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][13]));
	        strcat(str,string);
	        format(string,sizeof(string),"Portatif Çadýr\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][14]));
	        strcat(str,string);
	        format(string,sizeof(string),"Kamp Ateþi\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][15]));
	        strcat(str,string);
	        format(string,sizeof(string),"Yan Keski\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][16]));
	        strcat(str,string);
	    }
	    case 2:
	    {
	        format(string,sizeof(string),"Normal Kiyafetler\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string),"Özel Kiyafetler\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string),"Aksesuarlar\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][2]));
	        strcat(str,string);
	    }
	    case 3:
	    {
	        format(string,sizeof(string),"Su\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string),"Kola\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string),"Salata\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][2]));
	        strcat(str,string);
	        format(string,sizeof(string),"Tavuk\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][3]));
	        strcat(str,string);
	        format(string,sizeof(string),"Patates Kýzartmasý\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][4]));
	        strcat(str,string);
	        format(string,sizeof(string),"Hamburger\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][5]));
	        strcat(str,string);
	    }
	    case 5:
	    {
	        format(string,sizeof(string),"Telefon\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string),"Portatif Radyo\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string),"Boombox\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][2]));
	        strcat(str,string);
	        format(string,sizeof(string),"Kamera\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][3]));
	        strcat(str,string);
	    }
	    case 6:
	    {
	        format(string,sizeof(string),"Bira\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string),"Viski\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string),"Tekila\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][2]));
	        strcat(str,string);
	        format(string,sizeof(string),"Þarap\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][3]));
	        strcat(str,string);
	        format(string,sizeof(string),"Votka\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][4]));
	        strcat(str,string);
	        format(string,sizeof(string),"Þampanya\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][5]));
	        strcat(str,string);
	    }
	}
	Dialog_Show(playerid,IsyeriUrunAl,DIALOG_STYLE_TABLIST_HEADERS,"Ürün Satýn Al",str,"Satýn Al","{FF6347}Kapat");
	return 1;
}
stock Isyeri_AracMenu(playerid,bizid)
{
    new string[2056];
	string[0] = 0;
    for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
	{
		if (DealershipCars[bizid][i][vehModel]) {
			format(string, sizeof(string), "%s%d\t~g~%s\n", string, DealershipCars[bizid][i][vehModel], FormatNumber(DealershipCars[bizid][i][vehPrice]));
		}
	}
    ShowPlayerDialog(playerid, 59, DIALOG_STYLE_PREVMODEL, "Araclar", string, "Sec", "Iptal");
}
Dialog:IsyeriUrunAl(playerid, response, listitem, inputtext[])
{
    static
	    bizid = -1,
		price;

	if ((bizid = Business_Inside(playerid)) != -1 && response)
	{
	    price = Isyeri[bizid][isyeriFiyatlar][listitem];

	    if(PlayerData[playerid][pCash] < price) return HataMesajGonder(playerid,"Bu ürünü almak için yeterli paranýz yok.");
	    if(Isyeri[bizid][isyeriUrunSayisi][listitem] <= 0) return HataMesajGonder(playerid,"Bu ürün bitmiþ.");
	    if(Isyeri[bizid][isyeriTip] == 2)
	    {
	        switch(listitem)
	        {
	            case 0:
	            {
					new yazi[1000];
					switch (PlayerData[playerid][pCinsiyet])
					{
                        case 1:
                        {
                            for(new i; i<sizeof(g_aMaleSkins); i++)
                            {
                                if(g_aMaleSkins[i] == 0) continue;
                                format(yazi,sizeof(yazi),"%s%d\n",yazi,g_aMaleSkins[i]);
                            }
                            ShowPlayerDialog(playerid, 51, DIALOG_STYLE_PREVMODEL, "Kiyafetler",yazi,"Sec","Iptal");
                        }

						case 2:
						{
						    for(new i; i<sizeof(g_aFemaleSkins); i++)
                            {
                                format(yazi,sizeof(yazi),"%s%d\n",yazi,g_aFemaleSkins[i]);
                            }
                            ShowPlayerDialog(playerid, 51, DIALOG_STYLE_PREVMODEL, "Kiyafetler",yazi, "Sec", "Iptal");
						}
                    }
	            }
	            case 1:
	            {
	                new yazi[300];
	                switch (PlayerData[playerid][pCinsiyet])
	                {
	                    case 1:
	                    {
	                        for(new i; i<sizeof(OzelErkekKiyafetler); i++)
                            {
                                if(OzelErkekKiyafetler[i] == 0) continue;
                                format(yazi,sizeof(yazi),"%s%d\n",yazi,OzelErkekKiyafetler[i]);
                            }
                            ShowPlayerDialog(playerid, 52, DIALOG_STYLE_PREVMODEL, "Kiyafetler",yazi,"Sec","Iptal");
	                    }
	                    case 2:
	                    {
	                        for(new i; i<sizeof(OzelBayanKiyafetler); i++)
                            {
                                if(OzelBayanKiyafetler[i] == 0) continue;
                                format(yazi,sizeof(yazi),"%s%d\n",yazi,OzelBayanKiyafetler[i]);
                            }
                            ShowPlayerDialog(playerid, 52, DIALOG_STYLE_PREVMODEL, "Kiyafetler",yazi,"Sec","Iptal");
	                    }
	                }
	            }
	            case 2:
	            {
	                AksesuarlariGoster(playerid,1);
	            }
	        }
	    }
	    if(Isyeri[bizid][isyeriTip] == 3)
	    {
	        switch(listitem)
	        {
	            case 0:
	            {
					if(PlayerData[playerid][pSu] >= 5) return HataMesajGonder(playerid,"Daha fazla su alamazsýn.");

					ParaVer(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanýndan %s çýkarýr ve kasiyere doðru uzatarak 'Su' satýn alýr.", ReturnName(playerid, 0), FormatNumber(price));
					PlayerData[playerid][pSu]++;
					MesajGonder(playerid,"Bir adet su satýn aldýnýz. Suyunuzu istediðiniz zaman içebilirsiniz. {2ECC71}(/su)");
					if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1) Isyeri[bizid][isyeriUrunSayisi][listitem]--;
					Isyeri[bizid][isyeriKasa] += price;

					Isyeri_Kaydet(bizid);
				}
				case 1:
				{
                    if(ReturnHealth(playerid) <= 95) { SetPlayerHealth(playerid, ReturnHealth(playerid) + 5); }

					ParaVer(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanýndan %s çýkarýr ve kasiyere doðru uzatarak 'Kola' satýn alýr.", ReturnName(playerid, 0), FormatNumber(price));
					if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1) Isyeri[bizid][isyeriUrunSayisi][listitem]--;
					Isyeri[bizid][isyeriKasa] += price;

					Isyeri_Kaydet(bizid);
				}
				case 2:
				{
				    if(ReturnHealth(playerid) <= 90) { SetPlayerHealth(playerid, ReturnHealth(playerid) + 10); }
					ParaVer(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanýndan %s çýkarýr ve kasiyere doðru uzatarak 'Salata' satýn alýr.", ReturnName(playerid, 0), FormatNumber(price));

					if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1) Isyeri[bizid][isyeriUrunSayisi][listitem]--;
					Isyeri[bizid][isyeriKasa] += price;

					Isyeri_Kaydet(bizid);
				}
				case 3:
				{
				    if(ReturnHealth(playerid) <= 85) { SetPlayerHealth(playerid, ReturnHealth(playerid) + 15); }
					ParaVer(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanýndan %s çýkarýr ve kasiyere doðru uzatarak 'Tavuk Nuggets' satýn alýr.", ReturnName(playerid, 0), FormatNumber(price));

					if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1) Isyeri[bizid][isyeriUrunSayisi][listitem]--;
					Isyeri[bizid][isyeriKasa] += price;

					Isyeri_Kaydet(bizid);
				}
				case 4:
				{
				    if(ReturnHealth(playerid) <= 80) { SetPlayerHealth(playerid, ReturnHealth(playerid) + 20); }
					ParaVer(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanýndan %s çýkarýr ve kasiyere doðru uzatarak 'Patates Kýzartmasý' satýn alýr.", ReturnName(playerid, 0), FormatNumber(price));

					if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1) Isyeri[bizid][isyeriUrunSayisi][listitem]--;
					Isyeri[bizid][isyeriKasa] += price;

					Isyeri_Kaydet(bizid);
				}
				case 5:
				{
				    if(ReturnHealth(playerid) <= 75) { SetPlayerHealth(playerid, ReturnHealth(playerid) + 25); }
					ParaVer(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanýndan %s çýkarýr ve kasiyere doðru uzatarak 'Hamburger' satýn alýr.", ReturnName(playerid, 0), FormatNumber(price));

					if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1) Isyeri[bizid][isyeriUrunSayisi][listitem]--;
					Isyeri[bizid][isyeriKasa] += price;

					Isyeri_Kaydet(bizid);
				}
	        }
	    }
	    if(Isyeri[bizid][isyeriTip] == 5)
	        {
	            switch(listitem)
	            {
	                case 0:
	                {
	                    if(PlayerData[playerid][pTelefon] != -1) return HataMesajGonder(playerid, "Zaten telefonunuz var.");

	                    PlayerData[playerid][pTelefon] = random(90000) + 10000;
	                    ParaVer(playerid, -price);
	                    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanýndan %s çýkarýr ve kasiyere doðru uzatarak Telefon satýn alýr.", ReturnName(playerid, 0), FormatNumber(price));
	                    MesajGonder(playerid, "Telefon satýn alýndý. Numaranýz: %d", PlayerData[playerid][pTelefon]);
	                    MesajGonder(playerid, "Tarife satýn almak isterseniz 555 numarasýný arayabilirsiniz.");
	                    if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1) Isyeri[bizid][isyeriUrunSayisi][listitem]--;
	                    Isyeri[bizid][isyeriKasa] += price;
	                    Isyeri_Kaydet(bizid);
	                }
	                case 1:
					{
					    if(PlayerData[playerid][pRadyo] != 0) return HataMesajGonder(playerid, "Zaten portatif radyonuz var.");
					    PlayerData[playerid][pRadyo] = 1;
					    PlayerData[playerid][pFrekans] = 0;
					    ParaVer(playerid, -price);
					    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanýndan %s çýkarýr ve kasiyere doðru uzatarak Portatif Radyo satýn alýr.", ReturnName(playerid, 0), FormatNumber(price));
					    MesajGonder(playerid, "Portatif Radyo satýn alýndý. /frekans ile frekansýnýzý ayarlayabilirsiniz.");
					    if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1) Isyeri[bizid][isyeriUrunSayisi][listitem]--;
	                    Isyeri[bizid][isyeriKasa] += price;
	                    Isyeri_Kaydet(bizid);
	                }
	                case 2:
	                {
	                    if(PlayerData[playerid][pBoombox] != 0) return HataMesajGonder(playerid, "Zaten Boombox satýn almýþsýnýz.");
	                    PlayerData[playerid][pBoombox] = 1;
	                    ParaVer(playerid, -price);
	                    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanýndan %s çýkarýr ve kasiyere doðru uzatarak Boombox satýn alýr.", ReturnName(playerid, 0), FormatNumber(price));
	                    MesajGonder(playerid, "Boombox satýn aldýnýz. (/boombox)");
	                    if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1) Isyeri[bizid][isyeriUrunSayisi][listitem]--;
	                    Isyeri[bizid][isyeriKasa] += price;
	                    Isyeri_Kaydet(bizid);
	                }
	                case 3:
	                {
	                    if(PlayerHasWeapon(playerid, 43)) return HataMesajGonder(playerid, "Zaten kameranýz var.");
	                    GiveWeaponToPlayer(playerid, 43, 50);
	                    ParaVer(playerid, -price);
	                    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanýndan %s çýkarýr ve kasiyere doðru uzatarak Kamera satýn alýr.", ReturnName(playerid, 0), FormatNumber(price));
	                    MesajGonder(playerid, "Kamera satýn aldýnýz.");
	                    if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1) Isyeri[bizid][isyeriUrunSayisi][listitem]--;
	                    Isyeri[bizid][isyeriKasa] += price;
	                    Isyeri_Kaydet(bizid);

	                }
	            }
			}
			if(Isyeri[bizid][isyeriTip] == 1)
			{
			switch(listitem)
					{
   					case 0:
   			 		{
    			  	if(PlayerData[playerid][pEsyalar][0] != 0) return HataMesajGonder(playerid, "Zaten zarýnýz var.");

			            PlayerData[playerid][pEsyalar][0] = 1;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanýndan %s çýkarýr ve kasiyere doðru uzatarak Zar satýn alýr.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Zar satýn aldýnýz. (/zarat, /zarver, /zarcift)");
			            if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1) Isyeri[bizid][isyeriUrunSayisi][listitem]--;
	                    Isyeri[bizid][isyeriKasa] += price;
	                    Isyeri_Kaydet(bizid);
			        }
			        case 1:
			        {
			            if(PlayerData[playerid][pEsyalar][1] != 0) return HataMesajGonder(playerid, "Zaten sigaranýz var.");

			            PlayerData[playerid][pEsyalar][1] += 5;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanýndan %s çýkarýr ve kasiyere doðru uzatarak Sigara satýn alýr.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "5 adet sigara satýn aldýnýz. (/sigara)");
			            if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
			        }
			        case 2:
			        {
                        if(PlayerData[playerid][pLevel] < 5) return HataMesajGonder(playerid, "Bu ürünü satýn alabilmek için en az 5 seviye olmalýsýnýz.");
			            if(PlayerData[playerid][pEsyalar][2] >= 2) return HataMesajGonder(playerid, "En fazla 2 ip satýn alabilirsin.");

			            PlayerData[playerid][pEsyalar][2]++;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanýndan %s çýkarýr ve kasiyere doðru uzatarak ip satýn alýr.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Bir adet ip satýn aldýnýz. (/ipbagla)");
			            if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
			        }
			        case 3:
			        {
						if(PlayerData[playerid][pLevel] < 5) return HataMesajGonder(playerid, "Bu ürünü satýn alabilmek için en az 5 seviye olmalýsýnýz.");
			            if(PlayerData[playerid][pEsyalar][3] >= 2) return HataMesajGonder(playerid, "En fazla 2 göz baðý satýn alabilirsin.");

			            PlayerData[playerid][pEsyalar][3]++;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanýndan %s çýkarýr ve kasiyere doðru uzatarak göz baðý satýn alýr.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Bir adet göz baðý satýn aldýnýz. (/gozbagla)");
			            if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
			        }
			        case 4:
			        {
			            if(PlayerHasWeapon(playerid, 41)) return HataMesajGonder(playerid, "Zaten spreyiniz bulunmakta.");

			            GiveWeaponToPlayer(playerid, 41, 2000);
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanýndan %s çýkarýr ve kasiyere doðru uzatarak Sprey satýn alýr.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Sprey satýn aldýnýz.");
			            if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
			        }
			        case 5:
			        {
			            CanAyarla(playerid, ReturnHealth(playerid)+20);
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanýndan %s çýkarýr ve kasiyere doðru uzatarak Gazoz satýn alýr.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Gazoz satýn aldýnýz. (+20 can)");
			            if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
			        }
			        case 6:
			        {
			            if(PlayerHasWeapon(playerid, 5)) return HataMesajGonder(playerid, "Zaten Beyzbol sopanýz bulunmakta.");

			            GiveWeaponToPlayer(playerid, 5, 1);
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanýndan %s çýkarýr ve kasiyere doðru uzatarak Beyzbol Sopasý satýn alýr.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Beyzbol Sopasý satýn aldýnýz.");
			            if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
			        }
			        case 7:
			        {
			            if(PlayerData[playerid][pEsyalar][4] != 0) return HataMesajGonder(playerid, "Zaten maskeniz bulunmakta.");

			            PlayerData[playerid][pEsyalar][4] = 1;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanýndan %s çýkarýr ve kasiyere doðru uzatarak Maske satýn alýr.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Maske satýn aldýnýz. (/maske)");
			            BilgiMesajGonder(playerid, "Maskeyi kullanabilmek için maske kullaným hakkýnýz olmalýdýr. (/oocmarket)");
			            if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
			        }
			        case 8:
			        {
			            if(PlayerData[playerid][pEsyalar][5] >= 3) return HataMesajGonder(playerid, "En fazla 3 benzin bidonu alabilirsiniz.");

			            PlayerData[playerid][pEsyalar][5]++;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanýndan %s çýkarýr ve kasiyere doðru uzatarak Benzin Bidonu satýn alýr.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Benzin Kutusu satýn aldýnýz. (/benzinkutusu)");
			            if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
			        }
			        case 9:
			        {
			            if(PlayerData[playerid][pEsyalar][6] != 0) return HataMesajGonder(playerid, "Zaten Barbekünüz bulunmakta.");

			            PlayerData[playerid][pEsyalar][6] = 1;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanýndan %s çýkarýr ve kasiyere doðru uzatarak Barbekü satýn alýr.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Barbekü satýn aldýnýz. (/barbeku)");
			            if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
			        }
			        case 10:
			        {
			            if(PlayerData[playerid][pEsyalar][7] >= 5) return HataMesajGonder(playerid, "En fazla 5 köfte satýn alabilirsiniz.");

			            PlayerData[playerid][pEsyalar][7]++;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanýndan %s çýkarýr ve kasiyere doðru uzatarak Köfte satýn alýr.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Köfte satýn aldýnýz.");
			            if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
			        }
			        case 11:
			        {
			            if(PlayerData[playerid][pEsyalar][8] >= 5) return HataMesajGonder(playerid, "En fazla 5 Tavuk eti satýn alabilirsiniz.");

			            PlayerData[playerid][pEsyalar][8]++;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanýndan %s çýkarýr ve kasiyere doðru uzatarak Tavuk eti satýn alýr.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Tavuk eti satýn aldýnýz.");
			            if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
					}
					case 12:
					{
					    if(PlayerData[playerid][pEsyalar][9] >= 5) return HataMesajGonder(playerid, "En fazla 5 Dana eti satýn alabilirsiniz.");

			            PlayerData[playerid][pEsyalar][9]++;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanýndan %s çýkarýr ve kasiyere doðru uzatarak Dana eti satýn alýr.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Dana eti satýn aldýnýz.");
			            if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
					}
					case 13:
					{
					    if(PlayerData[playerid][pEsyalar][10] >= 3) return HataMesajGonder(playerid, "En fazla 3 Tamir kiti satýn alabilirsiniz.");

					    PlayerData[playerid][pEsyalar][10]++;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanýndan %s çýkarýr ve kasiyere doðru uzatarak Tamir Kiti satýn alýr.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Tamir kiti satýn aldýnýz.");
			            if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
					}
					case 14:
					{
					    if(PlayerData[playerid][pEsyalar][11] != 0) return HataMesajGonder(playerid, "Zaten Portatif Çadýrýnýz var.");

			            PlayerData[playerid][pEsyalar][11] = 1;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanýndan %s çýkarýr ve kasiyere doðru uzatarak Portatif Çadýr satýn alýr.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Portatif Çadýr satýn aldýnýz. (/cadir)");
			            if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
					}
					case 15:
					{
					    if(PlayerData[playerid][pEsyalar][12] != 0) return HataMesajGonder(playerid, "Zaten kamp ateþiniz var.");

			            PlayerData[playerid][pEsyalar][12] = 1;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanýndan %s çýkarýr ve kasiyere doðru uzatarak Kamp Ateþi satýn alýr.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Kamp Ateþi satýn aldýnýz. (/kampatesi)");
			            if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
					}
					case 16:
					{
					    if(PlayerData[playerid][pEsyalar][14] != 0) return HataMesajGonder(playerid, "Zaten yan keskiniz var.");

			            PlayerData[playerid][pEsyalar][14] = 1;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanýndan %s çýkarýr ve kasiyere doðru uzatarak yan keski satýn alýr.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Yan keski satýn aldýnýz.");
			            if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
					}
			    }
			}
			if(Isyeri[bizid][isyeriTip] == 6)
			{
			    switch(listitem)
			    {
				    case 0:
					{
					    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);

						ParaVer(playerid, -price);
	    				SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s barmene %s ödedi ve bir bardak Bira aldý.", ReturnName(playerid, 0), FormatNumber(price));
	    				if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
					}
					case 1:
					{
					    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);

                    	ParaVer(playerid, -price);
                    	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s barmene %s ödedi ve bir bardak Viski aldý.", ReturnName(playerid, 0), FormatNumber(price));
                    	if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
					}
					case 2:
					{
					    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);

                    	ParaVer(playerid, -price);
                    	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s barmene %s ödedi ve bir bardak Tekila aldý.", ReturnName(playerid, 0), FormatNumber(price));
                    	if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
					}
					case 3:
					{
					    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);

                    	ParaVer(playerid, -price);
                    	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s barmene %s ödedi ve bir bardak Þarap aldý.", ReturnName(playerid, 0), FormatNumber(price));
                    	if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
					}
					case 4:
					{
					    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);

                    	ParaVer(playerid, -price);
                    	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s barmene %s ödedi ve bir bardak Votka aldý.", ReturnName(playerid, 0), FormatNumber(price));
                    	if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
					}
					case 5:
					{
					    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);

                    	ParaVer(playerid, -price);
                    	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s barmene %s ödedi ve bir bardak Þampanya aldý.", ReturnName(playerid, 0), FormatNumber(price));
                    	if(Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
					}
    			}
			}

	}
	return 1;
}
stock AksesuarlariGoster(playerid,satinal=0)
{
    new str[1000],string[300];
    strcat(str,"Slot ID\tDurum\tModel ID\n");
	for(new i; i < 5; i++)
	{
		if(PlayerData[playerid][pASlot][i] != 0)
	    {
	        format(string,sizeof(string),"{FFFFFF}%d\t{FF0000}Kullanýlýyor\t{FFFFFF}%d\n",i,PlayerData[playerid][pASlot][i]);
	    }
	    else
	    {
	        format(string,sizeof(string),"{FFFFFF}%d\t{2ECC71}Kullanýlmýyor\t{FFFFFF}-\n",i);
	    }
	    strcat(str,string);
	}
	if(satinal == 1) ShowPlayerDialog(playerid, 53, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Aksesuar Slotlarý", str, "Seç", "{FF6347}Iptal");
	if(satinal == 0) ShowPlayerDialog(playerid, 56, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Aksesuar Slotlarý", str, "Seç", "{FF6347}Iptal");
	if(satinal == 2) ShowPlayerDialog(playerid, 62, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Aksesuar Slotlarý", str, "Seç", "{FF6347}Iptal");
    return 1;
}
stock SQL_AksesuarKaydet(playerid)
{
	if(GetPVarInt(playerid,"Logged") == 0) return 0;
	new
	query[2224];
	format(query, sizeof(query), "UPDATE `oyuncular` SET `ASlot1` = '%d|%d|%d|%d'",
        PlayerData[playerid][pASlot][0],
		PlayerData[playerid][pABone][0],
		PlayerData[playerid][pTSlot][0],
		PlayerData[playerid][pARenk][0]
	);
	format(query, sizeof(query), "%s, `ASlot2` = '%d|%d|%d|%d'",
		query,
        PlayerData[playerid][pASlot][1],
		PlayerData[playerid][pABone][1],
		PlayerData[playerid][pTSlot][1],
		PlayerData[playerid][pARenk][1]
	);
	format(query, sizeof(query), "%s, `ASlot3` = '%d|%d|%d|%d'",
		query,
        PlayerData[playerid][pASlot][2],
		PlayerData[playerid][pABone][2],
		PlayerData[playerid][pTSlot][2],
		PlayerData[playerid][pARenk][2]
	);
	format(query, sizeof(query), "%s, `ASlot4` = '%d|%d|%d|%d'",
		query,
        PlayerData[playerid][pASlot][3],
		PlayerData[playerid][pABone][3],
		PlayerData[playerid][pTSlot][3],
		PlayerData[playerid][pARenk][3]
	);
	format(query, sizeof(query), "%s, `ASlot5` = '%d|%d|%d|%d'",
		query,
        PlayerData[playerid][pASlot][4],
		PlayerData[playerid][pABone][4],
		PlayerData[playerid][pTSlot][4],
		PlayerData[playerid][pARenk][4]
	);
	format(query, sizeof(query), "%s, `ASlot6` = '%d|%d|%d|%d'",
		query,
        PlayerData[playerid][pASlot][5],
		PlayerData[playerid][pABone][5],
		PlayerData[playerid][pTSlot][5],
		PlayerData[playerid][pARenk][5]
	);
	format(query, sizeof(query), "%s, `ASlot7` = '%d|%d|%d|%d'",
		query,
        PlayerData[playerid][pASlot][6],
		PlayerData[playerid][pABone][6],
		PlayerData[playerid][pTSlot][6],
		PlayerData[playerid][pARenk][6]
	);
	format(query, sizeof(query), "%s, `ASlot8` = '%d|%d|%d|%d'",
		query,
        PlayerData[playerid][pASlot][7],
		PlayerData[playerid][pABone][7],
		PlayerData[playerid][pTSlot][7],
		PlayerData[playerid][pARenk][7]
	);
	format(query, sizeof(query), "%s, `ASlot9` = '%d|%d|%d|%d'",
		query,
        PlayerData[playerid][pASlot][8],
		PlayerData[playerid][pABone][8],
		PlayerData[playerid][pTSlot][8],
		PlayerData[playerid][pARenk][8]
	);
	format(query, sizeof(query), "%s, `ASlot10` = '%d|%d|%d|%d'",
		query,
        PlayerData[playerid][pASlot][9],
		PlayerData[playerid][pABone][9],
		PlayerData[playerid][pTSlot][9],
		PlayerData[playerid][pARenk][9]
	);
    format(query, sizeof(query), "%s, `ASlot1Pos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
		query,
		AksesuarData[playerid][0][0],
		AksesuarData[playerid][0][1],
        AksesuarData[playerid][0][2],
        AksesuarData[playerid][0][3],
        AksesuarData[playerid][0][4],
        AksesuarData[playerid][0][5],
        AksesuarData[playerid][0][6],
        AksesuarData[playerid][0][7],
		AksesuarData[playerid][0][8]
	);
    format(query, sizeof(query), "%s, `ASlot2Pos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
        query,
		AksesuarData[playerid][1][0],
        AksesuarData[playerid][1][1],
        AksesuarData[playerid][1][2],
        AksesuarData[playerid][1][3],
        AksesuarData[playerid][1][4],
        AksesuarData[playerid][1][5],
        AksesuarData[playerid][1][6],
        AksesuarData[playerid][1][7],
        AksesuarData[playerid][1][8]
	);
	format(query, sizeof(query), "%s, `ASlot3Pos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
	    query,
		AksesuarData[playerid][2][0],
        AksesuarData[playerid][2][1],
        AksesuarData[playerid][2][2],
        AksesuarData[playerid][2][3],
        AksesuarData[playerid][2][4],
        AksesuarData[playerid][2][5],
        AksesuarData[playerid][2][6],
        AksesuarData[playerid][2][7],
        AksesuarData[playerid][2][8]
	);
	format(query, sizeof(query), "%s, `ASlot4Pos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
	    query,
		AksesuarData[playerid][3][0],
        AksesuarData[playerid][3][1],
        AksesuarData[playerid][3][2],
        AksesuarData[playerid][3][3],
        AksesuarData[playerid][3][4],
        AksesuarData[playerid][3][5],
        AksesuarData[playerid][3][6],
        AksesuarData[playerid][3][7],
        AksesuarData[playerid][3][8],
        AksesuarData[playerid][3][9]
	);
	format(query, sizeof(query), "%s, `ASlot5Pos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
	    query,
		AksesuarData[playerid][4][0],
        AksesuarData[playerid][4][1],
        AksesuarData[playerid][4][2],
        AksesuarData[playerid][4][3],
        AksesuarData[playerid][4][4],
        AksesuarData[playerid][4][5],
        AksesuarData[playerid][4][6],
        AksesuarData[playerid][4][7],
        AksesuarData[playerid][4][8]
	);
	format(query, sizeof(query), "%s, `ASlot6Pos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
	    query,
		AksesuarData[playerid][5][0],
        AksesuarData[playerid][5][1],
        AksesuarData[playerid][5][2],
        AksesuarData[playerid][5][3],
        AksesuarData[playerid][5][4],
        AksesuarData[playerid][5][5],
        AksesuarData[playerid][5][6],
        AksesuarData[playerid][5][7],
        AksesuarData[playerid][5][8]
	);
	format(query, sizeof(query), "%s, `ASlot7Pos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
	    query,
		AksesuarData[playerid][6][0],
        AksesuarData[playerid][6][1],
        AksesuarData[playerid][6][2],
        AksesuarData[playerid][6][3],
        AksesuarData[playerid][6][4],
        AksesuarData[playerid][6][5],
        AksesuarData[playerid][6][6],
        AksesuarData[playerid][6][7],
        AksesuarData[playerid][6][8]
	);
	format(query, sizeof(query), "%s, `ASlot8Pos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
	    query,
		AksesuarData[playerid][7][0],
        AksesuarData[playerid][7][1],
        AksesuarData[playerid][7][2],
        AksesuarData[playerid][7][3],
        AksesuarData[playerid][7][4],
        AksesuarData[playerid][7][5],
        AksesuarData[playerid][7][6],
        AksesuarData[playerid][7][7],
        AksesuarData[playerid][7][8]
	);
	format(query, sizeof(query), "%s, `ASlot9Pos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
	    query,
		AksesuarData[playerid][8][0],
        AksesuarData[playerid][8][1],
        AksesuarData[playerid][8][2],
        AksesuarData[playerid][8][3],
        AksesuarData[playerid][8][4],
        AksesuarData[playerid][8][5],
        AksesuarData[playerid][8][6],
        AksesuarData[playerid][8][7],
        AksesuarData[playerid][8][8]
	);
	format(query, sizeof(query), "%s, `ASlot10Pos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f' WHERE `ID` = '%d'",
	    query,
		AksesuarData[playerid][9][0],
        AksesuarData[playerid][9][1],
        AksesuarData[playerid][9][2],
        AksesuarData[playerid][9][3],
        AksesuarData[playerid][9][4],
        AksesuarData[playerid][9][5],
        AksesuarData[playerid][9][6],
        AksesuarData[playerid][9][7],
        AksesuarData[playerid][9][8],
        PlayerData[playerid][pID]
	);

	mysql_query(baglanti,query, false);
	return 1;
}
stock AksesuarAyarla(playerid)
{
    for (new i = 0; i < 5; i ++) {
		if(!PlayerData[playerid][pTSlot][i])
		{
			RemovePlayerAttachedObject(playerid, i);
		}
		else
		{
		    AksesuarTak(playerid, i);
		}
	}
	return 1;
}
stock Isyeri_Yenile(id)
{
	if(id != -1 && Isyeri[id][isyeriExists])
	{
	    if (IsValidDynamic3DTextLabel(Isyeri[id][bizText3D]))
		    DestroyDynamic3DTextLabel(Isyeri[id][bizText3D]);

		if (IsValidDynamicPickup(Isyeri[id][isyeriPickup]))
		    DestroyDynamicPickup(Isyeri[id][isyeriPickup]);

		new string[500],durum[24],pickup,sahip[24],tip[30];
		if(!Isyeri[id][isyeriKilit]) durum = "{00FF26}Açýk";
		else durum = "{FF0000}Kilitli";
		if(Isyeri[id][isyeriSahip] == -99)
		{
			    format(sahip, 24, "Devlet");
		} else format(sahip, 24, "%s", SQLName(Isyeri[id][isyeriSahip],0));
		switch(Isyeri[id][isyeriTip])
		{
		    case 1: pickup = 1272,tip = "Market";
		    case 2: pickup = 1275,tip = "Kiyafet Maðazasý";
		    case 3: pickup = 19094, tip = "Fast Food";
		    case 4: pickup = 1274,tip = "Araç Galerisi";
		    case 5: pickup = 19893, tip = "Elektronik";
		    case 6: pickup = 19159, tip = "Bar/Pub";
		    case 7: pickup = 1210, tip = "Kumarhane";
		}
		if(Isyeri[id][isyeriSahip] == -1)
		{
		    format(string,sizeof(string),"{BF00FF}Satýlýk Ýþyeri (ID: %d)\n\n{AFAFAF}Fiyat: {2ECC71}%s\n{AFAFAF}Ýþyeri Tipi: {2ECC71}%s",id,FormatNumber(Isyeri[id][isyeriFiyat]),tip);
		    Isyeri[id][bizText3D] = CreateDynamic3DTextLabel(string,-1,Isyeri[id][isyeriPos][0],Isyeri[id][isyeriPos][1],Isyeri[id][isyeriPos][2],15.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,0,0);
		    Isyeri[id][isyeriPickup] = CreateDynamicPickup(pickup, 23,Isyeri[id][isyeriPos][0],Isyeri[id][isyeriPos][1],Isyeri[id][isyeriPos][2],0,0);
		}
		else if(Isyeri[id][isyeriSahip] != -1 && Isyeri[id][isyeriSatilik] == 0)
		{
		    format(string,sizeof(string),"{BF00FF}Ýþyeri (ID: %d)\n{9F9F9F}%s\n{AFAFAF}Sahip: {2ECC71}%s\n{AFAFAF}Ýþyeri Tipi: {2ECC71}%s\n{AFAFAF}Durum: %s",id,Isyeri[id][isyeriName],sahip,tip,durum);
		    if(Isyeri[id][isyeriGirisUcret] > 0)
			{
			    new girisucret[150];
				format(girisucret, 150, "\n{AFAFAF}Giriþ Ücreti: {2ECC71}%s", FormatNumber(Isyeri[id][isyeriGirisUcret]));
				strcat(string, girisucret);
			}
		    Isyeri[id][bizText3D] = CreateDynamic3DTextLabel(string,-1,Isyeri[id][isyeriPos][0],Isyeri[id][isyeriPos][1],Isyeri[id][isyeriPos][2],15.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,0,0);
		    Isyeri[id][isyeriPickup] = CreateDynamicPickup(pickup, 23,Isyeri[id][isyeriPos][0],Isyeri[id][isyeriPos][1],Isyeri[id][isyeriPos][2],0,0);
		}
		else if(Isyeri[id][isyeriSahip] != -1 && Isyeri[id][isyeriSatilik] == 1)
		{
		    format(string,sizeof(string),"{BF00FF}Satýlýk Ýþyeri (ID: %d)\n\n{AFAFAF}Sahip: {2ECC71}%s\n{AFAFAF}Fiyat: {2ECC71}%s\n{AFAFAF}Ýþyeri Tipi: {2ECC71}%s\n{AFAFAF}Durum: %s",id,sahip,FormatNumber(Isyeri[id][isyeriFiyat]),tip,durum);
		    if(Isyeri[id][isyeriGirisUcret] > 0)
			{
			    new girisucret[150];
				format(girisucret, 150, "\n{AFAFAF}Giriþ Ücreti: {2ECC71}%s", FormatNumber(Isyeri[id][isyeriGirisUcret]));
				strcat(string, girisucret);
			}
		 	Isyeri[id][bizText3D] = CreateDynamic3DTextLabel(string,-1,Isyeri[id][isyeriPos][0],Isyeri[id][isyeriPos][1],Isyeri[id][isyeriPos][2],15.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,0,0);
		    Isyeri[id][isyeriPickup] = CreateDynamicPickup(pickup, 23,Isyeri[id][isyeriPos][0],Isyeri[id][isyeriPos][1],Isyeri[id][isyeriPos][2],0,0);
		}
	}
}
stock GetPlayerSkinEx(playerid)
{
	return (GetPlayerCustomSkin(playerid) >= 20001) ? (GetPlayerCustomSkin(playerid)) : (GetPlayerSkin(playerid));
}
stock Isyeri_Kaydet(id)
{
	static query[4000];
	format(query,sizeof(query),"UPDATE `isyerleri` SET `iIsim` = '%s',`iMessage` = '%s',`iSahip` = '%d',`iTip` = '%d',`iFiyat` = '%d',`iKendiFiyat` = '%d',`iSatilik` = '%d',`iVergi` = '%d', `iVergiSure` = '%d', `iGirisUcret` = '%d',`iMuzik` = '%s'",
	SQL_ReturnEscaped(Isyeri[id][isyeriName]),
	SQL_ReturnEscaped(Isyeri[id][isyeriMesaj]),
	Isyeri[id][isyeriSahip],
	Isyeri[id][isyeriTip],
	Isyeri[id][isyeriFiyat],
	Isyeri[id][isyeriKendiFiyati],
	Isyeri[id][isyeriSatilik],
	Isyeri[id][isyeriVergi],
	Isyeri[id][isyeriVergiSure],
	Isyeri[id][isyeriGirisUcret],
	SQL_ReturnEscaped(Isyeri[id][isyeriMuzik])
	);
	format(query,sizeof(query),"%s, `iPosX` = '%.4f',`iPosY` = '%.4f',`iPosZ` = '%.4f',`iPosA` = '%.4f',`iIntX` = '%.4f',`iIntY` = '%.4f',`iIntZ` = '%.4f',`iIntA` = '%.4f',`iSpawnX` = '%.4f',`iSpawnY` = '%.4f',`iSpawnZ` = '%.4f',`iSpawnA` = '%.4f'",
	query,
	Isyeri[id][isyeriPos][0],
	Isyeri[id][isyeriPos][1],
	Isyeri[id][isyeriPos][2],
	Isyeri[id][isyeriPos][3],
	Isyeri[id][isyeriInt][0],
	Isyeri[id][isyeriInt][1],
	Isyeri[id][isyeriInt][2],
	Isyeri[id][isyeriInt][3],
	Isyeri[id][isyeriSpawn][0],
	Isyeri[id][isyeriSpawn][1],
	Isyeri[id][isyeriSpawn][2],
	Isyeri[id][isyeriSpawn][3]
	);
	format(query,sizeof(query),"%s, `iInterior` = '%d',`iKilit` = '%d',`iKasa` = '%d',`iFiyat1` = '%d',`iFiyat2` = '%d',`iFiyat3` = '%d',`iFiyat4` = '%d',`iFiyat5` = '%d',`iFiyat6` = '%d',`iFiyat7` = '%d',`iFiyat8` = '%d',`iFiyat9` = '%d',`iFiyat10` = '%d'",
	query,
	Isyeri[id][isyeriInterior],
	Isyeri[id][isyeriKilit],
	Isyeri[id][isyeriKasa],
	Isyeri[id][isyeriFiyatlar][0],
	Isyeri[id][isyeriFiyatlar][1],
	Isyeri[id][isyeriFiyatlar][2],
	Isyeri[id][isyeriFiyatlar][3],
	Isyeri[id][isyeriFiyatlar][4],
	Isyeri[id][isyeriFiyatlar][5],
	Isyeri[id][isyeriFiyatlar][6],
	Isyeri[id][isyeriFiyatlar][7],
	Isyeri[id][isyeriFiyatlar][8],
	Isyeri[id][isyeriFiyatlar][9]
	);
	format(query,sizeof(query),"%s, `iFiyat11` = '%d',`iFiyat12` = '%d',`iFiyat13` = '%d',`iFiyat14` = '%d',`iFiyat15` = '%d',`iFiyat16` = '%d',`iFiyat17` = '%d',`iFiyat18` = '%d',`iFiyat19` = '%d',`iFiyat20` = '%d'",
	query,
	Isyeri[id][isyeriFiyatlar][10],
	Isyeri[id][isyeriFiyatlar][11],
	Isyeri[id][isyeriFiyatlar][12],
	Isyeri[id][isyeriFiyatlar][13],
	Isyeri[id][isyeriFiyatlar][14],
	Isyeri[id][isyeriFiyatlar][15],
	Isyeri[id][isyeriFiyatlar][16],
	Isyeri[id][isyeriFiyatlar][17],
	Isyeri[id][isyeriFiyatlar][18],
	Isyeri[id][isyeriFiyatlar][19]
	);
	format(query,sizeof(query),"%s, `iUrun1` = '%d',`iUrun2` = '%d',`iUrun3` = '%d',`iUrun4` = '%d',`iUrun5` = '%d',`iUrun6` = '%d',`iUrun7` = '%d',`iUrun8` = '%d',`iUrun9` = '%d',`iUrun10` = '%d',`iUrun11` = '%d',`iUrun12` = '%d',`iUrun13` = '%d',`iUrun14` = '%d',`iUrun15` = '%d',`iUrun16` = '%d',`iUrun17` = '%d',`iUrun18` = '%d',`iUrun19` = '%d',`iUrun20` = '%d' WHERE `ID` = '%d'",
	query,
	Isyeri[id][isyeriUrunSayisi][0],
	Isyeri[id][isyeriUrunSayisi][1],
	Isyeri[id][isyeriUrunSayisi][2],
	Isyeri[id][isyeriUrunSayisi][3],
	Isyeri[id][isyeriUrunSayisi][4],
	Isyeri[id][isyeriUrunSayisi][5],
	Isyeri[id][isyeriUrunSayisi][6],
	Isyeri[id][isyeriUrunSayisi][7],
	Isyeri[id][isyeriUrunSayisi][8],
	Isyeri[id][isyeriUrunSayisi][9],
	Isyeri[id][isyeriUrunSayisi][10],
	Isyeri[id][isyeriUrunSayisi][11],
	Isyeri[id][isyeriUrunSayisi][12],
	Isyeri[id][isyeriUrunSayisi][13],
	Isyeri[id][isyeriUrunSayisi][14],
	Isyeri[id][isyeriUrunSayisi][15],
	Isyeri[id][isyeriUrunSayisi][16],
	Isyeri[id][isyeriUrunSayisi][17],
	Isyeri[id][isyeriUrunSayisi][18],
	Isyeri[id][isyeriUrunSayisi][19],
	Isyeri[id][isyeriID]
	);
	mysql_query(baglanti,query, false);
	return 1;
}
stock ClearPlayerAnim(playerid)
{
	new skin;
	skin = GetPlayerSkin(playerid);
	SetPlayerSkin(playerid, skin);
	return 1;
}
stock BildirimEkle(sqlid,mesaj[],gonderen[])
{
	new query[680];
	format(query,sizeof(query),"INSERT INTO `bildirimler` (`sqlid`,`Tarih`,`Mesaj`,`Gonderen`,`Durum`) VALUES ('%d','%s','%s','%s','0')",sqlid,ReturnDate(),mesaj,gonderen);
	mysql_query(baglanti,query, false);
	return 1;
}
stock Bildirim_OkunmamisBildirimler(sqlid)
{
	new query[200];
	format(query,sizeof(query),"SELECT * FROM `bildirimler` WHERE `sqlid` = '%d' AND `Durum` = '0'",sqlid);
	new Cache:sawyer = mysql_query(baglanti,query);
	new rows;
	cache_get_row_count(rows);
	cache_delete(sawyer);
	return rows;
}
stock Bildirim_SayiCek(sqlid)
{
	new query[200];
	format(query,sizeof(query),"SELECT * FROM `bildirimler` WHERE `sqlid` = '%d'",sqlid);
	new Cache:sawyer = mysql_query(baglanti,query);
	new rows;
	cache_get_row_count(rows);
	cache_delete(sawyer);
	return rows;
}
stock Bildirim_Sil(bildirimid)
{
	new query[122];
	format(query,sizeof(query),"DELETE FROM `bildirimler` WHERE `id` = '%d'",bildirimid);
	mysql_query(baglanti,query, false);
	return 1;
}
stock BildirimleriSil(sqlid)
{
	new query[150];
	format(query,sizeof(query),"DELETE FROM `bildirimler` WHERE `sqlid` = '%d'",sqlid);
	mysql_query(baglanti,query, false);
	return 1;
}
Business_Nearest(playerid, Float:radius = 2.5)
{
    for (new i = 0; i != MAX_ISYERI; i ++) if (Isyeri[i][isyeriExists] && IsPlayerInRangeOfPoint(playerid, radius, Isyeri[i][isyeriPos][0], Isyeri[i][isyeriPos][1], Isyeri[i][isyeriPos][2]))
	{
			return i;
	}
	return -1;
}
stock BildirimlerDialog(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	new str[1024],string[500],query[200];
	strcat(str,"ID\tGönderen\tTarih\tDurum\n");
	if(Bildirim_OkunmamisBildirimler(PlayerData[playerid][pID]) > 0)
	{
		format(query,sizeof(query),"SELECT `id`,`Gonderen`,`Tarih` FROM `bildirimler` WHERE `sqlid` = '%d' AND `Durum` = '0'",PlayerData[playerid][pID]);
		mysql_query(baglanti,query);
		new rows;
		cache_get_row_count(rows);
		new bid,gonderen[24],tarih[22];
		if(rows)
		{
			for(new i; i<rows; i++)
			{
				cache_get_value_name_int(i,"id",bid);
				cache_get_value_name(i,"Gonderen",gonderen,24);
				cache_get_value_name(i,"Tarih",tarih,22);
				format(string,sizeof(string),"%d\t%s\t%s\t{FFBF00}Yeni\n",bid,gonderen,tarih);
				strcat(str,string);
			}
			format(query,sizeof(query),"SELECT `id`,`Gonderen`,`Tarih` FROM `bildirimler` WHERE `sqlid` = '%d' AND `Durum` = '1'",PlayerData[playerid][pID]);
   			mysql_query(baglanti,query);
			cache_get_row_count(rows);
			if(rows)
			{
			    for(new i; i<rows; i++)
			    {
			        cache_get_value_name_int(i,"id",bid);
					cache_get_value_name(i,"Gonderen",gonderen,24);
					cache_get_value_name(i,"Tarih",tarih,30);
					format(string,sizeof(string),"%d\t%s\t%s\t{FF0000}Okundu\n",bid,gonderen,tarih);
					strcat(str,string);
			    }
			}
		}

	}
	else
	{
	    if(Bildirim_SayiCek(PlayerData[playerid][pID]) < 1) return HataMesajGonder(playerid,"Hiç bildiriminiz yok.");
	    new bid,gonderen[24],tarih[22];
	    format(query,sizeof(query),"SELECT `id`,`Gonderen`,`Tarih` FROM `bildirimler` WHERE `sqlid` = '%d' AND `Durum` = '1'",PlayerData[playerid][pID]);
		mysql_query(baglanti,query);
		new rows;
		cache_get_row_count(rows);
		if(rows)
		{
  			for(new i; i<rows; i++)
	    	{
      			cache_get_value_name_int(i,"id",bid);
				cache_get_value_name(i,"Gonderen",gonderen,24);
				cache_get_value_name(i,"Tarih",tarih,22);
				format(string,sizeof(string),"%d\t%s\t%s\t{FF0000}Okundu\n",bid,gonderen,tarih);
				strcat(str,string);
	    	}
		}
	}
	ShowPlayerDialog(playerid,BILDIRIM_DIALOG,DIALOG_STYLE_TABLIST_HEADERS,"Bildirimleriniz",str,"Görüntüle","Kapat");
	return 1;
}
stock OlusumAksesuariSil(iTargetID)
{
	for(new iToyIter; iToyIter < 5; ++iToyIter) {
		for(new LoopRapist; LoopRapist < sizeof(AttachCops); ++LoopRapist) {
			if(AttachCops[LoopRapist][olusumamodel] == PlayerData[iTargetID][pASlot][iToyIter]) {
                RemovePlayerAttachedObject(iTargetID, iToyIter);
                PlayerData[iTargetID][pASlot][iToyIter] = 0;
				AksesuarAyarla(iTargetID);
			}
		}
	}
	BilgiMesajGonder(iTargetID, "Oluþuma ait olan tüm aksesuarlar kaldýrýldý.");
	return 1;
}
BirliktenAt(playerid)
{
	if(PlayerData[playerid][pFaction] == -1) return 1;
	if(Birlikler[PlayerData[playerid][pFaction]][birlikTip] != BIRLIK_CETE && Birlikler[PlayerData[playerid][pFaction]][birlikTip] != BIRLIK_MAFYA && Birlikler[PlayerData[playerid][pFaction]][birlikTip] != BIRLIK_LEGAL)
	{
	    SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
		SetPlayerColor(playerid, 0xFFFFFFFF);
		PlayerData[playerid][pOnDuty] = 0;
		PlayerData[playerid][pOnDutySkin] = 0;
		PlayerData[playerid][pTazer] = 0;
		PlayerData[playerid][pBeanbag] = 0;
		OlusumAksesuariSil(playerid);
		ResetWeapons(playerid);
	}
	Birlik_Kaydet(PlayerData[playerid][pFaction]);
    PlayerData[playerid][pFaction] = -1;
    PlayerData[playerid][pFactionRutbe] = 0;
    PlayerData[playerid][pFactionDivizyon] = 0;
   	for (new i = 0; i < MAX_ARAC; i ++) if (AracInfo[i][aracExists] && AracInfo[i][aracSahip] == PlayerData[playerid][pID])
	{
	    AracInfo[i][aracFactionType] = 0;
		AracInfo[i][aracFaction] = -1;
	}
	return 1;
}
Birlik_Update(factionid)
{
	if (factionid != -1 || Birlikler[factionid][birlikExists])
	{
	    foreach (new i : Player) if (PlayerData[i][pFaction] == factionid)
		{
			 	SetFactionColor(i);
		}
	}
	return 1;
}
SetFactionColor(playerid)
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid != -1)
	{
		SetPlayerColor(playerid, RemoveAlpha(Birlikler[factionid][birlikColor]));
	} else {
	    SetPlayerColor(playerid, 0xFFFFFF00);
	}
	return 0;
}
stock RemoveAlpha(color) {
    return (color & ~0xFF);
}
stock Birlik_Olustur(birlikisim[],tip)
{
    for (new i = 0; i != MAX_BIRLIK; i ++) if (!Birlikler[i][birlikExists])
    {
        Birlikler[i][birlikExists] = true;
        format(Birlikler[i][birlikAd],32,birlikisim);
        Birlikler[i][birlikDuyuru][0] = '\0';
        if(tip != 3) Birlikler[i][birlikColor] = 0xFFFFFF00;
        else Birlikler[i][birlikColor] = 0x9ACD32FF;
        Birlikler[i][birlikTip] = tip;
        switch(tip)
        {
            case 1..4: Birlikler[i][birlikRutbeler] = 6;
            default: Birlikler[i][birlikRutbeler] = 12;
        }
        Birlikler[i][birlikKasaPara] = 0;
        Birlikler[i][birlikOnaylar][0] = 0;
        Birlikler[i][birlikOnaylar][1] = 0;
        Birlikler[i][birlikOnaylar][2] = 0;
        Birlikler[i][birlikOnaylar][3] = 0;
        Birlikler[i][birlikOnaylar][4] = 0;
        Birlikler[i][OOCDurum] = 1;
        Birlikler[i][birlikYetkilendirme][0] = Birlikler[i][birlikRutbeler]-1; // Üye Alma
        Birlikler[i][birlikYetkilendirme][1] = Birlikler[i][birlikRutbeler]-1; // Üye Atma
        Birlikler[i][birlikYetkilendirme][2] = Birlikler[i][birlikRutbeler]-2; // Rütbe Deðiþtirme
        Birlikler[i][birlikYetkilendirme][3] = Birlikler[i][birlikRutbeler]-2; // Divizyon Deðiþtirme
        Birlikler[i][birlikYetkilendirme][4] = Birlikler[i][birlikRutbeler]-3; // Araçlarý Spawnlama
        Birlikler[i][birlikYetkilendirme][5] = Birlikler[i][birlikRutbeler]-3; // Birlik OOC Chat Kapatma
        Birlikler[i][birlikYetkilendirme][6] = Birlikler[i][birlikRutbeler]; // Birlik Kasasýndan Para Alma
        Birlikler[i][birlikYetkilendirme][7] = 1; // Ajans Ayarlarý Seviyesi
        Birlikler[i][yayinDurum] = 1;
        Birlikler[i][yayinTipi] = 0;
        Birlikler[i][ReklamAlimi] = 0;
        Birlikler[i][ReklamUcreti] = 0;
        Birlikler[i][ReklamSayisi] = 0;
        Birlikler[i][CekilisBasladi] = false;
        Birlikler[i][cekilisOdul] = 0;
        Birlikler[i][reklamPos][0] = 0.0;
        Birlikler[i][reklamPos][1] = 0.0;
        Birlikler[i][reklamPos][2] = 0.0;
        if(IsValidDynamicPickup(Birlikler[i][reklamPickup])) DestroyDynamicPickup(Birlikler[i][reklamPickup]);
        if(IsValidDynamic3DTextLabel(Birlikler[i][reklamLabel])) DestroyDynamic3DTextLabel(Birlikler[i][reklamLabel]);
        for (new j = 0; j < 15; j ++)
        {
            if(j < 5)
            {
                format(BirlikDivizyon[i][j],20,"Birim %d",j+1);
            }
            format(BirlikRutbe[i][j],32,"Rutbe %d",j+1);
        }
        mysql_tquery(baglanti, "INSERT INTO `birlikler` (`bRutbeler`) VALUES(10)", "OnFactionCreated", "d", i);
        return i;
    }
    return -1;
}
stock OyuncuBaliklari(playerid)
{
	new str[1000],string[228];
	strcat(str,"Balýk\tGram\tFiyat\n");
	new baliklar = 0;
	for(new i; i<10; i++)
	{
	    if(PlayerData[playerid][pBalikID][i] != -1)
	    {
	        format(string,sizeof(string),"{2ECC71}%s\t{2ECC71}%d\t{2ECC71}%s\n",BalikTurleri[PlayerData[playerid][pBalikID][i]][TurAdi],PlayerData[playerid][pBalikGram][i],FormatNumber(floatround(PlayerData[playerid][pBalikGram][i] * BalikTurleri[PlayerData[playerid][pBalikID][i]][GramFiyat])));
	        strcat(str,string);
	        baliklar++;
	    }
	}
	strcat(str,"{FF0000}Hepsini Sat");
	if(baliklar < 1) return HataMesajGonder(playerid,"Hiç balýðýnýz yok.");
	format(string,sizeof(string),"{FFFFFF}Balýklarýnýz {FF0000}(%d/10)",baliklar);
	Dialog_Show(playerid,Baliklar,DIALOG_STYLE_TABLIST_HEADERS,string,str,"Sat","Kapat");
	return 1;
}
Dialog:Baliklar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(strfind(inputtext, "Hepsini Sat", true) != -1)
	    {
	        Dialog_Show(playerid,HepsiniSat,DIALOG_STYLE_MSGBOX,"{FF0000}» {FFFFFF}Balýk Satma","Tüm balýklarý {2ECC71}%s {FFFFFF}karþýlýðýnda satmak istediðinize emin misiniz?","Sat","Geri",FormatNumber(BalikToplamPara(playerid)));
	    }
	    else
	    {
	        new id = GetBalikIDWithName(inputtext);
	        if(id != -1)
	        {
	            SetPVarInt(playerid,"BalikID",id);
	            Dialog_Show(playerid,BalikSat,DIALOG_STYLE_MSGBOX,"{FF0000}» {FFFFFF}Balýk Satma","{2ECC71}%s {FFFFFF}adlý balýðý satmak istediðine emin misin?","Sat","Geri",BalikTurleri[id][TurAdi]);
	        }
	    }
	}
	return 1;
}
Dialog:BalikSat(playerid, response, listitem, inputtext[])
{
	if(!response) return OyuncuBaliklari(playerid);
	if(response)
	{
	    new id = GetPVarInt(playerid,"BalikID");
	    new balikid = -1;
	    for(new i; i<10; i++)
	    {
	        if(PlayerData[playerid][pBalikID][i] == id)
	        {
				balikid = i;
				break;
	        }
	    }
	    if(balikid != -1)
	    {
	        ParaVer(playerid,floatround(PlayerData[playerid][pBalikGram][balikid] * BalikTurleri[PlayerData[playerid][pBalikID][balikid]][GramFiyat]));
	        MesajGonder(playerid,"Balýk satýldý. {FF0000}(%s)",FormatNumber(floatround(PlayerData[playerid][pBalikGram][balikid] * BalikTurleri[PlayerData[playerid][pBalikID][balikid]][GramFiyat])));
	        PlayerData[playerid][pBalikID][balikid] = -1;
	        PlayerData[playerid][pBalikGram][balikid] = 0;
	    }
	}
	return 1;
}
stock BalikToplamPara(playerid)
{
	new toplam = 0;
	for(new i; i<10; i++)
	{
	    if(PlayerData[playerid][pBalikID][i] != -1)
	    {
	        toplam += floatround(PlayerData[playerid][pBalikGram][i] * BalikTurleri[PlayerData[playerid][pBalikID][i]][GramFiyat]);
	    }
	}
	return toplam;
}
stock GetBalikIDWithName(name[])
{
	for(new i; i<sizeof(BalikTurleri); i++)
	{
	    if (!strcmp(name, BalikTurleri[i][TurAdi], true))
	    {
	        return i;
	    }
	}
	return -1;
}
Dialog:HepsiniSat(playerid, response, listitem, inputtext[])
{
	if(!response) return OyuncuBaliklari(playerid);
	if(response)
	{
	    ParaVer(playerid,BalikToplamPara(playerid));
	    MesajGonder(playerid,"Tüm balýklar satýldý. {FF0000}(%s)",FormatNumber(BalikToplamPara(playerid)));
	    for(new i; i<10; i++)
	    {
	        PlayerData[playerid][pBalikID][i] = -1;
	        PlayerData[playerid][pBalikGram][i] = 0;
	    }
	}
	return 1;
}
forward BalikTutma(playerid);
public BalikTutma(playerid)
{
    new balikorani = BALIK_TUTMA_ORANI;
	if(PlayerData[playerid][pBalikOrani] > gettime()) balikorani += 15;
	switch(PlayerData[playerid][pVip])
	{
	    case 1: balikorani += 10;
	    case 2: balikorani += 15;
	    case 3: balikorani += 20;
	}
	if(random(100) < balikorani)
	{
	    new slot = -1;
	    for(new i; i<10; i++)
		{
	    	if(PlayerData[playerid][pBalikID][i] == -1)
	    	{
	        	slot = i;
	        	break;
	    	}
		}
		if(slot == -1)
		{
		    BalikTimer[playerid] = -1;
		    RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "OltaSlot"));
			SetPVarInt(playerid, "OltaSlot", -1);
			ClearAnimations(playerid);
			TogglePlayerControllable(playerid, true);
			HataMesajGonder(playerid,"Daha fazla balýk tutamazsýn.");
			return 1;
		}
		new id = RandomEx(0, sizeof(BalikTurleri)-1), gram = RandomEx(BalikTurleri[id][MinAgirlik], BalikTurleri[id][MaxAgirlik]);
		if(BoyleBalikVar(playerid,id))
		{
  		 	BalikTimer[playerid] = -1;
	     	RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "OltaSlot"));
		 	SetPVarInt(playerid, "OltaSlot", -1);
	     	ClearAnimations(playerid);
	     	TogglePlayerControllable(playerid, true);
	     	BilgiMesajGonder(playerid,"Balýk yakalayamadýnýz.");
	     	return 1;
		}
		new fiyat = floatround(gram * BalikTurleri[id][GramFiyat]);
		PlayerData[playerid][pBalikID][slot] = id;
		PlayerData[playerid][pBalikGram][slot] = gram;
		MesajGonder(playerid,"Bir {FF0000}%s {FFFFFF}balýðý tuttunuz. {2ECC71}Gram: %d, Fiyat: %s. {FFFFFF}/baliklarim yazarak satabilirsin.",BalikTurleri[id][TurAdi],gram,FormatNumber(fiyat));
	 	BalikTimer[playerid] = -1;
   		RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "OltaSlot"));
		SetPVarInt(playerid, "OltaSlot", -1);
		ClearAnimations(playerid);
		TogglePlayerControllable(playerid, true);
	}
	else
	{
	     BalikTimer[playerid] = -1;
	     RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "OltaSlot"));
		 SetPVarInt(playerid, "OltaSlot", -1);
	     ClearAnimations(playerid);
	     TogglePlayerControllable(playerid, true);
	     BilgiMesajGonder(playerid,"Balýk yakalayamadýnýz.");
	}
	return 1;
}
stock BoyleBalikVar(playerid,id)
{
	for(new i; i<10; i++)
	{
	    if(PlayerData[playerid][pBalikID][i] == id)
	    {
	        return 1;
	    }
	}
	return 0;
}
stock GetFactionByID(sqlid)
{
	for (new i = 0; i != MAX_BIRLIK; i ++) if (Birlikler[i][birlikExists] && Birlikler[i][birlikID] == sqlid)
	    return i;

	return -1;
}
stock Ev_Sil(playerid, evid) // Deðiþti
{
    if (evid != -1 && house_info[evid][evExists])
    {
        new sorgu[100];

		format(sorgu, sizeof(sorgu), "DELETE FROM `evler` WHERE `evid` = '%d'", house_info[evid][evID]);
		mysql_query(baglanti, sorgu, false);
		if(Ev_GetKeyCount(evid) > 0)
		{
			format(sorgu, sizeof(sorgu), "DELETE FROM `anahtarlar` WHERE `sqlid` = '%d' AND `tip` = '1'",house_info[evid][evID]);
			mysql_query(baglanti, sorgu, false);
		}
		if (IsValidDynamic3DTextLabel(house_info[evid][houseText]))
		    DestroyDynamic3DTextLabel(house_info[evid][houseText]);

		if (IsValidDynamicPickup(house_info[evid][evPickup]))
		    DestroyDynamicPickup(house_info[evid][evPickup]);

		if(house_info[evid][evSahip] != -1)
		{
		    format(sorgu, sizeof(sorgu), "%s adlý yetkili tarafýndan eviniz silindi.", PlayerData[playerid][pAdminName]);
		    BildirimEkle(house_info[evid][evSahip],sorgu,"Sistem");
		}
		house_info[evid][evExists] = false;
		house_info[evid][evSahip] = -1;
		house_info[evid][evID] = 0;
		house_info[evid][evKiralayan] = -1;
		House_RemoveFurniture(evid);
    }
}
Dialog:BirlikDialog(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new factionid = PlayerData[playerid][pFaction];
	    if(listitem == 0)
	    {
	        if(factionid == -1) return HataMesajGonder(playerid,"Bir birliðiniz yok.");
	        new str[1024],string[300],sayi;
	        strcat(str,"ID\tAd\tRütbe\tDivizyon\n");
	        foreach(new i:Player) if(PlayerData[i][pFaction] == factionid)
	        {
	            format(string,sizeof(string),"%d\t%s\t%s\t%s\n",i,ReturnName(i,0),Birlik_GetRutbe(i),Birlik_GetDivizyon(i));
	            strcat(str,string);
	            sayi++;
	        }
	        if(sayi == 0)
	        {
	            HataMesajGonder(playerid,"Aktif birlik üyesi bulunmamaktadýr.");
	            callcmd::birlik(playerid);
	        }
	        Dialog_Show(playerid, BirlikGeriTusu, DIALOG_STYLE_TABLIST_HEADERS, "Çevrimiçi Üyeler", str, "Tamam", "Geri");
	    }
	    if(listitem == 1)
	    {
	        if(factionid == -1) return HataMesajGonder(playerid,"Bir birliðiniz yok.");
	        new str[1000],string[224],durum[30];
	        format(string,sizeof(string),"Birlik Adý: {FFF5EE}%s\n",Birlikler[factionid][birlikAd]);
	        strcat(str,string);
	        switch(Birlikler[factionid][birlikTip])
	        {
	            case 0: durum = "Belirlenmiyor";
	            case 1: durum = "Çete";
	            case 2: durum = "Mafya";
	            case 3: durum = "Yayýn Ajansý";
	            case 4: durum = "Legal";
	            default: durum = "Özel Kurum";
	        }
	        format(string,sizeof(string),"Birlik Tipi: {FFF5EE}%s{FFFFFF}\n",durum);
	        strcat(str,string);
         	format(string,sizeof(string),"Sistemsel Onay: %s{FFFFFF}\n",(Birlikler[factionid][birlikOnaylar][0] == 1) ? ("{21ff00}Var") : ("{ff0000}Yok"));
         	strcat(str,string);
         	format(string,sizeof(string),"Silah Onayý: %s{FFFFFF}\n",(Birlikler[factionid][birlikOnaylar][1] == 1) ? ("{21ff00}Var") : ("{ff0000}Yok"));
         	strcat(str,string);
         	format(string,sizeof(string),"Uyuþturucu Onayý: %s{FFFFFF}\n",(Birlikler[factionid][birlikOnaylar][2] == 1) ? ("{21ff00}Var") : ("{ff0000}Yok"));
         	strcat(str,string);
         	format(string,sizeof(string),"Graffiti Onayý: %s{FFFFFF}\n",(Birlikler[factionid][birlikOnaylar][3] == 1) ? ("{21ff00}Var") : ("{ff0000}Yok"));
         	strcat(str,string);
         	format(string,sizeof(string),"Hood Onayý: %s{FFFFFF}\n",(Birlikler[factionid][birlikOnaylar][4] == 1) ? ("{21ff00}Var") : ("{ff0000}Yok"));
         	strcat(str,string);
	        format(string,sizeof(string),"Birlik Üye Sayýsý: {FFF5EE}%d{FFFFFF}\n",BirlikUyeSayisi(factionid));
	        strcat(str,string);
	        format(string,sizeof(string),"Toplam Rütbe Sayýsý: {FFF5EE}%d{FFFFFF}\n",Birlikler[factionid][birlikRutbeler]);
	        strcat(str,string);
	        if(Birlikler[factionid][OOCDurum] == 1) durum = "{FFBF00}Açýk";
			else durum = "{AA3333}Kapalý";
		 	format(string,sizeof(string),"OOC Chat Durum: %s\n",durum);
	        strcat(str,string);
	        format(string,sizeof(string),"Birlik Duyurusu: {FFF5EE}%s{FFFFFF}\n",Birlikler[factionid][birlikDuyuru]);
	        strcat(str,string);
	        Dialog_Show(playerid, BirlikGeriTusu, DIALOG_STYLE_MSGBOX, "{72C425}Birlik Bilgileri", str, "Tamam", "Geri");
	    }
	    if(listitem == 2) // Birlikten Çýkma
	    {
	        Dialog_Show(playerid,BirliktenCik,DIALOG_STYLE_MSGBOX,"{72C425}Birlikten Çýk","{FFFFFF}Gerçekten de birlikten çýkmak istediðinize emin misiniz?","Evet","Hayýr");
	    }
        if(strfind(inputtext, "Birlik Kasa", true) != -1)
        {
            if(factionid == -1) return HataMesajGonder(playerid,"Bir birliðiniz yok.");
            if(Birlikler[factionid][birlikTip] != BIRLIK_CETE && Birlikler[factionid][birlikTip] != BIRLIK_MAFYA  && Birlikler[factionid][birlikTip] != BIRLIK_LEGAL && Birlikler[factionid][birlikTip] != BIRLIK_HABER) return HataMesajGonder(playerid,"Bu birlik türü kasa kullanamaz.");
            Dialog_Show(playerid,birlikKasa,DIALOG_STYLE_LIST,"Birlik Kasasý","{2ECC71}Kasadan Al\n{2ECC71}Kasaya Koy","Seç","Geri");
        }
        if(strfind(inputtext, "Üye Al", true) != -1)
        {
            if(PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid,"Bir birlik üyesi deðilsiniz.");
            if(GetPVarInt(playerid,"davet") == 0)
            {
            	BilgiMesajGonder(playerid,"Birliðe davet etmek istediðiniz oyuncuya TAB'dan (skor tablosu) üstüne iki kez týkla!");
            	BilgiMesajGonder(playerid,"Birliðe davet modunu kapatmak için /birlik » Üye Al (Birisini davet ettiðinizde oto kapatýlýr.)");
            	SetPVarInt(playerid,"davet",1);
            }
            else
            {
                DeletePVar(playerid,"davet");
                MesajGonder(playerid,"Davet etme modu kapatýlmýþtýr.");
            }
        }
        if(strfind(inputtext, "Üye At", true) != -1)
        {
            if(PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid,"Bir birlik üyesi deðilsiniz.");
            Dialog_Show(playerid,BirliktenAt,DIALOG_STYLE_INPUT,"{72C425}Üye At","{FFFFFF}Lütfen birlikten atmak istediðiniz kiþinin ID'sini girin.","Devam","Geri");
        }
        if(strfind(inputtext, "Çevrimdýþý Üyeler", true) != -1)
        {
            if(PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid,"Bir birlik üyesi deðilsiniz.");
            Birlik_OfflineUyeler(playerid,factionid);
        }
        if(strfind(inputtext, "Üye Rütbe Deðiþtir", true) != -1)
        {
            if(PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid,"Bir birlik üyesi deðilsiniz.");
           	new str[1024],string[300],sayi;
           	strcat(str,"ID\tAd\tRütbe\tDivizyon\n");
            foreach(new i:Player) if(PlayerData[i][pFaction] == factionid)
	        {
	            format(string,sizeof(string),"{59DC1C}%d\t{59DC1C}%s\t{59DC1C}%s\t{59DC1C}%s\n",i,ReturnName(i,0),Birlik_GetRutbe(i),Birlik_GetDivizyon(i));
	            strcat(str,string);
	            sayi++;
	        }
	        Dialog_Show(playerid, RutbeDegistir, DIALOG_STYLE_TABLIST_HEADERS, "{72C425} Rütbe Deðiþtir", str, "Deðiþtir", "{FF6347}Iptal");
	        if(sayi == 0) HataMesajGonder(playerid,"Aktif birlik üyesi bulunmamaktadýr."),callcmd::birlik(playerid);
        }
        if(strfind(inputtext, "Üye Divizyon Deðiþtir", true) != -1)
        {
        	DeletePVar(playerid,"OffDiviz");
            if(PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid,"Bir birlik üyesi deðilsiniz.");
            new str[1024],string[300],sayi;
           	strcat(str,"ID\tAd\tRütbe\tDivizyon\n");
            foreach(new i:Player) if(PlayerData[i][pFaction] == factionid)
	        {
	            format(string,sizeof(string),"%d\t%s\t%s\t%s\n",i,ReturnName(i,0),Birlik_GetRutbe(i),Birlik_GetDivizyon(i));
	            strcat(str,string);
	            sayi++;
	        }
	        Dialog_Show(playerid,DivizyonDegistir,DIALOG_STYLE_TABLIST_HEADERS,"{72C425}Divizyon Deðiþtir",str,"Deðiþtir", "{FF6347}Iptal");
	        if(sayi == 0) HataMesajGonder(playerid,"Aktif birlik üyesi bulunmamaktadýr."),callcmd::birlik(playerid);
        }
        if(strfind(inputtext, "Rütbe Adlarýný Düzenle", true) != -1)
        {
            if(PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid,"Bir birlik üyesi deðilsiniz.");
            Birlik_RutbeleriGoster(playerid,PlayerData[playerid][pFaction]);
        }
        if(strfind(inputtext, "Divizyon Adlarýný Düzenle", true) != -1)
        {
            if(PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid,"Bir birlik üyesi deðilsiniz.");
            Birlik_DivizyonlariGoster(playerid,PlayerData[playerid][pFaction]);
        }
        if(strfind(inputtext, "Birlik Araçlarýný Spawnla", true) != -1)
        {
            if(PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid,"Bir birlik üyesi deðilsiniz.");
            new sayi = 0, id = -1;
            for(new i = 1, ps = GetVehiclePoolSize(); i <= ps; i++)
            {
                id = Car_GetID(i);
                if(id != -1 && IsValidVehicle(i) && GetVehicleDriver(i) == INVALID_PLAYER_ID && AracInfo[id][aracFaction] == Birlikler[PlayerData[playerid][pFaction]][birlikID])
                {
                    Arac_Spawn(i);
                    sayi++;
                    DestroyDynamic3DTextLabel(vehicle3Dtext[i]);
				 	vehiclecallsign[i] = 0;
				  	format(vehicletext[i], 24, "");
                }
            }
            if(!sayi) return HataMesajGonder(playerid,"Birliðe ait araç yok.");
            BilgiMesajGonder(playerid,"%d adet birlik aracý respawn edildi.",sayi);
        }
        if(strfind(inputtext, "Birlik OOC Chat", true) != -1)
        {
            if(PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid,"Bir birlik üyesi deðilsiniz.");
            if(Birlikler[factionid][OOCDurum] == 1)
            {
                Birlikler[factionid][OOCDurum] = 0;
                Birlik_Kaydet(factionid);
                callcmd::birlik(playerid);
                MesajGonder(playerid,"Birlik OOC Chat kapatýldý.");
            }
            else
            {
                Birlikler[factionid][OOCDurum] = 1;
                Birlik_Kaydet(factionid);
                callcmd::birlik(playerid);
                MesajGonder(playerid,"Birlik OOC Chat açýldý.");
            }
        }
        if(strfind(inputtext, "Rütbe Yetkilendirmeleri", true) != -1)
        {
			if(PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid,"Bir birlik üyesi deðilsiniz.");
			Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST,"{72C425} Rütbe Yetkilendirmeleri","{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi","Seç","Geri");
        }
        if(strfind(inputtext, "Maksimum Rütbe", true) != -1)
        {
            if(PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid,"Bir birlik üyesi deðilsiniz.");
            Dialog_Show(playerid, MaksRutbe, DIALOG_STYLE_INPUT, "{72C425}Maksimum Rütbe Deðiþtir", "Rütbe sayýsý: %d\n\nMaksimum rütbe sayýsýný girin:", "Ayarla", "Geri", Birlikler[factionid][birlikRutbeler]);
        }
        if(strfind(inputtext, "Birlik Duyurusu Deðiþtir", true) != -1)
        {
            if(PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid,"Bir birlik üyesi deðilsiniz.");
            Dialog_Show(playerid, BirlikDuyuruChange, DIALOG_STYLE_INPUT,"{72C425}Birlik Duyurusunu Deðiþtir","Lütfen yeni bir birlik duyurusu giriniz:\nÞu anki duyuru: %s","Deðiþtir","Geri",Birlikler[factionid][birlikDuyuru]);
        }
        if(strfind(inputtext, "Ajans Ayarlarý", true) != -1)
        {
            if(PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid,"Bir birlik üyesi deðilsiniz.");
            AjansAyarlari(playerid);
        }
	}
	return 1;
}
stock AjansAyarlari(playerid)
{
	new id = PlayerData[playerid][pFaction];
    Dialog_Show(playerid, AjansAyarlari, DIALOG_STYLE_TABLIST, "{FFBF00}Ajans Ayarlarý", "{FFBF00}» {FFFFFF}Yayýn Durumunu Deðiþtir\t%s\n{FFBF00}» {FFFFFF}Dinleyici Sayýsý\t%d\n{FFBF00}» {FFFFFF}Yayýn Tipini Deðiþtir\t%s\n{FFBF00}» {FFFFFF}Reklam Alýmý\t%s\n{FFBF00}» {FFFFFF}Reklam Ücreti\t{FFBF00}%s\n{FFBF00}» {FFFFFF}Alýnan Reklam Sayýsý\t%d\n{FFBF00}» {FFFFFF}Reklam Noktasýný Deðiþtir\n \n \n{FFBF00}» Çekiliþ", "Seç", "Geri",
	(Birlikler[id][yayinDurum] == 1) ? ("{FFBF00}Açýk") : ("{FF0000}Kapalý"), Dinleyici_Sayisi(id),(Birlikler[id][yayinTipi] == 0) ? ("Haber") : ("Müzik"), (Birlikler[id][ReklamAlimi] == 1) ? ("{FFBF00}Alýnýyor") : ("{FF0000}Alýnmýyor"), FormatNumber(Birlikler[id][ReklamUcreti]), Birlikler[id][ReklamSayisi]);
	return 1;
}
stock Dinleyici_Sayisi(birlikid)
{
	new sayi = 0;
	foreach(new i:Player)
	{
	    if(PlayerData[i][pDinle] == birlikid)
	    {
	        sayi++;
		}
	}
	return sayi;
}
Dialog:MaksRutbe(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::birlik(playerid);
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, MaksRutbe, DIALOG_STYLE_INPUT, "{72C425}Maksimum Rütbe Deðiþtir", "Rütbe sayýsý: %d\n\nMaksimum rütbe sayýsýný girin:", "Ayarla", "Geri", Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]);
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, MaksRutbe, DIALOG_STYLE_INPUT, "{72C425}Maksimum Rütbe Deðiþtir", "Rütbe sayýsý: %d\n\nMaksimum rütbe sayýsýný girin:", "Ayarla", "Geri", Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]);
	    if(strval(inputtext) < 4 || strval(inputtext) > 15)
	    {
	        HataMesajGonder(playerid, "Minimum 3, maksimum 15 girebilirsiniz.");
	        return Dialog_Show(playerid, MaksRutbe, DIALOG_STYLE_INPUT, "{72C425}Maksimum Rütbe Deðiþtir", "Rütbe sayýsý: %d\n\nMaksimum rütbe sayýsýný girin:", "Ayarla", "Geri", Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]);
	    }
	    Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler] = strval(inputtext);
	    PlayerData[playerid][pFactionRutbe] = strval(inputtext);
	    MesajGonder(playerid, "Maksimum Rütbe sayýsý %d olarak deðiþtirildi.", strval(inputtext));
	}
	return 1;
}
Dialog:AjansAyarlari(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::birlik(playerid);
	if(response)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(Birlikler[PlayerData[playerid][pFaction]][yayinDurum] == 1) Birlikler[PlayerData[playerid][pFaction]][yayinDurum] = 0;
	            else Birlikler[PlayerData[playerid][pFaction]][yayinDurum] = 1;
	            AjansAyarlari(playerid);
	            Birlik_Kaydet(PlayerData[playerid][pFaction]);
	        }
	        case 2:
	        {
	            if(Birlikler[PlayerData[playerid][pFaction]][yayinTipi] == 1) Birlikler[PlayerData[playerid][pFaction]][yayinTipi] = 0;
	            else Birlikler[PlayerData[playerid][pFaction]][yayinTipi] = 1;
	            AjansAyarlari(playerid);
	            Birlik_Kaydet(PlayerData[playerid][pFaction]);
	        }
	        case 3:
	        {
	            if(Birlikler[PlayerData[playerid][pFaction]][ReklamAlimi] == 1) Birlikler[PlayerData[playerid][pFaction]][ReklamAlimi] = 0;
	            else Birlikler[PlayerData[playerid][pFaction]][ReklamAlimi] = 1;
	            AjansAyarlari(playerid);
	            Birlik_Kaydet(PlayerData[playerid][pFaction]);
	        }
	        case 4:
	        {
	            Dialog_Show(playerid, ReklamUcreti, DIALOG_STYLE_INPUT, "{FFBF00}Reklam Ücreti", "Lütfen yeni bir reklam ücreti girin:", "Devam", "Geri");
	        }
	        case 6:
	        {
	            new id = Reklam_Nearest(playerid, 20.0);
	            if(id != -1) return HataMesajGonder(playerid, "Baþka bir ajansýn reklam noktasýna yakýnsýnýz.");
	            GetPlayerPos(playerid, Birlikler[PlayerData[playerid][pFaction]][reklamPos][0],  Birlikler[PlayerData[playerid][pFaction]][reklamPos][1],  Birlikler[PlayerData[playerid][pFaction]][reklamPos][2]);
	            if(IsValidDynamicPickup(Birlikler[PlayerData[playerid][pFaction]][reklamPickup])) DestroyDynamicPickup(Birlikler[PlayerData[playerid][pFaction]][reklamPickup]);
	            if(IsValidDynamic3DTextLabel(Birlikler[PlayerData[playerid][pFaction]][reklamLabel])) DestroyDynamic3DTextLabel(Birlikler[PlayerData[playerid][pFaction]][reklamLabel]);
	            Birlikler[PlayerData[playerid][pFaction]][reklamPickup] = CreateDynamicPickup(1239, 23, Birlikler[PlayerData[playerid][pFaction]][reklamPos][0], Birlikler[PlayerData[playerid][pFaction]][reklamPos][1], Birlikler[PlayerData[playerid][pFaction]][reklamPos][2]);
	            new str[130];
	            format(str, sizeof(str), "{E74C3C}[Reklam Noktasý]\n{E74C3C}Ajans: {FFFFFF}%s\n{E74C3C}Ücret: {FFFFFF}%s\n{E74C3C}(/reklamver)", Birlikler[PlayerData[playerid][pFaction]][birlikAd], FormatNumber(Birlikler[PlayerData[playerid][pFaction]][ReklamUcreti]));
	            Birlikler[PlayerData[playerid][pFaction]][reklamLabel] = CreateDynamic3DTextLabel(str, -1, Birlikler[PlayerData[playerid][pFaction]][reklamPos][0], Birlikler[PlayerData[playerid][pFaction]][reklamPos][1], Birlikler[PlayerData[playerid][pFaction]][reklamPos][2], 10.0);
	            Birlik_Kaydet(PlayerData[playerid][pFaction]);
	        }
	        case 9:
	        {
	            Dialog_Show(playerid, Cekilis, DIALOG_STYLE_TABLIST, "{FFBF00}Çekiliþ", "{FF0000}» {FFFFFF}Çekiliþ Durumu\t%s\n{FF0000}» {FFFFFF}Çekiliþ Ödül\t{FFBF00}%s\n{FF0000}» {FFFFFF}Katýlýmcý Sayýsý\t%d\n{FFBF00}» {FFFFFF}Çekiliþi Bitir", "Seç", "Geri",
	            (Birlikler[PlayerData[playerid][pFaction]][CekilisBasladi] == false) ? ("{ff0000}Kapalý") : ("{00ff2a}Açýk"), FormatNumber(Birlikler[PlayerData[playerid][pFaction]][cekilisOdul]), Iter_Count(CekilisKatilimcilar[PlayerData[playerid][pFaction]]));
	        }
	    }
	}
	return 1;
}
stock Reklam_Nearest(playerid, Float:radius)
{
	for(new i; i<MAX_BIRLIK; i++) if(IsValidDynamicPickup(Birlikler[i][reklamPickup]) && IsPlayerInRangeOfPoint(playerid, radius, Birlikler[i][reklamPos][0], Birlikler[i][reklamPos][1], Birlikler[i][reklamPos][2]))
	{
	    return i;
	}
	return -1;
}
Dialog:Cekilis(playerid, response, listitem, inputtext[])
{
	if(!response) return AjansAyarlari(playerid);
	if(response)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(Birlikler[PlayerData[playerid][pFaction]][CekilisBasladi] == false)
	            {
	                Dialog_Show(playerid, CekilisBaslat, DIALOG_STYLE_INPUT, "{FFBF00}Çekiliþ Baþlat", "Lütfen çekiliþ ödülünü girin ($5,000 ile &200,000 arasýnda olmalýdýr):", "Baþlat", "Kapat");
	            }
	            else
	            {
	                Birlikler[PlayerData[playerid][pFaction]][CekilisBasladi] = false;
	                Iter_Clear(CekilisKatilimcilar[PlayerData[playerid][pFaction]]);
	                Birlikler[PlayerData[playerid][pFaction]][cekilisOdul] = 0;
	                Dialog_Show(playerid, Cekilis, DIALOG_STYLE_TABLIST, "{FFBF00}Çekiliþ", "{FF0000}» {FFFFFF}Çekiliþ Durumu\t%s\n{FF0000}» {FFFFFF}Çekiliþ Ödül\t{FFBF00}%s\n{FF0000}» {FFFFFF}Katýlýmcý Sayýsý\t%d\n{FFBF00}» {FFFFFF}Çekiliþi Bitir", "Seç", "Geri",
                    (Birlikler[PlayerData[playerid][pFaction]][CekilisBasladi] == false) ? ("{ff0000}Kapalý") : ("{00ff2a}Açýk"), FormatNumber(Birlikler[PlayerData[playerid][pFaction]][cekilisOdul]), Iter_Count(CekilisKatilimcilar[PlayerData[playerid][pFaction]]));
	            }
	        }
	        case 1:
	        {
	            Dialog_Show(playerid, CekilisOdul, DIALOG_STYLE_INPUT, "{FFBF00}Çekiliþ Ödül", "Lütfen çekiliþ ödülünü girin ($5,000 ile &200,000 arasýnda olmalýdýr):", "Deðiþtir", "Geri");
	        }
	        case 3:
	        {
                if(Birlikler[PlayerData[playerid][pFaction]][CekilisBasladi] == false) return HataMesajGonder(playerid, "Çekiliþ baþlatýlmamýþ.");
                if(Birlikler[PlayerData[playerid][pFaction]][cekilisOdul] < 5000 || Birlikler[PlayerData[playerid][pFaction]][birlikKasaPara] < Birlikler[PlayerData[playerid][pFaction]][cekilisOdul])
                {
                    HataMesajGonder(playerid, "Çekiliþ ödülü $5,000'den az veya birlik kasasýnda yeterli para yok.");
                    Dialog_Show(playerid, Cekilis, DIALOG_STYLE_TABLIST, "{FFBF00}Çekiliþ", "{FF0000}» {FFFFFF}Çekiliþ Durumu\t%s\n{FF0000}» {FFFFFF}Çekiliþ Ödül\t{FFBF00}%s\n{FF0000}» {FFFFFF}Katýlýmcý Sayýsý\t%d\n{FFBF00}» {FFFFFF}Çekiliþi Bitir", "Seç", "Geri",
                    (Birlikler[PlayerData[playerid][pFaction]][CekilisBasladi] == false) ? ("{ff0000}Kapalý") : ("{00ff2a}Açýk"), FormatNumber(Birlikler[PlayerData[playerid][pFaction]][cekilisOdul]), Iter_Count(CekilisKatilimcilar[PlayerData[playerid][pFaction]]));
                    return 1;
                }
                /*if(Iter_Count(CekilisKatilimcilar[PlayerData[playerid][pFaction]]) < 10)
                {
                    HataMesajGonder(playerid, "En az 10 kiþi katýlmadan çekiliþ sonuçlanamaz.");
                    Dialog_Show(playerid, Cekilis, DIALOG_STYLE_TABLIST, "{FFBF00}Çekiliþ", "{FF0000}» {FFFFFF}Çekiliþ Durumu\t%s\n{FF0000}» {FFFFFF}Çekiliþ Ödül\t{FFBF00}%s\n{FF0000}» {FFFFFF}Katýlýmcý Sayýsý\t%d\n{FFBF00}» {FFFFFF}Çekiliþi Bitir", "Seç", "Geri",
                    (Birlikler[PlayerData[playerid][pFaction]][CekilisBasladi] == false) ? ("{ff0000}Kapalý") : ("{00ff2a}Açýk"), FormatNumber(Birlikler[PlayerData[playerid][pFaction]][cekilisOdul]), Iter_Count(CekilisKatilimcilar[PlayerData[playerid][pFaction]]));
                    return 1;
                }*/
                new sqlid = Iter_Random(CekilisKatilimcilar[PlayerData[playerid][pFaction]]);
                new oyuncuID = GetPlayerIDWithSQLID(sqlid);
                if(oyuncuID != -1 && OyundaDegil(oyuncuID))
                {
                    ParaVer(oyuncuID, Birlikler[PlayerData[playerid][pFaction]][cekilisOdul]);
                    MesajGonder(oyuncuID, "%s adlý yayýn ajansýnýn yaptýðý %s deðerindeki çekiliþi kazandýnýz!", Birlikler[PlayerData[playerid][pFaction]][birlikAd], FormatNumber(Birlikler[PlayerData[playerid][pFaction]][cekilisOdul]));
                }
                else
                {
                    new str[100];
                    format(str, sizeof(str), "%s adlý yayýn ajansýnýn yaptýðý %s deðerindeki çekiliþi kazandýnýz!",Birlikler[PlayerData[playerid][pFaction]][birlikAd], FormatNumber(Birlikler[PlayerData[playerid][pFaction]][cekilisOdul]));
                    BildirimEkle(sqlid, str, "Sistem");
                    OfflineParaVer(sqlid, Birlikler[PlayerData[playerid][pFaction]][cekilisOdul]);
                }
                foreach(new i:Player) if((PlayerData[i][pDinle] == PlayerData[playerid][pFaction] || i == playerid) && PlayerData[i][pAyarlar][2] == 0)
    			{
        			SendClientMessageEx(i, 0x42f445FF, "[%s] %s, %s deðerindeki çekiliþi kazandý!", Birlikler[PlayerData[playerid][pFaction]][birlikAd], SQLName(sqlid, 0), FormatNumber(Birlikler[PlayerData[playerid][pFaction]][cekilisOdul]));
    			}
                Birlikler[PlayerData[playerid][pFaction]][birlikKasaPara] -= Birlikler[PlayerData[playerid][pFaction]][cekilisOdul];
                Birlikler[PlayerData[playerid][pFaction]][CekilisBasladi] = false;
                Birlikler[PlayerData[playerid][pFaction]][cekilisOdul] = 0;
                Iter_Clear(CekilisKatilimcilar[PlayerData[playerid][pFaction]]);
	        }
	    }
	}
	return 1;
}
Dialog:CekilisOdul(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    Dialog_Show(playerid, Cekilis, DIALOG_STYLE_TABLIST, "{FFBF00}Çekiliþ", "{FF0000}» {FFFFFF}Çekiliþ Durumu\t%s\n{FF0000}» {FFFFFF}Çekiliþ Ödül\t{FFBF00}%s\n{FF0000}» {FFFFFF}Katýlýmcý Sayýsý\t%d\n{FFBF00}» {FFFFFF}Çekiliþi Bitir", "Seç", "Geri",
        (Birlikler[PlayerData[playerid][pFaction]][CekilisBasladi] == false) ? ("{ff0000}Kapalý") : ("{00ff2a}Açýk"), FormatNumber(Birlikler[PlayerData[playerid][pFaction]][cekilisOdul]), Iter_Count(CekilisKatilimcilar[PlayerData[playerid][pFaction]]));
	}
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, CekilisOdul, DIALOG_STYLE_INPUT, "{FFBF00}Çekiliþ Ödül", "Lütfen çekiliþ ödülünü girin ($5,000 ile &200,000 arasýnda olmalýdýr):", "Deðiþtir", "Geri");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, CekilisOdul, DIALOG_STYLE_INPUT, "{FFBF00}Çekiliþ Ödül", "Lütfen çekiliþ ödülünü girin ($5,000 ile &200,000 arasýnda olmalýdýr):", "Deðiþtir", "Geri");
	    if(strval(inputtext) < 5000 || strval(inputtext) > 200000) return Dialog_Show(playerid, CekilisOdul, DIALOG_STYLE_INPUT, "{FFBF00}Çekiliþ Ödül", "Lütfen çekiliþ ödülünü girin ($5,000 ile &200,000 arasýnda olmalýdýr):", "Deðiþtir", "Geri");
	    if(Birlikler[PlayerData[playerid][pFaction]][birlikKasaPara] < strval(inputtext))
	    {
            HataMesajGonder(playerid, "Birlik kasasýnda o kadar para yok!");
            return Dialog_Show(playerid, CekilisOdul, DIALOG_STYLE_INPUT, "{FFBF00}Çekiliþ Ödül", "Lütfen çekiliþ ödülünü girin ($5,000 ile &200,000 arasýnda olmalýdýr):", "Deðiþtir", "Geri");
	    }
	    Birlikler[PlayerData[playerid][pFaction]][cekilisOdul] = strval(inputtext);
	    Dialog_Show(playerid, Cekilis, DIALOG_STYLE_TABLIST, "{FFBF00}Çekiliþ", "{FF0000}» {FFFFFF}Çekiliþ Durumu\t%s\n{FF0000}» {FFFFFF}Çekiliþ Ödül\t{FFBF00}%s\n{FF0000}» {FFFFFF}Katýlýmcý Sayýsý\t%d\n{FFBF00}» {FFFFFF}Çekiliþi Bitir", "Seç", "Geri",
        (Birlikler[PlayerData[playerid][pFaction]][CekilisBasladi] == false) ? ("{ff0000}Kapalý") : ("{00ff2a}Açýk"), FormatNumber(Birlikler[PlayerData[playerid][pFaction]][cekilisOdul]), Iter_Count(CekilisKatilimcilar[PlayerData[playerid][pFaction]]));
	}
	return 1;
}
Dialog:CekilisBaslat(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, CekilisBaslat, DIALOG_STYLE_INPUT, "{FFBF00}Çekiliþ Baþlat", "Lütfen çekiliþ ödülünü girin ($5,000 ile &200,000 arasýnda olmalýdýr):", "Baþlat", "Kapat");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, CekilisBaslat, DIALOG_STYLE_INPUT, "{FFBF00}Çekiliþ Baþlat", "Lütfen çekiliþ ödülünü girin ($5,000 ile &200,000 arasýnda olmalýdýr):", "Baþlat", "Kapat");
	    if(strval(inputtext) < 5000 || strval(inputtext) > 200000) return Dialog_Show(playerid, CekilisBaslat, DIALOG_STYLE_INPUT, "{FFBF00}Çekiliþ Baþlat", "Lütfen çekiliþ ödülünü girin ($5,000 ile &200,000 arasýnda olmalýdýr):", "Baþlat", "Kapat");
	    if(Birlikler[PlayerData[playerid][pFaction]][birlikKasaPara] < strval(inputtext))
	    {
	        HataMesajGonder(playerid, "Birlik kasasýnda o kadar para yok!");
	        return Dialog_Show(playerid, CekilisBaslat, DIALOG_STYLE_INPUT, "{FFBF00}Çekiliþ Baþlat", "Lütfen çekiliþ ödülünü girin ($5,000 ile &200,000 arasýnda olmalýdýr):", "Baþlat", "Kapat");
	    }
	    Birlikler[PlayerData[playerid][pFaction]][CekilisBasladi] = true;
        Iter_Clear(CekilisKatilimcilar[PlayerData[playerid][pFaction]]);
        Birlikler[PlayerData[playerid][pFaction]][cekilisOdul] = strval(inputtext);
        foreach(new i:Player) if((PlayerData[i][pDinle] == PlayerData[playerid][pFaction] || i == playerid) && PlayerData[i][pAyarlar][2] == 0)
    	{
        	SendClientMessageEx(i, 0x42f445FF, "[%s] %s %s deðerinde çekiliþ baþlattý. (/cekiliskatil)", Birlikler[PlayerData[playerid][pFaction]][birlikAd], ReturnName(playerid, 0), FormatNumber(strval(inputtext)));
    	}
    	MesajGonder(playerid, "Çekiliþ baþlatýldý, çekiliþ ayarlarýndan \"Çekiliþi Bitir\" seçeneðine týklayarak çekiliþi sonuçlandýrabilirsiniz.");
	}
	return 1;
}
Dialog:ReklamUcreti(playerid, response, listitem, inputtext[])
{
	if(!response) return AjansAyarlari(playerid);
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid, ReklamUcreti, DIALOG_STYLE_INPUT, "{FFBF00}Reklam Ücreti", "Lütfen yeni bir reklam ücreti girin:", "Devam", "Geri");
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid, ReklamUcreti, DIALOG_STYLE_INPUT, "{FFBF00}Reklam Ücreti", "Lütfen yeni bir reklam ücreti girin:", "Devam", "Geri");
	    if(strval(inputtext) < 0) return Dialog_Show(playerid, ReklamUcreti, DIALOG_STYLE_INPUT, "{FFBF00}Reklam Ücreti", "Lütfen yeni bir reklam ücreti girin:", "Devam", "Geri");

	    Birlikler[PlayerData[playerid][pFaction]][ReklamUcreti] = strval(inputtext);
	    if(IsValidDynamicPickup(Birlikler[PlayerData[playerid][pFaction]][reklamPickup])) DestroyDynamicPickup(Birlikler[PlayerData[playerid][pFaction]][reklamPickup]);
     	if(IsValidDynamic3DTextLabel(Birlikler[PlayerData[playerid][pFaction]][reklamLabel])) DestroyDynamic3DTextLabel(Birlikler[PlayerData[playerid][pFaction]][reklamLabel]);
      	Birlikler[PlayerData[playerid][pFaction]][reklamPickup] = CreateDynamicPickup(1239, 23, Birlikler[PlayerData[playerid][pFaction]][reklamPos][0], Birlikler[PlayerData[playerid][pFaction]][reklamPos][1], Birlikler[PlayerData[playerid][pFaction]][reklamPos][2]);
       	new str[124];
        format(str, sizeof(str), "{E74C3C}[Reklam Noktasý]\n{E74C3C}Ajans: {FFFFFF}%s\n{E74C3C}Ücret: {FFFFFF}%s\n{E74C3C}(/reklamver)", Birlikler[PlayerData[playerid][pFaction]][birlikAd], FormatNumber(Birlikler[PlayerData[playerid][pFaction]][ReklamUcreti]));
        Birlikler[PlayerData[playerid][pFaction]][reklamLabel] = CreateDynamic3DTextLabel(str, -1, Birlikler[PlayerData[playerid][pFaction]][reklamPos][0], Birlikler[PlayerData[playerid][pFaction]][reklamPos][1], Birlikler[PlayerData[playerid][pFaction]][reklamPos][2], 10.0);
	    Birlik_Kaydet(PlayerData[playerid][pFaction]);
	    AjansAyarlari(playerid);
	}
	return 1;
}
Dialog:BirliktenAt(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::birlik(playerid);
	if(response)
	{
	    if(isnull(inputtext)) return Dialog_Show(playerid,BirliktenAt,DIALOG_STYLE_INPUT,"{72C425}Üye At","{FFFFFF}Lütfen birlikten atmak istediðiniz kiþinin ID'sini girin.","Devam","Geri");
		if(!IsNumeric(inputtext)) return Dialog_Show(playerid,BirliktenAt,DIALOG_STYLE_INPUT,"{72C425}Üye At","{FFFFFF}Lütfen birlikten atmak istediðiniz kiþinin ID'sini girin.","Devam","Geri");
		if(!OyundaDegil(strval(inputtext)))
		{
		    HataMesajGonder(playerid,"Böyle bir kiþi yok.");
		    return Dialog_Show(playerid,BirliktenAt,DIALOG_STYLE_INPUT,"{72C425}Üye At","{FFFFFF}Lütfen birlikten atmak istediðiniz kiþinin ID'sini girin.","Devam","Geri");
		}
		new targetid = strval(inputtext);
		if(PlayerData[playerid][pFaction] != PlayerData[targetid][pFaction])
		{
		    HataMesajGonder(playerid,"Bu kiþi sizin birliðinizden deðil.");
		    return Dialog_Show(playerid,BirliktenAt,DIALOG_STYLE_INPUT,"{72C425}Üye At","{FFFFFF}Lütfen birlikten atmak istediðiniz kiþinin ID'sini girin.","Devam","Geri");
		}
		if(targetid == playerid)
		{
		    HataMesajGonder(playerid,"Kendi kendini birlikten atamazsýn.");
		    return 1;
		}
		if (GetFactionType(targetid) == BIRLIK_LSPD || GetFactionType(targetid) == BIRLIK_FBI)
		{
		    ZirhAyarla(targetid,0);
		    ResetWeapons(targetid);
		}
		SendBirlikMessage(PlayerData[playerid][pFaction],-1,"{ff7c4d}BÝRLÝK: {FFFFFF}%s adlý kiþi, %s adlý kiþiyi birlikten attý.",ReturnName(playerid,0),ReturnName(pID,0));
		BirliktenAt(targetid);
		Oyuncu_Kaydet(targetid);
	}
	return 1;
}
Dialog:BirliktenCik(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new factionid = PlayerData[playerid][pFaction];
	    if(factionid == -1) return HataMesajGonder(playerid,"Birlik üyesi deðilsin.");
	    if (GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_FBI)
		{
			ZirhAyarla(playerid, 0);
			ResetWeapons(playerid);
		}
		SendBirlikMessage(factionid,-1,"{ff7c4d}BÝRLÝK: {FFFFFF}%s adlý kiþi birlikten ayrýldý.",ReturnName(playerid,0));
		BirliktenAt(playerid);
		Oyuncu_Kaydet(playerid);
	}
	return 1;
}
ResetWeapon(playerid, weaponid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) {
	    if (PlayerData[playerid][pSilahlar][i] != weaponid) {
	        GivePlayerWeapon(playerid, PlayerData[playerid][pSilahlar][i], PlayerData[playerid][pMermiler][i]);
		}
		else {
            PlayerData[playerid][pSilahlar][i] = 0;
            PlayerData[playerid][pMermiler][i] = 0;
	    }
	}
	return 1;
}
stock Birlik_OfflineUyeler(playerid,factionid)
{
	new query[128];
	format(query,sizeof(query),"SELECT * FROM `oyuncular` WHERE `Birlik` = '%d'",factionid);
	new Cache:sawyer = mysql_query(baglanti,query);
	new rows;
	cache_get_row_count(rows);
	if(!rows) return HataMesajGonder(playerid,"Çevrimdýþý üye bulunamadý.");
	new string[2000],name[24],rutbe,songiris[23],id,sayi;
	strcat(string, "ID\tAd\tRütbe\tSon Giriþ\n");
	for (new i = 0; i < rows; i ++)
	{
	    if(sayi < 75)
	    {
	        cache_get_value_name(i,"Isim",name,24);
	        new pid = GetPlayerID(name);
	        if(pid == -1)
	        {
	            sayi++;
	            cache_get_value_name_int(i,"ID",id);
	            cache_get_value_name_int(i,"BirlikRutbe",rutbe);
	            cache_get_value_name(i,"SonGiris",songiris,23);
	            format(string,sizeof(string),"%s{59DC1C}%d\t{59DC1C}%s\t{59DC1C}%s\t{59DC1C}%s\n",string,id,name,BirlikRutbe[factionid][rutbe-1],songiris);
	        }
		}
	}
	cache_delete(sawyer);
	if(sayi == 0) return HataMesajGonder(playerid,"Hiç çevrimdýþý üye yok.");
	Dialog_Show(playerid, OfflineUyeler, DIALOG_STYLE_TABLIST_HEADERS,"{72C425}Çevrimdýþý Üyeler",string,"Ayarla", "{FF6347}Iptal");
	return 1;
}
Dialog:OfflineUyeler(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::birlik(playerid);
	if(response)
	{
	    new notreal[128],idx;
	    notreal = strtok(inputtext,idx);
	    SetPVarInt(playerid,"OfflineSQLID",strval(notreal));
	    if(Birlikler[PlayerData[playerid][pFaction]][birlikTip] >= 1 && Birlikler[PlayerData[playerid][pFaction]][birlikTip] <= 3 && Birlikler[PlayerData[playerid][pFaction]][birlikTip] != 4)
	    {
	        Dialog_Show(playerid,OfflineUyeDuzenle,DIALOG_STYLE_LIST,"{72C425}Üye Ýþlem","{ED4D18}» Birlikten At\n{ED4D18}» Rütbe Deðiþtir","Seç","Geri");
	    }
	    else
	    {
	        Dialog_Show(playerid,OfflineUyeDuzenle,DIALOG_STYLE_LIST,"{72C425}Üye Ýþlem","{ED4D18}» Birlikten At\n{ED4D18}» Rütbe Deðiþtir\n{ED4D18}» Divizyon Deðiþtir","Seç","Geri");
	    }
	}
	return 1;
}
Dialog:OfflineUyeDuzenle(playerid, response, listitem, inputtext[])
{
	if(!response) return Birlik_OfflineUyeler(playerid,PlayerData[playerid][pFaction]);
	if(response)
	{
	    new sqlid = GetPVarInt(playerid, "OfflineSQLID");
     	if(listitem == 0)
     	{
     	    new query[300];
     	    format(query,sizeof(query),"UPDATE `oyuncular` SET `Birlik` = '-1',`BirlikRutbe` = '0',`BirlikDivizyon` = '0' WHERE `ID` = '%d'",sqlid);
     	    mysql_query(baglanti,query, false);
     	    format(query,sizeof(query),"%s tarafýndan birlikten atýldýn.",ReturnName(playerid,0));
     	    BildirimEkle(sqlid,query,"Birlik");
	     	SendBirlikMessage(PlayerData[playerid][pFaction],-1,"{ff7c4d}BÝRLÝK: {FFFFFF}%s adlý kiþi, %s tarafýndan birlikten atýldý.",SQLName(sqlid,0),ReturnName(playerid,0));
			Birlik_OfflineUyeler(playerid,PlayerData[playerid][pFaction]);
			return 1;
 		}
 		if(listitem == 1)
 		{
 		    SetPVarInt(playerid,"OffRank",1);
 		    RutbeDegistirmeDialog(playerid,PlayerData[playerid][pFaction]);
 		    return 1;
 		}
 		if(listitem == 2)
 		{
 		    SetPVarInt(playerid,"OffDiviz",1);
 		    Birlik_DivizyonDegistir(playerid,PlayerData[playerid][pFaction]);
 		}
	}
	return 1;
}
GetVehicleDriver(vehicleid) {
	foreach (new i : Player) {
		if (GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == vehicleid) return i;
	}
	return INVALID_PLAYER_ID;
}
Dialog:RutbeYetkilendirme(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new factionid = PlayerData[playerid][pFaction];
	    if(listitem == 0) // Üye Alma
	    {
	        Dialog_Show(playerid,UAS,DIALOG_STYLE_INPUT,"{72C425}Üye Alma Seviyesi","{FFFFFF}Birliðinizde hangi seviyenin üye alabileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][0]);
	    }
	    if(listitem == 1) // Üye Atma
	    {
	        Dialog_Show(playerid,BUAS,DIALOG_STYLE_INPUT,"{72C425}Üye Atma Seviyesi","{FFFFFF}Birliðinizde hangi seviyenin üye atabileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][1]);
	    }
	    if(listitem == 2) // Rütbe Deðiþtirme
	    {
	        Dialog_Show(playerid,RDS,DIALOG_STYLE_INPUT,"{72C425}Rütbe Deðiþtirme Seviyesi","{FFFFFF}Birliðinizde hangi seviyenin rütbe deðiþtirebileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][2]);
	    }
	    if(listitem == 3) // Divizyon Deðiþtirme Seviyesi
	    {
	        Dialog_Show(playerid,DDS,DIALOG_STYLE_INPUT,"{72C425}Divizyon Deðiþtirme Seviyesi","{FFFFFF}Birliðinizde hangi seviyenin divizyon deðiþtirebileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][3]);
	    }
	    if(listitem == 4) // Araçlarý Spawnlama
	    {
	        Dialog_Show(playerid,ASS,DIALOG_STYLE_INPUT,"{72C425}Araçlarý Spawnlama Seviyesi","{FFFFFF}Birliðinizde hangi seviyenin birlik araçlarýný spawnlayabileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][4]);
	    }
	    if(listitem == 5) // OOC Chat Kapatma Seviyesi
	    {
	        Dialog_Show(playerid,OCKS,DIALOG_STYLE_INPUT,"{72C425}OOC Chat Kapatma Seviyesi","{FFFFFF}Birliðinizde hangi seviyenin OOC Chat Kapatabileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][5]);
	    }
	    if(listitem == 6) // Birlik Kasasýndan Para Alma
	    {
	        Dialog_Show(playerid,BKPA,DIALOG_STYLE_INPUT,"{72C425}Birlik Kasasýndan Para Alma","{FFFFFF}Birliðinizde hangi seviyenin Birlik Kasasýndan Para Alabileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][6]);
	    }
	    if(listitem == 7) // Ajans Ayarlari
	    {
	        Dialog_Show(playerid, AjansAyarlariSeviye, DIALOG_STYLE_INPUT, "{72C425}Ajans Ayarlarý Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin Ajans ayarlarýna eriþebileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][7]);
	    }
	}
	if(!response) return callcmd::birlik(playerid);
	return 1;
}
Dialog:UAS(playerid, response, listitem, inputtext[])
{
	if(!response) return Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST,"{72C425} Rütbe Yetkilendirmeleri","{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi","Seç","Geri");
	if(response)
	{
	    new factionid = PlayerData[playerid][pFaction];
	    if(isnull(inputtext)) return Dialog_Show(playerid,UAS,DIALOG_STYLE_INPUT,"{72C425}Üye Alma Seviyesi","{FFFFFF}Birliðinizde hangi seviyenin üye alabileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][0]);
	    if(!IsNumeric(inputtext)) return Dialog_Show(playerid,UAS,DIALOG_STYLE_INPUT,"{72C425}Üye Alma Seviyesi","{FFFFFF}Birliðinizde hangi seviyenin üye alabileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][0]);
	    if(strval(inputtext) > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]) return Dialog_Show(playerid,UAS,DIALOG_STYLE_INPUT,"{72C425}Üye Alma Seviyesi","{FFFFFF}Birliðinizde hangi seviyenin üye alabileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][0]);
	    Birlikler[PlayerData[playerid][pFaction]][birlikYetkilendirme][0] = strval(inputtext);
	    Birlik_Kaydet(PlayerData[playerid][pFaction]);
	    BilgiMesajGonder(playerid,"Üye Alma seviyesi {72C425}%d {FFFFFF}olarak deðiþtirildi.",strval(inputtext));
	    Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST,"{72C425} Rütbe Yetkilendirmeleri","{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi","Seç","Geri");

	}
	return 1;
}
Dialog:BUAS(playerid, response, listitem, inputtext[])
{
    if(!response) return Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST,"{72C425} Rütbe Yetkilendirmeleri","{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi","Seç","Geri");
    if(response)
    {
        new factionid = PlayerData[playerid][pFaction];
		if(isnull(inputtext)) return Dialog_Show(playerid,BUAS,DIALOG_STYLE_INPUT,"{72C425}Üye Atma Seviyesi","{FFFFFF}Birliðinizde hangi seviyenin üye atabileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][1]);
	 	if(!IsNumeric(inputtext)) return Dialog_Show(playerid,BUAS,DIALOG_STYLE_INPUT,"{72C425}Üye Atma Seviyesi","{FFFFFF}Birliðinizde hangi seviyenin üye atabileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][1]);
	 	if(strval(inputtext) > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]) return Dialog_Show(playerid,BUAS,DIALOG_STYLE_INPUT,"{72C425}Üye Atma Seviyesi","{FFFFFF}Birliðinizde hangi seviyenin üye atabileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][1]);
	 	Birlikler[PlayerData[playerid][pFaction]][birlikYetkilendirme][1] = strval(inputtext);
	    Birlik_Kaydet(PlayerData[playerid][pFaction]);
	    BilgiMesajGonder(playerid,"Üye Atma seviyesi {72C425}%d {FFFFFF}olarak deðiþtirildi.",strval(inputtext));
	    Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST,"{72C425} Rütbe Yetkilendirmeleri","{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi","Seç","Geri");
    }
	return 1;
}
Dialog:RDS(playerid, response, listitem, inputtext[])
{
    if(!response) return Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST,"{72C425} Rütbe Yetkilendirmeleri","{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi","Seç","Geri");
    if(response)
    {
        new factionid = PlayerData[playerid][pFaction];
		if(isnull(inputtext)) return Dialog_Show(playerid,RDS,DIALOG_STYLE_INPUT,"{72C425}Rütbe Deðiþtirme Seviyesi","{FFFFFF}Birliðinizde hangi seviyenin rütbe deðiþtirebileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][2]);
	 	if(!IsNumeric(inputtext)) return Dialog_Show(playerid,RDS,DIALOG_STYLE_INPUT,"{72C425}Rütbe Deðiþtirme Seviyesi","{FFFFFF}Birliðinizde hangi seviyenin rütbe deðiþtirebileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][2]);
	 	if(strval(inputtext) > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]) return Dialog_Show(playerid,RDS,DIALOG_STYLE_INPUT,"{72C425}Rütbe Deðiþtirme Seviyesi","{FFFFFF}Birliðinizde hangi seviyenin rütbe deðiþtirebileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][2]);
	 	Birlikler[PlayerData[playerid][pFaction]][birlikYetkilendirme][2] = strval(inputtext);
	    Birlik_Kaydet(PlayerData[playerid][pFaction]);
	    BilgiMesajGonder(playerid,"Rütbe Deðiþtirme Seviyesi {72C425}%d {FFFFFF}olarak deðiþtirildi.",strval(inputtext));
	    Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST,"{72C425} Rütbe Yetkilendirmeleri","{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi","Seç","Geri");
    }
	return 1;
}
Dialog:DDS(playerid, response, listitem, inputtext[])
{
    if(!response) return  Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST,"{72C425} Rütbe Yetkilendirmeleri","{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi","Seç","Geri");
    if(response)
    {
        new factionid = PlayerData[playerid][pFaction];
		if(isnull(inputtext)) return  Dialog_Show(playerid,DDS,DIALOG_STYLE_INPUT,"{72C425}Divizyon Deðiþtirme Seviyesi","{FFFFFF}Birliðinizde hangi seviyenin divizyon deðiþtirebileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][3]);
	 	if(!IsNumeric(inputtext))  return Dialog_Show(playerid,DDS,DIALOG_STYLE_INPUT,"{72C425}Divizyon Deðiþtirme Seviyesi","{FFFFFF}Birliðinizde hangi seviyenin divizyon deðiþtirebileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][3]);
	 	if(strval(inputtext) > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]) return  Dialog_Show(playerid,DDS,DIALOG_STYLE_INPUT,"{72C425}Divizyon Deðiþtirme Seviyesi","{FFFFFF}Birliðinizde hangi seviyenin divizyon deðiþtirebileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][3]);
	 	Birlikler[PlayerData[playerid][pFaction]][birlikYetkilendirme][3] = strval(inputtext);
	    Birlik_Kaydet(PlayerData[playerid][pFaction]);
	    BilgiMesajGonder(playerid,"Divizyon Deðiþtirme Seviyesi {72C425}%d {FFFFFF}olarak deðiþtirildi.",strval(inputtext));
	    Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST,"{72C425} Rütbe Yetkilendirmeleri","{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi","Seç","Geri");
    }
	return 1;
}
Dialog:ASS(playerid, response, listitem, inputtext[])
{
    if(!response) return Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST,"{72C425} Rütbe Yetkilendirmeleri","{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi","Seç","Geri");
    if(response)
    {
        new factionid = PlayerData[playerid][pFaction];
		if(isnull(inputtext)) return  Dialog_Show(playerid,ASS,DIALOG_STYLE_INPUT,"{72C425}Araçlarý Spawnlama Seviyesi","{FFFFFF}Birliðinizde hangi seviyenin birlik araçlarýný spawnlayabileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][4]);
	 	if(!IsNumeric(inputtext))  return Dialog_Show(playerid,ASS,DIALOG_STYLE_INPUT,"{72C425}Araçlarý Spawnlama Seviyesi","{FFFFFF}Birliðinizde hangi seviyenin birlik araçlarýný spawnlayabileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][4]);
	 	if(strval(inputtext) > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]) return  Dialog_Show(playerid,ASS,DIALOG_STYLE_INPUT,"{72C425}Araçlarý Spawnlama Seviyesi","{FFFFFF}Birliðinizde hangi seviyenin birlik araçlarýný spawnlayabileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][4]);
	 	Birlikler[PlayerData[playerid][pFaction]][birlikYetkilendirme][4] = strval(inputtext);
	    Birlik_Kaydet(PlayerData[playerid][pFaction]);
	    BilgiMesajGonder(playerid,"Araçlarý Spawnlama Seviyesi {72C425}%d {FFFFFF}olarak deðiþtirildi.",strval(inputtext));
	    Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST,"{72C425} Rütbe Yetkilendirmeleri","{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi","Seç","Geri");
    }
	return 1;
}
Dialog:OCKS(playerid, response, listitem, inputtext[])
{
    if(!response) return Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST,"{72C425} Rütbe Yetkilendirmeleri","{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi","Seç","Geri");
    if(response)
    {
        new factionid = PlayerData[playerid][pFaction];
		if(isnull(inputtext)) return  Dialog_Show(playerid,OCKS,DIALOG_STYLE_INPUT,"{72C425}OOC Chat Kapatma Seviyesi","{FFFFFF}Birliðinizde hangi seviyenin OOC Chat Kapatabileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][5]);
	 	if(!IsNumeric(inputtext))  return Dialog_Show(playerid,OCKS,DIALOG_STYLE_INPUT,"{72C425}OOC Chat Kapatma Seviyesi","{FFFFFF}Birliðinizde hangi seviyenin OOC Chat Kapatabileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][5]);
	 	if(strval(inputtext) > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]) return  Dialog_Show(playerid,OCKS,DIALOG_STYLE_INPUT,"{72C425}OOC Chat Kapatma Seviyesi","{FFFFFF}Birliðinizde hangi seviyenin OOC Chat Kapatabileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][5]);
	 	Birlikler[PlayerData[playerid][pFaction]][birlikYetkilendirme][5] = strval(inputtext);
	    Birlik_Kaydet(PlayerData[playerid][pFaction]);
	    BilgiMesajGonder(playerid,"OOC Chat Kapatma Seviyesi {72C425}%d {FFFFFF}olarak deðiþtirildi.",strval(inputtext));
	    Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST,"{72C425} Rütbe Yetkilendirmeleri","{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi","Seç","Geri");
    }
	return 1;
}
Dialog:BKPA(playerid, response, listitem, inputtext[])
{
    if(!response) return Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST,"{72C425} Rütbe Yetkilendirmeleri","{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi","Seç","Geri");
    if(response)
    {
        new factionid = PlayerData[playerid][pFaction];
		if(isnull(inputtext)) return  Dialog_Show(playerid,BKPA,DIALOG_STYLE_INPUT,"{72C425}Birlik Kasasýndan Para Alma","{FFFFFF}Birliðinizde hangi seviyenin Birlik Kasasýndan Para Alabileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][6]);
	 	if(!IsNumeric(inputtext))  return Dialog_Show(playerid,BKPA,DIALOG_STYLE_INPUT,"{72C425}Birlik Kasasýndan Para Alma","{FFFFFF}Birliðinizde hangi seviyenin Birlik Kasasýndan Para Alabileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][6]);
	 	if(strval(inputtext) > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]) return  Dialog_Show(playerid,BKPA,DIALOG_STYLE_INPUT,"{72C425}Birlik Kasasýndan Para Alma","{FFFFFF}Birliðinizde hangi seviyenin Birlik Kasasýndan Para Alabileceðini girin;\nÞu Anki Seviye: {72C425}%d","Deðiþtir","Geri",Birlikler[factionid][birlikYetkilendirme][6]);
	 	Birlikler[PlayerData[playerid][pFaction]][birlikYetkilendirme][6] = strval(inputtext);
	    Birlik_Kaydet(PlayerData[playerid][pFaction]);
	    BilgiMesajGonder(playerid,"Birlik Kasasýndan Para Alma Seviyesi {72C425}%d {FFFFFF}olarak deðiþtirildi.",strval(inputtext));
	    Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST,"{72C425} Rütbe Yetkilendirmeleri","{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi","Seç","Geri");
    }
	return 1;
}
Dialog:AjansAyarlariSeviye(playerid, response, listitem, inputtext[])
{
    if(!response) return Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST,"{72C425} Rütbe Yetkilendirmeleri","{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi","Seç","Geri");
    if(response)
    {
        new factionid = PlayerData[playerid][pFaction];
		if(isnull(inputtext)) return  Dialog_Show(playerid, AjansAyarlariSeviye, DIALOG_STYLE_INPUT, "{72C425}Ajans Ayarlarý Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin Ajans ayarlarýna eriþebileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][7]);
	 	if(!IsNumeric(inputtext))  return Dialog_Show(playerid, AjansAyarlariSeviye, DIALOG_STYLE_INPUT, "{72C425}Ajans Ayarlarý Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin Ajans ayarlarýna eriþebileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][7]);
	 	if(strval(inputtext) > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]) return  Dialog_Show(playerid, AjansAyarlariSeviye, DIALOG_STYLE_INPUT, "{72C425}Ajans Ayarlarý Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin Ajans ayarlarýna eriþebileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][7]);
	 	Birlikler[PlayerData[playerid][pFaction]][birlikYetkilendirme][7] = strval(inputtext);
	    Birlik_Kaydet(PlayerData[playerid][pFaction]);
	    BilgiMesajGonder(playerid,"Ajans ayarlarý seviyesi {72C425}%d {FFFFFF}olarak deðiþtirildi.",strval(inputtext));
	    Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST,"{72C425} Rütbe Yetkilendirmeleri","{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi","Seç","Geri");
    }
	return 1;
}
Birlik_DivizyonlariGoster(playerid, factionid)
{
    if (factionid != -1 && Birlikler[factionid][birlikExists])
	{
		static
		    string[640];

		string[0] = 0;

		for (new i = 0; i < 5; i ++)
		    format(string, sizeof(string), "%s{72C425}%d: {FFFFFF}%s\n", string, i + 1, BirlikDivizyon[factionid][i]);

		PlayerData[playerid][pFactionEdit] = factionid;
		Dialog_Show(playerid, DivizyonDuzenle, DIALOG_STYLE_LIST, "{72C425}Divizyon Adlarýný Düzenle", string, "Düzenle", "{FF6347}Iptal");
	}
	return 1;
}
Birlik_RutbeleriGoster(playerid, factionid)
{
    if (factionid != -1 && Birlikler[factionid][birlikExists])
	{
		static
		    string[640];

		string[0] = 0;

		for (new i = 0; i < Birlikler[factionid][birlikRutbeler]; i ++)
		    format(string, sizeof(string), "%s{72C425}%d: {FFFFFF}%s\n", string, i + 1, BirlikRutbe[factionid][i]);

		PlayerData[playerid][pFactionEdit] = factionid;
		Dialog_Show(playerid, EditRanks, DIALOG_STYLE_LIST, "Rütbe Adlarýný Düzenle", string, "Düzenle", "{FF6347}Iptal");
	}
	return 1;
}
Dialog:EditRanks(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!Birlikler[PlayerData[playerid][pFactionEdit]][birlikExists])
			return 0;

		PlayerData[playerid][pSelectedSlot] = listitem;
		Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Rütbe Düzenle", "%d. Rütbe için lütfen yeni bir ad girin:\nÞu anki ad: %s", "Tamam", "{FF6347}Iptal", PlayerData[playerid][pSelectedSlot] + 1, BirlikRutbe[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]]);
	}
	if(!response)
	{
	    PlayerData[playerid][pFactionEdit] = -1;
	    PlayerData[playerid][pSelectedSlot] = -1;
	    callcmd::birlik(playerid);

	}
	return 1;
}
Dialog:DivizyonDuzenle(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!Birlikler[PlayerData[playerid][pFactionEdit]][birlikExists])
			return 0;

		PlayerData[playerid][pSelectedSlot] = listitem;
		Dialog_Show(playerid, DivizyonAdiDuzenle, DIALOG_STYLE_INPUT, "Divizyon Düzenle", "%d. Divizyon için lütfen yeni bir ad girin:\nÞu anki ad: %s", "Tamam", "{FF6347}Iptal", PlayerData[playerid][pSelectedSlot]+1, BirlikDivizyon[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]]);
	}
	return 1;
}
Dialog:DivizyonAdiDuzenle(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
			return Dialog_Show(playerid, DivizyonAdiDuzenle, DIALOG_STYLE_INPUT, "Divizyon Düzenle", "%d. Divizyon için lütfen yeni bir ad girin:\nÞu anki ad: %s", "Tamam", "{FF6347}Iptal", PlayerData[playerid][pSelectedSlot]+1, BirlikDivizyon[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]]);

	    if (strlen(inputtext) > 20)
	        return Dialog_Show(playerid, DivizyonAdiDuzenle, DIALOG_STYLE_INPUT, "Divizyon Düzenle", "{FF0000}HATA: en fazla 20 karakterden oluþabilir.\n%d. Divizyon için lütfen yeni bir ad girin:\nÞu anki ad: %s", "Tamam", "{FF6347}Iptal", PlayerData[playerid][pSelectedSlot]+1, BirlikDivizyon[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]]);

		format(BirlikDivizyon[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], 20, inputtext);
		Birlik_Kaydet(PlayerData[playerid][pFactionEdit]);

		Birlik_DivizyonlariGoster(playerid, PlayerData[playerid][pFactionEdit]);
		BilgiMesajGonder(playerid, "%d. divizyon adý \"%s\" olarak deðiþtirildi.", PlayerData[playerid][pSelectedSlot] + 1, inputtext);
	}
	else Birlik_DivizyonlariGoster(playerid, PlayerData[playerid][pFactionEdit]);
	return 1;
}
Dialog:SetRankName(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
			return Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Rütbe Düzenle", "%d. Rütbe için lütfen yeni bir ad girin:\nÞu anki ad: %s", "Tamam", "{FF6347}Iptal", PlayerData[playerid][pSelectedSlot] + 1, BirlikRutbe[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]]);

	    if (strlen(inputtext) > 32)
	        return Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Rütbe Düzenle", "%d. Rütbe için lütfen yeni bir ad girin:\nÞu anki ad: %s", "Tamam", "{FF6347}Iptal", PlayerData[playerid][pSelectedSlot] + 1, BirlikRutbe[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]]);

		format(BirlikRutbe[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], 32, inputtext);
		Birlik_Kaydet(PlayerData[playerid][pFactionEdit]);

		Birlik_RutbeleriGoster(playerid, PlayerData[playerid][pFactionEdit]);
		BilgiMesajGonder(playerid, "%d. rütbenin adý \"%s\" olarak deðiþtirildi.", PlayerData[playerid][pSelectedSlot] + 1, inputtext);
	}
	else Birlik_RutbeleriGoster(playerid, PlayerData[playerid][pFactionEdit]);
	return 1;
}
Dialog:RutbeDegistir(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::birlik(playerid);
	if(response)
	{
	    new userid, notreal[128], idx;
		notreal = strtok(inputtext, idx);
		userid = strval(notreal);
		SetPVarInt(playerid,"RutbeChange",userid);
		//if(userid == playerid) return HataMesajGonder(playerid, "Kendi rütbeni deðiþtiremezsin.");
		if(PlayerData[userid][pFactionRutbe] > PlayerData[playerid][pFactionRutbe]) return HataMesajGonder(playerid,"Kendinden yüksek rütbeli kiþinin rütbesini deðiþtiremezsin.");
		SetPVarInt(playerid,"OffRank",0);
		RutbeDegistirmeDialog(playerid,PlayerData[playerid][pFaction]);
	}
	return 1;
}
Dialog:DivizyonDegistir(playerid, response, listitem, inputtext[])
{
    if(response)
	{
		new userid, notreal[128], idx;
		notreal = strtok(inputtext, idx);
		userid = strval(notreal);
		SetPVarInt(playerid, "DivizyonChange", userid);
		Birlik_DivizyonDegistir(playerid, PlayerData[playerid][pFaction]);
 	}
	return 1;
}
Birlik_DivizyonDegistir(playerid, factionid)
{
    if (factionid != -1 && Birlikler[factionid][birlikExists])
	{
		static
		    string[640];

		string[0] = 0;
		strcat(string, "Divizyondan Çýkar\n");
		for (new i = 0; i < 5; i ++)
		    format(string, sizeof(string), "%s{72C425}%d: {FFFFFF}%s\n", string, i + 1, BirlikDivizyon[factionid][i]);

		Dialog_Show(playerid, DivizyonSec, DIALOG_STYLE_LIST, "Divizyon Düzenleme", string, "Deðiþtir", "{FF6347}Iptal");
	}
	return 1;
}
Dialog:DivizyonSec(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!Birlikler[PlayerData[playerid][pFaction]][birlikExists])
				return 0;
	    if(GetPVarInt(playerid,"OffDiviz") == 1)
	    {
	        new sqlid = GetPVarInt(playerid, "OfflineSQLID"), query[256];
            if(listitem == 0)
			{
			    format(query, sizeof(query), "UPDATE `oyuncular` SET `BirlikDivizyon` = '0' WHERE `ID` = '%d'", sqlid);
				mysql_query(baglanti, query, false);
			    BilgiMesajGonder(playerid, "%s adlý oyuncuyu divizyonundan çýkardýnýz. ", SQLName(sqlid));
			    DeletePVar(playerid,"OffDiviz");
			    DeletePVar(playerid,"OfflineSQLID");
			    return 1;
			}


	    	format(query, sizeof(query), "UPDATE `oyuncular` SET `BirlikDivizyon` = '%d' WHERE `ID` = '%d'", listitem, sqlid);
			mysql_query(baglanti, query, false);

	        callcmd::birlik(playerid);
		    BilgiMesajGonder(playerid, "%s adlý oyuncunun divizyonunu %s olarak deðiþtirdin. ", SQLName(sqlid), BirlikDivizyon[PlayerData[playerid][pFaction]][(listitem+1) - 1]);
		    DeletePVar(playerid,"OffDiviz");
		    DeletePVar(playerid,"OfflineSQLID");
		}
		else {

	        new userid = GetPVarInt(playerid, "DivizyonChange");
			if(listitem == 0)
			{
			    PlayerData[userid][pFactionDivizyon] = 0;
			    BilgiMesajGonder(playerid, "%s adlý oyuncuyu divizyondan çýkardýnýz. ", ReturnName(userid, 0));
		    	BilgiMesajGonder(userid, "%s tarafýndan divizyonunuzdan çýkarýldýnýz.", ReturnName(playerid, 0));
		    	DeletePVar(playerid,"OffDiviz");
			    DeletePVar(playerid,"DivizyonChange");
			    return 1;
			}

			if (PlayerData[userid][pFaction] != PlayerData[playerid][pFaction])
			    return HataMesajGonder(playerid, "Bu oyuncu senin birliðinde deðil.");

			PlayerData[userid][pFactionDivizyon] = listitem;
	        callcmd::birlik(playerid);
		    BilgiMesajGonder(playerid, "%s adlý oyuncunun divizyonunu %s olarak deðiþtirdin. ", ReturnName(userid, 0), Birlik_GetDivizyon(userid));
		    BilgiMesajGonder(userid, "%s adlý kiþi divizyonunu %s olarak deðiþtirdi.", ReturnName(playerid, 0), Birlik_GetDivizyon(userid));
		    DeletePVar(playerid,"OffDiviz");
		    DeletePVar(playerid,"DivizyonChange");
		}
	}
	return 1;
}
Dialog:RutbeSec(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new bid = PlayerData[playerid][pFaction];
	    if(bid == -1) return 1;
	    if(!Birlikler[bid][birlikExists]) return 0;
	    if(GetPVarInt(playerid,"OffRank") == 1)
	    {
	        new sqlid = GetPVarInt(playerid, "OfflineSQLID"), query[256];
	        format(query,sizeof(query),"UPDATE `oyuncular` SET `BirlikRutbe` = '%d' WHERE `ID` = '%d'",listitem+1,sqlid);
	        mysql_query(baglanti,query, false);
	        BilgiMesajGonder(playerid,"%s adlý kiþinin rütbesi %s olarak deðiþtirildi.",SQLName(sqlid,0),BirlikRutbe[PlayerData[playerid][pFaction]][(listitem+1) - 1]);
	        DeletePVar(playerid,"OffRank");
	        callcmd::birlik(playerid);
	    }
	    else
	    {
	        new id = GetPVarInt(playerid,"RutbeChange");
	        if(!OyundaDegil(id))
	        {
	            HataMesajGonder(playerid,"Böyle bir oyuncu yok.");
	            DeletePVar(playerid,"RutbeChange");
	            callcmd::birlik(playerid);
	            return 1;
	        }
	        if(PlayerData[id][pFaction] != PlayerData[playerid][pFaction])
	        {
	            HataMesajGonder(playerid,"Bu oyuncu bu birlikte deðil.");
	            DeletePVar(playerid,"RutbeChange");
	            callcmd::birlik(playerid);
	            return 1;
	        }
	        PlayerData[id][pFactionRutbe] = listitem+1;
	        callcmd::birlik(playerid);
	        BilgiMesajGonder(id,"%s tarafýndan rütbeniz %s olarak ayarlandý.",ReturnName(playerid,0),Birlik_GetRutbe(id));
	        BilgiMesajGonder(playerid,"%s adlý kiþinin rütbesi %s olarak ayarlandý.",ReturnName(id,0),Birlik_GetRutbe(id));
	        DeletePVar(playerid,"RutbeChange");
	    }
	}
	return 1;
}
IsPlayerNearWater(playerid)
{
	 /*new Float:angle;

	GetPlayerFacingAngle(playerid, angle);*/
	for(new i; i<sizeof(BalikciPoslar); i++)
	{
	    if(IsPlayerInRangeOfPoint(playerid,2.0,BalikciPoslar[i][0],BalikciPoslar[i][1],BalikciPoslar[i][2])) return 1;
	}
	return 0;
}
stock RutbeDegistirmeDialog(playerid,factionid)
{
    if (factionid != -1 && Birlikler[factionid][birlikExists])
    {
        static
		    string[640];

		string[0] = 0;
		for (new i = 0; i < Birlikler[factionid][birlikRutbeler]; i ++)
		{
		     format(string, sizeof(string), "%s{72C425}%d: {FFFFFF}%s\n", string, i + 1, BirlikRutbe[factionid][i]);
		}
		Dialog_Show(playerid, RutbeSec, DIALOG_STYLE_LIST, "Rütbe Düzenleme", string, "Deðiþtir", "{FF6347}Iptal");
    }
}
stock preloadanim_mine(playerid)
{
    PreloadAnimLib(playerid, "CARRY");
    PreloadAnimLib(playerid, "GHANDS");
    PreloadAnimLib(playerid, "BASEBALL");
	return 1;
}
stock PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid, animlib, "null", 0.0, 0, 0, 0, 0, 0);
	return 1;
}
strtok(const string[], &index)
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}
Dialog:BirlikDuyuruChange(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::birlik(playerid);
	if(response)
	{
	    new id = PlayerData[playerid][pFaction];
	    if(isnull(inputtext))
	    {
	        Birlikler[id][birlikDuyuru][0] = '\0';

			Birlik_Kaydet(id);
			MesajGonder(playerid, "Birlik duyurusu kaldýrýldý.");
	    }
	    else
	    {
	        format(Birlikler[id][birlikDuyuru], 128, inputtext);

			Birlik_Kaydet(id);
			MesajGonder(playerid,"Birlik duyurusu deðiþtirildi.");
	    }
	}
	return 1;
}
Dialog:birlikKasa(playerid, response, listitem, inputtext[])
{
	if(!response) return callcmd::birlik(playerid);
	if(response)
	{
	    if(listitem == 0)
	    {
	        if(PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid,"Bir birliðiniz yok.");
	        if(PlayerData[playerid][pFactionRutbe] < Birlikler[PlayerData[playerid][pFaction]][birlikYetkilendirme][6])
	        {
	            HataMesajGonder(playerid,"Kasadan Para almak için yeterli yetkiniz yok.");
	            return callcmd::birlik(playerid);
	        }
	        Dialog_Show(playerid,birlikKasaParaAl,DIALOG_STYLE_INPUT,"Birlik Kasasý - Para Al","{FFFFFF}Birlik kasasýnda {2ECC71}%s {FFFFFF}miktar para bulunmaktadýr.\n{FFFFFF}Lütfen kasadan almak istediðiniz para miktarýný girin:","Devam","Geri",FormatNumber(Birlikler[PlayerData[playerid][pFaction]][birlikKasaPara]));
	    }
	    if(listitem == 1)
	    {
	        if(PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid,"Bir birliðiniz yok.");
	        Dialog_Show(playerid,birlikKasaParaKoy,DIALOG_STYLE_INPUT,"Birlik Kasasý - Para Koy","{FFFFFF}Lütfen birlik kasasýna koymak istediðiniz para miktarýný bakiyenize uygun olarak giriniz:","Devam","Geri");
	    }
	}
	return 1;
}
Dialog:birlikKasaParaAl(playerid, response, listitem, inputtext[])
{
    if(!response) return Dialog_Show(playerid,birlikKasa,DIALOG_STYLE_LIST,"Birlik Kasasý","{2ECC71}Kasadan Al\n{2ECC71}Kasaya Koy","Seç","Geri");
    if(response)
    {
        if(PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid,"Bir birliðiniz yok.");
        if(isnull(inputtext)) return Dialog_Show(playerid,birlikKasaParaAl,DIALOG_STYLE_INPUT,"Birlik Kasasý - Para Al","{FFFFFF}Birlik kasasýnda {2ECC71}%s {FFFFFF}miktar para bulunmaktadýr.\n{FFFFFF}Lütfen kasadan almak istediðiniz para miktarýný girin:","Devam","Geri",FormatNumber(Birlikler[PlayerData[playerid][pFaction]][birlikKasaPara]));
        if(!IsNumeric(inputtext)) return Dialog_Show(playerid,birlikKasaParaAl,DIALOG_STYLE_INPUT,"Birlik Kasasý - Para Al","{FFFFFF}Birlik kasasýnda {2ECC71}%s {FFFFFF}miktar para bulunmaktadýr.\n{FFFFFF}Lütfen kasadan almak istediðiniz para miktarýný girin:","Devam","Geri",FormatNumber(Birlikler[PlayerData[playerid][pFaction]][birlikKasaPara]));
        if(strval(inputtext) <= 0)
        {
            HataMesajGonder(playerid, "Geçersiz miktar girdiniz.");
            return Dialog_Show(playerid,birlikKasaParaAl,DIALOG_STYLE_INPUT,"Birlik Kasasý - Para Al","{FFFFFF}Birlik kasasýnda {2ECC71}%s {FFFFFF}miktar para bulunmaktadýr.\n{FFFFFF}Lütfen kasadan almak istediðiniz para miktarýný girin:","Devam","Geri",FormatNumber(Birlikler[PlayerData[playerid][pFaction]][birlikKasaPara]));
        }
        if(strval(inputtext) > Birlikler[PlayerData[playerid][pFaction]][birlikKasaPara])
        {
            HataMesajGonder(playerid,"Birlik kasasýnda yeterli para yok.");
            return Dialog_Show(playerid,birlikKasaParaAl,DIALOG_STYLE_INPUT,"Birlik Kasasý - Para Al","{FFFFFF}Birlik kasasýnda {2ECC71}%s {FFFFFF}miktar para bulunmaktadýr.\n{FFFFFF}Lütfen kasadan almak istediðiniz para miktarýný girin:","Devam","Geri",FormatNumber(Birlikler[PlayerData[playerid][pFaction]][birlikKasaPara]));
        }
        Birlikler[PlayerData[playerid][pFaction]][birlikKasaPara] -= strval(inputtext);
        ParaVer(playerid,strval(inputtext));
        SendBirlikMessage(PlayerData[playerid][pFaction],-1,"{ff7c4d}BÝRLÝK: {FFFFFF}%s Adlý birlik üyesi birlik kasasýndan {2ECC71}%s {FFFFFF}miktar para aldý.",ReturnName(playerid,0),FormatNumber(strval(inputtext)));
        Dialog_Show(playerid,birlikKasa,DIALOG_STYLE_LIST,"Birlik Kasasý","{2ECC71}Kasadan Al\n{2ECC71}Kasaya Koy","Seç","Geri");
        Birlik_Kaydet(PlayerData[playerid][pFaction]);
    }
    return 1;
}
Dialog:birlikKasaParaKoy(playerid, response, listitem, inputtext[])
{
     if(!response) return Dialog_Show(playerid,birlikKasa,DIALOG_STYLE_LIST,"Birlik Kasasý","{2ECC71}Kasadan Al\n{2ECC71}Kasaya Koy","Seç","Geri");
     if(response)
     {
        if(PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid,"Bir birliðiniz yok.");
        if(isnull(inputtext)) return Dialog_Show(playerid,birlikKasaParaKoy,DIALOG_STYLE_INPUT,"Birlik Kasasý - Para Koy","{FFFFFF}Lütfen birlik kasasýna koymak istediðiniz para miktarýný bakiyenize uygun olarak giriniz:","Devam","Geri");
        if(!IsNumeric(inputtext)) return Dialog_Show(playerid,birlikKasaParaKoy,DIALOG_STYLE_INPUT,"Birlik Kasasý - Para Koy","{FFFFFF}Lütfen birlik kasasýna koymak istediðiniz para miktarýný bakiyenize uygun olarak giriniz:","Devam","Geri");
        if(strval(inputtext) <= 0)
        {
            HataMesajGonder(playerid, "Geçersiz miktar girdiniz.");
            return Dialog_Show(playerid,birlikKasaParaKoy,DIALOG_STYLE_INPUT,"Birlik Kasasý - Para Koy","{FFFFFF}Lütfen birlik kasasýna koymak istediðiniz para miktarýný bakiyenize uygun olarak giriniz:","Devam","Geri");
        }
        if(strval(inputtext) > PlayerData[playerid][pCash])
        {
            HataMesajGonder(playerid,"Üzerinizde yeterli para yok.");
            return Dialog_Show(playerid,birlikKasaParaKoy,DIALOG_STYLE_INPUT,"Birlik Kasasý - Para Koy","{FFFFFF}Lütfen birlik kasasýna koymak istediðiniz para miktarýný bakiyenize uygun olarak giriniz:","Devam","Geri");

        }
        Birlikler[PlayerData[playerid][pFaction]][birlikKasaPara] += strval(inputtext);
        ParaVer(playerid,-strval(inputtext));
        SendBirlikMessage(PlayerData[playerid][pFaction],-1,"{ff7c4d}BÝRLÝK: {FFFFFF}%s Adlý birlik üyesi birlik kasasýna {2ECC71}%s {FFFFFF}miktar para koydu.",ReturnName(playerid,0),FormatNumber(strval(inputtext)));
        Dialog_Show(playerid,birlikKasa,DIALOG_STYLE_LIST,"Birlik Kasasý","{2ECC71}Kasadan Al\n{2ECC71}Kasaya Koy","Seç","Geri");
        Birlik_Kaydet(PlayerData[playerid][pFaction]);
     }
     return 1;
}
Dialog:BirlikDaveti(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new
	        id = PlayerData[playerid][pFactionDavetEden],
	        factionid = PlayerData[playerid][pFactionDavet];

		PlayerData[playerid][pFaction] = factionid;
		PlayerData[playerid][pFactionRutbe] = 1;
		PlayerData[playerid][pFactionDivizyon] = 0;
		SendBirlikMessage(factionid,-1,"{ff7c4d}BÝRLÝK: {FFFFFF}%s adlý kiþi, %s adlý kiþiyi birliðe aldý.",ReturnName(id,0),ReturnName(playerid,0));
		PlayerData[playerid][pFactionDavetEden] = -1;
		PlayerData[playerid][pFactionDavet] = -1;
		Birlik_Kaydet(factionid);
		Oyuncu_Kaydet(playerid);
	}
	else
	{
	    BilgiMesajGonder(PlayerData[playerid][pFactionDavetEden],"%s adlý kiþi gönderdiðiniz birlik davetini reddetdi.",ReturnName(playerid,0));
	    PlayerData[playerid][pFactionDavetEden] = -1;
     	PlayerData[playerid][pFactionDavet] = -1;
	}
}
stock SendBirlikMessage(factionid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pFaction] == factionid && PlayerData[i][pAyarlar][0] == 0) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pFaction] == factionid && PlayerData[i][pAyarlar][0] == 0) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}
stock BirlikUyeSayisi(birlikid)
{
	new query[100],Cache: _query;
	format(query,sizeof(query),"SELECT null FROM `oyuncular` WHERE `Birlik` = '%d'",birlikid);
	_query = mysql_query(baglanti,query);
	new rows;
	cache_get_row_count(rows);
	cache_delete(_query);
	return rows;
}
Dialog:BirlikGeriTusu(playerid, response, listitem, inputtext[]) {

	if(!response) return callcmd::birlik(playerid);
	return 1;
}
Birlik_GetName(playerid)
{
    new
		factionid = PlayerData[playerid][pFaction],
		name[32] = "Yok";

 	if (factionid == -1)
	    return name;

	format(name, 32, Birlikler[factionid][birlikAd]);
	return name;
}
Birlik_GetDivizyon(playerid)
{
    new
		factionid = PlayerData[playerid][pFaction],
		diviz[32] = "Yok";

 	if (factionid == -1)
	    return diviz;

    if (PlayerData[playerid][pFactionDivizyon] == 0)
	    return diviz;

	format(diviz, 32, BirlikDivizyon[factionid][PlayerData[playerid][pFactionDivizyon] - 1]);
	return diviz;
}
Birlik_GetRutbe(playerid)
{
    new
		factionid = PlayerData[playerid][pFaction],
		rank[32] = "Yok";

 	if (factionid == -1)
	    return rank;

	format(rank, 32, BirlikRutbe[factionid][PlayerData[playerid][pFactionRutbe] - 1]);
	return rank;
}
Birlik_AktifUye(bid)
{
	new sayi;
	foreach(new i:Player)
	{
	    if(PlayerData[i][pFaction] == bid) sayi++;
	}
	return sayi;
}
forward OnFactionCreated(factionid);
public OnFactionCreated(factionid)
{
	if (factionid == -1 || !Birlikler[factionid][birlikExists])
	    return 0;

	Birlikler[factionid][birlikID] = cache_insert_id();

	Birlik_Kaydet(factionid);

	return 1;
}
stock Birlik_Kaydet(bid)
{
	static query[2700];
	format(query,sizeof(query),"UPDATE `birlikler` SET `bisim` = '%s',`brenk` = '%d',`btip` = '%d',`bRutbeler` = '%d',`bduyuru` = '%s',`bkasacash` = '%d',`oocdurum` = '%d', `sistemselonay` = '%d', `silahonay` = '%d', `uyusturucuonay` = '%d', `graffitionay` = '%d', `hoodonay` = '%d'",
	SQL_ReturnEscaped(Birlikler[bid][birlikAd]),
	Birlikler[bid][birlikColor],
	Birlikler[bid][birlikTip],
	Birlikler[bid][birlikRutbeler],
	SQL_ReturnEscaped(Birlikler[bid][birlikDuyuru]),
	Birlikler[bid][birlikKasaPara],
	Birlikler[bid][OOCDurum],
	Birlikler[bid][birlikOnaylar][0],
	Birlikler[bid][birlikOnaylar][1],
	Birlikler[bid][birlikOnaylar][2],
	Birlikler[bid][birlikOnaylar][3],
	Birlikler[bid][birlikOnaylar][4]
	);
	format(query,sizeof(query),"%s, `byetki1` = '%d',`byetki2` = '%d',`byetki3` = '%d',`byetki4` = '%d',`byetki5` = '%d',`byetki6` = '%d',`byetki7` = '%d',`byetki8` = '%d',`bdivizyon1` = '%s',`bdivizyon2` = '%s',`bdivizyon3` = '%s',`bdivizyon4` = '%s',`bdivizyon5` = '%s'",
	query,
	Birlikler[bid][birlikYetkilendirme][0],
	Birlikler[bid][birlikYetkilendirme][1],
	Birlikler[bid][birlikYetkilendirme][2],
	Birlikler[bid][birlikYetkilendirme][3],
	Birlikler[bid][birlikYetkilendirme][4],
	Birlikler[bid][birlikYetkilendirme][5],
	Birlikler[bid][birlikYetkilendirme][6],
	Birlikler[bid][birlikYetkilendirme][7],
	SQL_ReturnEscaped(BirlikDivizyon[bid][0]),
	SQL_ReturnEscaped(BirlikDivizyon[bid][1]),
	SQL_ReturnEscaped(BirlikDivizyon[bid][2]),
	SQL_ReturnEscaped(BirlikDivizyon[bid][3]),
	SQL_ReturnEscaped(BirlikDivizyon[bid][4])
	);
	format(query, sizeof(query), "%s, `yayindurum` = '%d', `yayintipi` = '%d', `reklamalimi` = '%d', `reklamucreti` = '%d', `reklamsayisi` = '%d', `aktifdinleyici` = '%d', `BirlikUyeSayisi` = '%d', `reklamx` = '%f', `reklamy` = '%f', `reklamz` = '%f'",query,Birlikler[bid][yayinDurum], Birlikler[bid][yayinTipi],Birlikler[bid][ReklamAlimi],Birlikler[bid][ReklamUcreti], Birlikler[bid][ReklamSayisi], Dinleyici_Sayisi(bid), BirlikUyeSayisi(bid),
	Birlikler[bid][reklamPos][0], Birlikler[bid][reklamPos][1], Birlikler[bid][reklamPos][2]);
	format(query, sizeof(query), "%s, `brutbe1` = '%s', `brutbe2` = '%s', `brutbe3` = '%s', `brutbe4` = '%s', `brutbe5` = '%s', `brutbe6` = '%s', `brutbe7` = '%s', `brutbe8` = '%s', `brutbe9` = '%s', `brutbe10` = '%s', `brutbe11` = '%s', `brutbe12` = '%s', `brutbe13` = '%s', `brutbe14` = '%s', `brutbe15` = '%s' WHERE `bid` = '%d'",
	query,
	BirlikRutbe[bid][0],
 	BirlikRutbe[bid][1],
  	BirlikRutbe[bid][2],
   	BirlikRutbe[bid][3],
    BirlikRutbe[bid][4],
    BirlikRutbe[bid][5],
    BirlikRutbe[bid][6],
    BirlikRutbe[bid][7],
    BirlikRutbe[bid][8],
    BirlikRutbe[bid][9],
    BirlikRutbe[bid][10],
    BirlikRutbe[bid][11],
    BirlikRutbe[bid][12],
    BirlikRutbe[bid][13],
    BirlikRutbe[bid][14],
    Birlikler[bid][birlikID]
    );
    mysql_query(baglanti,query, false);
    return 1;
}
stock House_RemoveFurniture(houseid)
{
	if (house_info[houseid][evExists])
	{
	    static
	        string[64];

	    foreach (new i: Mobilyalar[houseid])
	    {
	        FurnitureData[houseid][i][furnitureModel] = 0;

	        DestroyDynamicObject(FurnitureData[houseid][i][furnitureObject]);

	        Iter_SafeRemove(Mobilyalar[houseid], i, i);
		}

		format(string, sizeof(string), "DELETE FROM `furniture` WHERE `ID` = '%d'", house_info[houseid][evID]);
		mysql_query(baglanti, string, false);
	}
	return 1;
}
stock Ev_GetID(house)
{
	for(new i; i<MAX_EV; i++) if(house_info[i][evExists] && house_info[i][evID] == house)
	{
	    return i;
	}
	return -1;
}
/*stock Dialog_GetModel(playerid, listitem)
{
	new model, unused;
	Dialog_GetListitem(playerid, listitem, model, "", Float:unused, Float:unused, Float:unused, Float:unused, unused, unused);
	return model;
}*/
stock EvKiraID(playerid)
{
	for(new i; i < MAX_EV; i++) if(house_info[i][evExists])
	{
	    if(house_info[i][evKiralayan] == PlayerData[playerid][pID])
	    {
	        return i;
	    }
	}
	return -1;
}
stock OfflineParaVer(sqlid, para)
{
    new query[256];
    format(query, sizeof(query), "UPDATE `oyuncular` SET `Cash` = `Cash`+%d WHERE `ID` = '%d'", para, sqlid);
    mysql_query(baglanti,query, false);
    return 1;
}
stock GetPlayerSQLIDWithName(name[])
{
	new query[150];
	format(query,sizeof(query),"SELECT `ID` FROM `oyuncular` WHERE `Isim` = '%s'",name);
	new Cache:sawyer = mysql_query(baglanti,query);
	new rows;
	cache_get_row_count(rows);
	if(rows)
	{
	    new id;
	    cache_get_value_name_int(0,"ID",id);
	    cache_delete(sawyer);
	    return id;
	}
	cache_delete(sawyer);
	return -1;
}
stock GetPlayerIDWithSQLID(sqlid)
{
	foreach(new i:Player)
	{
	    if(PlayerData[i][pID] == sqlid)
	    {
	        return i;
	    }
	}
	return -1;
}
stock Ev_GetWeaponCount(evid)
{
	new count = 0;
	if(evid != -1 && house_info[evid][evExists])
	{
	    for(new i; i<10; i++)
	    {
	        if(house_info[evid][evSilahlar][i] > 0)
	        {
	            count++;
	        }
	    }
	}
	return count;
}
stock Isyeri_GetCount(playerid)
{
	new
		count = 0;

	for (new i = 0; i != MAX_ISYERI; i ++)
	{
		if (Isyeri[i][isyeriExists] && Isyeri[i][isyeriSahip] == PlayerData[playerid][pID])
   		{
   		    count++;
		}
	}
	return count;
}
Ev_GetCount(playerid)
{
	new
		count = 0;

	for (new i = 0; i != MAX_EV; i ++)
	{
		if (house_info[i][evExists] && house_info[i][evSahip] == PlayerData[playerid][pID])
   		{
   		    count++;
		}
	}
	return count;
}
stock Ev_Olustur(Float:x,Float:y,Float:z,fiyat, interiorid, mobilya)
{
    for (new i = 0; i != MAX_EV; i ++)
    {
        if(!house_info[i][evExists])
        {
            house_info[i][evExists] = true;
            house_info[i][evSahip] = -1;
            house_info[i][evFiyat] = fiyat;
            house_info[i][evKendiFiyati] = fiyat;
            format(house_info[i][evIsim], 30, "Yok");
            house_info[i][evSatilik] = 0;
            house_info[i][evPos][0] = x;
            house_info[i][evPos][1] = y;
            house_info[i][evPos][2] = z;
            house_info[i][evInterior] = interiorid;
            house_info[i][evKilit] = 1;
            house_info[i][evCash] = 0;
            house_info[i][evVergi] = 0;
            house_info[i][evVergiSure] = 0;
            house_info[i][evKiralik] = 0;
            house_info[i][evKiraUcret] = 0;
            house_info[i][evKiralayan] = -1;
            house_info[i][evUyusturucu] = 0;
            house_info[i][evMaksMobilya] = mobilya;
            house_info[i][MobilyaYetki] = -1;
            for(new j; j < 10; j++)
            {
                if(j < 5)
                {
                    house_info[i][evKiyafetler][j] = 0;
                }
                house_info[i][evSilahlar][j] = 0;
                house_info[i][evMermiler][j] = 0;
            }
            Ev_Yenile(i);
            mysql_tquery(baglanti, "INSERT INTO `evler` (`evOwner`) VALUES(-1)", "OnHouseCreated", "d", i);
            return i;
        }
    }
    return -1;
}
stock trcar(car[]) {
  new tmp[300];
  set(tmp,car);
  tmp=strreplace("ð","g",tmp);
  tmp=strreplace("|","",tmp);
  tmp=strreplace("Ð","G",tmp);
  tmp=strreplace("þ","s",tmp);
  tmp=strreplace("Þ","S",tmp);
  tmp=strreplace("ý","i",tmp);
  tmp=strreplace("I","I",tmp);
  tmp=strreplace("Ý","I",tmp);
  tmp=strreplace("ö","o",tmp);
  tmp=strreplace("Ö","O",tmp);
  tmp=strreplace("ç","c",tmp);
  tmp=strreplace("Ç","C",tmp);
  tmp=strreplace("ü","u",tmp);
  tmp=strreplace("Ü","U",tmp);
  return tmp;
}
stock set(dest[],source[]) {
	new count = strlen(source);
	new i=0;
	for (i=0;i<count;i++) {
		dest[i]=source[i];
	}
	dest[count]=0;
}
stock strreplace(trg[],newstr[],src[]) {
    new f=0;
    new s1[256];
    new tmp[256];
    format(s1,sizeof(s1),"%s",src);
    f = strfind(s1,trg);
    tmp[0]=0;
    while (f>=0) {
        strcat(tmp,ret_memcpy(s1, 0, f));
        strcat(tmp,newstr);
        format(s1,sizeof(s1),"%s",ret_memcpy(s1, f+strlen(trg), strlen(s1)-f));
        f = strfind(s1,trg);
    }
    strcat(tmp,s1);
    return tmp;
}
ret_memcpy(source[],index=0,numbytes) {
	new tmp[256];
	new i=0;
	tmp[0]=0;
	if (index>=strlen(source)) return tmp;
	if (numbytes+index>=strlen(source)) numbytes=strlen(source)-index;
	if (numbytes<=0) return tmp;
	for (i=index;i<numbytes+index;i++) {
		tmp[i-index]=source[i];
		if (source[i]==0) return tmp;
	}
	tmp[numbytes]=0;
	return tmp;
}
forward OnHouseCreated(houseid);
public OnHouseCreated(houseid)
{
	if (houseid == -1 || !house_info[houseid][evExists])
	    return 0;

	house_info[houseid][evID] = cache_insert_id();
	Ev_Kaydet(houseid);

	return 1;
}
stock IsSpeedoVehicle(vehicleid)
{
	if (GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510 || GetVehicleModel(vehicleid) == 481 || !IsEngineVehicle(vehicleid)) {
	    return 0;
	}
	return 1;
}
stock GetWeapon(playerid)
{
	new weaponid = GetPlayerWeapon(playerid);

	if (1 <= weaponid <= 46 && PlayerData[playerid][pSilahlar][g_aWeaponSlots[weaponid]] == weaponid)
 		return weaponid;

	return 0;
}
stock GetWeaponModel(weaponid) {
    new const g_aWeaponModels[] = {
		0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
		325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
		353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
		367, 368, 368, 371
    };
    if (1 <= weaponid <= 46)
        return g_aWeaponModels[weaponid];

	return 0;
}
stock Garaj_Sil(id)
{
	if(id != -1 && GarageData[id][gExists] == true)
	{
	    new query[70];
	    format(query, sizeof(query), "DELETE FROM `garajlar` WHERE `ID` = '%d'", GarageData[id][gID]);
	    mysql_query(baglanti, query, false);
	    for(new i; i<MAX_ARAC; i++) if(AracInfo[i][aracExists] && AracInfo[i][aracGaraj] == id)
	    {
	        AracInfo[i][aracGaraj] = -1;
	    }
	    DestroyDynamicPickup(GarageData[id][gPickup]);
	    DestroyDynamic3DTextLabel(GarageData[id][gText]);
	    DestroyDynamicPickup(GarageData[id][gMapIcon]);

	    GarageData[id][gExists] = false;
	    GarageData[id][gID] = 0;
	}
	return 1;
}
stock Gate_Sil(gateid)
{
	if (gateid != -1 && GateData[gateid][gateExists])
	{
		new
		    query[64];

		format(query, sizeof(query), "DELETE FROM `gates` WHERE `gateID` = '%d'", GateData[gateid][gateID]);
		mysql_tquery(baglanti, query);

		if (IsValidDynamicObject(GateData[gateid][gateObject]))
		    DestroyDynamicObject(GateData[gateid][gateObject]);

		for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && GateData[i][gateLinkID] == GateData[gateid][gateID]) {
		    GateData[i][gateLinkID] = -1;
		    Gate_Save(i);
		}
		if (GateData[gateid][gateOpened] && GateData[gateid][gateTime] > 0) {
		    KillTimer(GateData[gateid][gateTimer]);
		}
	    GateData[gateid][gateExists] = false;
	    GateData[gateid][gateID] = 0;
	    GateData[gateid][gateOpened] = 0;
	}
	return 1;
}
forward CloseGate(gateid, linkid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ);
public CloseGate(gateid, linkid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	new id = -1;

	if (GateData[gateid][gateExists] && GateData[gateid][gateOpened])
 	{
	 	MoveDynamicObject(GateData[gateid][gateObject], fX, fY, fZ, speed, fRotX, fRotY, fRotZ);

	 	if ((id = GetGateByID(linkid)) != -1)
            MoveDynamicObject(GateData[id][gateObject], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], speed, GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5]);

		GateData[id][gateOpened] = 0;
		return 1;
	}
	return 0;
}
stock Gate_Operate(gateid)
{
	if (gateid != -1 && GateData[gateid][gateExists])
	{
	    new id = -1;

		if (!GateData[gateid][gateOpened])
		{
		    GateData[gateid][gateOpened] = true;
		    MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gateMove][0], GateData[gateid][gateMove][1], GateData[gateid][gateMove][2], GateData[gateid][gateSpeed], GateData[gateid][gateMove][3], GateData[gateid][gateMove][4], GateData[gateid][gateMove][5]);

            if (GateData[gateid][gateTime] > 0) {
				GateData[gateid][gateTimer] = SetTimerEx("CloseGate", GateData[gateid][gateTime], false, "ddfffffff", gateid, GateData[gateid][gateLinkID], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);
			}
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
			    GateData[id][gateOpened] = true;
			    MoveDynamicObject(GateData[id][gateObject], GateData[id][gateMove][0], GateData[id][gateMove][1], GateData[id][gateMove][2], GateData[id][gateSpeed], GateData[id][gateMove][3], GateData[id][gateMove][4], GateData[id][gateMove][5]);
			}
		}
		else if (GateData[gateid][gateOpened])
		{
		    GateData[gateid][gateOpened] = false;
		    MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);

            if (GateData[gateid][gateTime] > 0) {
				KillTimer(GateData[gateid][gateTimer]);
		    }
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
			    GateData[id][gateOpened] = false;
			    MoveDynamicObject(GateData[id][gateObject], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gateSpeed], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5]);
			}
		}
	}
	return 1;
}
stock GetGateByID(sqlid)
{
	for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && GateData[i][gateID] == sqlid)
	    return i;

	return -1;
}
Gate_Nearest(playerid)
{
    for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && IsPlayerInRangeOfPoint(playerid, GateData[i][gateRadius], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2]))
	{
		if (GetPlayerInterior(playerid) == GateData[i][gateInterior] && GetPlayerVirtualWorld(playerid) == GateData[i][gateWorld])
			return i;
	}
	return -1;
}
ReturnVehicleModelName(model)
{
	new
	    name[32] = "None";

    if (model < 400 || model > 611)
	    return name;

	format(name, sizeof(name), g_arrVehicleNames[model - 400]);
	return name;
}
stock IsValidObjectModel(input) {

switch(input) {
case 615..661: {
return true;
}
case 664: {
return true;
}
case 669..698: {
return true;
}
case 700..792: {
return true;
}
case 800..906: {
return true;
}
case 910..964: {
return true;
}
case 966..998: {
return true;
}
case 1000..1193: {
return true;
}
case 1207..1325: {
return true;
}
case 1327..1572: {
return true;
}
case 1574..1698: {
return true;
}
case 1700..2882: {
return true;
}
case 2885..3135: {
return true;
}
case 3167..3175: {
return true;
}
case 3178: {
return true;
}
case 3187: {
return true;
}
case 3193: {
return true;
}
case 3214: {
return true;
}
case 3221: {
return true;
}
case 3241..3244: {
return true;
}
case 3246: {
return true;
}
case 3249..3250: {
return true;
}
case 3252..3253: {
return true;
}
case 3255..3265: {
return true;
}
case 3267..3347: {
return true;
}
case 3350..3415: {
return true;
}
case 3417..3428: {
return true;
}
case 3430..3609: {
return true;
}
case 3612..3783: {
return true;
}
case 3785..3869: {
return true;
}
case 3872..3882: {
return true;
}
case 3884..3888: {
return true;
}
case 3890..3973: {
return true;
}
case 3975..4541: {
return true;
}
case 4550..4762: {
return true;
}
case 4806..5084: {
return true;
}
case 5086..5089: {
return true;
}
case 5105..5375: {
return true;
}
case 5390..5682: {
return true;
}
case 5703..6010: {
return true;
}
case 6035..6253: {
return true;
}
case 6255..6257: {
return true;
}
case 6280..6347: {
return true;
}
case 6349..6525: {
return true;
}
case 6863..7392: {
return true;
}
case 7415..7973: {
return true;
}
case 7978..9193: {
return true;
}
case 9205..9267: {
return true;
}
case 9269..9478: {
return true;
}
case 9482..10310: {
return true;
}
case 10315..10744: {
return true;
}
case 10750..11417: {
return true;
}
case 11420..11753: {
return true;
}
case 12800..13563: {
return true;
}
case 13590..13667: {
return true;
}
case 13672..13890: {
return true;
}
case 14383..14528: {
return true;
}
case 14530..14554: {
return true;
}
case 14556: {
return true;
}
case 14558..14643: {
return true;
}
case 14650..14657: {
return true;
}
case 14660..14695: {
return true;
}
case 14699..14728: {
return true;
}
case 14735..14765: {
return true;
}
case 14770..14856: {
return true;
}
case 14858..14883: {
return true;
}
case 14885..14898: {
return true;
}
case 14900..14903: {
return true;
}
case 15025..15064: {
return true;
}
case 16000..16790: {
return true;
}
case 17000..17474: {
return true;
}
case 17500..17974: {
return true;
}
case 17976: {
return true;
}
case 17978: {
return true;
}
case 18000..18036: {
return true;
}
case 18038..18102: {
return true;
}
case 18104..18105: {
return true;
}
case 18109: {
return true;
}
case 18112: {
return true;
}
case 18200..18859: {
return true;
}
case 18862..19198: {
return true;
}
case 19200..19274: {
return true;
}
case 19277..19595: {
return true;
}
case 19597..19999: {
return true;
}
}

return false;

}
stock Gate_Create(Float:x,Float:y,Float:z,Float:angle,interior,world)
{
    for (new i = 0; i < MAX_GATES; i ++) if (!GateData[i][gateExists])
    {
        	GateData[i][gateExists] = true;
			GateData[i][gateModel] = 980;
			GateData[i][gateSpeed] = 3.0;
			GateData[i][gateRadius] = 5.0;
			GateData[i][gateOpened] = 0;
			GateData[i][gateTime] = 0;

			GateData[i][gatePos][0] = x + (3.0 * floatsin(-angle, degrees));
			GateData[i][gatePos][1] = y + (3.0 * floatcos(-angle, degrees));
			GateData[i][gatePos][2] = z;
			GateData[i][gatePos][3] = 0.0;
			GateData[i][gatePos][4] = 0.0;
			GateData[i][gatePos][5] = angle;

			GateData[i][gateMove][0] = x + (3.0 * floatsin(-angle, degrees));
			GateData[i][gateMove][1] = y + (3.0 * floatcos(-angle, degrees));
			GateData[i][gateMove][2] = z - 10.0;
			GateData[i][gateMove][3] = -1000.0;
			GateData[i][gateMove][4] = -1000.0;
			GateData[i][gateMove][5] = -1000.0;

            GateData[i][gateInterior] = interior;
            GateData[i][gateWorld] = world;

            GateData[i][gateLinkID] = -1;
            GateData[i][gateOwner] = -1;
            GateData[i][gateFaction] = -1;

            GateData[i][gatePass][0] = '\0';
            GateData[i][gateObject] = CreateDynamicObject(GateData[i][gateModel], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2], GateData[i][gatePos][3], GateData[i][gatePos][4], GateData[i][gatePos][5], GateData[i][gateWorld], GateData[i][gateInterior]);
            mysql_tquery(baglanti, "INSERT INTO `gates` (`gateModel`) VALUES(980)", "OnGateCreated", "d", i);
            return i;
    }
    return -1;
}
stock Garage_Nearest(playerid)
{
	for(new i = 0; i != MAX_GARAGE; i++) if(GarageData[i][gExists] && IsPlayerInRangeOfPoint(playerid, 3.0, GarageData[i][gPos][0], GarageData[i][gPos][1], GarageData[i][gPos][2]))
	{
	    return i;
	}
	return -1;
}
stock Garage_Inside(playerid)
{
	if(PlayerData[playerid][pGarage] != -1)
	{
	    for(new i = 0; i < MAX_GARAGE; i++) if(GarageData[i][gExists] && PlayerData[playerid][pGarage] == i)
	    {
	        return i;
	    }
	}
	return -1;
}
stock House_Nearest(playerid)
{
    for (new i = 0; i != MAX_EV; i ++) if (house_info[i][evExists] && IsPlayerInRangeOfPoint(playerid, 2.5, house_info[i][evPos][0], house_info[i][evPos][1],house_info[i][evPos][2]))
	{
			return i;
	}
	return -1;
}
stock House_Inside(playerid)
{
	if (PlayerData[playerid][pHouse] != -1)
	{
	    for (new i = 0; i < MAX_EV; i ++) if (house_info[i][evExists] && house_info[i][evID] == PlayerData[playerid][pHouse] && GetPlayerInterior(playerid) == HouseInteriors[house_info[i][evInterior]][intID] && GetPlayerVirtualWorld(playerid) > 0) {
	        return i;
		}
	}
	return -1;
}
forward OnGarageCreated(id);
public OnGarageCreated(id)
{
    if (id == -1 || !GarageData[id][gExists])
	    return 0;

	GarageData[id][gID] = cache_insert_id();
	Garaj_Kaydet(id);
	return 1;
}
forward OnGateCreated(gateid);
public OnGateCreated(gateid)
{
	if (gateid == -1 || !GateData[gateid][gateExists])
	    return 0;

	GateData[gateid][gateID] = cache_insert_id();
	Gate_Save(gateid);

	return 1;
}
stock OzelKarakter(yazi[])
{
    for(new i = 0; i < strlen(yazi); i++)
	{
		switch(yazi[i])
		{
			case '!', '@', '#', '$','%','^','&','*','(',')','_','+','=','|','[',']','{','}','-','.','`','~','<','>','?',',','/': return 1;
			default: continue;
		}
	}
	return 0;
}
stock Gate_Save(gateid)
{
	new
	    query[1024];

	format(query, sizeof(query), "UPDATE `gates` SET `gateModel` = '%d', `gateSpeed` = '%.4f', `gateRadius` = '%.4f', `gateFaction` = '%d',  `gateTime` = '%d', `gateX` = '%.4f', `gateY` = '%.4f', `gateZ` = '%.4f', `gateRX` = '%.4f', `gateRY` = '%.4f', `gateRZ` = '%.4f', `gateInterior` = '%d', `gateWorld` = '%d', `gateMoveX` = '%.4f', `gateMoveY` = '%.4f', `gateMoveZ` = '%.4f', `gateMoveRX` = '%.4f', `gateMoveRY` = '%.4f', `gateMoveRZ` = '%.4f', `gateLinkID` = '%d'",
	    GateData[gateid][gateModel],
	    GateData[gateid][gateSpeed],
	    GateData[gateid][gateRadius],
	    GateData[gateid][gateFaction],
	    GateData[gateid][gateTime],
	    GateData[gateid][gatePos][0],
	    GateData[gateid][gatePos][1],
	    GateData[gateid][gatePos][2],
	    GateData[gateid][gatePos][3],
	    GateData[gateid][gatePos][4],
	    GateData[gateid][gatePos][5],
	    GateData[gateid][gateInterior],
	    GateData[gateid][gateWorld],
	    GateData[gateid][gateMove][0],
	    GateData[gateid][gateMove][1],
	    GateData[gateid][gateMove][2],
	    GateData[gateid][gateMove][3],
	    GateData[gateid][gateMove][4],
	    GateData[gateid][gateMove][5],
	    GateData[gateid][gateLinkID]
	);
	format(query, sizeof(query), "%s, `gateOwner` = '%d', `gatePass` = '%s' WHERE `gateID` = '%d'",
	    query,
	    GateData[gateid][gateOwner],
	    SQL_ReturnEscaped(GateData[gateid][gatePass]),
	    GateData[gateid][gateID]
	);
 	mysql_query(baglanti, query, false);
}
stock DestekGuncelle(playerid)
{
	if(PlayerData[playerid][pDestek] > 0)
	{
	    new Float:pos[3];
 		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
 		foreach(new i:Player)
 		{
 		    if(GetFactionType(i) == BIRLIK_LSPD || GetFactionType(i) == BIRLIK_FBI)
 		    {
 		        if(i != playerid)
 		        {
 		            SetPlayerCheckpoint(i, pos[0], pos[1], pos[2], 4);
 		            SetPlayerMarkerForPlayer(i, playerid, 0xFF0000FF);
 		        }
 		    }
 		}
	}
}
stock DestekKapat(playerid, calledbytimer)
{
	if(OyundaDegil(playerid))
	{
	    foreach(new i:Player)
	    {
	        if (GetFactionType(i) == BIRLIK_LSPD || GetFactionType(i) == BIRLIK_FBI)
	        {
	            SetPlayerMarkerForPlayer(i, playerid, COLOR_RADIO);
				DisablePlayerCheckpoint(i);
	        }
	    }
	    PlayerData[playerid][pDestek] = 0;
	    if(calledbytimer != 1) MesajGonder(playerid, "Destek isteði kapatýldý.");
	    else MesajGonder(playerid, "Destek isteði otomatik olarak kapatýldý.");
	}
}
forward SecondUpdate();
public SecondUpdate()
{
	new string[100], saat, dakika;
	gettime(saat, dakika);
	SetWorldTime(saat);
	foreach(new i:Player)
	{
	    if(GetPVarInt(i,"Logged") == 0) continue;
	    SetPlayerTime(i, saat, dakika);
	    if(PlayerData[i][pHUD] == true)
	    {
	      format(string, sizeof(string), "%d", ReturnHealth(i));
		    PlayerTextDrawSetString(i, TDEditor_TD[i][0], string);

        format(string, sizeof(string), "%d", ReturnArmour(i));
		    PlayerTextDrawSetString(i, TDEditor_TD[i][2], string);

        format(string, sizeof(string), "%d/60", floatround(PlayerData[i][pMaasSure]/60));
		    PlayerTextDrawSetString(i, TDEditor_TD[i][3], string);

        format(string, sizeof string, "%d", ToplamOnlineOyuncu());
		    PlayerTextDrawSetString(i, TDEditor_TD[i][4], string);

        format(string, sizeof string, "%s ID:%d", ReturnName(i, 0), i);
        PlayerTextDrawSetString(i, TDEditor_TD[i][5], string);

        format(string, sizeof string, "%s", getDate());
        PlayerTextDrawSetString(i, TDEditor_TD[i][6], string);

        format(string, sizeof string, "%s", getTime());
        PlayerTextDrawSetString(i, TDEditor_TD[i][7], string);
	    }
	    if(PlayerData[i][pTarife] != -1 && PlayerData[i][pTarifeSure] < gettime())
	    {
	        PlayerData[i][pTarife] = -1;
	        PlayerData[i][pTarifeKalan][0] = 0;
	        PlayerData[i][pTarifeKalan][1] = 0;
	        PlayerData[i][pTarifeKalan][2] = 0;
	        PlayerData[i][pTarifeSure] = 0;
	        MesajGonder(i, "Tarifenizin abonelik süresi doldu, 555 numarasýný arayarak tarifenizi yenileyebilirsiniz.");
	    }
	 	if(PlayerData[i][pSoklandi] > 0)
		{
            PlayerData[i][pSoklandi]--;

			if (GetPlayerAnimationIndex(i) != 388)
            	ApplyAnimation(i, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);

            if (!PlayerData[i][pSoklandi])
            {
                if(PlayerData[i][pKelepce] == 0) TogglePlayerControllable(i, 1);
                ClearAnimations(i);
			}
		}
		if(PlayerData[i][pDuzkontak] != -1 && IsPlayerPause(i))
		{
		    MesajGonder(i, "AFK olduðunuz için düzkontak iþlemi iptal edildi.");
		    RemovePlayerFromVehicle(i);
			PlayerData[i][pDuzkontak] = -1;
			KillTimer(MekanikTimer[i]);
		}
		if(PlayerData[i][pKilitkir] != -1 && IsPlayerPause(i))
		{
			MesajGonder(i, "AFK olduðunuz için kilit kýrma iþlemi iptal edildi.");
			ClearAnimations(i);
			PlayerData[i][pKilitkir] = -1;
			KillTimer(MekanikTimer[i]);
		}
		if(PlayerData[i][pSilahAlmaSayisi] >= 2 && PlayerData[i][pSilahAlma] < gettime())
		{
		    PlayerData[i][pSilahAlmaSayisi] = 0;
		    PlayerData[i][pSilahAlma] = 0;
		}
		if(PlayerData[i][pHapisSure] > 0 && PlayerData[i][pCK] == 0)
		{
		    new str[70];
		    static
		        hours,
		        minutes,
		        seconds;

		    PlayerData[i][pHapisSure]--;
		    GetElapsedTime(PlayerData[i][pHapisSure], hours, minutes, seconds);
		    format(str, sizeof(str), "~g~Kalan Sure:~w~ %02d:%02d:%02d", hours, minutes, seconds);
			PlayerTextDrawSetString(i, HapisTD[i], str);
			if (!PlayerData[i][pHapisSure])
		    {
		        PlayerData[i][pHapis] = 0;

		        SetPlayerPos(i, 1544.2367,-1675.8328,13.5580);
		        SetPlayerInterior(i, 0);
		        SetPlayerVirtualWorld(i, 0);
		        SetCameraBehindPlayer(i);
		        ObjelerYukleniyor(i);
				//MesajGonder(i, "Hapis süreniz doldu.");
		        PlayerTextDrawHide(i, HapisTD[i]);
			}
		}
		if(PlayerData[i][pEXPBoost] < gettime() && PlayerData[i][pEXPBoost] != 0)
		{
		    PlayerData[i][pEXPBoost] = 0;
		    BilgiMesajGonder(i, "EXP Boost adlý ürününüz bitti, (/oocmarket) komutunu kullanarak tekrar satýn alabilirsiniz.");
		}
		if(PlayerData[i][pBalikOrani] < gettime() && PlayerData[i][pBalikOrani] != 0)
		{
		    PlayerData[i][pBalikOrani] = 0;
		    BilgiMesajGonder(i, "Balýk oraný arttýrma adlý ürününüz bitti, (/oocmarket) komutunu kullanarak tekrar satýn alabilirsiniz.");
		}
		if(PlayerData[i][pVip] > 0 && PlayerData[i][pVipSure] < gettime())
		{
		    PlayerData[i][pVip] = 0;
		    PlayerData[i][pVipSure] = 0;
		    PlayerData[i][pDovusStili] = 4;
		    SetPlayerFightingStyle(i, FIGHT_STYLE_NORMAL);
		    Oyuncu_Kaydet(i);
		    Dialog_Show(i, VIPBitti, DIALOG_STYLE_MSGBOX, "VIP Paketiniz Bitti!", "{FFFFFF}VIP Paketinizin süresi doldu, (/oocmarket) komutunu kullanarak tekrar satýn alabilirsiniz.\n\n{FFFFFF}Desteðiniz için ekip adýna teþekkür ederiz :)", "Tamam", "");
		}
		if(PlayerData[i][pMaasSure] < 3600 && PlayerData[i][pHapisSure] < 2)
		{
		    PlayerData[i][pMaasSure]++;
		    if(PlayerData[i][pMaasSure] >= 3600)
		    {
		        PlayerData[i][pMaasSure] = 0;
		        if(GetServerBilgi("2xpayday") == 1) PlayerData[i][pEXP] += 2;
		        else PlayerData[i][pEXP]++;
		        if(PlayerData[i][pEXPBoost] > gettime()) PlayerData[i][pEXP]++;
		        if(GetServerBilgi("2xpayday") == 1) PlayerData[i][pOynamaSaati] += 2;
		        else PlayerData[i][pOynamaSaati]++;
		        switch(PlayerData[i][pVip])
		        {
		            case 1: PlayerData[i][pEXP] += 2;
		            case 2: PlayerData[i][pEXP] += 4;
		            case 3: PlayerData[i][pEXP] += 6;
		        }
		        if(PlayerData[i][pEXP] >= PlayerData[i][pLevel]*5)
				{
				    new kalanexp = 0;
				    if(PlayerData[i][pEXP] > PlayerData[i][pLevel]*5)
				    {
				        kalanexp = PlayerData[i][pEXP] - PlayerData[i][pLevel]*5;
				    }
				    PlayerData[i][pEXP] = kalanexp;
					PlayerData[i][pLevel]++;
					SetPlayerScore(i, PlayerData[i][pLevel]);

					MesajGonder(i, "{7EFB1A}Level atladýnýz ve 1 yaþ yaþlandýnýnýz!");
				}
				if(PlayerData[i][pHediye] < 1)
				{
				    PlayerData[i][pHediyeSaat]++;
				    if(PlayerData[i][pHediyeSaat] == 5)
					{
					    PlayerData[i][pHediye] = 1;
					    PlayerData[i][pHediyeSaat] = 0;
					}
				}
				PayDay(i);
				if(GetServerBilgi("2xpayday") == 1)
				{
				    if(PlayerData[i][pHediye] < 1)
					{
					    PlayerData[i][pHediyeSaat]++;
					    if(PlayerData[i][pHediyeSaat] == 5)
						{
						    PlayerData[i][pHediye] = 1;
						    PlayerData[i][pHediyeSaat] = 0;
						}
					}
				    PayDay(i);
				}
		    }
		}
		if(PlayerData[i][pYereYatirildi] > 0)
		{
  			PlayerData[i][pYereYatirildi]--;

			if (GetPlayerAnimationIndex(i) != 388)
            	ApplyAnimation(i, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);

            if (!PlayerData[i][pYereYatirildi])
            {
                if(PlayerData[i][pKelepce] == 0) TogglePlayerControllable(i, 1);
                ClearAnimations(i);
			}
		}
		if(PlayerData[i][pDestek] > 0)
		{
		    PlayerData[i][pDestek]--;
		    if(PlayerData[i][pDestek] == 0)
		    {
		        DestekKapat(i, 1);
		    }
		}
		if(PlayerData[i][pBagimlilik] > 0 && PlayerData[i][pBagimlilikSayac][1] == 0)
		{
		    PlayerData[i][pBagimlilikSayac][0]++;
		    if(PlayerData[i][pBagimlilikSayac][0] >= 1200)
		    {
		        PlayerData[i][pBagimlilikSayac][1] = 1;
		        PlayerData[i][pBagimlilikSayac][0] = 0;
		        SetPlayerHealth(i, ReturnHealth(i) - 5);
		        SetPlayerDrunkLevel(i, 4999);
		        SetPlayerWeather(i, 234);
		        EffectTimer[i] = SetTimerEx("RemoveEffects", (2 * 7) * 1000, false, "i", i);
		        BilgiMesajGonder(i, "Kendinizi halsiz hissediyorsunuz, uyuþturucu kullanmanýz gerekiyor.");
		    }
		}
		if(PlayerData[i][pBaygin] == 1)
		{
  			if(GetPVarInt(i,"AracaBindi") == 0 && GetPVarInt(i, "Iyilestiriliyor") == 0) PlayerData[i][pBayginSure]++;
	    	new str[85];
		    format(str, 24, "YARALI! (/hasarlar %d)", i);
      		SetPlayerChatBubble(i, str, COLOR_RED, 10.0, 1500);
        	format(str, sizeof(str), "~w~~r~Yaralanma: ~y~%d", 180 - PlayerData[i][pBayginSure]);
   			ShowTextDrawMessage(i, str, TEXTDRAW_TYPE_MSG, 1000);
			if(GetPlayerAnimationIndex(i) != 1701 && GetPVarInt(i, "AracaBindi") == 0) ApplyAnimation(i, "WUZI", "CS_Dead_Guy", 4.1, 1, 0, 0, 0, 0, 1);
			if(GetPlayerWeapon(i) != 0) SetPlayerArmedWeapon(i, 0);
			if (PlayerData[i][pBayginSure] >= 180)
			{
   				PlayerData[i][pBaygin] = 0;
       			PlayerData[i][pBayginSure] = 0;
       			TogglePlayerControllable(i, true);
          		SetCameraBehindPlayer(i);
				ClearAnimations(i);
				StopLoopingAnim(i);
				CanAyarla(i, 100);
				SetWeapons(i);
	    	}
		}
		if(PlayerData[i][pIyilestiriyor] != -1)
		{
		    new Float:pos[3];
		    GetPlayerPos(PlayerData[i][pIyilestiriyor], pos[0], pos[1], pos[2]);
		    if(!OyundaDegil(PlayerData[i][pIyilestiriyor]) || PlayerData[PlayerData[i][pIyilestiriyor]][pBaygin] != 1 || !IsPlayerInRangeOfPoint(i, 5.0, pos[0], pos[1], pos[2]))
		    {
		        SetPVarInt(PlayerData[i][pIyilestiriyor], "Iyilestiriliyor", 0);
		        PlayerData[i][pIyilestiriyor] = -1;
		        PlayerData[i][pIyilestirmeSure] = 0;
		        ClearAnimations(i);
		        StopLoopingAnim(i);
		        TogglePlayerControllable(i, true);
		    }
		    else
		    {
		        PlayerData[i][pIyilestirmeSure]++;
		        new str[65];
		        format(str, sizeof(str), "~g~~h~%d", 15 - PlayerData[i][pIyilestirmeSure]);
 				ShowTextDrawMessage(i, str, TEXTDRAW_TYPE_MSG, 100);
				if(GetPlayerAnimationIndex(i) != 168) ApplyAnimation(i, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 1, 1, 0, 0, 1);
				if(GetPlayerWeapon(i) != 0) SetPlayerArmedWeapon(i, 0);
				if(PlayerData[i][pIyilestirmeSure] >= 15)
				{
				    PlayerData[PlayerData[i][pIyilestiriyor]][pBaygin] = 0;
				    PlayerData[PlayerData[i][pIyilestiriyor]][pBayginSure] = 0;
				    SetCameraBehindPlayer(PlayerData[i][pIyilestiriyor]);
					ClearAnimations(PlayerData[i][pIyilestiriyor]);
					StopLoopingAnim(PlayerData[i][pIyilestiriyor]);
					SetPlayerHealth(PlayerData[i][pIyilestiriyor], 100);
					SetPVarInt(PlayerData[i][pIyilestiriyor], "Iyilestiriliyor", 0);
					MesajGonder(PlayerData[i][pIyilestiriyor], "%s adli kiþi tarafýndan iyileþtirildin.", ReturnName(i, 0));
					MesajGonder(i, "%s adlý kiþiyi iyileþtirdiniz.", ReturnName(PlayerData[i][pIyilestiriyor], 0));
					PlayerData[i][pIyilestiriyor] = -1;
					PlayerData[i][pIyilestirmeSure] = 0;
					ClearAnimations(i);
					StopLoopingAnim(i);
					TogglePlayerControllable(i, true);
				}
		    }
		}
		if(PlayerData[i][pTopallama] == true)
		{
			PlayerData[i][pTopallamaSayac]++;
   			if(PlayerData[i][pTopallamaSayac] >= 120)
      		{
        		PlayerData[i][pTopallama] = false;
          		PlayerData[i][pTopallamaSayac] = 0;
        	}
		}
		if(PlayerData[i][pAramada] == ARAMA_KONUSUYOR && GetPVarInt(i, "Arayan") == 1)
		{
		    PlayerData[i][pKonusmaSure]++;
		    if(PlayerData[i][pKonusmaSure] >= 59)
		    {
		        PlayerData[i][pKonusmaSure] = 0;
		        PlayerData[i][pTarifeKalan][0]--;
		        if(PlayerData[i][pTarifeKalan][0] == 0)
		        {
		            BilgiMesajGonder(i, "Tarifeniz bitti, 555 numarasýný arayarak tarifenizi yenileyebilirsiniz.");
		            BilgiMesajGonder(PlayerData[i][pCallLine], "Çaðrý zaman aþýmýna uðradý. ");
		            DeletePVar(i, "Arayan");
		            DeletePVar(PlayerData[i][pCallLine], "Arayan");
		            PlayerData[i][pAramada] = 0;
		            PlayerData[PlayerData[i][pCallLine]][pAramada] = 0;
		            PlayerData[PlayerData[i][pCallLine]][pCallLine] = -1;
		            PlayerData[i][pCallLine] = -1;
				}
		    }
		}
		static id = -1;
		if ((id = Boombox_Nearest(i)) != INVALID_PLAYER_ID && PlayerData[i][pMuzikKutusu] != id && strlen(BoomboxData[id][boomboxURL]) && !IsPlayerInAnyVehicle(i))
		{
		    PlayerData[i][pMuzikKutusu] = id;

		    StopAudioStreamForPlayer(i);
		    PlayAudioStreamForPlayer(i, BoomboxData[id][boomboxURL], BoomboxData[id][boomboxPos][0], BoomboxData[id][boomboxPos][1], BoomboxData[id][boomboxPos][2], 30.0, 1);
		}
		else if (PlayerData[i][pMuzikKutusu] != INVALID_PLAYER_ID && !IsPlayerInRangeOfPoint(i, 30.0, BoomboxData[PlayerData[i][pMuzikKutusu]][boomboxPos][0], BoomboxData[PlayerData[i][pMuzikKutusu]][boomboxPos][1], BoomboxData[PlayerData[i][pMuzikKutusu]][boomboxPos][2]))
		{
		    PlayerData[i][pMuzikKutusu] = INVALID_PLAYER_ID;
		    StopAudioStreamForPlayer(i);
		}
		/*if(strlen(PlayerData[i][pIhbar]) > 0)
		{
		    PlayerData[i][pIhbarSayac]--;
		    if(PlayerData[i][pIhbarSayac] <= 0)
		    {
		        format(PlayerData[i][pIhbar], 128, "");
		        PlayerData[i][pIhbarSayac] = 0;
		    }
		}*/
		if(strlen(PlayerData[i][pIhbar]) > 0)
		{
		    PlayerData[i][pIhbarSayac]--;
		    if(PlayerData[i][pIhbarSayac] == 0)
		    {
		        format(PlayerData[i][pIhbar], 128, "");
		        PlayerData[i][pIhbarSayac] = 0;
       			if ((GetFactionType(i) == 4 || GetFactionType(i) >= 6) && PlayerData[i][pOnDuty])
					SetFactionColor(i);
				else SetPlayerColor(i, 0xFFFFFFFF);
		    }
		}
		if(PlayerData[i][pMangalKuruldu] == true)
		{
		    if(PlayerData[i][pYemekPisiriliyor] > 1 && PlayerData[i][pPisirilenYemek] > 0)
		    {
		        PlayerData[i][pYemekPisiriliyor]--;
		        new str[100], yemek[10];
		        if(PlayerData[i][pPisirilenYemek] == 1) yemek = "Köfte";
		        if(PlayerData[i][pPisirilenYemek] == 2) yemek = "Tavuk Eti";
		        if(PlayerData[i][pPisirilenYemek] == 3) yemek = "Dana Eti";
		        format(str, sizeof(str), "{FF9900}[Barbekü]\n\n{FFFFFF}Oluþturan: %s\n\n{9ACD32}%s Piþiriliyor...(%d saniye)", ReturnName(i, 0), yemek, PlayerData[i][pYemekPisiriliyor]);
		        UpdateDynamic3DTextLabelText(PlayerData[i][MangalText], -1, str);
			}
			if(PlayerData[i][pYemekPisiriliyor] == 1 && PlayerData[i][pPisirilenYemek] > 0)
			{
			    new str[100], yemek[10];
			    if(PlayerData[i][pPisirilenYemek] == 1) yemek = "Köfte";
		        if(PlayerData[i][pPisirilenYemek] == 2) yemek = "Tavuk Eti";
		        if(PlayerData[i][pPisirilenYemek] == 3) yemek = "Dana Eti";
			    format(str, sizeof(str), "{FF9900}[Barbekü]\n\n{FFFFFF}Oluþturan: %s\n\n{9ACD32}%s Piþti! (N ile alabilirsiniz)", ReturnName(i, 0), yemek);
			    UpdateDynamic3DTextLabelText(PlayerData[i][MangalText], -1, str);
			}
			if(PlayerData[i][pYemekPisiriliyor] == 0 && PlayerData[i][pPisirilenYemek] == 0)
			{
			    new str[100];
	    		format(str, sizeof(str), "{FF9900}[Barbekü]\n\n{FFFFFF}Oluþturan: %s", ReturnName(i, 0));
	    		UpdateDynamic3DTextLabelText(PlayerData[i][MangalText], -1, str);
			}
		}
		if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
		{
		    id = Car_GetID(GetPlayerVehicleID(i));
		    if(id != -1 && AracInfo[id][aracZirh] > 0)
	    	{
		        new Float:health;
		        GetVehicleHealth(GetPlayerVehicleID(i), health);
		        if(health < 999)
		        {
		            AracInfo[id][aracZirh] -= 10;
		            if(AracInfo[id][aracZirh] <= 5) AracInfo[id][aracZirh] = 0;
		            RepairVehicle(GetPlayerVehicleID(i));
		            SetVehicleHealth(GetPlayerVehicleID(i), 999);
		        }
	    	}
		}
		if(AracCekiyor[i] != INVALID_VEHICLE_ID)
		{
		    if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(i))) AracCekiyor[i] = INVALID_VEHICLE_ID;
		}
	}
	new str[75];
	for(new i; i < MAX_ODA; i++) if(Paintball[i][odaExists])
	{
	    if(Paintball[i][odaDurum] == ODA_BASLADI)
	    {
	        Paintball[i][odaSayac]--;
	        foreach(new p:Player)
	        {
	            if(IsPlayerConnected(p) && pbOda[p] == i && pbTakim[p] > 0)
	            {
	                if(GetLiderOyuncu(i) == -1)
	                {
						format(str, sizeof(str), "N/A");
					}
					else
					{
					    format(str, sizeof(str), "%s (%d kill)", ReturnName(GetLiderOyuncu(i), 0), pbOldurme[GetLiderOyuncu(i)]);
					}
					PlayerTextDrawSetString(p, PaintballTD[p][5], str);
					format(str, sizeof(str), "%d", Paintball[i][odaPuan][0]);
					PlayerTextDrawSetString(p, PaintballTD[p][3], str);
					format(str, sizeof(str), "%d", Paintball[i][odaPuan][1]);
					PlayerTextDrawSetString(p, PaintballTD[p][4], str);
				 	format(str, sizeof(str), "%s", trcar(Paintball[i][odaTakim1Ad]));
				 	PlayerTextDrawSetString(p, PaintballTD[p][1], str);
					format(str, sizeof(str), "%s", trcar(Paintball[i][odaTakim2Ad]));
				 	PlayerTextDrawSetString(p, PaintballTD[p][2], str);
				 	format(str, sizeof(str), "%s", TimeConvert(Paintball[i][odaSayac]));
				 	PlayerTextDrawSetString(p, PaintballTD[p][6], str);
				 	format(str, sizeof(str), "%d", pbOldurme[p]);
				 	PlayerTextDrawSetString(p, PaintballTD[p][7], str);
				 	format(str, sizeof(str), "%d", pbOlme[p]);
				 	PlayerTextDrawSetString(p, PaintballTD[p][8], str);

	            }
	        }
	        if(Paintball[i][odaSayac] == 0)
	        {
	            MacBitir(i);
	        }
	    }
	}
	return 1;
}
StopLoopingAnim(playerid)
{
	PlayerData[playerid][pLoopAnim] = false;
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}
stock GetElapsedTime(time, &hours, &minutes, &seconds)
{
	hours = 0;
	minutes = 0;
	seconds = 0;

	if (time >= 3600)
	{
		hours = (time / 3600);
		time -= (hours * 3600);
	}
	while (time >= 60)
	{
	    minutes++;
	    time -= 60;
	}
	return (seconds = time);
}
stock SQL_ReturnEscaped(const string[])
{
	new
	    entry[256];

	mysql_escape_string(string, entry, sizeof(entry) , baglanti);
	return entry;
}
forward NameTagUpdate();
public NameTagUpdate()
{
    new str[128],oyuncuadi[24], hpcolor[10], admincolor[10], oyuncuid, hours, minutes, seconds;
    foreach(new i : Player)
    {
        if(OyundaDegil(i))
        {
            format(str, sizeof(str), "");
            switch(PlayerData[i][pMaske])
            {
                case false:
                {
                    format(oyuncuadi, sizeof(oyuncuadi), ReturnName(i, 0));
                    oyuncuid = i;
                }
                case true:
                {
                    format(oyuncuadi, sizeof(oyuncuadi), "Gizli");
                    oyuncuid = PlayerData[i][pMaskeID];
                }
            }
			switch(ReturnHealth(i))
			{
			    case 60..100: hpcolor = "00FF00";
			    case 30..59: hpcolor = "FFBF00";
			    case 0..29: hpcolor = "ff0000";
			}
			switch(PlayerData[i][pAdmin])
			{
			    case 1: admincolor = "FFBF00";
			    case 2: admincolor = "00FF00";
			    case 3: admincolor = "BF00FF";
			    case 4: admincolor = "00f5ff";
			    case 5: admincolor = "FF0000";
			}
			if(IsPlayerPause(i)) GetElapsedTime(TimeSincePaused(i), hours, minutes, seconds);
			if(PetKontrol[i] != -1)
			{
			    if(IsPlayerPause(i)) format(str, sizeof(str), "{ff0000}AFK (%02d:%02d:%02d)\n{FFFFFF}%s (%d)\n", hours, minutes, seconds, PetBilgi[PetKontrol[i]][petAdi], i);
			    else format(str, sizeof(str), "{FFFFFF}%s (%d)\n",PetBilgi[PetKontrol[i]][petAdi]);
			    Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, NameTag[i], E_STREAMER_ATTACH_OFFSET_Z, 0.1);
			}
			else if(PlayerData[i][pAdmin] > 0 && PlayerData[i][pAdminDuty] == 1)
			{
			    if(IsPlayerPause(i))
			    {
			        format(str, sizeof(str), "{ff0000}AFK (%02d:%02d:%02d)\n{%s}%s\n\n{%s}%s", hours, minutes, seconds, admincolor, GetAdminRank(i), admincolor, PlayerData[i][pAdminName]);
				}
				else
				{
			    	format(str, sizeof(str), "{%s}%s\n\n{%s}%s", admincolor, GetAdminRank(i), admincolor, PlayerData[i][pAdminName]);
			    }
			    Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, NameTag[i], E_STREAMER_ATTACH_OFFSET_Z, 0.3);
			}
			else if(PlayerData[i][pHelperDuty] == 1 && PlayerData[i][pHelper] >= 1)
			{
			    if(IsPlayerPause(i))
			    {
			        format(str, sizeof(str), "{ff0000}AFK (%02d:%02d:%02d)\n{e4b400}(Lv. %d) Helper\n\n{e4b400}%s", hours, minutes, seconds, PlayerData[i][pHelper], PlayerData[i][pAdminName]);
			    }
			    else
			    {
			        format(str, sizeof(str), "{e4b400}(Lv. %d) Helper\n\n{e4b400}%s", PlayerData[i][pHelper], PlayerData[i][pAdminName]);
			    }
			    Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, NameTag[i], E_STREAMER_ATTACH_OFFSET_Z, 0.3);
			}
			else if(PlayerData[i][pOnDuty])
			{
			    if(GetFactionType(i) == BIRLIK_LSPD)
				{
				    if(IsPlayerPause(i)) format(str, sizeof(str), "{ff0000}AFK (%02d:%02d:%02d)\n{8D8DFF}[ %s ]\n{8D8DFF}%s (%d)\n", hours, minutes, seconds, Birlik_GetRutbe(i), oyuncuadi, oyuncuid);
				    else format(str, sizeof(str), "{8D8DFF}[ %s ]\n{8D8DFF}%s (%d)\n", Birlik_GetRutbe(i),oyuncuadi, oyuncuid);
				}
			    if(GetFactionType(i) == BIRLIK_LSMD)
				{
				    if(IsPlayerPause(i)) format(str, sizeof(str), "{ff0000}AFK (%02d:%02d:%02d)\n{FF8282}[ %s ]\n{FF8282}%s (%d)\n", hours, minutes, seconds, Birlik_GetRutbe(i), oyuncuadi, oyuncuid);
				    else format(str, sizeof(str), "{FF8282}[ %s ]\n{FF8282}%s (%d)\n", Birlik_GetRutbe(i), oyuncuadi, oyuncuid);
				}
			    if(GetFactionType(i) == BIRLIK_HABER)
				{
				    if(IsPlayerPause(i)) format(str, sizeof(str), "{ff0000}AFK (%02d:%02d:%02d)\n{9ACD32}[ %s ]\n{9ACD32}%s (%d)\n", hours, minutes, seconds, Birlikler[PlayerData[i][pFaction]][birlikAd], oyuncuadi, oyuncuid);
				    else format(str, sizeof(str), "{9ACD32}[ %s ]\n{9ACD32}%s (%d)\n", Birlikler[PlayerData[i][pFaction]][birlikAd], oyuncuadi, oyuncuid);
				}
				if(GetFactionType(i) == BIRLIK_GOV)
				{
				    if(IsPlayerPause(i)) format(str, sizeof(str), "{ff0000}AFK (%02d:%02d:%02d)\n{AFAFAF}[ %s ]\n{AFAFAF}%s (%d)\n", hours, minutes, seconds, Birlikler[PlayerData[i][pFaction]][birlikAd], oyuncuadi, oyuncuid);
				    else format(str, sizeof(str), "{AFAFAF}[ %s ]\n{AFAFAF}%s (%d)\n", Birlikler[PlayerData[i][pFaction]][birlikAd], oyuncuadi, oyuncuid);
				}
				Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, NameTag[i], E_STREAMER_ATTACH_OFFSET_Z, 0.3);
			}
			else
			{
			    if(IsPlayerPause(i))
			    {
		        	if(PlayerData[i][pVipRenk] == 1) format(str, sizeof(str), "{ff0000}AFK (%02d:%02d:%02d)\n%s\n{D0AEEB}%s (%d)\n", hours, minutes, seconds, (PlayerData[i][pYoutuberTag] == true) ? ("{f72020}[Youtuber & Streamer]") : (""), oyuncuadi, oyuncuid);
		        	else format(str, sizeof(str), "{ff0000}AFK (%02d:%02d:%02d)\n%s\n{FFFFFF}%s (%d)\n", hours, minutes, seconds, (PlayerData[i][pYoutuberTag] == true) ? ("{f72020}[Youtuber & Streamer]") : (""), oyuncuadi, oyuncuid);
		        	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, NameTag[i], E_STREAMER_ATTACH_OFFSET_Z, 0.4);
			    }
			    else
			    {
    			/*	new dzknk[45], kltk[30];
  					format(kltk, 30, "{EAAC43}[Kilit Kýrýlýyor %d]", PlayerData[playerid][pKilitkir]); !!! Tag çýkmasý saçma ama yinede ekliyim dedim belki ileride bir þeye yarar :)
  					format(dzknk, 45, "{EAAC43}[Düzkontak Yapýlýyor %d]", PlayerData[playerid][pDuzkontak]);*/
			        if(PlayerData[i][pVipRenk] == 1)
					{
					    if(PlayerData[i][pYoutuberTag] == true) format(str, sizeof(str), "{f72020}[Youtuber & Streamer]\n\n{D0AEEB}%s (%d)\n",oyuncuadi, oyuncuid);
					    else format(str, sizeof(str), "{D0AEEB}%s (%d)\n",oyuncuadi, oyuncuid);
					}
					else
					{
					    if(PlayerData[i][pYoutuberTag] == true) format(str, sizeof(str), "{f72020}[Youtuber & Streamer]\n\n{FFFFFF}%s (%d)\n", oyuncuadi, oyuncuid);
					    else format(str, sizeof(str), "{FFFFFF}%s (%d)\n", oyuncuadi, oyuncuid);
					}
			        Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, NameTag[i], E_STREAMER_ATTACH_OFFSET_Z, 0.1);
			    }
			}
			UpdateDynamic3DTextLabelText(NameTag[i], -1, str);
        }
    }
    return 1;
}
stock GetAdminRank(playerid)
{
	new rank[20];
	switch(PlayerData[playerid][pAdmin])
	{
	    case 1: rank = "[Ýntern Admin] |";
	    case 2: rank = "[Master Admin] ||";
	    case 3: rank = "[Expert Admin] |||";
	    case 4: rank = "[Lead Admin]";
	    case 5: rank = "Founder&Boss";
	    default: rank = "Oyuncu";
	}
	return rank;
}
forward ConsumeFuel();
public ConsumeFuel()
{
    new Float: mass, Float: speed, Float: dist;
    new panelsx,doorsx,lightsx,tiresx;
    new id, Float:health;
    for(new i = 1, ps = GetVehiclePoolSize(); i <= ps; i++)
    {
        if(!IsValidVehicle(i)) continue;
        GetVehicleHealth(i, health);
        if(health < 245)
        {
            SetEngineStatus(i, false);
            SetVehicleHealth(i, 250);
            if(GetVehicleDriver(i) != INVALID_PLAYER_ID)	ShowTextDrawMessage(GetVehicleDriver(i), "~r~Arac Kullanilmaz Halde!", TEXTDRAW_TYPE_MSG, 1500);
        }
        if (Flasher[i] == 1)
        {
        	if (FlasherState[i] == 1)
         	{
          		GetVehicleDamageStatus(i,panelsx,doorsx,lightsx,tiresx);
            	UpdateVehicleDamageStatus(i, panelsx, doorsx, 4, tiresx);
             	FlasherState[i] = 0;
          	}
            else
            {
            	GetVehicleDamageStatus(i,panelsx,doorsx,lightsx,tiresx);
             	UpdateVehicleDamageStatus(i, panelsx, doorsx, 1, tiresx);
              	FlasherState[i] = 1;
            }
        }
        if(Vehicle_IsANoFuelVehicle( GetVehicleModel(i) )) continue;
        if(!GetEngineStatus(i)) continue;
        id = Car_GetID(i);
        if(AracInfo[id][aracTip] != 4) continue;
        dist = GetVehicleDistanceFromPoint(i, VehicleLastCoords[i][0], VehicleLastCoords[i][1], VehicleLastCoords[i][2]);
        mass = GetVehicleModelInfoAsFloat(GetVehicleModel(i), "fMass");
        speed = Vehicle_GetSpeed(i) + 0.001;
        AracInfo[id][aracBenzin] -= ((mass / (mass * 4.5)) * ((speed / 60) + 0.059) / 30) * ((dist / 10) + 0.001);
        if(AracInfo[id][aracBenzin] < 0.1) SetEngineStatus(i,false);
        GetVehiclePos(i, VehicleLastCoords[i][0], VehicleLastCoords[i][1], VehicleLastCoords[i][2]);

    }

    return 1;
}

forward MinuteUpdate();
public MinuteUpdate()
{

	SetActorPos(actors[1], 1457.8317,-1777.6063,1815.9910);
 	SetActorPos(actors[2], 1462.8433,-1682.5958,-70.0371);
 	foreach(new i:Player)
 	{
 	    if(OyundaDegil(i))
 	    {
 	        if(IsValidDynamic3DTextLabel(NameTag[i])) DestroyDynamic3DTextLabel(NameTag[i]);
 	        NameTag[i] = CreateDynamic3DTextLabel("NameTag", 0xFFFFFFFF, 0.0, 0.0, 0.1, 10.0, i, INVALID_VEHICLE_ID, 1);
 	        Streamer_Update(i, STREAMER_TYPE_3D_TEXT_LABEL);
 	        Oyuncu_Kaydet(i);
 	    }
 	}
	for(new i; i<3; i++)
	{

		if(IsValidActor(DealerData[i][dealerActorID]))
		{
  			SetActorPos(DealerData[i][dealerActorID], DealerData[i][dealerX], DealerData[i][dealerY], DealerData[i][dealerZ]);
 		}
	    if(IsValidActor(BankerData[i][bankerActorID]))
	    {
	        SetActorPos(BankerData[i][bankerActorID], BankerData[i][bankerX], BankerData[i][bankerY], BankerData[i][bankerZ]);
	    }
	}
	for(new i; i<MAX_ARSA; i++) if(ArsaBilgi[i][arsaSahip] != -1 && ArsaBilgi[i][arsaTip] == 2)
	{
	    if(ArsaBilgi[i][KiraSure] <= gettime())
	    {
	        ArsaBilgi[i][arsaSahip] = -1;
	        ArsaBilgi[i][KiraSure] = 0;
	        ArsaUpdate(i);
	        for(new t; t<MAX_TOHUM; t++) if(Tohumlar[t][tohumArsa] == i)
	        {
	            DestroyDynamicObject(Tohumlar[t][tohumObject]);
				DestroyDynamic3DTextLabel(Tohumlar[t][tohumLabel]);
				Tohumlar[t][tohumArsa] = -1;
			    Tohumlar[t][tohumTip] = 0;
			    Tohumlar[t][tohumBuyume] = 0;
			    Tohumlar[t][tohumPos][0] = Tohumlar[t][tohumPos][1] = Tohumlar[t][tohumPos][2] = 0.0;
	        }
	    }
	}
	for(new i; i<MAX_TOHUM; i++) if(Tohumlar[i][tohumArsa] != -1)
	{
	    if(Tohumlar[i][tohumBuyume] < 60)
	    {
	        Tohumlar[i][tohumBuyume]++;
	        if(Tohumlar[i][tohumBuyume] == 20)
	        {
	            DestroyDynamicObject(Tohumlar[i][tohumObject]);
		        DestroyDynamic3DTextLabel(Tohumlar[i][tohumLabel]);
	        }
	        if(Tohumlar[i][tohumBuyume] == 40)
	        {
	            DestroyDynamicObject(Tohumlar[i][tohumObject]);
		        DestroyDynamic3DTextLabel(Tohumlar[i][tohumLabel]);
	        }
	        if(Tohumlar[i][tohumBuyume] >= 60)
	    	{
		        DestroyDynamicObject(Tohumlar[i][tohumObject]);
		        DestroyDynamic3DTextLabel(Tohumlar[i][tohumLabel]);
		        Tohumlar[i][tohumSayi] = RandomEx(5, 11);
	    	}
	        TohumUpdate(i);
	    }
	}
    vergitime++;
    for (new i = 0; i < MAX_ARAC; i++)
    {
    	if(AracInfo[i][aracExists] && AracInfo[i][aracModel] != 509)
        {
            if(vergitime >= 60) AracVergiArttir(i);
            if(AracInfo[i][aracTip] == 3 && AracInfo[i][aracKira] > 0 && AracInfo[i][aracKiralayan] != -1)
            {
                if(AracInfo[i][aracKiraZaman] == 1)
                {
                    AracInfo[i][aracKiralayan] = -1;
                    AracInfo[i][aracKiraZaman] = 0;
                    AracInfo[i][aracKilit] = 0;
                    Arac_Spawn(i);
                }
                else if(AracInfo[i][aracKiraZaman] > 1)
                {
                    AracInfo[i][aracKiraZaman]--;
                }
            }
            if(AracInfo[i][aracTip] == 4 && AracInfo[i][aracSahip] > 0 && AracInfo[i][aracTicket] > 0 && AracInfo[i][aracTicketTime] < gettime() && AracInfo[i][aracElKonuldu] == 0)
            {
                AracInfo[i][aracElKonuldu] = 1;
                AracInfo[i][aracTicketTime] = 0;
                AracInfo[i][aracDisplay] = false;
                SetVehicleVirtualWorld(AracInfo[i][aracVehicle], 1000);
                Arac_Kaydet(i);
                new oyuncuID = GetPlayerIDWithSQLID(AracInfo[i][aracSahip]);
                if(oyuncuID != -1)
                {
                    BilgiMesajGonder(oyuncuID, "%s model aracýnýzýn cezasýný ödemediðiniz için devlet tarafýndan el koyuldu.");
                }
                else
                {
                    new str[50];
                    format(str, sizeof(str), "%s model aracýnýzýn cezasýný ödemediðiniz için devlet tarafýndan el koyuldu.",ReturnVehicleModelName(AracInfo[i][aracModel]));
                    BildirimEkle(AracInfo[i][aracSahip], str, "Sistem");
                }
            }
        }
    }
	if(vergitime >= 60)
	{
			for(new i = 0; i < MAX_EV; i++)
		    	{
		    	    if(house_info[i][evExists] && house_info[i][evSahip] > 0)
		    	    {
		    	        if(house_info[i][evVergi] < Ev_MaksVergi(i))
		    	        {
		    	            house_info[i][evVergi] += GetHouseVergi(i);
		    	            Ev_Kaydet(i);
		    	        }
	    	         	if(house_info[i][evVergi] >= Ev_MaksVergi(i) && house_info[i][evVergiSure] < 1)
		    	        {
		    	            house_info[i][evVergiSure] += gettime()+VERGI_GUN*86400;
		    	            Ev_Kaydet(i);
		    	            if(GetPlayerIDWithSQLID(house_info[i][evSahip]) != -1)
			            	{
			                	BilgiMesajGonder(GetPlayerIDWithSQLID(house_info[i][evSahip]), "%s adlý evinizin vergisi doldu, %d gün içerisinde ödemezseniz ev satýlacak.", house_info[i][evIsim], VERGI_GUN);
			            	}
			            	else
			            	{
				                new str[100];
		                  		format(str, sizeof(str), "%s adlý evinizin vergisi doldu, %d gün içerisinde ödemezseniz ev satýlacak.",house_info[i][evIsim], VERGI_GUN);
		                    	BildirimEkle(house_info[i][evSahip], str, "Sistem");
			            	}
		    	        }
		    	        if(house_info[i][evVergi] >= Ev_MaksVergi(i) && house_info[i][evVergiSure] < gettime())
		    	        {
		    	            if(GetPlayerIDWithSQLID(house_info[i][evSahip]) != -1)
		    	            {
		    	                BilgiMesajGonder(GetPlayerIDWithSQLID(house_info[i][evSahip]), "Evinizin vergisini %d gün içerisinde ödemediðiniz için satýldý.", VERGI_GUN);
		    	            }
		    	            else
		    	            {
		    	                BildirimEkle(house_info[i][evSahip],"Evinizin vergisini ödemediðiniz için satýldý.", "Sistem");
		    	            }
		    	            house_info[i][evSahip] = -1;
		    	            house_info[i][evFiyat] = house_info[i][evKendiFiyati];
		    	            format(house_info[i][evIsim], 30, "");
		    	            house_info[i][evVergi] = 0;
		    	            house_info[i][evVergiSure] = 0;
		    	            house_info[i][evKilit] = 0;
		    	            house_info[i][evCash] = 0;
		    	            house_info[i][evSatilik] = 0;
		    	            house_info[i][evKiralik] = 0;
		    	            house_info[i][evKiraUcret] = 0;
		    	            house_info[i][evKiralayan] = -1;
		    	            house_info[i][MobilyaYetki] = -1;
		    	            for(new k; k<10; k++)
		    	            {
		    	                if(k < 5) house_info[i][evKiyafetler][k] = 0;
		    	                house_info[i][evSilahlar][k] = 0;
		    	                house_info[i][evMermiler][k] = 0;
		    	            }
		    	            House_RemoveFurniture(i);
		    	        }
					}
			}
	}
    if(vergitime >= 60)
    {
 			vergitime = 0;
            for(new j; j < MAX_ISYERI; j++)
			{
			    if(Isyeri[j][isyeriExists] && Isyeri[j][isyeriSahip] > 0)
			    {
			        if(Isyeri[j][isyeriVergi] < IsyeriMaksVergi(j))
			        {
				        Isyeri[j][isyeriVergi] += GetIsyeriVergi(j);
				        Isyeri_Kaydet(j);
			        }
			        if(Isyeri[j][isyeriVergi] >= IsyeriMaksVergi(j) && Isyeri[j][isyeriVergiSure] < 1)
			        {
			            Isyeri[j][isyeriVergiSure] = gettime()+VERGI_GUN*86400;
			            Isyeri[j][isyeriKilit] = true;
			            Isyeri_Yenile(j);
	            		Isyeri_Kaydet(j);
			            if(GetPlayerIDWithSQLID(Isyeri[j][isyeriSahip]) != -1)
			            {
			                BilgiMesajGonder(GetPlayerIDWithSQLID(Isyeri[j][isyeriSahip]), "%s adlý iþyerinizin vergisi doldu, %d gün içerisinde ödemezseniz iþyeri satýlacak.", Isyeri[j][isyeriName], VERGI_GUN);
			            }
			            else
			            {
			                new str[100];
	                  		format(str, sizeof(str), "%s adlý iþyerinizin vergisi doldu, %d gün içerisinde ödemezseniz iþyeri satýlacak.",Isyeri[j][isyeriName], VERGI_GUN);
	                    	BildirimEkle(Isyeri[j][isyeriSahip], str, "Sistem");
			            }
			        }
			        if(Isyeri[j][isyeriVergi] >= IsyeriMaksVergi(j) && Isyeri[j][isyeriVergiSure] < gettime())
			        {
			            if(GetPlayerIDWithSQLID(Isyeri[j][isyeriSahip]) != -1)
			            {
			                if(Isyeri[j][isyeriKasa] > 0)
							{
							    ParaVer(GetPlayerIDWithSQLID(Isyeri[j][isyeriSahip]), Isyeri[j][isyeriKasa]);
							    MesajGonder(GetPlayerIDWithSQLID(Isyeri[j][isyeriSahip]), "Ýþyerinizin vergisini %d gün içerisinde ödemediðiniz için satýldý. (Kasadaki %s miktar para geri verildi)", VERGI_GUN, FormatNumber(Isyeri[j][isyeriKasa]));
							}
							else
							{
							    MesajGonder(GetPlayerIDWithSQLID(Isyeri[j][isyeriSahip]), "Ýþyerinizin vergisini %d gün içerisinde ödemediðiniz için satýldý.", VERGI_GUN);
							}
			            }
			            else
			            {
			                if(Isyeri[j][isyeriKasa] > 0)
			                {
			                    OfflineParaVer(Isyeri[j][isyeriSahip], Isyeri[j][isyeriKasa]);
			                	BildirimEkle(Isyeri[j][isyeriSahip],"Ýþyerinizin vergisini ödemediðiniz için satýldý. (Kasadaki para verildi)", "Sistem");
							}
							else BildirimEkle(Isyeri[j][isyeriSahip],"Ýþyerinizin vergisini ödemediðiniz için satýldý.", "Sistem");
			            }
			            format(Isyeri[j][isyeriName], 32, "Satýlýk Ýþyeri");
			            format(Isyeri[j][isyeriMesaj], 100, "");
			            Isyeri[j][isyeriSahip] = -1;
			            Isyeri[j][isyeriFiyat] = Isyeri[j][isyeriKendiFiyati];
			            Isyeri[j][isyeriSatilik] = 0;
			            Isyeri[j][isyeriVergi] = 0;
			            Isyeri[j][isyeriVergiSure] = 0;
			            Isyeri[j][isyeriGirisUcret] = 0;
			            format(Isyeri[j][isyeriMuzik], 256, "");
			            Isyeri[j][isyeriKilit] = 0;
			            Isyeri[j][isyeriKasa] = 0;
			            Isyeri_Kaydet(j);
			            Isyeri_Yenile(j);

		        	}
		    	}
			}
    }
    //PanelUpdate();
	return 1;
}
stock PanelUpdate()
{
	new Cache:sawyer = mysql_query(baglanti, "SELECT * FROM `panelislemleri`");
	new rows;
	cache_get_row_count(rows);
	if(rows)
	{
	    new uygulayan[24], sebep[50], oyuncuadi[24], sure, islemturu;
	    for(new i; i<rows; i++)
	    {
	        cache_get_value_name(i, "Uygulayan", uygulayan, 24);
	        cache_get_value_name(i, "Sebep", sebep, 50);
	        cache_get_value_name(i, "Oyuncu", oyuncuadi, 24);
	        cache_get_value_name_int(i, "Sure", sure);
	        cache_get_value_name_int(i, "islemturu", islemturu);
	        new id = GetPlayerID(oyuncuadi);
	        if(islemturu == 1)
	        {
				if(id != -1)
				{
				    new pip[20];
				    GetPlayerIp(id, pip, sizeof(pip));
				    foreach (new p: Player)
					{
				        new ipp[15];
				        GetPlayerIp(p, ipp, sizeof(ipp));
				        if (!strcmp(pip, ipp) && p != id)
				        {
				            Kick(p);
				        }
				    }
				    new suree[10];
				    if(sure == 0) suree = "Sýnýrsýz";
				    else format(suree, sizeof(suree), "%d gün", sure);
				    Dialog_Show(id, Banli, DIALOG_STYLE_MSGBOX, "Yasaklandýnýz!", "Hesabýnýz panelden yasaklanmýþtýr. Detaylar;\n\nKarakter Adý: %s\nSebep: %s\nYasaklayan: %s\nSüre: %s\nF8 tuþuna basýn ve bir ekran görüntüsü alýn, bu ekran görüntüsü ile forumumuzdan yasaklanmanýza itiraz edebilirsiniz.", "Kapat", "", Player_GetName(id), sebep, uygulayan, suree);
				    new query[300];
				    format(query, sizeof(query), "INSERT INTO `oocsicil` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', '%s', '%s', '2')",  PlayerData[id][pID], ReturnDate(), sebep, uygulayan);
				    mysql_tquery(baglanti, query);
				    foreach(new pl:Player) if(PlayerData[pl][pAyarlar][3] == 0)
				    {
				    	if(sure == 0) SendClientMessageEx(pl, COLOR_LIGHTRED, "(%s) - (( %s adlý oyuncu %s tarafýndan panelden %s sebebiyle sýnýrsýz yasaklandý. ))", ReturnDate(), ReturnName(id, 0),  uygulayan, sebep);
				    	else SendClientMessageEx(pl, COLOR_LIGHTRED, "(%s) - (( %s adlý oyuncu %s tarafýndan %s sebebiyle panelden %d gün yasaklandý. ))", ReturnDate(), ReturnName(id, 0),  uygulayan, sebep, sure);
				    }
				    Log_Write("logs/ban_log.txt", "[%s] %s, %s tarafindan panelden %d gun yasaklandi. sebep: %s.", ReturnDate(), ReturnName(id, 0), uygulayan, sure, sebep);
				    AddBan(pip, Player_GetName(id), "", uygulayan, (sure < 1) ? (0) : (gettime()+sure*86400), sebep);
    				Kick(id);
				}
				else
				{
				    new query[124];
    				format(query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `Isim` = '%s'", oyuncuadi);
    				mysql_tquery(baglanti, query, "OnPanelBanAccount", "ssis", uygulayan, oyuncuadi, sure, sebep);
				}
	        }
	        else if(islemturu == 2)
	        {
	            if(id != -1)
	            {
	                ResetPlayer(id);
				    ResetWeapons(id);
				    ClearAnimations(id);
					PlayerTextDrawShow(id, HapisTD[id]);
					SetPlayerPos(id, 197.6346, 175.3765, 1003.0234);
				    SetPlayerInterior(id, 3);

				    SetPlayerVirtualWorld(id, (id + 100));
				    SetPlayerFacingAngle(id, 0.0);

				    SetCameraBehindPlayer(id);
				    PlayerData[id][pHapisSure] = sure * 60;
				    format(PlayerData[id][pHapisSebep], 50, sebep);
				    format(PlayerData[id][pHapiseAtan], 24, uygulayan);
				    PlayerData[id][pHapis] = 0;
				    new query[500];
				    format(query, sizeof(query), "INSERT INTO `oocsicil` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', '%s', '%s', '3')",  PlayerData[id][pID], ReturnDate(), sebep, uygulayan);
				    mysql_query(baglanti, query, false);
				    BilgiMesajGonder(id, "%s adlý yetkili seni panelden %d dakika hapse attý. (%s).", uygulayan, sure, sebep);
					foreach(new pla:Player) if(PlayerData[pla][pAyarlar][3] == 0 || pla == id)
					{
				    	SendClientMessageEx(pla, COLOR_LIGHTRED, "(%s)  - (( %s adlý oyuncu %s tarafýndan %s sebebiyle panelden %d dakika cezalandýrýldý. ))", ReturnDate(), ReturnName(id, 0), uygulayan, sebep, sure);
				    }
				    Log_Write("logs/jail_log.txt", "[%s] %s adli yetkili %s adli oyuncuyu panelden %d dakika cezalandirdi,  sebep: %s.", ReturnDate(), uygulayan, ReturnName(id, 0), sure, sebep);
	            }
	            else
	            {
	                new query[800];
	                format(query, sizeof(query), "UPDATE `oyuncular` SET `HapisSure` = '%d', `HapisSebep` = '%s', `HapiseAtan` = '%s'", sure*60, sebep, uygulayan);
	    			for(new i; i<13; i++)
	    			{
	        			format(query, sizeof(query), "%s, `Silah%d` = '0', `Mermi%d` = '0'", query, i+1, i+1);
	    			}
	    			format(query, sizeof(query), "%s WHERE `Isim` = '%s'", query, oyuncuadi);
	    			mysql_query(baglanti, query, false);
	    			format(query, sizeof(query), "INSERT INTO `oocsicil` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', '%s', '%s', '3')",  GetPlayerSQLIDWithName(oyuncuadi), ReturnDate(), sebep, uygulayan);
   	 				mysql_query(baglanti, query, false);
	            }
	        }
	    }
	}
	cache_delete(sawyer);
	mysql_query(baglanti, "TRUNCATE `panelislemleri`", false);
	return 1;
}
stock GetHouseVergi(id)
{
	new vergi;
	vergi = floatround(house_info[id][evKendiFiyati]/1000*0.2);
	return vergi;
}
stock Ev_MaksVergi(id)
{
	new vergi;
	vergi = floatround(house_info[id][evKendiFiyati]/3);
	return vergi;
}
stock AracVergiArttir(i)
{
    if(AracInfo[i][aracExists] && AracInfo[i][aracTip] == 4 && AracInfo[i][aracSahip] > 0)
    {
       if(AracInfo[i][aracVergi] < GetAracMaksVergi(AracInfo[i][aracModel]))
       {
            AracInfo[i][aracVergi] += GetAracVergi(AracInfo[i][aracModel]);
            Arac_Kaydet(i);
            if(AracInfo[i][aracVergi] >= GetAracMaksVergi(AracInfo[i][aracModel]))
            {
            	AracInfo[i][aracVergiSure] = gettime()+VERGI_GUN*86400;
             	if(GetPlayerIDWithSQLID(AracInfo[i][aracSahip]) != -1)
              	{
               		BilgiMesajGonder(GetPlayerIDWithSQLID(AracInfo[i][aracSahip]), "%s model aracýnýzýn vergisi doldu, %d gün içerisinde vergiyi ödemezseniz aracýnýz silinecek.", ReturnVehicleModelName(AracInfo[i][aracModel]), VERGI_GUN);
               	}
                else
                {
                	new str[100];
                 	format(str, sizeof(str), "%s model aracýnýzýn vergisi doldu, %d gün içerisinde vergiyi ödemezseniz aracýnýz silinecek.",ReturnVehicleModelName(AracInfo[i][aracModel]), VERGI_GUN);
                  	BildirimEkle(AracInfo[i][aracSahip], str, "Sistem");
				}
			}
        }
        if(AracInfo[i][aracVergi] >= GetAracMaksVergi(AracInfo[i][aracModel]) && AracInfo[i][aracVergiSure] != 0 && AracInfo[i][aracVergiSure] < gettime())
		{
		    new para = 0;
			if(AracInfo[i][aracVergi] < GetGaleriFiyat(AracInfo[i][aracModel]))
		    {
				para = GetGaleriFiyat(AracInfo[i][aracModel]) - AracInfo[i][aracVergi];
		    }
		    if(GetPlayerIDWithSQLID(AracInfo[i][aracSahip]) != -1)
		    {
				if(para > 0)
				{
				    ParaVer(GetPlayerIDWithSQLID(AracInfo[i][aracSahip]), para);
				    BilgiMesajGonder(GetPlayerIDWithSQLID(AracInfo[i][aracSahip]), "%s model aracýnýzýn vergisini ödemediðiniz için araç silindi. Sistem size %s para iadesinde bulundu.", ReturnVehicleModelName(AracInfo[i][aracModel]), FormatNumber(para));
				}
		        else
		        {
		            BilgiMesajGonder(GetPlayerIDWithSQLID(AracInfo[i][aracSahip]), "%s model aracýnýzýn vergisini ödemediðiniz için araç silindi.", ReturnVehicleModelName(AracInfo[i][aracModel]));
		        }
		    }
		    else
		    {
		        new str[100];
		        if(para > 0) format(str, sizeof(str), "%s model aracýnýzýn vergisini ödemediðiniz için araç silindi. Sistem size %s para iadesinde bulundu.", ReturnVehicleModelName(AracInfo[i][aracModel]), FormatNumber(para));
		        else format(str, sizeof(str), "%s model aracýnýzýn vergisini ödemediðiniz için araç silindi.", ReturnVehicleModelName(AracInfo[i][aracModel]));
		        BildirimEkle(AracInfo[i][aracSahip], str, "Sistem");
		        OfflineParaVer(AracInfo[i][aracSahip], para);
		    }
		    Arac_Sil(i);
		}
    }
    return 1;
}
forward MotorCalistir(playerid, vehicleid);
public MotorCalistir(playerid, vehicleid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	SetEngineStatus(vehicleid, true);
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* Aracýn motoru çalýþmýþtýr. (( %s ))",ReturnName(playerid, 0));
	return 1;
}
stock SetEngineStatus(vehicleid, status)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, status, lights, alarm, doors, bonnet, boot, objective);
}
stock ToplamOnlineOyuncu()
{
	return Iter_Count(Player);
}

stock getDate()
{
	new Tarih[3], m[256];
	getdate(Tarih[0], Tarih[1], Tarih[2]);

	format(m, sizeof m, "%d/%d/%d", Tarih[2], Tarih[1], Tarih[0]);
	return m;
}

stock getTime()
{
	new Saat[3], m[256];
	gettime(Saat[0], Saat[1], Saat[2]);

	format(m, sizeof m, "%02d:%02d", Saat[0], Saat[1]);
	return m;
}

stock GetEngineStatus(vehicleid)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (engine != 1)
		return 0;

	return 1;
}
stock AracHasar(vehicleid)
{
	if (!IsValidVehicle(vehicleid))
	    return 0;

	static
	    Float:amount;

	GetVehicleHealth(vehicleid, amount);
	return floatround(amount, floatround_round);
}
stock IsEngineVehicle(vehicleid)
{
	static const g_aEngineStatus[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
    new modelid = GetVehicleModel(vehicleid);

    if (modelid < 400 || modelid > 611)
        return 0;

    return (g_aEngineStatus[modelid - 400]);
}
stock Arac_Sil(carid)
{
    if(carid != -1 && AracInfo[carid][aracExists])
    {
        new query[100];
        format(query,sizeof(query),"DELETE FROM `araclar` WHERE `aracid` = '%d'",AracInfo[carid][aracID]);
        mysql_query(baglanti,query, false);
        if(Arac_GetKeyCount(carid) > 0)
		{
			format(query, sizeof(query), "DELETE FROM `anahtarlar` WHERE `sqlid` = '%d' AND `tip` = '2'",AracInfo[carid][aracID]);
			mysql_query(baglanti, query, false);
		}
        if (IsValidVehicle(AracInfo[carid][aracVehicle]))
			DestroyVehicle(AracInfo[carid][aracVehicle]);
		AracInfo[carid][aracExists] = false;
		AracInfo[carid][aracID] = 0;
		AracInfo[carid][aracSahip] = -1;
		AracInfo[carid][aracVehicle] = 0;
    }
}
stock Arac_Olustur(owner,modelid,interior, world, garaj, Float:x,Float:y,Float:z,Float:angle,color1,color2,tip,id)
{
     for (new i = 0; i != MAX_ARAC; i ++)
     {
   		if(!AracInfo[i][aracExists])
   		{
   		    if (color1 == -1)
   		        color1 = random(127);

			if (color2 == -1)
			    color2 = random(127);
			AracInfo[i][aracExists] = true;
			AracInfo[i][aracModel] = modelid;
			AracInfo[i][aracSahip] = owner;
			AracInfo[i][aracPos][0] = x;
			AracInfo[i][aracPos][1] = y;
			AracInfo[i][aracPos][2] = z;
			AracInfo[i][aracPos][3] = angle;
			AracInfo[i][aracRenkler][0] = color1;
			AracInfo[i][aracRenkler][1] = color2;
			AracInfo[i][aracPaintjob] = -1;
			AracInfo[i][aracKilit] = false;
			AracInfo[i][aracBaglandi] = 0;
			AracInfo[i][aracBaglandiCeza] = 0;
			AracInfo[i][aracTicket] = 0;
			AracInfo[i][aracTicketTime] = 0;
			AracInfo[i][aracKiralayan] = -1;
			AracInfo[i][aracKM] = 0.0;
			AracInfo[i][aracBenzin] = 100.0;
			AracInfo[i][aracTicket] = 0;
			AracInfo[i][aracTicketTime] = 0;
			AracInfo[i][aracElKonuldu] = 0;
			AracInfo[i][aracZirh] = 0;
			AracInfo[i][aracGaraj] = garaj;
			AracInfo[i][aracInterior] = interior;
			AracInfo[i][aracWorld] = world;
			AracInfo[i][aracVergi] = 0;
			AracInfo[i][aracVergiSure] = 0;
			AracInfo[i][TaksiPlaka] = 0;
			AracInfo[i][Taksimetre] = false;
			AracInfo[i][Taksimetre] = 0;
			AracInfo[i][OturumKazanci] = 0;
			AracInfo[i][aracUyusturucu] = 0;
			AracInfo[i][aracSigorta] = 0;
			AracInfo[i][DuzKontak] = 0;
			AracInfo[i][KilitKir] = 0;
			AracInfo[i][KancaIzin] = -1;

			if(IsValidDynamic3DTextLabel(AracInfo[i][aracLabel]))
			{
			    UpdateDynamic3DTextLabelText(AracInfo[i][aracLabel], -1, " ");
			    DestroyDynamic3DTextLabel(AracInfo[i][aracLabel]);
			}
			switch(tip)
			{
			    case 1:
			    {
			        AracInfo[i][aracFaction] = id;
			        AracInfo[i][aracFactionType] = Birlikler[Birlik_GetID(id)][birlikTip];
			        AracInfo[i][aracKira] = -1;
			        AracInfo[i][aracFiyat] = 0;
			        AracInfo[i][aracSatilik] = 0;
		        	if(AracInfo[i][aracFactionType] == BIRLIK_LSPD || AracInfo[i][aracFactionType] == BIRLIK_LSMD || AracInfo[i][aracFactionType] == BIRLIK_GOV || AracInfo[i][aracFactionType] == BIRLIK_FBI) AracInfo[i][aracSigorta] = 1;
			    }
			    case 2:
			    {
			        AracInfo[i][aracFaction] = -1;
			        AracInfo[i][aracKira] = -1;
			        AracInfo[i][aracSahip] = -1;
			        AracInfo[i][aracFiyat] = 0;
			        AracInfo[i][aracSatilik] = 0;
			    }
			    case 3:
			    {
			        AracInfo[i][aracKira] = id;
			        AracInfo[i][aracFaction] = -1;
			        AracInfo[i][aracFiyat] = 0;
			        AracInfo[i][aracSatilik] = 0;
			    }
			    case 4:
			    {
			        AracInfo[i][aracFiyat] = id;
			        AracInfo[i][aracKira] = -1;
			        AracInfo[i][aracFaction] = -1;
			        if(id > 0) AracInfo[i][aracSatilik] = 1;
			    }
			    case 5:
			    {
			        AracInfo[i][aracFaction] = -1;
			        AracInfo[i][aracKira] = -1;
			        AracInfo[i][aracSahip] = -1;
			        AracInfo[i][aracFiyat] = 0;
			        AracInfo[i][aracSatilik] = 0;
			    }
			}
			AracInfo[i][aracTip] = tip;
			PlakaOlustur(i);
			for (new j = 0; j < 14; j ++)
			{
                if (j < 5)
				{
                    AracInfo[i][aracSilahlar][j] = 0;
                    AracInfo[i][aracMermiler][j] = 0;
                }
                AracInfo[i][aracMods][j] = 0;
            }
            AracInfo[i][aracVehicle] = CreateVehicle(modelid, x, y, z, angle, color1, color2, -1);
            for(new ob; ob<5; ob++)
			{
	    		if(IsValidDynamicObject(AracTohumObjeler[AracInfo[i][aracVehicle]][ob])) DestroyDynamicObject(AracTohumObjeler[AracInfo[i][aracVehicle]][ob]);
			}
			AracTohumlar[AracInfo[i][aracVehicle]][0] = 0;
			AracTohumlar[AracInfo[i][aracVehicle]][1] = 0;
			AracTohumlar[AracInfo[i][aracVehicle]][2] = 0;
            Arac_Spawn(i,1);
            mysql_tquery(baglanti, "INSERT INTO `araclar` (`aracmodel`) VALUES(0)", "OnCarCreated", "d", i);
            return i;
   		}
     }
     return -1;
}
stock Birlik_GetID(bid)
{
	for(new i; i<MAX_BIRLIK; i++)
	{
	    if(Birlikler[i][birlikExists] && Birlikler[i][birlikID] == bid) return i;
	}
	return -1;
}
forward OnCarCreated(carid);
public OnCarCreated(carid)
{
	if (carid == -1 || !AracInfo[carid][aracExists])
	    return 0;

	AracInfo[carid][aracID] = cache_insert_id();
	Arac_Kaydet(carid);

	return 1;
}
stock Arac_Kaydet(carid)
{
    static
	    query[5000];
	if (AracInfo[carid][aracVehicle] != INVALID_VEHICLE_ID)
	{
	    for (new i = 0; i < 14; i ++) {
			AracInfo[carid][aracMods][i] = GetVehicleComponentInSlot(AracInfo[carid][aracVehicle], i);
	    }
	}
	format(query, sizeof(query), "UPDATE `araclar` SET `aracmodel` = '%d', `aracowner` = '%d',`aracbenzin` = '%.2f',`aracPosX` = '%.4f', `aracPosY` = '%.4f', `aracPosZ` = '%.4f', `aracPosR` = '%.4f', `aracrenk1` = '%d', `aracrenk2` = '%d', `aracpaintjob` = '%d', `arackilit` = '%d', `aracseviye` = '%d'",
	AracInfo[carid][aracModel],
	AracInfo[carid][aracSahip],
	AracInfo[carid][aracBenzin],
	AracInfo[carid][aracPos][0],
	AracInfo[carid][aracPos][1],
	AracInfo[carid][aracPos][2],
	AracInfo[carid][aracPos][3],
	AracInfo[carid][aracRenkler][0],
	AracInfo[carid][aracRenkler][1],
	AracInfo[carid][aracPaintjob],
	AracInfo[carid][aracKilit],
	AracInfo[carid][aracSeviye]
	);
	format(query, sizeof(query), "%s, `aracbaglandiceza` = '%d', `aracMod1` = '%d', `aracMod2` = '%d', `aracMod3` = '%d', `aracMod4` = '%d', `aracMod5` = '%d', `aracMod6` = '%d', `aracMod7` = '%d', `aracMod8` = '%d', `aracMod9` = '%d', `aracMod10` = '%d', `aracMod11` = '%d', `aracMod12` = '%d', `aracMod13` = '%d', `aracMod14` = '%d',`aracVergi` = '%d', `VergiSure` = '%d',`aracsatilik` = '%d'",
	query,
	AracInfo[carid][aracBaglandiCeza],
	AracInfo[carid][aracMods][0],
	AracInfo[carid][aracMods][1],
	AracInfo[carid][aracMods][2],
	AracInfo[carid][aracMods][3],
	AracInfo[carid][aracMods][4],
	AracInfo[carid][aracMods][5],
	AracInfo[carid][aracMods][6],
	AracInfo[carid][aracMods][7],
	AracInfo[carid][aracMods][8],
	AracInfo[carid][aracMods][9],
	AracInfo[carid][aracMods][10],
	AracInfo[carid][aracMods][11],
	AracInfo[carid][aracMods][12],
	AracInfo[carid][aracMods][13],
	AracInfo[carid][aracVergi],
	AracInfo[carid][aracVergiSure],
	AracInfo[carid][aracSatilik]
	);
	format(query, sizeof(query), "%s, `aracBaglandi` = '%d', `Ceza` = '%d', `CezaSure` = '%d',  `aracfaction` = '%d',`aracfactiontype` = '%d', `aracSilah1` = '%d', `aracSilah2` = '%d', `aracSilah3` = '%d', `aracSilah4` = '%d', `aracSilah5` = '%d', `aracMermi1` = '%d', `aracMermi2` = '%d', `aracMermi3` = '%d', `aracMermi4` = '%d', `aracMermi5` = '%d', `arackira` = '%d', `aracfiyat` = '%d',`aractip` = '%d' ,`aracplaka` = '%s', `arackm` = '%.1f'",
	query,
	AracInfo[carid][aracBaglandi],
	AracInfo[carid][aracTicket],
	AracInfo[carid][aracTicketTime],
	AracInfo[carid][aracFaction],
	AracInfo[carid][aracFactionType],
	AracInfo[carid][aracSilahlar][0],
	AracInfo[carid][aracSilahlar][1],
	AracInfo[carid][aracSilahlar][2],
	AracInfo[carid][aracSilahlar][3],
	AracInfo[carid][aracSilahlar][4],
	AracInfo[carid][aracMermiler][0],
	AracInfo[carid][aracMermiler][1],
	AracInfo[carid][aracMermiler][2],
	AracInfo[carid][aracMermiler][3],
	AracInfo[carid][aracMermiler][4],
	AracInfo[carid][aracKira],
	AracInfo[carid][aracFiyat],
	AracInfo[carid][aracTip],
	AracInfo[carid][aracPlaka],
	AracInfo[carid][aracKM]
	);
	format(query, sizeof(query), "%s, `ElKonuldu` = '%d', `Zirh` = '%d', `Garaj` = '%d', `Interior` = '%d', `World` = '%d', `TaksiPlaka` = '%d', `uyusturucu` = '%d', `sigorta` = '%d', `KancaIzin` = '%d'  WHERE `aracid` = %d",
	query,
	AracInfo[carid][aracElKonuldu],
	AracInfo[carid][aracZirh],
	AracInfo[carid][aracGaraj],
	AracInfo[carid][aracInterior],
	AracInfo[carid][aracWorld],
	AracInfo[carid][TaksiPlaka],
	AracInfo[carid][aracUyusturucu],
	AracInfo[carid][aracSigorta],
	AracInfo[carid][KancaIzin],
	AracInfo[carid][aracID]);

	mysql_query(baglanti,query, false);
	return 1;
}
stock SQLName(id, underscore = 1)
{
	new owner[MAX_PLAYER_NAME], query[512];
	mysql_format(baglanti, query, sizeof(query), "SELECT `Isim` FROM `oyuncular` WHERE `ID` = '%d'", id);
 	new Cache:sqlname = mysql_query(baglanti, query);
	new rows;
	cache_get_row_count(rows);
	if(rows) cache_get_value_name(0, "Isim", owner, 24);
	cache_delete(sqlname);
	if (!underscore) {
	    for (new i = 0, len = strlen(owner); i < len; i ++) {
	        if (owner[i] == '_') owner[i] = ' ';
		}
	}
	return owner;
}
stock Ev_Yenile(houseid)
{
    if (houseid != -1 && house_info[houseid][evExists])
    {
        if(IsValidDynamic3DTextLabel(house_info[houseid][houseText]))
            DestroyDynamic3DTextLabel(house_info[houseid][houseText]);

        if (IsValidDynamicPickup(house_info[houseid][evPickup]))
		    DestroyDynamicPickup(house_info[houseid][evPickup]);

		new string[850];
		new durum[24];
		if(house_info[houseid][evKilit] == 0) durum = "{2ECC71}Kilitli deðil";
		else durum = "{E74C3C}Kilitli";
		if(house_info[houseid][evSahip] == -1 && house_info[houseid][evKiralik] == 0 && house_info[houseid][evSatilik] == 0)
		{
		    format(string,sizeof(string),"{FF9900}Satýlýk Mülk (ID: %d)\n\n{FFFFFF}%s\n{FFFFFF}Fiyat: {2ECC71}%s\n{2ECC71}%s\n{FFFFFF}%d, %s, %s",
			houseid,house_info[houseid][evIsim],FormatNumber(house_info[houseid][evFiyat]),durum,houseid, GetLocation(house_info[houseid][evPos][0], house_info[houseid][evPos][1], house_info[houseid][evPos][2]), GetCityName(house_info[houseid][evPos][0], house_info[houseid][evPos][1], house_info[houseid][evPos][2]));
		    house_info[houseid][houseText] = CreateDynamic3DTextLabel(string,-1,house_info[houseid][evPos][0],house_info[houseid][evPos][1],house_info[houseid][evPos][2],5.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,0,0);
		    house_info[houseid][evPickup] = CreateDynamicPickup(-3000,23,house_info[houseid][evPos][0],house_info[houseid][evPos][1],house_info[houseid][evPos][2],0);
		    return 1;
		}
		if(house_info[houseid][evSahip] != -1 && house_info[houseid][evSatilik] == 1 && house_info[houseid][evKiralik] == 0)
		{
		    format(string,sizeof(string),"{FF9900}Satýlýk Mülk (ID: %d)\n\n{FFFFFF}%s\n{2ECC71}%s\n{AFAFAF}Fiyat: {2ECC71}%s\n{FFFFFF}%d, %s, %s",
			houseid,house_info[houseid][evIsim],durum,FormatNumber(house_info[houseid][evFiyat]),houseid, GetLocation(house_info[houseid][evPos][0], house_info[houseid][evPos][1], house_info[houseid][evPos][2]), GetCityName(house_info[houseid][evPos][0], house_info[houseid][evPos][1], house_info[houseid][evPos][2]));
		    house_info[houseid][houseText] = CreateDynamic3DTextLabel(string,-1,house_info[houseid][evPos][0],house_info[houseid][evPos][1],house_info[houseid][evPos][2],5.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,0,0);
		    house_info[houseid][evPickup] = CreateDynamicPickup(-3000,23,house_info[houseid][evPos][0],house_info[houseid][evPos][1],house_info[houseid][evPos][2],0);
		    return 1;
		}
		if(house_info[houseid][evSahip] != -1 && house_info[houseid][evKiralik] == 0 && house_info[houseid][evSatilik] == 0)
		{
		    format(string,sizeof(string),"{FF9900}Mülk (ID: %d)\n\n{FFFFFF}%s\n{2ECC71}%s\n{FFFFFF}%d, %s, %s",
			houseid,house_info[houseid][evIsim],durum,houseid, GetLocation(house_info[houseid][evPos][0], house_info[houseid][evPos][1], house_info[houseid][evPos][2]), GetCityName(house_info[houseid][evPos][0], house_info[houseid][evPos][1], house_info[houseid][evPos][2]));
		    house_info[houseid][houseText] = CreateDynamic3DTextLabel(string,-1,house_info[houseid][evPos][0],house_info[houseid][evPos][1],house_info[houseid][evPos][2],5.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,0,0);
		    house_info[houseid][evPickup] = CreateDynamicPickup(19522,23,house_info[houseid][evPos][0],house_info[houseid][evPos][1],house_info[houseid][evPos][2],0);
		    return 1;
		}
    }
    return 1;
}
stock IsPlayerNearBoot(playerid, vehicleid)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetVehicleBoot(vehicleid, fX, fY, fZ);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.5, fX, fY, fZ);
}
stock GetVehicleBoot(vehicleid, &Float:x, &Float:y, &Float:z)
{
	if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	static
	    Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] - (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
	y = pos[4] - (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}
stock Ev_Kaydet(ev)
{
	new query[1330];
	format(query, sizeof(query), "UPDATE `evler` SET `evOwner` = '%d',`evFiyat` = '%d',`evKendiFiyati` = '%d', `Vergi` = '%d', `VergiSure` = '%d',`evPosX` = '%.4f',`evPosY` = '%.4f',`evPosZ` = '%.4f', `evName`= '%s',`evInterior` = '%d', `MaksMobilya` = '%d'",
	house_info[ev][evSahip],
	house_info[ev][evFiyat],
	house_info[ev][evKendiFiyati],
	house_info[ev][evVergi],
	house_info[ev][evVergiSure],
	house_info[ev][evPos][0],
	house_info[ev][evPos][1],
	house_info[ev][evPos][2],
	SQL_ReturnEscaped(house_info[ev][evIsim]),
	house_info[ev][evInterior],
	house_info[ev][evMaksMobilya]
	);
	format(query, sizeof(query), "%s, `evKilit` = '%d',`evPara` = '%d',`evSatilik` = '%d',`evKiralik` = '%d',`evKiraUcret` = '%d',`evKiralayan` = '%d', `Uyusturucu` = '%d', `evKiyafet1` = '%d',`evKiyafet2` = '%d',`evKiyafet3` = '%d',`evKiyafet4` = '%d',`evKiyafet5` = '%d'",
	query,
	house_info[ev][evKilit],
	house_info[ev][evCash],
	house_info[ev][evSatilik],
	house_info[ev][evKiralik],
	house_info[ev][evKiraUcret],
	house_info[ev][evKiralayan],
	house_info[ev][evUyusturucu],
	house_info[ev][evKiyafetler][0],
	house_info[ev][evKiyafetler][1],
	house_info[ev][evKiyafetler][2],
	house_info[ev][evKiyafetler][3],
	house_info[ev][evKiyafetler][4]
	);
 	format(query, sizeof(query), "%s, `evWeapon1` = '%d', `evWeapon2` = '%d', `evWeapon3` = '%d',`evWeapon4` = '%d',`evWeapon5` = '%d',`evWeapon6` = '%d',`evWeapon7` = '%d',`evWeapon8` = '%d',`evWeapon9` = '%d',`evWeapon10` = '%d'",
 	query,
 	house_info[ev][evSilahlar][0],
 	house_info[ev][evSilahlar][1],
 	house_info[ev][evSilahlar][2],
 	house_info[ev][evSilahlar][3],
 	house_info[ev][evSilahlar][4],
 	house_info[ev][evSilahlar][5],
 	house_info[ev][evSilahlar][6],
 	house_info[ev][evSilahlar][7],
 	house_info[ev][evSilahlar][8],
 	house_info[ev][evSilahlar][9]
	);
	format(query, sizeof(query), "%s, `MobilyaYetki` = '%d', `evAmmo1` = '%d', `evAmmo2` = '%d', `evAmmo3` = '%d',`evAmmo4` = '%d',`evAmmo5` = '%d',`evAmmo6` = '%d',`evAmmo7` = '%d',`evAmmo8` = '%d',`evAmmo9` = '%d',`evAmmo10` = '%d' WHERE `evid` = '%d'",
	query,
	house_info[ev][MobilyaYetki],
	house_info[ev][evMermiler][0],
	house_info[ev][evMermiler][1],
	house_info[ev][evMermiler][2],
	house_info[ev][evMermiler][3],
	house_info[ev][evMermiler][4],
	house_info[ev][evMermiler][5],
	house_info[ev][evMermiler][6],
	house_info[ev][evMermiler][7],
	house_info[ev][evMermiler][8],
	house_info[ev][evMermiler][9],
	house_info[ev][evID]
	);
	mysql_query(baglanti,query, false);
	return 1;
}
forward BirlikleriYukle();
public BirlikleriYukle()
{
	new Cache:sawyer = mysql_query(baglanti,"SELECT * FROM `birlikler`");
	new rows;
	cache_get_row_count(rows);
	printf("» Toplam %d birlik yüklenmiþtir.", rows);
	new str[130];
	for(new i = 0; i < rows; i++) if (i < MAX_BIRLIK)
	{
	    Birlikler[i][birlikExists] = true;
	    cache_get_value_name_int(i,"bid",Birlikler[i][birlikID]);
	    cache_get_value_name(i,"bisim",Birlikler[i][birlikAd],32);
	    cache_get_value_name_int(i,"brenk",Birlikler[i][birlikColor]);
	    cache_get_value_name_int(i,"btip",Birlikler[i][birlikTip]);
	    cache_get_value_name_int(i,"bRutbeler",Birlikler[i][birlikRutbeler]);
	    cache_get_value_name_int(i,"sistemselonay",Birlikler[i][birlikOnaylar][0]);
	    cache_get_value_name_int(i,"silahonay",Birlikler[i][birlikOnaylar][1]);
	    cache_get_value_name_int(i,"uyusturucuonay",Birlikler[i][birlikOnaylar][2]);
	    cache_get_value_name_int(i,"graffitionay",Birlikler[i][birlikOnaylar][3]);
	    cache_get_value_name_int(i,"hoodonay",Birlikler[i][birlikOnaylar][4]);
	    cache_get_value_name(i,"bduyuru",Birlikler[i][birlikDuyuru],128);
	    cache_get_value_name_int(i,"bkasacash",Birlikler[i][birlikKasaPara]);
	    cache_get_value_name_int(i,"oocdurum",Birlikler[i][OOCDurum]);
	    cache_get_value_name_int(i,"yayindurum",Birlikler[i][yayinDurum]);
	    cache_get_value_name_int(i,"yayintipi",Birlikler[i][yayinTipi]);
	    cache_get_value_name_int(i,"reklamalimi",Birlikler[i][ReklamAlimi]);
	    cache_get_value_name_int(i,"reklamucreti",Birlikler[i][ReklamUcreti]);
	    cache_get_value_name_int(i,"reklamsayisi",Birlikler[i][ReklamSayisi]);
	    cache_get_value_name_float(i,"reklamx",Birlikler[i][reklamPos][0]);
	    cache_get_value_name_float(i,"reklamy",Birlikler[i][reklamPos][1]);
	    cache_get_value_name_float(i,"reklamz",Birlikler[i][reklamPos][2]);
	    for (new j = 0; j < 15; j ++)
	    {
	        if(j < 8)
	        {
	            format(str,sizeof(str),"byetki%d",j+1);
	            cache_get_value_name_int(i,str,Birlikler[i][birlikYetkilendirme][j]);
	        }
	        if(j < 5)
	        {
	            format(str,sizeof(str),"bdivizyon%d",j+1);
	            cache_get_value_name(i,str,BirlikDivizyon[i][j],15);
	        }
	        format(str,sizeof(str),"brutbe%d",j+1);
	        cache_get_value_name(i,str,BirlikRutbe[i][j],32);
	    }
	    if(Birlikler[i][reklamPos][0] != 0.0 && Birlikler[i][reklamPos][1] != 0.0 && Birlikler[i][birlikTip] == BIRLIK_HABER)
	    {
	     	Birlikler[i][reklamPickup] = CreateDynamicPickup(1239, 23, Birlikler[i][reklamPos][0], Birlikler[i][reklamPos][1], Birlikler[i][reklamPos][2]);
	       	format(str, sizeof(str), "{E74C3C}[Reklam Noktasý]\n{E74C3C}Ajans: {FFFFFF}%s\n{E74C3C}Ücret: {FFFFFF}%s\n{E74C3C}(/reklamver)", Birlikler[i][birlikAd], FormatNumber(Birlikler[i][ReklamUcreti]));
	        Birlikler[i][reklamLabel] = CreateDynamic3DTextLabel(str, -1, Birlikler[i][reklamPos][0], Birlikler[i][reklamPos][1], Birlikler[i][reklamPos][2], 10.0);
        }
	}
	cache_delete(sawyer);
	return 1;
}
forward EvleriYukle();
public EvleriYukle()
{
	new Cache:sawyer = mysql_query(baglanti,"SELECT * FROM `evler`");
	new rows;
	cache_get_row_count(rows);
	printf("» Toplam %d ev yüklenmiþtir.", rows);
	new str[124];
	for (new i = 0; i < rows; i++) if (i < MAX_EV)
	{
	    house_info[i][evExists] = true;
	    cache_get_value_name_int(i,"evid",house_info[i][evID]);
	    cache_get_value_name_int(i,"evOwner",house_info[i][evSahip]);
	    cache_get_value_name_int(i,"evFiyat",house_info[i][evFiyat]);
	    cache_get_value_name_int(i,"evKendiFiyati",house_info[i][evKendiFiyati]);
	    cache_get_value_name_float(i,"evPosX",house_info[i][evPos][0]);
	    cache_get_value_name_float(i,"evPosY",house_info[i][evPos][1]);
	    cache_get_value_name_float(i,"evPosZ",house_info[i][evPos][2]);
	    cache_get_value_name(i,"evName",house_info[i][evIsim],30);
	    cache_get_value_name_int(i, "MaksMobilya", house_info[i][evMaksMobilya]);
	    cache_get_value_name_int(i, "Vergi", house_info[i][evVergi]);
	    cache_get_value_name_int(i, "VergiSure", house_info[i][evVergiSure]);
	    cache_get_value_name_int(i,"evInterior",house_info[i][evInterior]);
	    cache_get_value_name_int(i,"evKilit",house_info[i][evKilit]);
	    cache_get_value_name_int(i,"evPara",house_info[i][evCash]);
	    cache_get_value_name_int(i,"evSatilik",house_info[i][evSatilik]);
	    cache_get_value_name_int(i,"evKiralik",house_info[i][evKiralik]);
	    cache_get_value_name_int(i,"evKiraUcret",house_info[i][evKiraUcret]);
	    cache_get_value_name_int(i,"evKiralayan",house_info[i][evKiralayan]);
	    cache_get_value_name_int(i,"Uyusturucu",house_info[i][evUyusturucu]);
	    cache_get_value_name_int(i,"MobilyaYetki",house_info[i][MobilyaYetki]);
	    for (new j = 0; j < 10; j ++)
	    {
	        if(j < 5)
	        {
	            format(str, 24, "evKiyafet%d", j + 1);
	            cache_get_value_name_int(i,str,house_info[i][evKiyafetler][j]);
	        }
	        format(str, 24, "evWeapon%d", j + 1);
	        cache_get_value_name_int(i,str,house_info[i][evSilahlar][j]);

	        format(str, 24, "evAmmo%d", j + 1);
	        cache_get_value_name_int(i,str,house_info[i][evMermiler][j]);
	    }
	}
	for (new i = 0; i < MAX_EV; i ++) if (house_info[i][evExists])
	{
	    format(str, sizeof(str), "SELECT * FROM `furniture` WHERE `ID` = '%d'", house_info[i][evID]);

		mysql_tquery(baglanti, str, "OnLoadFurniture", "d", i);
		Ev_Yenile(i);
	}
	cache_delete(sawyer);
	return 1;
}
forward OnLoadFurniture(houseid);
public OnLoadFurniture(houseid)
{
	static
	    rows,
		id = -1;

	cache_get_row_count(rows);

	for (new i = 0; i != rows; i ++)
	{
		id = Iter_Free(Mobilyalar[houseid]);
		cache_get_value_name_int(i,"furnitureID",FurnitureData[houseid][id][furnitureID]);
		cache_get_value_name(i,"furnitureName",FurnitureData[houseid][id][furnitureName],32);
		cache_get_value_name_int(i,"furnitureModel",FurnitureData[houseid][id][furnitureModel]);
		cache_get_value_name_int(i,"MateryalDesen1",FurnitureData[houseid][id][furnitureMateryalDesen][0]);
		cache_get_value_name_int(i,"MateryalDesen2",FurnitureData[houseid][id][furnitureMateryalDesen][1]);
		cache_get_value_name_int(i,"MateryalDesen3",FurnitureData[houseid][id][furnitureMateryalDesen][2]);
		cache_get_value_name_int(i,"MateryalDesen4",FurnitureData[houseid][id][furnitureMateryalDesen][3]);
		cache_get_value_name_int(i,"MateryalDesen5",FurnitureData[houseid][id][furnitureMateryalDesen][4]);
		cache_get_value_name_float(i,"furnitureX",FurnitureData[houseid][id][furniturePos][0]);
		cache_get_value_name_float(i,"furnitureY",FurnitureData[houseid][id][furniturePos][1]);
		cache_get_value_name_float(i,"furnitureZ",FurnitureData[houseid][id][furniturePos][2]);
		cache_get_value_name_float(i,"furnitureRX",FurnitureData[houseid][id][furnitureRot][0]);
		cache_get_value_name_float(i,"furnitureRY",FurnitureData[houseid][id][furnitureRot][1]);
		cache_get_value_name_float(i,"furnitureRZ",FurnitureData[houseid][id][furnitureRot][2]);
		cache_get_value_name_int(i,"furniturePrice",FurnitureData[houseid][id][furniturePrice]);
		Iter_Add(Mobilyalar[houseid], id);
	    Furniture_Refresh(id, houseid);
	}
	return 1;
}
stock Ev_MobilyaSayisi(evid)
{
	return Iter_Count(Mobilyalar[evid]);
}
Furniture_Refresh(furnitureid, houseid)
{
	if (furnitureid != -1)
	{
	    	if (IsValidDynamicObject(FurnitureData[houseid][furnitureid][furnitureObject]))
	        DestroyDynamicObject(FurnitureData[houseid][furnitureid][furnitureObject]);
	    	FurnitureData[houseid][furnitureid][furnitureObject] = CreateDynamicObject(
			FurnitureData[houseid][furnitureid][furnitureModel],
			FurnitureData[houseid][furnitureid][furniturePos][0],
			FurnitureData[houseid][furnitureid][furniturePos][1],
			FurnitureData[houseid][furnitureid][furniturePos][2],
			FurnitureData[houseid][furnitureid][furnitureRot][0],
			FurnitureData[houseid][furnitureid][furnitureRot][1],
			FurnitureData[houseid][furnitureid][furnitureRot][2],
			house_info[houseid][evID] + 1,
			HouseInteriors[house_info[houseid][evInterior]][intID]
		);
			for(new i; i<5; i++) if(FurnitureData[houseid][furnitureid][furnitureMateryalDesen][i] > 0)
		{
	 		SetDynamicObjectMaterial(FurnitureData[houseid][furnitureid][furnitureObject], i, Desenler[FurnitureData[houseid][furnitureid][furnitureMateryalDesen][i]-1][model_id], Desenler[FurnitureData[houseid][furnitureid][furnitureMateryalDesen][i]-1][txdname], Desenler[FurnitureData[houseid][furnitureid][furnitureMateryalDesen][i]-1][texturename], 0);
		}
	}
	return 1;
}
Furniture_Save(furnitureid, houseid)
{
	static
	    string[700];

	format(string, sizeof(string), "UPDATE `furniture` SET `furnitureModel` = '%d', `furnitureName` = '%s', `furnitureX` = '%.4f', `furnitureY` = '%.4f', `furnitureZ` = '%.4f', `furnitureRX` = '%.4f', `furnitureRY` = '%.4f', `furnitureRZ` = '%.4f',`furniturePrice` = '%d'",
	    FurnitureData[houseid][furnitureid][furnitureModel],
	    FurnitureData[houseid][furnitureid][furnitureName],
	    FurnitureData[houseid][furnitureid][furniturePos][0],
	    FurnitureData[houseid][furnitureid][furniturePos][1],
	    FurnitureData[houseid][furnitureid][furniturePos][2],
	    FurnitureData[houseid][furnitureid][furnitureRot][0],
	    FurnitureData[houseid][furnitureid][furnitureRot][1],
	    FurnitureData[houseid][furnitureid][furnitureRot][2],
	    FurnitureData[houseid][furnitureid][furniturePrice]
	);
	format(string, sizeof(string), "%s, `MateryalDesen1` = '%d', `MateryalDesen2` = '%d', `MateryalDesen3` = '%d', `MateryalDesen4` = '%d', `MateryalDesen5` = '%d' WHERE `ID` = '%d' AND `furnitureID` = '%d'",
	string,
	FurnitureData[houseid][furnitureid][furnitureMateryalDesen][0],
    FurnitureData[houseid][furnitureid][furnitureMateryalDesen][1],
    FurnitureData[houseid][furnitureid][furnitureMateryalDesen][2],
    FurnitureData[houseid][furnitureid][furnitureMateryalDesen][3],
    FurnitureData[houseid][furnitureid][furnitureMateryalDesen][4],
    house_info[houseid][evID],
    FurnitureData[houseid][furnitureid][furnitureID]);

	mysql_query(baglanti, string, false);
	return 1;
}
Furniture_Add(houseid, name[], modelid, Float:x, Float:y, Float:z, Float:rx = 0.0, Float:ry = 0.0, Float:rz = 0.0,price)
{
	static
	    string[64],
		id;

 	if (houseid == -1 || !house_info[houseid][evExists])
	    return 0;
	id = Iter_Free(Mobilyalar[houseid]);
	if (id != -1)
	{
	    format(FurnitureData[houseid][id][furnitureName], 32, name);
	    FurnitureData[houseid][id][furnitureModel] = modelid;
	    FurnitureData[houseid][id][furniturePos][0] = x;
	    FurnitureData[houseid][id][furniturePos][1] = y;
	    FurnitureData[houseid][id][furniturePos][2] = z;
	    FurnitureData[houseid][id][furnitureRot][0] = rx;
	    FurnitureData[houseid][id][furnitureRot][1] = ry;
	    FurnitureData[houseid][id][furnitureRot][2] = rz;
		FurnitureData[houseid][id][furniturePrice] = price;
		FurnitureData[houseid][id][furnitureMateryalDesen][0] = 0;
		FurnitureData[houseid][id][furnitureMateryalDesen][1] = 0;
		FurnitureData[houseid][id][furnitureMateryalDesen][2] = 0;
		FurnitureData[houseid][id][furnitureMateryalDesen][3] = 0;
		FurnitureData[houseid][id][furnitureMateryalDesen][4] = 0;
	    Furniture_Refresh(id, houseid);
	    Iter_Add(Mobilyalar[houseid], id);

		format(string, sizeof(string), "INSERT INTO `furniture` (`ID`) VALUES(%d)", house_info[houseid][evID]);
		mysql_tquery(baglanti, string, "OnFurnitureCreated", "dd", id, houseid);

		return id;
	}
	return -1;
}
Furniture_Delete(furnitureid, houseid)
{
	static
	    string[72];

	if (furnitureid != -1)
	{
	    format(string, sizeof(string), "DELETE FROM `furniture` WHERE `ID` = '%d' AND `furnitureID` = '%d'", house_info[houseid][evID], FurnitureData[houseid][furnitureid][furnitureID]);
		mysql_tquery(baglanti, string);

		FurnitureData[houseid][furnitureid][furnitureModel] = 0;
		Iter_Remove(Mobilyalar[houseid], furnitureid);
		DestroyDynamicObject(FurnitureData[houseid][furnitureid][furnitureObject]);
	}
	return 1;
}
forward OnFurnitureCreated(furnitureid, houseid);
public OnFurnitureCreated(furnitureid, houseid)
{
	FurnitureData[houseid][furnitureid][furnitureID] = cache_insert_id();
	Furniture_Save(furnitureid, houseid);
	return 1;
}
stock Lokasyon_Yukle()
{
    new Cache:sawyer = mysql_query(baglanti, "SELECT * FROM `lokasyon`");
    new rows;
    cache_get_row_count(rows);
    printf("» Toplam %d Lokasyon yüklenmiþtir.", rows);
    for (new i = 0; i < rows; i ++) if (i < MAX_LOKASYON)
    {
        Lokasyon[i][Exists] = true;
        cache_get_value_name_int(i, "ID", Lokasyon[i][ID]);
        cache_get_value_name(i, "Ad", Lokasyon[i][lokasyonAd], 30);
        cache_get_value_name_float(i, "posX", Lokasyon[i][lokasyonPos][0]);
        cache_get_value_name_float(i, "posY", Lokasyon[i][lokasyonPos][1]);
        cache_get_value_name_float(i, "posZ", Lokasyon[i][lokasyonPos][2]);
    }
    cache_delete(sawyer);
    return 1;
}
stock CCTV_Yukle()
{
    new Cache:sawyer = mysql_query(baglanti, "SELECT * FROM `cctv`");
    new rows;
    cache_get_row_count(rows);
    printf("» Toplam %d CCTV yüklenmiþtir.", rows);
    for (new i = 0; i < rows; i ++) if (i < MAX_CCTV)
    {
        cache_get_value_name_int(i, "ID", CCTVInfo[i][ID]);
        cache_get_value_name(i, "cctv_name", CCTVInfo[i][cctv_Name], 30);
        cache_get_value_name_float(i, "cctv_x", CCTVInfo[i][cctv_X]);
        cache_get_value_name_float(i, "cctv_y", CCTVInfo[i][cctv_Y]);
        cache_get_value_name_float(i, "cctv_z", CCTVInfo[i][cctv_Z]);
        cache_get_value_name_float(i, "cctv_rot_x", CCTVInfo[i][cctv_rotX]);
        cache_get_value_name_float(i, "cctv_rot_y", CCTVInfo[i][cctv_rotY]);
        cache_get_value_name_float(i, "cctv_rot_z", CCTVInfo[i][cctv_rotZ]);
        cache_get_value_name_int(i, "cctv_vw", CCTVInfo[i][cctv_VW]);
        cache_get_value_name_int(i, "cctv_interior", CCTVInfo[i][cctv_Interior]);

        CCTVInfo[i][cctv_Object] = CreateObject(1886, CCTVInfo[i][cctv_X], CCTVInfo[i][cctv_Y], CCTVInfo[i][cctv_Z], CCTVInfo[i][cctv_rotX], CCTVInfo[i][cctv_rotY], CCTVInfo[i][cctv_rotZ], 20.0);
        Iter_Add(CCTVIter, i);
	}
	cache_delete(sawyer);
	return 1;
}
SaveCCTV(id)
{
	new query[512];
	mysql_format(baglanti, query, sizeof query, "UPDATE `cctv` SET `cctv_name` = '%s', `cctv_x` = '%f', `cctv_y` = '%f', `cctv_z` = '%f', `cctv_rot_x` = '%f', `cctv_rot_y` = '%f', `cctv_rot_z` = '%f', `cctv_vw` = '%d', `cctv_interior` = '%d' WHERE `ID` = '%d'",
		CCTVInfo[id][cctv_Name],
		CCTVInfo[id][cctv_X],
		CCTVInfo[id][cctv_Y],
		CCTVInfo[id][cctv_Z],
		CCTVInfo[id][cctv_rotX],
		CCTVInfo[id][cctv_rotY],
		CCTVInfo[id][cctv_rotZ],
		CCTVInfo[id][cctv_VW],
		CCTVInfo[id][cctv_Interior],
		CCTVInfo[id][ID]);
	mysql_query(baglanti, query);
	return 1;
}
CreateCCTV(playerid, name[])
{
	new id = Iter_Free(CCTVIter);
	if(id != -1)
	{
		new
			Float: x, Float: y, Float: z;
		GetPlayerPos(playerid, x, y, z);

		CCTVInfo[id][cctv_X] = x;
		CCTVInfo[id][cctv_Y] = y;
		CCTVInfo[id][cctv_Z] = z;

		CCTVInfo[id][cctv_rotX] = 0.0;
		CCTVInfo[id][cctv_rotY] = 0.0;
		CCTVInfo[id][cctv_rotZ] = 0.0;


		CCTVInfo[id][cctv_VW] = GetPlayerVirtualWorld(playerid);
		CCTVInfo[id][cctv_Interior] = GetPlayerInterior(playerid);
		strcpy(CCTVInfo[id][cctv_Name], name, 30);

		CCTVInfo[id][cctv_Object] = CreateObject(1886, CCTVInfo[id][cctv_X], CCTVInfo[id][cctv_Y], CCTVInfo[id][cctv_Z], CCTVInfo[id][cctv_rotX], CCTVInfo[id][cctv_rotY], CCTVInfo[id][cctv_rotZ], 20.0);

		Iter_Add(CCTVIter, id);
		mysql_tquery(baglanti, "INSERT INTO `cctv` (`cctv_x`) VALUES (0)", "OnCCTVCreated", "d", id);
	}
	return id;
}
forward OnCCTVCreated(id); public OnCCTVCreated(id)
{
	CCTVInfo[id][ID] = cache_insert_id();
	SaveCCTV(id);
	return 1;
}
DeleteCCTV(playerid, id)
{
	if(!Iter_Contains(CCTVIter, id)) return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");

	new
		query[128];
	mysql_format(baglanti, query, sizeof query, "DELETE FROM `cctv` WHERE `ID` = '%d'", CCTVInfo[id][ID]);
	mysql_query(baglanti, query);

	CCTVInfo[id][cctv_X] = CCTVInfo[id][cctv_Y] = CCTVInfo[id][cctv_Z] =
	CCTVInfo[id][cctv_rotX] = CCTVInfo[id][cctv_rotY] = CCTVInfo[id][cctv_rotZ] = 0.0;

	CCTVInfo[id][cctv_VW] = CCTVInfo[id][cctv_Interior] = CCTVInfo[id][ID] = -1;

	Iter_Remove(CCTVIter, id);
	MesajGonder(playerid, "CCTV silindi, ID: %d", id);
	return 1;
}
EditCCTV(playerid, id)
{
	if(!Iter_Contains(CCTVIter, id)) return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");
	if(CCTV_inEditing[playerid]) return HataMesajGonder(playerid, "Zaten CCTV düzenliyorsun.");
	CCTV_inEditing[playerid] = 1;
	CCTV_ID[playerid] = id;
	EditObject(playerid, CCTVInfo[id][cctv_Object]);

	MesajGonder(playerid, "CCTV düzenlemeye baþladýnýz, bitirdiðinizde kayýt simgesine basýn.");
	return 1;
}
CancelEditCCTV(playerid, id)
{
	CCTV_inEditing[playerid] = 0;
	CCTV_ID[playerid] = -1;
	SetObjectPos(CCTVInfo[id][cctv_Object], CCTVInfo[id][cctv_X], CCTVInfo[id][cctv_Y], CCTVInfo[id][cctv_Z]);
	SetObjectRot(CCTVInfo[id][cctv_Object], CCTVInfo[id][cctv_rotX], CCTVInfo[id][cctv_rotY], CCTVInfo[id][cctv_rotZ]);
	return 1;
}
ChangeCCTVName(playerid, id, name[])
{
	if(!Iter_Contains(CCTVIter, id)) return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");
	strcpy(CCTVInfo[id][cctv_Name], name, 30);
	MesajGonder(playerid, "CCTV ismi deðiþtirildi. (ID: %d, Yeni isim: %s)", id, name);
	return 1;
}
MoveCCTV(playerid, id)
{
	if(!Iter_Contains(CCTVIter, id)) return SendClientMessage(playerid, 0xFF6347FF, "The ID of the typed CCTV is nonexistent. (Use Server ID)");
	new
		Float: x, Float: y, Float: z;
	GetPlayerPos(playerid, x, y, z);

	CCTVInfo[id][cctv_X] = x;
	CCTVInfo[id][cctv_Y] = y + 0.5;
	CCTVInfo[id][cctv_Z] = z;

	CCTVInfo[id][cctv_rotX] = 0.0;
	CCTVInfo[id][cctv_rotY] = 0.0;
	CCTVInfo[id][cctv_rotZ] = 0.0;

	CCTVInfo[id][cctv_VW] = GetPlayerVirtualWorld(playerid);
	CCTVInfo[id][cctv_Interior] = GetPlayerInterior(playerid);

	SetObjectPos(CCTVInfo[id][cctv_Object], CCTVInfo[id][cctv_X], CCTVInfo[id][cctv_Y], CCTVInfo[id][cctv_Z]);
	SetObjectRot(CCTVInfo[id][cctv_Object], CCTVInfo[id][cctv_rotX], CCTVInfo[id][cctv_rotY], CCTVInfo[id][cctv_rotZ]);

	SaveCCTV(id);
	return 1;
}
stock Arrest_Load()
{
	new Cache:sawyer = mysql_query(baglanti, "SELECT * FROM `arrestpoints`");
	new rows;
	cache_get_row_count(rows);
	printf("» Toplam %d hapis noktasi yüklenmiþtir.", rows);
	for (new i = 0; i < rows; i ++) if (i < MAX_ARREST_POINTS)
	{
	    ArrestData[i][arrestExists] = true;
	    cache_get_value_name_int(i, "arrestID", ArrestData[i][arrestID]);
	    cache_get_value_name_float(i, "arrestX", ArrestData[i][arrestPos][0]);
	    cache_get_value_name_float(i, "arrestY", ArrestData[i][arrestPos][1]);
	    cache_get_value_name_float(i, "arrestZ", ArrestData[i][arrestPos][2]);
	    cache_get_value_name_int(i, "arrestInterior", ArrestData[i][arrestInterior]);
	    cache_get_value_name_int(i, "arrestWorld", ArrestData[i][arrestWorld]);

	    Arrest_Refresh(i);
	}
	cache_delete(sawyer);
	return 1;
}
Arrest_Refresh(arrestid)
{
	if (arrestid != -1 && ArrestData[arrestid][arrestExists])
	{
	    static
	        string[64];

		if (IsValidDynamicPickup(ArrestData[arrestid][arrestPickup]))
		    DestroyDynamicPickup(ArrestData[arrestid][arrestPickup]);

		if (IsValidDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]))
		    DestroyDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]);

		format(string, sizeof(string), "Hapis Noktasý (ID: %d)\n{FFFFFF}/hapseat", arrestid);

		ArrestData[arrestid][arrestPickup] = CreateDynamicPickup(1247, 23, ArrestData[arrestid][arrestPos][0], ArrestData[arrestid][arrestPos][1], ArrestData[arrestid][arrestPos][2], ArrestData[arrestid][arrestWorld], ArrestData[arrestid][arrestInterior]);
  		ArrestData[arrestid][arrestText3D] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, ArrestData[arrestid][arrestPos][0], ArrestData[arrestid][arrestPos][1], ArrestData[arrestid][arrestPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, ArrestData[arrestid][arrestWorld], ArrestData[arrestid][arrestInterior]);
	}
	return 1;
}
Arrest_Delete(arrestid)
{
	if (arrestid != -1 && ArrestData[arrestid][arrestExists])
	{
	    static
	        string[64];

        if (IsValidDynamicPickup(ArrestData[arrestid][arrestPickup]))
		    DestroyDynamicPickup(ArrestData[arrestid][arrestPickup]);

		if (IsValidDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]))
		    DestroyDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]);

		format(string, sizeof(string), "DELETE FROM `arrestpoints` WHERE `arrestID` = '%d'", ArrestData[arrestid][arrestID]);
		mysql_query(baglanti, string, false);

		ArrestData[arrestid][arrestExists] = false;
		ArrestData[arrestid][arrestID] = 0;
	}
	return 1;
}
Arrest_Create(Float:x, Float:y, Float:z, interior, world)
{
	for (new i = 0; i < MAX_ARREST_POINTS; i ++) if (!ArrestData[i][arrestExists])
	{
	    ArrestData[i][arrestExists] = true;
	    ArrestData[i][arrestPos][0] = x;
	    ArrestData[i][arrestPos][1] = y;
	    ArrestData[i][arrestPos][2] = z;
	    ArrestData[i][arrestInterior] = interior;
	    ArrestData[i][arrestWorld] = world;

	    mysql_tquery(baglanti, "INSERT INTO `arrestpoints` (`arrestInterior`) VALUES(0)", "OnArrestCreated", "d", i);
		Arrest_Refresh(i);
		return i;
	}
	return -1;
}
forward OnArrestCreated(arrestid);
public OnArrestCreated(arrestid)
{
	if (arrestid == -1 || !ArrestData[arrestid][arrestExists])
	    return 0;

	ArrestData[arrestid][arrestID] = cache_insert_id();
	Arrest_Save(arrestid);

	return 1;
}
Arrest_Save(arrestid)
{
	static
	    query[220];

	format(query, sizeof(query), "UPDATE `arrestpoints` SET `arrestX` = '%.4f', `arrestY` = '%.4f', `arrestZ` = '%.4f', `arrestInterior` = '%d', `arrestWorld` = '%d' WHERE `arrestID` = '%d'",
	    ArrestData[arrestid][arrestPos][0],
	    ArrestData[arrestid][arrestPos][1],
	    ArrestData[arrestid][arrestPos][2],
	    ArrestData[arrestid][arrestInterior],
	    ArrestData[arrestid][arrestWorld],
	    ArrestData[arrestid][arrestID]
	);
	mysql_query(baglanti, query, false);
	return 1;
}
forward GateleriYukle();
public GateleriYukle()
{
	new Cache:sawyer = mysql_query(baglanti,"SELECT * FROM `gates`");
	new rows;
	cache_get_row_count(rows);
	printf("» Toplam %d gate yüklenmiþtir. ", rows);
	for (new i = 0; i < rows; i ++) if (i < MAX_GATES)
	{
	    GateData[i][gateExists] = true;
	    GateData[i][gateOpened] = false;
	    cache_get_value_name_int(i,"gateID",GateData[i][gateID]);
	    cache_get_value_name_int(i,"gateModel",GateData[i][gateModel]);
	    cache_get_value_name_float(i,"gateSpeed",GateData[i][gateSpeed]);
	    cache_get_value_name_float(i,"gateRadius",GateData[i][gateRadius]);
	    cache_get_value_name_int(i,"gateInterior",GateData[i][gateInterior]);
	    cache_get_value_name_int(i,"gateWorld",GateData[i][gateWorld]);
	    cache_get_value_name_float(i,"gateX",GateData[i][gatePos][0]);
	    cache_get_value_name_float(i,"gateY",GateData[i][gatePos][1]);
	    cache_get_value_name_float(i,"gateZ",GateData[i][gatePos][2]);
	    cache_get_value_name_float(i,"gateRX",GateData[i][gatePos][3]);
	    cache_get_value_name_float(i,"gateRY",GateData[i][gatePos][4]);
	    cache_get_value_name_float(i,"gateRZ",GateData[i][gatePos][5]);
	    cache_get_value_name_float(i,"gateMoveX",GateData[i][gateMove][0]);
	    cache_get_value_name_float(i,"gateMoveY",GateData[i][gateMove][1]);
	    cache_get_value_name_float(i,"gateMoveZ",GateData[i][gateMove][2]);
	    cache_get_value_name_float(i,"gateMoveRX",GateData[i][gateMove][3]);
	    cache_get_value_name_float(i,"gateMoveRY",GateData[i][gateMove][4]);
	    cache_get_value_name_float(i,"gateMoveRZ",GateData[i][gateMove][5]);
	    cache_get_value_name_int(i,"gateLinkID",GateData[i][gateLinkID]);
	    cache_get_value_name_int(i,"gateFaction",GateData[i][gateFaction]);
	    cache_get_value_name_int(i,"gateOwner",GateData[i][gateOwner]);
	    cache_get_value_name(i,"gatePass",GateData[i][gatePass],32);
     	GateData[i][gateObject] = CreateDynamicObject(GateData[i][gateModel], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2], GateData[i][gatePos][3], GateData[i][gatePos][4], GateData[i][gatePos][5], GateData[i][gateWorld], GateData[i][gateInterior]);
	}
	cache_delete(sawyer);
	return 1;
}
forward DroppedWeapons_Load();
public DroppedWeapons_Load()
{
    new Cache:sawyer = mysql_query(baglanti,"SELECT * FROM `droppedWeapons`");
    new rows;
    cache_get_row_count(rows);
    printf("» Toplam %d yere atýlan silah yüklenmistir.",rows);
    new str[50];
    for (new i = 0; i < rows; i ++) if (i < MAX_DROPPED_WEAPONS)
    {
        DroppedWeapon[i][droppedExists] = true;
        cache_get_value_name_int(i,"dID",DroppedWeapon[i][droppedID]);
        cache_get_value_name_int(i,"dPlayer",DroppedWeapon[i][droppedPlayer]);
        cache_get_value_name_float(i,"dropX",DroppedWeapon[i][droppedPos][0]);
        cache_get_value_name_float(i,"dropY",DroppedWeapon[i][droppedPos][1]);
        cache_get_value_name_float(i,"dropZ",DroppedWeapon[i][droppedPos][2]);
        cache_get_value_name_int(i,"dInterior",DroppedWeapon[i][droppedInt]);
        cache_get_value_name_int(i,"dVw",DroppedWeapon[i][droppedVw]);
        cache_get_value_name_int(i,"dWeapon",DroppedWeapon[i][droppedWeapon]);
        cache_get_value_name_int(i,"dAmmo",DroppedWeapon[i][droppedAmmo]);

        DroppedWeapon[i][droppedObject] = CreateDynamicObject(GetWeaponModel(DroppedWeapon[i][droppedWeapon]), DroppedWeapon[i][droppedPos][0], DroppedWeapon[i][droppedPos][1], DroppedWeapon[i][droppedPos][2], 93.7, 120.0, 120.0, DroppedWeapon[i][droppedInt], DroppedWeapon[i][droppedVw]);
        format(str, sizeof(str), "%s (Mermi: %d)", ReturnWeaponName(DroppedWeapon[i][droppedWeapon]), DroppedWeapon[i][droppedAmmo]);
        DroppedWeapon[i][droppedText] = CreateDynamic3DTextLabel(str, COLOR_LIGHTBLUE, DroppedWeapon[i][droppedPos][0], DroppedWeapon[i][droppedPos][1], DroppedWeapon[i][droppedPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, DroppedWeapon[i][droppedVw], DroppedWeapon[i][droppedInt]);
    }
    cache_delete(sawyer);
    return 1;
}
forward GiseleriYukle();
public GiseleriYukle()
{
	new rows = cache_num_rows();

	printf("» Toplam %d giþe yüklendi.", rows);

	if (rows)
	{
		new gisID, str[512];

		for (new i = 0; i < rows; i++)
		{
		    cache_get_value_name_int(i, "ID", gisID);

		    Gise[gisID][gs_Exists] = true;
		    Gise[gisID][gs_ID] = gisID;

		    Gise[gisID][gs_Durum] = GISE_KAPALI;

		    cache_get_value_name(i, "GatePos", str, sizeof str);
		    sscanf(str, "p<|>ffffff", Gise[gisID][gs_GateBar][0], Gise[gisID][gs_GateBar][1], Gise[gisID][gs_GateBar][2], Gise[gisID][gs_GateBar][3], Gise[gisID][gs_GateBar][4], Gise[gisID][gs_GateBar][5]);

			cache_get_value_name(i, "KapaliPos", str, sizeof str);
		    sscanf(str, "p<|>ffffff", Gise[gisID][gs_Kapali][0], Gise[gisID][gs_Kapali][1], Gise[gisID][gs_Kapali][2], Gise[gisID][gs_Kapali][3], Gise[gisID][gs_Kapali][4], Gise[gisID][gs_Kapali][5]);

            cache_get_value_name(i, "AcikPos", str, sizeof str);
		    sscanf(str, "p<|>ffffff", Gise[gisID][gs_Acik][0], Gise[gisID][gs_Acik][1], Gise[gisID][gs_Acik][2], Gise[gisID][gs_Acik][3], Gise[gisID][gs_Acik][4], Gise[gisID][gs_Acik][5]);

			Gise[gisID][gs_GateObje] = CreateDynamicObject(966, Gise[gisID][gs_GateBar][0], Gise[gisID][gs_GateBar][1], Gise[gisID][gs_GateBar][2], Gise[gisID][gs_GateBar][3], Gise[gisID][gs_GateBar][4], Gise[gisID][gs_GateBar][5]);
			Gise[gisID][gs_Obje] = CreateDynamicObject(968, Gise[gisID][gs_Kapali][0], Gise[gisID][gs_Kapali][1], Gise[gisID][gs_Kapali][2], Gise[gisID][gs_Kapali][3], Gise[gisID][gs_Kapali][4], Gise[gisID][gs_Kapali][5]);

            new Float:ortaKoord[2];

			GetXYInFrontOfToll(Gise[i][gs_GateObje], ortaKoord[0], ortaKoord[1], 3.5);

            format(str, sizeof str, "(%d) [Y tuþu]", Gise[i][gs_ID]);
			Gise[i][gs_id] = CreateDynamic3DTextLabel(str, 0xA5A5A5AA, Gise[i][gs_GateBar][0], Gise[i][gs_GateBar][1], Gise[i][gs_GateBar][2]+0.5, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
		}
	}

	return 1;
}

forward AraclariYukle();
public AraclariYukle()
{
	new Cache:sawyer = mysql_query(baglanti,"SELECT * FROM `araclar`");
	new rows;
	cache_get_row_count(rows);
	printf("» Toplam %d araç yüklenmistir.",rows);
	new str[100];
	for (new i = 0; i < rows; i ++) if (i < MAX_ARAC)
	{
	    AracInfo[i][aracExists] = true;
	    cache_get_value_name_int(i,"aracid",AracInfo[i][aracID]);
	    cache_get_value_name_int(i,"aracmodel",AracInfo[i][aracModel]);
	    cache_get_value_name_int(i,"aracowner",AracInfo[i][aracSahip]);
	    cache_get_value_name_float(i,"aracPosX",AracInfo[i][aracPos][0]);
	    cache_get_value_name_float(i,"aracPosY",AracInfo[i][aracPos][1]);
	    cache_get_value_name_float(i,"aracPosZ",AracInfo[i][aracPos][2]);
	    cache_get_value_name_float(i,"aracPosR",AracInfo[i][aracPos][3]);
	    cache_get_value_name_int(i,"aracrenk1",AracInfo[i][aracRenkler][0]);
	    cache_get_value_name_int(i,"aracrenk2",AracInfo[i][aracRenkler][1]);
	    cache_get_value_name_int(i,"aracpaintjob",AracInfo[i][aracPaintjob]);
	    cache_get_value_name_int(i,"arackilit",AracInfo[i][aracKilit]);
     	cache_get_value_name_int(i,"aracvergi",AracInfo[i][aracVergi]);
     	cache_get_value_name_int(i,"VergiSure",AracInfo[i][aracVergiSure]);
     	cache_get_value_name_int(i,"aracbaglandi",AracInfo[i][aracBaglandi]);
     	cache_get_value_name_int(i,"aracbaglandiceza",AracInfo[i][aracBaglandiCeza]);
     	cache_get_value_name_int(i,"Interior",AracInfo[i][aracInterior]);
     	cache_get_value_name_int(i,"World",AracInfo[i][aracWorld]);
     	cache_get_value_name_int(i,"Ceza",AracInfo[i][aracTicket]);
     	cache_get_value_name_int(i,"CezaSure",AracInfo[i][aracTicketTime]);
     	cache_get_value_name_int(i,"ElKonuldu",AracInfo[i][aracElKonuldu]);
     	cache_get_value_name_int(i,"aracfaction",AracInfo[i][aracFaction]);
     	cache_get_value_name_int(i,"aracfactiontype",AracInfo[i][aracFactionType]);
     	cache_get_value_name_int(i,"arackira",AracInfo[i][aracKira]);
    	cache_get_value_name_int(i,"aractip",AracInfo[i][aracTip]);
    	cache_get_value_name_int(i,"aracsatilik",AracInfo[i][aracSatilik]);
    	cache_get_value_name(i,"aracplaka",AracInfo[i][aracPlaka],24);
    	cache_get_value_name_int(i,"aracfiyat",AracInfo[i][aracFiyat]);
    	cache_get_value_name_int(i,"uyusturucu",AracInfo[i][aracUyusturucu]);
    	cache_get_value_name_int(i, "sigorta", AracInfo[i][aracSigorta]);
		cache_get_value_name_int(i, "KancaIzin", AracInfo[i][KancaIzin]);
    	cache_get_value_name_float(i,"arackm",AracInfo[i][aracKM]);
    	cache_get_value_name_float(i,"aracbenzin",AracInfo[i][aracBenzin]);
    	cache_get_value_name_int(i,"Zirh",AracInfo[i][aracZirh]);
    	cache_get_value_name_int(i,"Garaj",AracInfo[i][aracGaraj]);
    	cache_get_value_name_int(i,"TaksiPlaka",AracInfo[i][TaksiPlaka]);
    	cache_get_value_name_int(i, "aracseviye", AracInfo[i][aracSeviye]);
    	for (new j = 0; j < 14; j ++)
		{
		    if (j < 5)
		    {
		        format(str, sizeof(str), "aracSilah%d", j + 1);
		        cache_get_value_name_int(i,str,AracInfo[i][aracSilahlar][j]);

		        format(str, sizeof(str), "aracMermi%d", j + 1);
		        cache_get_value_name_int(i,str,AracInfo[i][aracMermiler][j]);
	        }
	        format(str, sizeof(str), "aracMod%d", j + 1);
	        cache_get_value_name_int(i,str,AracInfo[i][aracMods][j]);
	    }
	    AracInfo[i][aracKiralayan] = -1;
	    Arac_Spawn(i);
	}
	cache_delete(sawyer);
	return 1;
}
stock Arac_Spawn(carid,display = 0)
{
	// 1: Faction Araci 2: Kiralik Arac 3: Normal
	if(carid != -1 && AracInfo[carid][aracExists])
	{
	    if (IsValidVehicle(AracInfo[carid][aracVehicle]))
		    DestroyVehicle(AracInfo[carid][aracVehicle]);
		if (AracInfo[carid][aracRenkler][0] == -1)
		    AracInfo[carid][aracRenkler][0] = random(127);

		if (AracInfo[carid][aracRenkler][1] == -1)
		    AracInfo[carid][aracRenkler][1] = random(127);

		AracInfo[carid][aracVehicle] = CreateVehicle(AracInfo[carid][aracModel],AracInfo[carid][aracPos][0],AracInfo[carid][aracPos][1],AracInfo[carid][aracPos][2],AracInfo[carid][aracPos][3],AracInfo[carid][aracRenkler][0],AracInfo[carid][aracRenkler][1],(AracInfo[carid][aracSahip] != 0) ? (-1) : (1200000));
		CarLastPos[AracInfo[carid][aracVehicle]][0] = AracInfo[carid][aracPos][0];
		CarLastPos[AracInfo[carid][aracVehicle]][1] = AracInfo[carid][aracPos][1];
		CarLastPos[AracInfo[carid][aracVehicle]][2] = AracInfo[carid][aracPos][2];
		AracYuk[AracInfo[carid][aracVehicle]] = 0;
		AracCP[AracInfo[carid][aracVehicle]] = -1;
		LoadedTrash[AracInfo[carid][aracVehicle]] = 0;
		vehRadar[AracInfo[carid][aracVehicle]] = false;
		for(new i; i<5; i++) TextDrawDestroy(carMDC[AracInfo[carid][aracVehicle]][i]);
		vehRadarLimit[AracInfo[carid][aracVehicle]] = 100;
		KillTimer(timerMDC[AracInfo[carid][aracVehicle]]);
		AracInfo[carid][aracDisplay] = true;
		if(AracInfo[carid][aracSahip] != 0 && !display && AracInfo[carid][aracKira] == -1 && AracInfo[carid][aracFaction] == -1 && AracInfo[carid][aracSatilik] == 0 && AracInfo[carid][aracTip] == 4 && AracInfo[carid][aracGaraj] == -1)
		{
		    AracInfo[carid][aracDisplay] = false;
		    SetVehicleVirtualWorld(AracInfo[carid][aracVehicle], 1000);
		}
		if(AracInfo[carid][aracBaglandi] == 1)
		{
		    AracInfo[carid][aracDisplay] = false;
		    SetVehicleVirtualWorld(AracInfo[carid][aracVehicle], 1000);
		}
		if(AracInfo[carid][aracTip] == 3 && AracInfo[carid][aracKira] > 0)
		{
		    SetVehicleParamsEx(AracInfo[carid][aracVehicle], 0, 0, 0, 0, 0, 0, 0);
		    AracInfo[carid][aracLabel] = CreateDynamic3DTextLabel("{2ECC71}[Kiralýk Araç]",-1,0.0, 0.0, 0.5,30.0,INVALID_PLAYER_ID,AracInfo[carid][aracVehicle], 1);
		}
		if(AracInfo[carid][aracTip] == 4 && AracInfo[carid][aracSatilik] == 1 && AracInfo[carid][aracFiyat] > 0)
		{
		    new str[120];
		    format(str,sizeof(str),"{00FF00}.:SATILIK:.\n{00FF00}Fiyat: %s\n{00FF00}%d",FormatNumber(AracInfo[carid][aracFiyat]),GetSQLPhoneNumber(AracInfo[carid][aracSahip]));
		    AracInfo[carid][aracLabel] = CreateDynamic3DTextLabel(str,-1,0.0, -2.5, 0.4,30.0,INVALID_PLAYER_ID,AracInfo[carid][aracVehicle], 1);
		}
		SetVehicleNumberPlate(AracInfo[carid][aracVehicle], AracInfo[carid][aracPlaka]);
		if(AracInfo[carid][aracDisplay])
		{
		    SetVehicleVirtualWorld(AracInfo[carid][aracVehicle], AracInfo[carid][aracWorld]);
		    LinkVehicleToInteriorEx(AracInfo[carid][aracVehicle], AracInfo[carid][aracInterior]);
		}
		AracInfo[carid][aracCamlar] = false;
		AracInfo[carid][Taksimetre] = false;
		AracInfo[carid][Taksimetre] = 0;
		AracInfo[carid][OturumKazanci] = 0;
		DestroyDynamicObject(AracInfo[carid][TaksiObje]);
		format(RadyoLink[AracInfo[carid][aracVehicle]], 128, "");
		if (AracInfo[carid][aracVehicle] != INVALID_VEHICLE_ID)
        {
            for(new i; i<5; i++)
			{
	    		if(IsValidDynamicObject(AracTohumObjeler[AracInfo[carid][aracVehicle]][i])) DestroyDynamicObject(AracTohumObjeler[AracInfo[carid][aracVehicle]][i]);
			}
			AracTohumlar[AracInfo[carid][aracVehicle]][0] = 0;
			AracTohumlar[AracInfo[carid][aracVehicle]][1] = 0;
			AracTohumlar[AracInfo[carid][aracVehicle]][2] = 0;
            if (AracInfo[carid][aracPaintjob] != -1)
            {
                ChangeVehiclePaintjob(AracInfo[carid][aracVehicle], AracInfo[carid][aracPaintjob]);
			}
			if (AracInfo[carid][aracKilit])
			{
			    new
					engine, lights, alarm, doors, bonnet, boot, objective;

				GetVehicleParamsEx(AracInfo[carid][aracVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
			    SetVehicleParamsEx(AracInfo[carid][aracVehicle], engine, lights, alarm, 1, bonnet, boot, objective);
			}
			if(AracInfo[carid][aracSirenAcik] == true)
			{
			    AracInfo[carid][aracSirenAcik] = false;
			    DestroyDynamicObject(AracInfo[carid][SirenObject]);
			}
			if(AracInfo[carid][aracRadar] == true)
			{
				AracInfo[carid][aracRadar] = false;
			}
			if(AracInfo[carid][aracFactionType] == BIRLIK_LSPD || AracInfo[carid][aracFactionType] == BIRLIK_FBI)
			{
			    PolisAraci[AracInfo[carid][aracVehicle]][Silahlar][0] = 24; // Deagle
			    PolisAraci[AracInfo[carid][aracVehicle]][Mermiler][0] = 80; // Deagle Mermi

			    PolisAraci[AracInfo[carid][aracVehicle]][Silahlar][1] = 29; // MP5
			    PolisAraci[AracInfo[carid][aracVehicle]][Mermiler][1] = 200; // MP5 Mermi

			    PolisAraci[AracInfo[carid][aracVehicle]][Silahlar][2] = 31; // M4
			    PolisAraci[AracInfo[carid][aracVehicle]][Mermiler][2] = 280; // M4 Mermi

			    PolisAraci[AracInfo[carid][aracVehicle]][Silahlar][3] = 25; // Shotgun
			    PolisAraci[AracInfo[carid][aracVehicle]][Mermiler][3] = 100; // Shotgun Mermi

			    PolisAraci[AracInfo[carid][aracVehicle]][Silahlar][4] = 0; // Bos
			    PolisAraci[AracInfo[carid][aracVehicle]][Mermiler][4] = 0;

			    PolisAraci[AracInfo[carid][aracVehicle]][AgriKesici] = 2;
			    PolisAraci[AracInfo[carid][aracVehicle]][CelikYelek] = 2;

			    Beanbag[AracInfo[carid][aracVehicle]] = 1;

			}
			for (new i = 0; i < 14; i ++)
			{
			    if (AracInfo[carid][aracMods][i]) AddVehicleComponent(AracInfo[carid][aracVehicle], AracInfo[carid][aracMods][i]);
			}
		}
	}
	return 1;
}
stock Car_GetID2(sqlid)
{
	for (new i = 0; i != MAX_ARAC; i ++) if (AracInfo[i][aracExists] && AracInfo[i][aracID] == sqlid) {
	    return i;
	}
	return -1;
}
stock Car_GetID(vehicleid)
{
	for (new i = 0; i != MAX_ARAC; i ++) if (AracInfo[i][aracExists] && AracInfo[i][aracVehicle] == vehicleid) {
	    return i;
	}
	return -1;
}
stock PlakaOlustur(id)
{
    if(id != -1)
    {
        format(AracInfo[id][aracPlaka], 24, "LS %s%s%s %d%d%d",Harfler[random(sizeof(Harfler))], Harfler[random(sizeof(Harfler))], Harfler[random(sizeof(Harfler))], RandomEx(0,9), RandomEx(0,9), RandomEx(0,9));
        SetVehicleNumberPlate(AracInfo[id][aracVehicle], AracInfo[id][aracPlaka]);
    }
    return 1;
}
stock RandomEx(min, max)
	return random(max - min) + min;
stock IsValidVehicleModel(model)
{
	if(model >= 400 && model <= 611)
	{
		return true;
	}
	return false;
}
stock AractanIndir(playerid)
{
	new Float:pos[3];
	GetPlayerPos(playerid,pos[0],pos[1],pos[2]);
	SetPlayerPos(playerid,pos[0],pos[1],pos[2]);
	return 1;
}
stock Log_Write(const path[], const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    File:file,
	    string[1024]
	;
	if ((start = strfind(path, "/")) != -1) {
	    strmid(string, path, 0, start + 1);

	    if (!fexist(string))
	        return printf("** Uyari: Dosya \"%s\" bulunmuyor.", string);
	}
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	file = fopen(path, io_append);

	if (!file)
	    return 0;

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 1024
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

		fwrite(file, string);
		fwrite(file, "\r\n");
		fclose(file);

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN
	}
	fwrite(file, str);
	fwrite(file, "\r\n");
	fclose(file);

	return 1;
}
stock ParaVer(playerid,miktar,bildirim = 1)
{
	PlayerData[playerid][pCash] += miktar;
	GivePlayerMoney(playerid,miktar);
	if(bildirim == 1 && miktar > -1)
	{
  /*  if(miktar < 0)
        printf("%s bug abuse yapiyor olabilir. (Para: %d)", ReturnRoleplayName(playerid), miktar);
      */
    new string[32];
    format(string, 32, "$+%d", miktar);
    PlayerTextDrawSetString(playerid, ParaBilgilendirme[0][playerid], string);
    PlayerTextDrawShow(playerid, ParaBilgilendirme[0][playerid]);
    SetTimerEx("AParaTDGizle", 2000, false, "d", playerid);
	}
 	if(bildirim == 1 && miktar < 0)
 	{
      new string[32];
      format(string, 32, "$%d", miktar);
      PlayerTextDrawSetString(playerid, ParaBilgilendirme[1][playerid], string);
      PlayerTextDrawShow(playerid, ParaBilgilendirme[1][playerid]);
      SetTimerEx("EParaTDGizle", 2000, false, "d", playerid);
  }
	return 1;
}
AParaTDGizle(playerid); public AParaTDGizle(playerid)
{
    PlayerTextDrawHide(playerid, ParaBilgilendirme[0][playerid]);
    return 1;
}

EParaTDGizle(playerid); public EParaTDGizle(playerid)
{
    PlayerTextDrawHide(playerid, ParaBilgilendirme[1][playerid]);
    return 1;
}

stock FormatNumber(number, prefix[] = "$")
{
	static
		value[32],
		length;

	format(value, sizeof(value), "%d", (number < 0) ? (-number) : (number));

	if ((length = strlen(value)) > 3)
	{
		for (new i = length, l = 0; --i >= 0; l ++) {
		    if ((l > 0) && (l % 3 == 0)) strins(value, ",", i + 1);
		}
	}
	if (prefix[0] != 0)
	    strins(value, prefix, 0);

	if (number < 0)
		strins(value, "-", 0);

	return value;
}
stock spamProtect(playerid, const szSpam[], iTime) {
	static
		s_szPVar[32],
		s_iPVar
	;
	format(s_szPVar, sizeof(s_szPVar), "pv_iSpam_%s", szSpam);

	s_iPVar = GetPVarInt(playerid, s_szPVar);

	if((GetTickCount() - s_iPVar) < iTime * 1000) {
		return 0;
	} else {
		SetPVarInt(playerid, s_szPVar, GetTickCount());
	}
	return 1;
}
stock GetPlayerID(part[])
{
	static namep[24];
    foreach(new i:Player)
    {
        GetPlayerName(i,namep,24);
        if(strcmp(part, namep, false) == 0 && OyundaDegil(i)) return i;
    }
    return -1;
}
/*stock BankaBilgileriDialog(playerid)
{
	new string[128],string2[400];
	strcat(string2,"{FF0000}Ýþlem\t{FF0000}Miktar\n");
	format(string,sizeof(string),"{FF9900}Para Çek\t{FFBF00}%s\n",FormatNumber(PlayerData[playerid][pBankCash]));
	strcat(string2,string);
	format(string,sizeof(string),"{FF9900}Para Yatýr\t{FFBF00}%s\n",FormatNumber(PlayerData[playerid][pBankCash]));
	strcat(string2,string);
	format(string,sizeof(string),"{FF9900}Para Transfer\t{FFBF00}%s\n",FormatNumber(PlayerData[playerid][pBankCash]));
	strcat(string2,string);
	//strcat(string2,"{FF0000}Hesap Sil");
	ShowPlayerDialog(playerid,13,DIALOG_STYLE_TABLIST_HEADERS,"{FF9900}LOS SANTOS BANKA",string2,"Seç","Kapat");
	return 1;
}*/
stock AdminMessage(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (PlayerData[i][pAdmin] >= 1 && PlayerData[i][pAyarlar][8] == 0) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
 	foreach (new i : Player)
	{
		if (PlayerData[i][pAdmin] >= 1 && PlayerData[i][pAyarlar][8] == 0) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}
stock AdminHelperMessage(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if ((PlayerData[i][pAdmin] >= 1 || PlayerData[i][pHelper] >= 1) && PlayerData[i][pAyarlar][8] == 0) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
 	foreach (new i : Player)
	{
		if ((PlayerData[i][pAdmin] >= 1 || PlayerData[i][pHelper] >= 1) && PlayerData[i][pAyarlar][8] == 0) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}
stock ObjelerYukleniyor(playerid)
{
	TogglePlayerControllable(playerid,false);
	SetPVarInt(playerid, "KOSKorumasi", 1);
	SetTimerEx("TextdrawAc", 200, false, "i", playerid);
	CreateTextdrawAnimation(playerid, Textdraw1[playerid], 25, "~r~", "\
	Objeler Yukleniyor");
	SetTimerEx("objyukleniyor",2500,false,"i",playerid);
	return 1;
}
forward objyukleniyor(playerid);
public objyukleniyor(playerid)
{
    TogglePlayerControllable(playerid,true);
    SetPVarInt(playerid, "KOSKorumasi", 0);
   	SetTimerEx("TextdrawAc", 200, false, "i", playerid);
	CreateTextdrawAnimation(playerid, Textdraw1[playerid], 25, "~g~", "\
	Objeler Yuklendi");
	return 1;
}

stock Ev_MobilyaFiyat(house)
{
	new fiyat;
	foreach(new i: Mobilyalar[house])
	{
	    fiyat += floatround(FurnitureData[house][i][furniturePrice]/2);
	}
	return fiyat;
}
stock Garaj_Olustur(tip[], interior, Float:gX, Float:gY, Float:gZ, world)
{
	for(new i; i<MAX_GARAGE; i++) if(!GarageData[i][gExists])
	{
	    GarageData[i][gExists] = true;
	    GarageData[i][gKilit] = 1;
	    format(GarageData[i][gSifre], 30, "Yok");
	    GarageData[i][gBirlik] = -1;
	    GarageData[i][gSahip] = -1;
	    GarageData[i][gInterior] = interior;
	    GarageData[i][gPos][0] = gX;
	    GarageData[i][gPos][1] = gY;
	    GarageData[i][gPos][2] = gZ;
	    GarageData[i][gVw] = world;
	    GarageData[i][gParkDurum] = 1;
	    format(GarageData[i][gTip], 20, tip);
	    GarageData[i][gAracLimit] = 0;
	    Garaj_Yenile(i);
	    mysql_tquery(baglanti, "INSERT INTO `garajlar` (`Kilit`) VALUES(1)", "OnGarageCreated", "d", i);
	    return i;
	}
	return -1;
}
Entrance_Inside(playerid)
{
	new vw;
	for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && GetPlayerInterior(playerid) == EntranceData[i][entranceInterior] && IsPlayerInRangeOfPoint(playerid, 2.5, EntranceData[i][entranceInt][0], EntranceData[i][entranceInt][1], EntranceData[i][entranceInt][2]))
	{
	    if(EntranceData[i][entranceInteriorVw] != -1) vw = EntranceData[i][entranceInteriorVw];
	    else vw = i+100;
	    if(EntranceData[i][entranceBaglanti] != -1) vw = EntranceData[i][entranceBaglanti]+23;
	    if(GetPlayerVirtualWorld(playerid) == vw) return i;
	}
    return -1;
}

Entrance_Nearest(playerid)
{
    for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && IsPlayerInRangeOfPoint(playerid, 2.5, EntranceData[i][entrancePos][0], EntranceData[i][entrancePos][1], EntranceData[i][entrancePos][2]))
    {
        if (GetPlayerInterior(playerid) == EntranceData[i][entranceExterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceExteriorVW])
            return i;
    }
    return -1;
}
forward GarajlariYukle();
public GarajlariYukle()
{
    new Cache:sawyer = mysql_query(baglanti,"SELECT * FROM `garajlar`");
    new rows;
    cache_get_row_count(rows);
    printf("» Toplam %d garaj yüklenmiþtir.", rows);
    for(new i = 0; i < rows; i ++) if (i < MAX_GARAGE)
    {
        GarageData[i][gExists] = true;
        cache_get_value_name_int(i, "ID", GarageData[i][gID]);
        cache_get_value_name_int(i, "Kilit", GarageData[i][gKilit]);
        cache_get_value_name(i, "Sifre", GarageData[i][gSifre], 30);
        cache_get_value_name_int(i, "Birlik", GarageData[i][gBirlik]);
        cache_get_value_name_int(i, "Sahip", GarageData[i][gSahip]);
        cache_get_value_name_float(i, "garageX", GarageData[i][gPos][0]);
        cache_get_value_name_float(i, "garageY", GarageData[i][gPos][1]);
        cache_get_value_name_float(i, "garageZ", GarageData[i][gPos][2]);
        cache_get_value_name_int(i, "VirtualWorld", GarageData[i][gVw]);
        cache_get_value_name_int(i, "interior", GarageData[i][gInterior]);
        cache_get_value_name_int(i, "parkdurum", GarageData[i][gParkDurum]);
        cache_get_value_name(i, "Tip", GarageData[i][gTip], 20);
        cache_get_value_name_int(i, "AracLimit", GarageData[i][gAracLimit]);
    }
    cache_delete(sawyer);
    for(new i; i<MAX_GARAGE; i++) if(GarageData[i][gExists] == true)
    {
        Garaj_Yenile(i);
    }
	return 1;
}
stock Garaj_Kaydet(id)
{
	new query[500];
	format(query, sizeof(query), "UPDATE `garajlar` SET `Kilit` = '%d', `Sifre` = '%s', `Sahip` = '%d', `Birlik` = '%d', `garageX` = '%.2f', `garageY` = '%.2f', `garageZ` = '%.2f', `VirtualWorld` = '%d'",
	GarageData[id][gKilit], GarageData[id][gSifre], GarageData[id][gSahip], GarageData[id][gBirlik], GarageData[id][gPos][0], GarageData[id][gPos][1], GarageData[id][gPos][2], GarageData[id][gVw]);
	format(query, sizeof(query), "%s, `parkdurum` = '%d', `interior` = '%d', `Tip` = '%s', `AracLimit` = '%d' WHERE `ID` = '%d'", query, GarageData[id][gParkDurum], GarageData[id][gInterior], GarageData[id][gTip], GarageData[id][gAracLimit], GarageData[id][gID]);
	mysql_query(baglanti, query, false);
	return 1;
}
stock Garaj_Yenile(id)
{
    if (IsValidDynamic3DTextLabel(GarageData[id][gText]))
   	{
    	DestroyDynamic3DTextLabel(GarageData[id][gText]);
    }
    if(IsValidDynamicPickup(GarageData[id][gPickup]))
    {
    	DestroyDynamicPickup(GarageData[id][gPickup]);
    }
    if(IsValidDynamicMapIcon(GarageData[id][gMapIcon]))
    {
    	DestroyDynamicPickup(GarageData[id][gMapIcon]);
    }

    new str[180], durum[30];
    if(GarageData[id][gKilit] == 1) durum = "{E74C3C}Kilitli";
    else durum = "{1dff00}Açýk";
    if(strcmp(GarageData[id][gSifre], "Yok", true)) durum = "{ff0000}Þifreli";
    if(GarageData[id][gSahip] == -1 && GarageData[id][gBirlik] == -1)
    {
         format(str, sizeof(str), "{E74C3C}[Garaj]\n{E74C3C}Tip: {FFFFFF}%s\n{E74C3C}Sahip: {FFFFFF}Yok\n{E74C3C}Durum: %s\n{FFFFFF}%d, %s, %s", GarageData[id][gTip], (GarageData[id][gKilit] == 1) ? ("{E74C3C}Kilitli") : ("{1dff00}Açýk"), id, GetLocation(GarageData[id][gPos][0], GarageData[id][gPos][1], GarageData[id][gPos][2]), GetCityName(GarageData[id][gPos][0], GarageData[id][gPos][1], GarageData[id][gPos][2]));
    }
    else if(GarageData[id][gSahip] != -1)
    {
        format(str, sizeof(str), "{E74C3C}[Garaj]\n{E74C3C}Tip: {FFFFFF}%s\n{E74C3C}Sahip: {FFFFFF}%s\n{E74C3C}Durum: %s\n{FFFFFF}%d, %s, %s", GarageData[id][gTip], SQLName(GarageData[id][gSahip], 0),(GarageData[id][gKilit] == 1) ? ("{E74C3C}Kilitli") : ("{1dff00}Açýk"), id, GetLocation(GarageData[id][gPos][0], GarageData[id][gPos][1], GarageData[id][gPos][2]), GetCityName(GarageData[id][gPos][0], GarageData[id][gPos][1], GarageData[id][gPos][2]));
    }
    else if(GarageData[id][gBirlik] != -1)
    {
        format(str, sizeof(str), "{E74C3C}[Garaj]\n{E74C3C}Tip: {FFFFFF}%s\n{E74C3C}Sahip: {FFFFFF}%s\n{E74C3C}Durum: %s\n{FFFFFF}%d, %s, %s", GarageData[id][gTip], Birlikler[GarageData[id][gBirlik]][birlikAd],(GarageData[id][gKilit] == 1) ? ("{E74C3C}Kilitli") : ("{1dff00}Açýk"), id, GetLocation(GarageData[id][gPos][0], GarageData[id][gPos][1], GarageData[id][gPos][2]), GetCityName(GarageData[id][gPos][0], GarageData[id][gPos][1], GarageData[id][gPos][2]));
    }
    GarageData[id][gText] = CreateDynamic3DTextLabel(str, -1, GarageData[id][gPos][0], GarageData[id][gPos][1], GarageData[id][gPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, GarageData[id][gVw]);
    GarageData[id][gPickup] = CreateDynamicPickup(19133, 23, GarageData[id][gPos][0], GarageData[id][gPos][1], GarageData[id][gPos][2], GarageData[id][gVw]);
    GarageData[id][gMapIcon] = CreateDynamicMapIcon(GarageData[id][gPos][0], GarageData[id][gPos][1], GarageData[id][gPos][2], 55, -1);
    return 1;
}
forward BinalariYukle();
public BinalariYukle()
{
    mysql_query(baglanti, "SELECT * FROM `entrances`");
	new rows;
	cache_get_row_count(rows);
	printf("» Toplam %d bina yüklenmiþtir.", rows);
    for (new i = 0; i < rows; i ++) if (i < MAX_ENTRANCES)
    {
        EntranceData[i][entranceExists] = true;
        cache_get_value_name_int(i, "entranceID", EntranceData[i][entranceID]);
        cache_get_value_name(i, "entranceName", EntranceData[i][entranceName], 32);
        cache_get_value_name(i, "entrancePass", EntranceData[i][entrancePass], 32);
        cache_get_value_name_int(i, "entranceIcon", EntranceData[i][entranceIcon]);
        cache_get_value_name_int(i, "entranceLocked", EntranceData[i][entranceLocked]);
        cache_get_value_name_int(i, "entranceInteriorVw", EntranceData[i][entranceInteriorVw]);
        cache_get_value_name_int(i, "entranceBaglanti", EntranceData[i][entranceBaglanti]);
        cache_get_value_name_float(i, "entrancePosX", EntranceData[i][entrancePos][0]);
        cache_get_value_name_float(i, "entrancePosY", EntranceData[i][entrancePos][1]);
        cache_get_value_name_float(i, "entrancePosZ", EntranceData[i][entrancePos][2]);
		cache_get_value_name_float(i, "entrancePosA", EntranceData[i][entrancePos][3]);
		cache_get_value_name_float(i, "entranceIntX", EntranceData[i][entranceInt][0]);
		cache_get_value_name_float(i, "entranceIntY", EntranceData[i][entranceInt][1]);
		cache_get_value_name_float(i, "entranceIntZ", EntranceData[i][entranceInt][2]);
		cache_get_value_name_float(i, "entranceIntA", EntranceData[i][entranceInt][3]);
		cache_get_value_name_int(i, "entranceInterior", EntranceData[i][entranceInterior]);
		cache_get_value_name_int(i, "entranceExterior", EntranceData[i][entranceExterior]);
		cache_get_value_name_int(i, "entranceExteriorVW", EntranceData[i][entranceExteriorVW]);

        Entrance_Refresh(i);
    }
    return 1;
}
Entrance_Refresh(entranceid)
{
    if (entranceid != -1 && EntranceData[entranceid][entranceExists])
    {
        if (IsValidDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]))
            DestroyDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]);

        if (IsValidDynamicPickup(EntranceData[entranceid][entrancePickup]))
            DestroyDynamicPickup(EntranceData[entranceid][entrancePickup]);

        if (IsValidDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]))
            DestroyDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]);


		new str[124];
		format(str, sizeof(str), "%s\n\n%d, %s, %s", EntranceData[entranceid][entranceName], entranceid, GetLocation(EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2]), GetCityName(EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2]));
        EntranceData[entranceid][entranceText3D] = CreateDynamic3DTextLabel(str, 0xC17426FF, EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2]+0.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);
        EntranceData[entranceid][entrancePickup] = CreateDynamicPickup(19132, 23, EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2] - 0.3, EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);

        if (EntranceData[entranceid][entranceIcon] != 0)
            EntranceData[entranceid][entranceMapIcon] = CreateDynamicMapIcon(EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2], EntranceData[entranceid][entranceIcon], 0, EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);
    }
    return 1;
}
Entrance_Create(playerid, name[])
{
    static
        Float:x,
        Float:y,
        Float:z,
        Float:angle;

    if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
    {
        for (new i = 0; i != MAX_ENTRANCES; i ++)
        {
            if (!EntranceData[i][entranceExists])
            {
                EntranceData[i][entranceExists] = true;
                EntranceData[i][entranceIcon] = 0;
                EntranceData[i][entranceLocked] = 0;

                format(EntranceData[i][entranceName], 32, name);
                EntranceData[i][entrancePass][0] = 0;

                EntranceData[i][entrancePos][0] = x;
                EntranceData[i][entrancePos][1] = y;
                EntranceData[i][entrancePos][2] = z;
                EntranceData[i][entrancePos][3] = angle;

                EntranceData[i][entranceInt][0] = x;
                EntranceData[i][entranceInt][1] = y;
                EntranceData[i][entranceInt][2] = z + 10000;
                EntranceData[i][entranceInt][3] = 0.0000;

                EntranceData[i][entranceInterior] = 0;
                EntranceData[i][entranceExterior] = GetPlayerInterior(playerid);
                EntranceData[i][entranceExteriorVW] = GetPlayerVirtualWorld(playerid);
				EntranceData[i][entranceInteriorVw] = -1;
				EntranceData[i][entranceBaglanti] = -1;

                Entrance_Refresh(i);
                mysql_tquery(baglanti, "INSERT INTO `entrances` (`entranceLocked`) VALUES(0)", "OnEntranceCreated", "d", i);
                return i;
            }
        }
    }
    return -1;
}
Entrance_Save(entranceid)
{
    	static
        query[1100];
		format(query, sizeof(query), "UPDATE `entrances` SET `entranceName` = '%s', `entranceInteriorVw` = '%d', `entrancePass` = '%s', `entranceIcon` = '%d', `entranceLocked` = '%d', `entrancePosX` = '%.4f', `entrancePosY` = '%.4f', `entrancePosZ` = '%.4f', `entrancePosA` = '%.4f'",
        SQL_ReturnEscaped(EntranceData[entranceid][entranceName]),
        EntranceData[entranceid][entranceInteriorVw],
        SQL_ReturnEscaped(EntranceData[entranceid][entrancePass]),
        EntranceData[entranceid][entranceIcon],
        EntranceData[entranceid][entranceLocked],
        EntranceData[entranceid][entrancePos][0],
        EntranceData[entranceid][entrancePos][1],
        EntranceData[entranceid][entrancePos][2],
        EntranceData[entranceid][entrancePos][3]
    	);
	    format(query, sizeof(query), "%s, `entranceIntX` = '%.4f', `entranceIntY` = '%.4f', `entranceIntZ` = '%.4f', `entranceIntA` = '%.4f', `entranceInterior` = '%d', `entranceExterior` = '%d', `entranceExteriorVW` = '%d', `entranceBaglanti` = '%d' WHERE `entranceID` = '%d'",
		query,
	    EntranceData[entranceid][entranceInt][0],
	   	EntranceData[entranceid][entranceInt][1],
	    EntranceData[entranceid][entranceInt][2],
	    EntranceData[entranceid][entranceInt][3],
	    EntranceData[entranceid][entranceInterior],
	    EntranceData[entranceid][entranceExterior],
	    EntranceData[entranceid][entranceExteriorVW],
	    EntranceData[entranceid][entranceBaglanti],
	    EntranceData[entranceid][entranceID]);

	    mysql_tquery(baglanti, query);
    	return 1;
}
NPC_Save(id)
{
	new query[1500];
	format(query, sizeof(query), "UPDATE `npcler` SET `npcAd` = '%s', `npcSkin` = '%d', `npcX` = '%.4f', `npcY` = '%.4f', `npcZ` = '%.4f', `npcA` = '%.4f', `npcVw` = '%d', `Secenek1` = '%s', `Secenek1Cevap` = '%s', `Secenek2` = '%s', `Secenek2Cevap` = '%s', `Secenek3` = '%s'",
	SQL_ReturnEscaped(NPCBilgi[id][npcAd]),
	NPCBilgi[id][npcSkin],
	NPCBilgi[id][npcPos][0],
	NPCBilgi[id][npcPos][1],
	NPCBilgi[id][npcPos][2],
	NPCBilgi[id][npcPos][3],
	NPCBilgi[id][npcVw],
	SQL_ReturnEscaped(NPCSecenekler[id][0]),
	SQL_ReturnEscaped(NPCSecenekCevaplar[id][0]),
	SQL_ReturnEscaped(NPCSecenekler[id][1]),
	SQL_ReturnEscaped(NPCSecenekCevaplar[id][1]),
	SQL_ReturnEscaped(NPCSecenekler[id][2]));
	format(query, sizeof(query), "%s, `Secenek3Cevap` = '%s', `Secenek4` = '%s', `Secenek4Cevap` = '%s', `Secenek5` = '%s', `Secenek5Cevap` = '%s' WHERE `npcID` = '%d'",
	query,
	SQL_ReturnEscaped(NPCSecenekCevaplar[id][2]),
	SQL_ReturnEscaped(NPCSecenekler[id][3]),
	SQL_ReturnEscaped(NPCSecenekCevaplar[id][3]),
	SQL_ReturnEscaped(NPCSecenekler[id][4]),
	SQL_ReturnEscaped(NPCSecenekCevaplar[id][4]),
	NPCBilgi[id][npcID]);
	mysql_query(baglanti, query, false);
	return 1;
}
forward OnNPCCreated(id);
public OnNPCCreated(id)
{
	if(id == -1 || !NPCBilgi[id][npcExists]) return 0;
	NPCBilgi[id][npcID] = cache_insert_id();
	NPC_Save(id);
	return 1;
}
forward OnEntranceCreated(entranceid);
public OnEntranceCreated(entranceid)
{
    if (entranceid == -1 || !EntranceData[entranceid][entranceExists])
        return 0;

    EntranceData[entranceid][entranceID] = cache_insert_id();

    Entrance_Save(entranceid);

    return 1;
}
stock OyundaDegil(playerid)
{
	if(!IsPlayerConnected(playerid) || GetPVarInt(playerid,"Logged") == 0)
	{
	    return 0;
	}
	return 1;
}
stock SendNearbyMessage2(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (IsPlayerNearPlayer(i, playerid, radius) && i != playerid) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
 	foreach (new i : Player)
	{
		if (IsPlayerNearPlayer(i, playerid, radius) && i != playerid) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}
stock SendNearbyMessageEx(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (IsPlayerNearPlayer(i, playerid, radius)) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
 	foreach (new i : Player)
	{
		if (IsPlayerNearPlayer(i, playerid, radius)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}
stock SendNearbyMessage(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (IsPlayerNearPlayer(i, playerid, radius)) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
 	foreach (new i : Player)
	{
		if (IsPlayerNearPlayer(i, playerid, radius)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}
stock IsPlayerNearPlayer(playerid, targetid, Float:radius)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetPlayerPos(targetid, fX, fY, fZ);

	return (GetPlayerInterior(playerid) == GetPlayerInterior(targetid) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid)) && IsPlayerInRangeOfPoint(playerid, radius, fX, fY, fZ);
}
stock Oyuncu_Kaydet(playerid, disconnect=1)
{
	if(GetPVarInt(playerid,"Logged") == 0) return 1;
	new query[6000];
	new Float:pos[3], birliksqlid;
	if(PlayerData[playerid][pFaction] == -1) birliksqlid = -1;
	else birliksqlid = Birlikler[PlayerData[playerid][pFaction]][birlikID];
	if(GetPVarInt(playerid, "inPaintball") == 0) GetPlayerPos(playerid,pos[0],pos[1],pos[2]);
	else
	{
	    pos[0] = 1170.9122;
	    pos[1] = -1489.6418;
	    pos[2] = 22.7551;
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerInterior(playerid, 0);
	}
	GetPlayerHealth(playerid,PlayerData[playerid][pHealth]);
	GetPlayerArmour(playerid,PlayerData[playerid][pArmour]);

	format(query, sizeof(query), "UPDATE `oyuncular` SET `Yas` = '%d', `Cinsiyet` = '%d', `DogumYeri` = '%s', `Skin` = '%d', `TenRengi` = '%d', `CikisInt` = '%d', `CikisX` = '%f', `CikisY` = '%f', `CikisZ` = '%f', `CikisWorld` = '%d', `AdminLevel` = '%d', `Helper` = '%d', `Cash` = '%d', `AdminName` = '%s', `Ehliyet` = '%d'",
	PlayerData[playerid][pYas],
	PlayerData[playerid][pCinsiyet],
	PlayerData[playerid][pDogum],
	PlayerData[playerid][pSkin],
	PlayerData[playerid][pTen],
	GetPlayerInterior(playerid),
	pos[0],
	pos[1],
	pos[2],
	GetPlayerVirtualWorld(playerid),
	PlayerData[playerid][pAdmin],
	PlayerData[playerid][pHelper],
	PlayerData[playerid][pCash],
	PlayerData[playerid][pAdminName],
	PlayerData[playerid][pEhliyet]);

	format(query, sizeof(query), "%s, `House` = '%d',`Business` = '%d',`Birlik` = '%d',`BirlikRutbe` = '%d',`BirlikDivizyon` = '%d', `Su` = '%d', `Health` = '%.4f', `Armour` = '%.4f',`OnDuty` = '%d',`OnDutySkin` = '%d', `Aranma` = '%d', `Hapis` = '%d', `HapisSure` = '%d', `HapisSebep` = '%s', `HapiseAtan` = '%s', `Telefon` = '%d'",
	query,
	PlayerData[playerid][pHouse],
	PlayerData[playerid][pIsyeri],
	PlayerData[playerid][pFaction],
	PlayerData[playerid][pFactionRutbe],
	PlayerData[playerid][pFactionDivizyon],
	PlayerData[playerid][pSu],
	PlayerData[playerid][pHealth],
	PlayerData[playerid][pArmour],
	PlayerData[playerid][pOnDuty],
	PlayerData[playerid][pOnDutySkin],
	PlayerData[playerid][pAranma],
 	PlayerData[playerid][pHapis],
 	PlayerData[playerid][pHapisSure],
 	PlayerData[playerid][pHapisSebep],
 	PlayerData[playerid][pHapiseAtan],
    PlayerData[playerid][pTelefon]);
    new a;
    for (new i = 0; i < 13; i ++) {
        if(i<10)
	    {
		    format(query,sizeof(query),"%s, `Balik%d` = '%d',`BalikGram%d` = '%d'",query, i+1,PlayerData[playerid][pBalikID][i],i+1,PlayerData[playerid][pBalikGram][i]);
	    }
	    GetPlayerWeaponData(playerid, i, a, PlayerData[playerid][pMermiler][i]);
	    format(query, sizeof(query), "%s, `Silah%d` = '%d', `Mermi%d` = '%d'", query, i + 1, PlayerData[playerid][pSilahlar][i], i + 1, PlayerData[playerid][pMermiler][i]);
	}

    format(query, sizeof(query), "%s, `Tarife` = '%d', `KalanDK` = '%d', `KalanSMS` = '%d', `KalanNet` = '%d', `TarifeSure` = '%d', `Bitcoin` = '%d', `Boombox` = '%d', `Radyo` = '%d', `Frekans` = '%d', `Level` = '%d', `EXP` = '%d', `MaasSure` = '%d', `OynamaSaati` = '%d', `Maas` = '%d', `Dinle` = '%d'",
    query,
    PlayerData[playerid][pTarife],
	PlayerData[playerid][pTarifeKalan][0],
	PlayerData[playerid][pTarifeKalan][1],
	PlayerData[playerid][pTarifeKalan][2],
	PlayerData[playerid][pTarifeSure],
	PlayerData[playerid][pBitcoin],
	PlayerData[playerid][pBoombox],
	PlayerData[playerid][pRadyo],
	PlayerData[playerid][pFrekans],
	PlayerData[playerid][pLevel],
    PlayerData[playerid][pEXP],
	PlayerData[playerid][pMaasSure],
	PlayerData[playerid][pOynamaSaati],
	PlayerData[playerid][pMaas],
	PlayerData[playerid][pDinle]);

	format(query, sizeof(query), "%s, `Zar` = '%d', `Sigara` = '%d', `ip` = '%d',`GozBagi` = '%d', `Maske` = '%d', `BenzinKutusu` = '%d', `Barbeku` = '%d', `Kofte` = '%d', `Tavuk` = '%d', `Dana` = '%d', `TamirKiti` = '%d', `Cadir` = '%d', `KampAtes` = '%d', `Sarjor` = '%d', `YanKeski` = '%d'",
	query,
	PlayerData[playerid][pEsyalar][0],
	PlayerData[playerid][pEsyalar][1],
	PlayerData[playerid][pEsyalar][2],
    PlayerData[playerid][pEsyalar][3],
    PlayerData[playerid][pEsyalar][4],
    PlayerData[playerid][pEsyalar][5],
    PlayerData[playerid][pEsyalar][6],
    PlayerData[playerid][pEsyalar][7],
    PlayerData[playerid][pEsyalar][8],
    PlayerData[playerid][pEsyalar][9],
    PlayerData[playerid][pEsyalar][10],
    PlayerData[playerid][pEsyalar][11],
    PlayerData[playerid][pEsyalar][12],
    PlayerData[playerid][pEsyalar][13],
    PlayerData[playerid][pEsyalar][14]);

    format(query, sizeof(query), "%s, `Bagimlilik` = '%d', `TasimacilikSeviye` = '%d', `TasimacilikSefer` = '%d', `Garage` = '%d', `Bakiye` = '%d', `EXPBoost` = '%d', `BalikOrani` = '%d', `Vip` = '%d', `VipSure` = '%d', `DovusStili` = '%d', `MaskeID` = '%d', `MaskeHakki` = '%d', `Ayarlar` = '%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d'",
    query,
    PlayerData[playerid][pBagimlilik],
    PlayerData[playerid][pTasimacilikSeviye],
    PlayerData[playerid][pTasimacilikSefer],
    PlayerData[playerid][pGarage],
    PlayerData[playerid][pBakiye],
    PlayerData[playerid][pEXPBoost],
    PlayerData[playerid][pBalikOrani],
    PlayerData[playerid][pVip],
    PlayerData[playerid][pVipSure],
    PlayerData[playerid][pDovusStili],
    PlayerData[playerid][pMaskeID],
    PlayerData[playerid][pMaskeHakki],
    PlayerData[playerid][pAyarlar][0],
    PlayerData[playerid][pAyarlar][1],
    PlayerData[playerid][pAyarlar][2],
    PlayerData[playerid][pAyarlar][3],
    PlayerData[playerid][pAyarlar][4],
    PlayerData[playerid][pAyarlar][5],
    PlayerData[playerid][pAyarlar][6],
    PlayerData[playerid][pAyarlar][7],
    PlayerData[playerid][pAyarlar][8],
    PlayerData[playerid][pAyarlar][9],
    PlayerData[playerid][pAyarlar][10],
    PlayerData[playerid][pAyarlar][11],
    PlayerData[playerid][pAyarlar][12],
    PlayerData[playerid][pAyarlar][13],
    PlayerData[playerid][pAyarlar][14]);

    format(query, sizeof(query), "%s, `BirlikSQLID` = '%d', `Baygin` = '%d', `BayginSure` = '%d', `Partner` = '%d', `hddserial` = '%s', `Hediye` = '%d', `HediyeSaat` = '%d', `Youtuber` = '%d', `Oyunda` = '%d', `Oldurme` = '%d', `Olme` = '%d', `TalepSayi` = '%d', `CK` = '%d'",
    query,
	birliksqlid,
    PlayerData[playerid][pBaygin],
    PlayerData[playerid][pBayginSure],
    PlayerData[playerid][pPartner],
    PlayerData[playerid][pSerial],
    PlayerData[playerid][pHediye],
    PlayerData[playerid][pHediyeSaat],
    PlayerData[playerid][pYoutuber],
    disconnect,
    PlayerData[playerid][pOldurme],
    PlayerData[playerid][pOlme],
    PlayerData[playerid][pTalepSayi],
    PlayerData[playerid][pCK]);

    format(query, sizeof(query), "%s, `portakaltohum` = '%d', `elmatohum` = '%d', `armuttohum` = '%d',`SilahAlmaSayisi` = '%d', `SilahAlma` = '%d', `pMekanik` = '%d', `pMekanikSure` = '%d' WHERE `ID` = '%d'",
    query,
    PlayerData[playerid][pTohumlar][0],
	PlayerData[playerid][pTohumlar][1],
	PlayerData[playerid][pTohumlar][2],
	PlayerData[playerid][pSilahAlmaSayisi],
    PlayerData[playerid][pSilahAlma],
   	PlayerData[playerid][pMekanik],
	PlayerData[playerid][pMekanikSure],
	PlayerData[playerid][pID]);

	mysql_query(baglanti, query, false);
	return 1;
}
forward Login(playerid);
public Login(playerid)
{
	new rows;
	cache_get_row_count(rows);
	new string[210];
	if(!rows)
	{
	    if(GetPVarInt(playerid,"wrongpass") >= 3)
		{
		    new sqlid = GetPlayerSQLIDWithName(ReturnName(playerid));
		    BildirimEkle(sqlid,"Hesabýnýza girilmeye çalýþýldý. Birileri hesabýnýza girmek istiyor olabilir.","Sistem");
		    HataMesajGonder(playerid,"3 defa yanlýþ þifre girdiðiniz için atýldýnýz.");
			Kick(playerid);
			return 1;
		}
	    SetPVarInt(playerid,"wrongpass",GetPVarInt(playerid,"wrongpass") +1);
	    HataMesajGonder(playerid,"Yanlýþ þifre girdiniz. [%d/3]",GetPVarInt(playerid,"wrongpass"));
	    format(string,sizeof(string),"{FFFFFF}Sunucumuza tekrar hoþ geldin {808080}%s, {FFFFFF}\ngiriþ yapmak için þifrenizi girmelisiniz.\n\nÞifreniz:",ReturnName(playerid,0));
		ShowPlayerDialog(playerid,11,DIALOG_STYLE_PASSWORD,"{FFFFFF}Giriþ - Þifre",string,"Giriþ","Iptal");
	}
	else
	{
	    cache_get_value_name_int(0,"ID",PlayerData[playerid][pID]);
	    cache_get_value_name_int(0,"Yas",PlayerData[playerid][pYas]);
	    cache_get_value_name_int(0,"Cinsiyet",PlayerData[playerid][pCinsiyet]);
	    cache_get_value_name(0,"DogumYeri",PlayerData[playerid][pDogum],30);
	    cache_get_value_name_int(0,"TenRengi",PlayerData[playerid][pTen]);
	    cache_get_value_name_int(0,"Skin",PlayerData[playerid][pSkin]);
	    cache_get_value_name_int(0,"CikisInt",PlayerData[playerid][pCikisInt]);
	    cache_get_value_name_float(0,"CikisX",PlayerData[playerid][pCikisPos][0]);
	    cache_get_value_name_float(0,"CikisY",PlayerData[playerid][pCikisPos][1]);
	    cache_get_value_name_float(0,"CikisZ",PlayerData[playerid][pCikisPos][2]);
	    cache_get_value_name_int(0,"CikisWorld",PlayerData[playerid][pCikisVw]);
	    cache_get_value_name_int(0,"AdminLevel",PlayerData[playerid][pAdmin]);
	    cache_get_value_name_int(0,"Helper",PlayerData[playerid][pHelper]);
	    cache_get_value_name_int(0,"Cash",PlayerData[playerid][pCash]);
	    cache_get_value_name(0,"AdminName",PlayerData[playerid][pAdminName],24);
	    cache_get_value_name_int(0,"Ehliyet",PlayerData[playerid][pEhliyet]);
	    cache_get_value_name_int(0,"House",PlayerData[playerid][pHouse]);
	    cache_get_value_name_int(0,"Business",PlayerData[playerid][pIsyeri]);
	    cache_get_value_name_int(0,"Birlik",PlayerData[playerid][pFaction]);
	    cache_get_value_name_int(0,"BirlikRutbe",PlayerData[playerid][pFactionRutbe]);
	    cache_get_value_name_int(0,"BirlikDivizyon",PlayerData[playerid][pFactionDivizyon]);
	    cache_get_value_name_int(0,"Su",PlayerData[playerid][pSu]);
	    cache_get_value_name_float(0,"Health",PlayerData[playerid][pHealth]);
	    cache_get_value_name_float(0,"Armour",PlayerData[playerid][pArmour]);
	    cache_get_value_name_int(0,"OnDuty",PlayerData[playerid][pOnDuty]);
	    cache_get_value_name_int(0,"OnDutySkin",PlayerData[playerid][pOnDutySkin]);
	    cache_get_value_name_int(0,"Aranma",PlayerData[playerid][pAranma]);
	    cache_get_value_name_int(0,"Hapis",PlayerData[playerid][pHapis]);
	    cache_get_value_name_int(0,"HapisSure",PlayerData[playerid][pHapisSure]);
	    cache_get_value_name(0,"HapisSebep",PlayerData[playerid][pHapisSebep], 50);
	    cache_get_value_name(0,"HapiseAtan",PlayerData[playerid][pHapiseAtan], 24);
	    cache_get_value_name_int(0,"Telefon",PlayerData[playerid][pTelefon]);
	    cache_get_value_name_int(0,"Tarife",PlayerData[playerid][pTarife]);
	    cache_get_value_name_int(0,"KalanDK",PlayerData[playerid][pTarifeKalan][0]);
	    cache_get_value_name_int(0,"KalanSMS",PlayerData[playerid][pTarifeKalan][1]);
	    cache_get_value_name_int(0,"KalanNet",PlayerData[playerid][pTarifeKalan][2]);
	    cache_get_value_name_int(0,"TarifeSure",PlayerData[playerid][pTarifeSure]);
	    cache_get_value_name_int(0,"Bitcoin",PlayerData[playerid][pBitcoin]);
	    cache_get_value_name_int(0,"Boombox",PlayerData[playerid][pBoombox]);
	    cache_get_value_name_int(0,"Radyo",PlayerData[playerid][pRadyo]);
	    cache_get_value_name_int(0,"Frekans",PlayerData[playerid][pFrekans]);
	    cache_get_value_name_int(0,"Level",PlayerData[playerid][pLevel]);
	    cache_get_value_name_int(0,"EXP",PlayerData[playerid][pEXP]);
	    cache_get_value_name_int(0,"MaasSure",PlayerData[playerid][pMaasSure]);
	    cache_get_value_name_int(0,"OynamaSaati",PlayerData[playerid][pOynamaSaati]);
	    cache_get_value_name_int(0,"Maas",PlayerData[playerid][pMaas]);
	    cache_get_value_name_int(0,"Dinle",PlayerData[playerid][pDinle]);
	    cache_get_value_name_int(0, "Zar", PlayerData[playerid][pEsyalar][0]);
	    cache_get_value_name_int(0, "Sigara", PlayerData[playerid][pEsyalar][1]);
	    cache_get_value_name_int(0, "ip", PlayerData[playerid][pEsyalar][2]);
	    cache_get_value_name_int(0, "GozBagi", PlayerData[playerid][pEsyalar][3]);
	    cache_get_value_name_int(0, "Maske", PlayerData[playerid][pEsyalar][4]);
	    cache_get_value_name_int(0, "BenzinKutusu", PlayerData[playerid][pEsyalar][5]);
	    cache_get_value_name_int(0, "Barbeku", PlayerData[playerid][pEsyalar][6]);
	    cache_get_value_name_int(0, "Kofte", PlayerData[playerid][pEsyalar][7]);
	    cache_get_value_name_int(0, "Tavuk", PlayerData[playerid][pEsyalar][8]);
	    cache_get_value_name_int(0, "Dana", PlayerData[playerid][pEsyalar][9]);
	    cache_get_value_name_int(0, "TamirKiti", PlayerData[playerid][pEsyalar][10]);
	    cache_get_value_name_int(0, "Cadir", PlayerData[playerid][pEsyalar][11]);
        cache_get_value_name_int(0, "KampAtes", PlayerData[playerid][pEsyalar][12]);
        cache_get_value_name_int(0, "Sarjor", PlayerData[playerid][pEsyalar][13]);
        cache_get_value_name_int(0, "YanKeski", PlayerData[playerid][pEsyalar][14]);
        cache_get_value_name_int(0, "Bagimlilik", PlayerData[playerid][pBagimlilik]);
        cache_get_value_name_int(0, "TasimacilikSeviye", PlayerData[playerid][pTasimacilikSeviye]);
        cache_get_value_name_int(0, "TasimacilikSefer", PlayerData[playerid][pTasimacilikSefer]);
        cache_get_value_name_int(0, "Garage", PlayerData[playerid][pGarage]);
        cache_get_value_name_int(0, "Bakiye", PlayerData[playerid][pBakiye]);
        cache_get_value_name_int(0, "EXPBoost", PlayerData[playerid][pEXPBoost]);
        cache_get_value_name_int(0, "BalikOrani", PlayerData[playerid][pBalikOrani]);
        cache_get_value_name_int(0, "Vip", PlayerData[playerid][pVip]);
        cache_get_value_name_int(0, "VipSure", PlayerData[playerid][pVipSure]);
        cache_get_value_name_int(0, "DovusStili", PlayerData[playerid][pDovusStili]);
        cache_get_value_name_int(0, "MaskeID", PlayerData[playerid][pMaskeID]);
        cache_get_value_name_int(0, "MaskeHakki", PlayerData[playerid][pMaskeHakki]);
        cache_get_value_name_int(0, "Baygin", PlayerData[playerid][pBaygin]);
        cache_get_value_name_int(0, "BayginSure", PlayerData[playerid][pBayginSure]);
        cache_get_value_name_int(0, "Partner", PlayerData[playerid][pPartner]);
        cache_get_value_name_int(0, "Hediye", PlayerData[playerid][pHediye]);
        cache_get_value_name_int(0, "HediyeSaat", PlayerData[playerid][pHediyeSaat]);
        cache_get_value_name_int(0, "Youtuber", PlayerData[playerid][pYoutuber]);
        cache_get_value_name_int(0, "Oldurme", PlayerData[playerid][pOldurme]);
        cache_get_value_name_int(0, "Olme", PlayerData[playerid][pOlme]);
        cache_get_value_name_int(0, "TalepSayi", PlayerData[playerid][pTalepSayi]);
        cache_get_value_name_int(0, "CK", PlayerData[playerid][pCK]);
        cache_get_value_name_int(0, "portakaltohum", PlayerData[playerid][pTohumlar][0]);
        cache_get_value_name_int(0, "elmatohum", PlayerData[playerid][pTohumlar][1]);
        cache_get_value_name_int(0, "armuttohum", PlayerData[playerid][pTohumlar][2]);
        cache_get_value_name_int(0, "SilahAlmaSayisi", PlayerData[playerid][pSilahAlmaSayisi]);
        cache_get_value_name_int(0, "SilahAlma", PlayerData[playerid][pSilahAlma]);
   	    cache_get_value_name_int(0, "pMekanik", PlayerData[playerid][pMekanik]);
	      cache_get_value_name_int(0, "pMekanikSure", PlayerData[playerid][pMekanikSure]);

        cache_get_value_name(0, "Ayarlar", string, 80);

        sscanf(string, "p<|>iiiiiiiiiiiiiii", PlayerData[playerid][pAyarlar][0], PlayerData[playerid][pAyarlar][1], PlayerData[playerid][pAyarlar][2], PlayerData[playerid][pAyarlar][3], PlayerData[playerid][pAyarlar][4], PlayerData[playerid][pAyarlar][5], PlayerData[playerid][pAyarlar][6],
	    PlayerData[playerid][pAyarlar][7], PlayerData[playerid][pAyarlar][8], PlayerData[playerid][pAyarlar][9], PlayerData[playerid][pAyarlar][10], PlayerData[playerid][pAyarlar][11], PlayerData[playerid][pAyarlar][12], PlayerData[playerid][pAyarlar][13], PlayerData[playerid][pAyarlar][14]);

	    cache_get_value_name(0,"ASlot1",string,45);
	    sscanf(string, "p<|>iiii", PlayerData[playerid][pASlot][0], PlayerData[playerid][pABone][0], PlayerData[playerid][pTSlot][0], PlayerData[playerid][pARenk][0]);

	    cache_get_value_name(0,"ASlot2",string,45);
	    sscanf(string, "p<|>iiii", PlayerData[playerid][pASlot][1], PlayerData[playerid][pABone][1], PlayerData[playerid][pTSlot][1], PlayerData[playerid][pARenk][1]);

	    cache_get_value_name(0,"ASlot3",string,45);
	    sscanf(string, "p<|>iiii", PlayerData[playerid][pASlot][2], PlayerData[playerid][pABone][2], PlayerData[playerid][pTSlot][2], PlayerData[playerid][pARenk][2]);

	    cache_get_value_name(0,"ASlot4",string,45);
	    sscanf(string, "p<|>iiii", PlayerData[playerid][pASlot][3], PlayerData[playerid][pABone][3], PlayerData[playerid][pTSlot][3], PlayerData[playerid][pARenk][3]);

	    cache_get_value_name(0,"ASlot5",string,45);
	    sscanf(string, "p<|>iiii", PlayerData[playerid][pASlot][4], PlayerData[playerid][pABone][4], PlayerData[playerid][pTSlot][4], PlayerData[playerid][pARenk][4]);

	    cache_get_value_name(0,"ASlot6",string,45);
	    sscanf(string, "p<|>iiii", PlayerData[playerid][pASlot][5], PlayerData[playerid][pABone][5], PlayerData[playerid][pTSlot][5], PlayerData[playerid][pARenk][5]);

	    cache_get_value_name(0,"ASlot7",string,45);
	    sscanf(string, "p<|>iiii", PlayerData[playerid][pASlot][6], PlayerData[playerid][pABone][6], PlayerData[playerid][pTSlot][6], PlayerData[playerid][pARenk][6]);

	    cache_get_value_name(0,"ASlot8",string,45);
	    sscanf(string, "p<|>iiii", PlayerData[playerid][pASlot][7], PlayerData[playerid][pABone][7], PlayerData[playerid][pTSlot][7], PlayerData[playerid][pARenk][7]);

	    cache_get_value_name(0,"ASlot9",string,45);
	    sscanf(string, "p<|>iiii", PlayerData[playerid][pASlot][8], PlayerData[playerid][pABone][8], PlayerData[playerid][pTSlot][8], PlayerData[playerid][pARenk][8]);

	    cache_get_value_name(0,"ASlot10",string,45);
	    sscanf(string, "p<|>iiii", PlayerData[playerid][pASlot][9], PlayerData[playerid][pABone][9], PlayerData[playerid][pTSlot][9], PlayerData[playerid][pARenk][9]);

	    cache_get_value_name(0, "ASlot1Pos", string, 100);
		sscanf(string, "p<|>fffffffff", AksesuarData[playerid][0][0], AksesuarData[playerid][0][1], AksesuarData[playerid][0][2], AksesuarData[playerid][0][3], AksesuarData[playerid][0][4], AksesuarData[playerid][0][5], AksesuarData[playerid][0][6], AksesuarData[playerid][0][7], AksesuarData[playerid][0][8]);

        cache_get_value_name(0, "ASlot2Pos", string, 100);
		sscanf(string, "p<|>fffffffff", AksesuarData[playerid][1][0], AksesuarData[playerid][1][1], AksesuarData[playerid][1][2], AksesuarData[playerid][1][3], AksesuarData[playerid][1][4], AksesuarData[playerid][1][5], AksesuarData[playerid][1][6], AksesuarData[playerid][1][7], AksesuarData[playerid][1][8]);

		cache_get_value_name(0, "ASlot3Pos", string, 100);
		sscanf(string, "p<|>fffffffff", AksesuarData[playerid][2][0], AksesuarData[playerid][2][1], AksesuarData[playerid][2][2], AksesuarData[playerid][2][3], AksesuarData[playerid][2][4], AksesuarData[playerid][2][5], AksesuarData[playerid][2][6], AksesuarData[playerid][2][7], AksesuarData[playerid][2][8]);

		cache_get_value_name(0, "ASlot4Pos", string, 100);
		sscanf(string, "p<|>fffffffff", AksesuarData[playerid][3][0], AksesuarData[playerid][3][1], AksesuarData[playerid][3][2], AksesuarData[playerid][3][3], AksesuarData[playerid][3][4], AksesuarData[playerid][3][5], AksesuarData[playerid][3][6], AksesuarData[playerid][3][7], AksesuarData[playerid][3][8]);

		cache_get_value_name(0, "ASlot5Pos", string, 100);
		sscanf(string, "p<|>fffffffff", AksesuarData[playerid][4][0], AksesuarData[playerid][4][1], AksesuarData[playerid][4][2], AksesuarData[playerid][4][3], AksesuarData[playerid][4][4], AksesuarData[playerid][4][5], AksesuarData[playerid][4][6], AksesuarData[playerid][4][7], AksesuarData[playerid][4][8]);

		cache_get_value_name(0, "ASlot6Pos", string, 100);
		sscanf(string, "p<|>fffffffff", AksesuarData[playerid][5][0], AksesuarData[playerid][5][1], AksesuarData[playerid][5][2], AksesuarData[playerid][5][3], AksesuarData[playerid][5][4], AksesuarData[playerid][5][5], AksesuarData[playerid][5][6], AksesuarData[playerid][5][7], AksesuarData[playerid][5][8]);

		cache_get_value_name(0, "ASlot7Pos", string, 100);
		sscanf(string, "p<|>fffffffff", AksesuarData[playerid][6][0], AksesuarData[playerid][6][1], AksesuarData[playerid][6][2], AksesuarData[playerid][6][3], AksesuarData[playerid][6][4], AksesuarData[playerid][6][5], AksesuarData[playerid][6][6], AksesuarData[playerid][6][7], AksesuarData[playerid][6][8]);

		cache_get_value_name(0, "ASlot8Pos", string, 100);
		sscanf(string, "p<|>fffffffff", AksesuarData[playerid][7][0], AksesuarData[playerid][7][1], AksesuarData[playerid][7][2], AksesuarData[playerid][7][3], AksesuarData[playerid][7][4], AksesuarData[playerid][7][5], AksesuarData[playerid][7][6], AksesuarData[playerid][7][7], AksesuarData[playerid][7][8]);

		cache_get_value_name(0, "ASlot9Pos", string, 100);
		sscanf(string, "p<|>fffffffff", AksesuarData[playerid][8][0], AksesuarData[playerid][8][1], AksesuarData[playerid][8][2], AksesuarData[playerid][8][3], AksesuarData[playerid][8][4], AksesuarData[playerid][8][5], AksesuarData[playerid][8][6], AksesuarData[playerid][8][7], AksesuarData[playerid][8][8]);

		cache_get_value_name(0, "ASlot10Pos", string, 100);
		sscanf(string, "p<|>fffffffff", AksesuarData[playerid][9][0], AksesuarData[playerid][9][1], AksesuarData[playerid][9][2], AksesuarData[playerid][9][3], AksesuarData[playerid][9][4], AksesuarData[playerid][9][5], AksesuarData[playerid][9][6], AksesuarData[playerid][9][7], AksesuarData[playerid][9][8]);
	    for(new i; i<14; i++)
     	{
     	    if(i<13)
     	    {
          		format(string, sizeof(string), "Silah%d", i + 1);
            	cache_get_value_name_int(0,string,PlayerData[playerid][pSilahlar][i]);

				format(string, sizeof(string), "Mermi%d", i + 1);
    			cache_get_value_name_int(0,string,PlayerData[playerid][pMermiler][i]);
     	    }
      	}
      	for(new j; j<10; j++)
      	{
      	    format(string,sizeof(string),"Balik%d",j+1);
      	    cache_get_value_name_int(0,string,PlayerData[playerid][pBalikID][j]);

      	    format(string,sizeof(string),"BalikGram%d",j+1);
      	    cache_get_value_name_int(0,string,PlayerData[playerid][pBalikGram][j]);

      	}
      	if(!PlayerData[playerid][pSkin])
      	{
	      	if(PlayerData[playerid][pCinsiyet] == 1 && PlayerData[playerid][pTen] == 1)
			{
		   		PlayerData[playerid][pSkin] = 101;
			}
			if(PlayerData[playerid][pCinsiyet] == 1 && PlayerData[playerid][pTen] == 2)
			{
				PlayerData[playerid][pSkin] = 184;
			}
			if(PlayerData[playerid][pCinsiyet] == 2 && PlayerData[playerid][pTen] == 1)
			{
		   		PlayerData[playerid][pSkin] = 211;
			}
			if(PlayerData[playerid][pCinsiyet] == 2 && PlayerData[playerid][pTen] == 2)
			{
		   		PlayerData[playerid][pSkin] = 12;
			}
		}
      	TextDrawHideForPlayer(playerid, GirisTD);
      	LogoDur(playerid);
      	format(string, sizeof(string), "SELECT * FROM `tickets` WHERE `ticketID` = '%d'", PlayerData[playerid][pID]);
       	mysql_tquery(baglanti, string, "TicketLoad", "d", playerid);
       	SetSpawnInfo(playerid, 0, PlayerData[playerid][pSkin], PlayerData[playerid][pCikisPos][0], PlayerData[playerid][pCikisPos][1], PlayerData[playerid][pCikisPos][2], 0.0, 0, 0, 0, 0, 0, 0);
      	SetPlayerScore(playerid, PlayerData[playerid][pLevel]);
      	EkranTemizle(playerid);
      	SetPlayerColor(playerid,COLOR_WHITE);
	    SetPVarInt(playerid,"GirisYapti",1);
	    SetPVarInt(playerid,"Logged",0);
	    SpawnPlayer(playerid);
	    ResetPlayerMoney(playerid);
	    GivePlayerMoney(playerid,PlayerData[playerid][pCash]);
	    SetWeapons(playerid);
	    format(string,sizeof(string),"UPDATE `oyuncular` SET `LastIP` = '%s',`SonGiris` = '%s', `Oyunda` = '1' WHERE `ID` = '%d'",GetIP(playerid),ReturnDate(),PlayerData[playerid][pID]);
	    mysql_query(baglanti,string, false);
    	for(new i; i<9; i++)
		{
			PlayerTextDrawShow(playerid,TDEditor_TD[playerid][i]);
		}
	}
	return 1;
}
stock SoyadKilitlimi(soyad[])
{
    new query[125], Cache: owner_query;
    mysql_format(baglanti, query, sizeof(query), "SELECT * FROM `kilitlisoyadlar` WHERE `Soyad` = '%s'", SQL_ReturnEscaped(soyad));
    owner_query = mysql_query(baglanti, query);
    new rows;
    cache_get_row_count(rows);
    if(rows)
    {
        return 1;
    }
    cache_delete(owner_query);
    return 0;
}
forward TicketLoad(playerid);
public TicketLoad(playerid)
{
	new rows;
	cache_get_row_count(rows);
	for (new i = 0; i < rows && i < MAX_PLAYER_TICKETS; i ++)
	{
	    TicketData[playerid][i][ticketExists] = true;
	    cache_get_value_name_int(i, "ticketID", TicketData[playerid][i][ticketID]);
	    cache_get_value_name_int(i, "ticketFee", TicketData[playerid][i][ticketFee]);
	    cache_get_value_name(i, "ticketDate", TicketData[playerid][i][ticketDate], 36);
	    cache_get_value_name(i, "ticketReason", TicketData[playerid][i][ticketReason], 64);
	    cache_get_value_name(i, "Memur", TicketData[playerid][i][ticketMemur], 24);
	}
	return 1;
}
stock SetWeapons(playerid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) if (PlayerData[playerid][pSilahlar][i] > 0 && PlayerData[playerid][pMermiler][i] > 0) {
	    GivePlayerWeapon(playerid, PlayerData[playerid][pSilahlar][i], PlayerData[playerid][pMermiler][i]);
	}
	return 1;
}
stock GetIP(playerid)
{
	new pip[16];
	GetPlayerIp(playerid, pip, sizeof(pip));
	return pip;
}
ReturnDate()
{
	static
	    date[36];

	getdate(date[2], date[1], date[0]);
	gettime(date[3], date[4], date[5]);

	format(date, sizeof(date), "%02d/%02d/%d, %02d:%02d", date[0], date[1], date[2], date[3], date[4]);
	return date;
}
IsNumeric(const str[])
{
	for (new i = 0, l = strlen(str); i != l; i ++)
	{
	    if (i == 0 && str[0] == '-')
			continue;

	    else if (str[i] < '0' || str[i] > '9')
			return 0;
	}
	return 1;
}
stock BilgiTemizle(playerid)
{
	PlayerData[playerid][pID] = 0;
	PlayerData[playerid][pYas] = 0;
	PlayerData[playerid][pCinsiyet] = 0;
	PlayerData[playerid][pTen] = 0;
	PlayerData[playerid][pSkin] = 0;
	PlayerData[playerid][pAdmin] = 0;
	PlayerData[playerid][pHelper] = 0;
	PlayerData[playerid][pCash] = 0;
	PlayerData[playerid][pAdminDuty] = false;
	PlayerData[playerid][pHelperDuty] = 0;
	PlayerData[playerid][pEhliyet] = 0;
	PlayerData[playerid][pLastCar] = -1;
	PlayerData[playerid][pEditGate] = -1;
	PlayerData[playerid][pEditType] = 0;
	PlayerData[playerid][pHouse] = -1;
	PlayerData[playerid][pFaction] = -1;
	PlayerData[playerid][pFactionRutbe] = 0;
	PlayerData[playerid][pFactionDivizyon] = 0;
	PlayerData[playerid][pEditFurniture] = -1;
	PlayerData[playerid][pFactionDavet] = -1;
	PlayerData[playerid][pFactionDavetEden] = -1;
	PlayerData[playerid][pFactionEdit] = -1;
	PlayerData[playerid][pSelectedSlot] = -1;
	PlayerData[playerid][pSu] = 0;
	PlayerData[playerid][pHealth] = 100.0;
	PlayerData[playerid][pArmour] = 0.0;
	PlayerData[playerid][pOnDuty] = 0;
	PlayerData[playerid][pOnDutySkin] = 0;
	PlayerData[playerid][pTazer] = 0;
	PlayerData[playerid][pBeanbag] = 0;
	PlayerData[playerid][pSoklandi] = 0;
	PlayerData[playerid][pKelepce] = 0;
	PlayerData[playerid][pDestek] = 0;
	PlayerData[playerid][pCCTV] = -1;
	PlayerData[playerid][pYereYatirildi] = 0;
	PlayerData[playerid][pAranma] = 0;
	PlayerData[playerid][pHapis] = 0;
	PlayerData[playerid][pHapisSure] = 0;
	format(PlayerData[playerid][pHapisSebep], 50, "");
	format(PlayerData[playerid][pHapiseAtan], 24, "");
	PlayerData[playerid][pBaygin] = 0;
	PlayerData[playerid][pBayginSure] = 0;
	PlayerData[playerid][pLoopAnim] = false;
	PlayerData[playerid][pIyilestiriyor] = -1;
	PlayerData[playerid][pIyilestirmeSure] = 0;
	PlayerData[playerid][pTopallama] = false;
	PlayerData[playerid][pTopallamaSayac] = 0;
	PlayerData[playerid][pTelefon] = -1;
	PlayerData[playerid][pAramada] = 0;
	PlayerData[playerid][pCallLine] = -1;
	PlayerData[playerid][pTarife] = -1;
	PlayerData[playerid][pTarifeKalan][0] = 0;
	PlayerData[playerid][pTarifeKalan][1] = 0;
	PlayerData[playerid][pTarifeKalan][2] = 0;
	PlayerData[playerid][pTarifeSure] = 0;
	PlayerData[playerid][pKonusmaSure] = 0;
	format(PlayerData[playerid][pIhbar], 128, "");
	PlayerData[playerid][pBoombox] = 0;
	PlayerData[playerid][pIhbarSayac] = 0;
	PlayerData[playerid][pBitcoin] = 0;
	PlayerData[playerid][pGPS] = -1;
	PlayerData[playerid][pRadyo] = 0;
	PlayerData[playerid][pFrekans] = 0;
	PlayerData[playerid][pLevel] = 1;
	PlayerData[playerid][pEXP] = 0;
	PlayerData[playerid][pMaasSure] = 0;
	PlayerData[playerid][pMaas] = 0;
	PlayerData[playerid][pOynamaSaati] = 0;
	PlayerData[playerid][pMuzikKutusu] = INVALID_PLAYER_ID;
	PlayerData[playerid][pDinle] = -1;
	PlayerData[playerid][yayinKonuk] = -1;
	PlayerData[playerid][pMangalKuruldu] = false;
	PlayerData[playerid][pCadir] = -1;
	PlayerData[playerid][pSilahOffer] = -1;
	PlayerData[playerid][pSilahOfferID] = 0;
	PlayerData[playerid][pSilahOfferFiyat] = 0;
	DestroyDynamicObject(PlayerData[playerid][pMangalObject][0]);
	DestroyDynamicObject(PlayerData[playerid][pMangalObject][1]);
	PlayerData[playerid][pYemekPisiriliyor] = 0;
	PlayerData[playerid][pPisirilenYemek] = 0;
	PlayerData[playerid][pBagimlilik] = 0;
	PlayerData[playerid][pBagimlilikSayac][0] = PlayerData[playerid][pBagimlilikSayac][1] = 0;
	PlayerData[playerid][pTasimacilikSeviye] = PlayerData[playerid][pTasimacilikSefer] = 0;
	PlayerData[playerid][pGarage] = -1;
	PlayerData[playerid][pBakiye] = 0;
	PlayerData[playerid][pEXPBoost] = PlayerData[playerid][pBalikOrani] = 0;
	PlayerData[playerid][pVip] = PlayerData[playerid][pVipSure] = 0;
	PlayerData[playerid][pVipRenk] = 0;
	PlayerData[playerid][pDovusStili] = 4;
	PlayerData[playerid][pMaske] = false;
	PlayerData[playerid][pMaskeID] = 0;
	PlayerData[playerid][pMaskeHakki] = 0;
	PlayerData[playerid][pGraffiti] = 0;
	PlayerData[playerid][pSpecID] = -1;
	PlayerData[playerid][pNameChange][0] = '\0';
	PlayerData[playerid][pJetpack] = 0;
	PlayerData[playerid][pGOD] = false;
	PlayerData[playerid][pFriskOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
 	PlayerData[playerid][pShakeType] = 0;
 	PlayerData[playerid][pHUD] = true;
 	PlayerData[playerid][pStand] = false;
 	PlayerData[playerid][pPartner] = 0;
 	PlayerData[playerid][pPartnerTeklif] = INVALID_PLAYER_ID;
 	PlayerData[playerid][pShootedBody] = -1;
 	PlayerData[playerid][pLastShot] = INVALID_PLAYER_ID;
 	PlayerData[playerid][pTaxiCalled] = 0;
 	PlayerData[playerid][pTaksiKabul] = -1;
 	PlayerData[playerid][pTaxiDuty] = false;
 	PlayerData[playerid][pTaksiUcret] = 0;
 	PlayerData[playerid][pTaxiPlayer] = -1;
 	PlayerData[playerid][pSoyun] = false;
 	PlayerData[playerid][pHediye] = 0;
 	PlayerData[playerid][pHediyeSaat] = 0;
 	PlayerData[playerid][pYoutuber] = 0;
 	PlayerData[playerid][pYoutuberTag] = false;
 	PlayerData[playerid][pSelectType] = 0;
 	PlayerData[playerid][pOldurme] = 0;
 	PlayerData[playerid][pOlme] = 0;
 	PlayerData[playerid][pTalepSayi] = 0;
 	PlayerData[playerid][pYatKontrol][0] = 0;
 	PlayerData[playerid][pCK] = 0;
 	PlayerData[playerid][pSilahAlmaSayisi] = 0;
	PlayerData[playerid][pSilahAlma] = 0;
	PlayerData[playerid][pDuzkontak] = -1;
	PlayerData[playerid][pKilitkir] = -1;
	PlayerData[playerid][pMekanik] = 0;
	PlayerData[playerid][pMekanikSure] = 0;

 	TohumSayisi[playerid] = 0;
 	TohumTutuyor[playerid] = -1;
 	if(IsValidDynamicCP(TohumCP[playerid])) DestroyDynamicCP(TohumCP[playerid]);
 	SetPVarInt(playerid, "ssmod", 0);
 	TextDrawHideForPlayer(playerid, Karanlik);
 	DeletePVar(playerid, "AksesuarEdit");
 	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 5);
 	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 5);
 	SonMobilyaID[playerid] = -1;
 	SetPVarInt(playerid, "KOSKorumasi", 0);
 	DeletePVar(playerid, "OdadanAt");
 	pbOda[playerid] = -1;
 	pbTakim[playerid] = 0;
 	pbOldurme[playerid] = 0;
 	pbOlme[playerid] = 0;
	SetPVarInt(playerid, "GraffitiEdit", -1);
	DeletePVar(playerid, "HizAsimi");
	TemizlikciDistance[playerid] = 0;
	DeletePVar(playerid,"TemizlikciKazanilan");
	SetPVarInt(playerid, "AracSakliyor", -1);
	SetPVarInt(playerid, "pnsID", -1);
	CurrentAccountID[playerid] = -1;
	LogListType[playerid] = TYPE_NONE;
	LogListPage[playerid] = 0;
	EditingATMID[playerid] = -1;
	EditingCopObjectID[playerid] = -1;
	TextDrawHideForPlayer(playerid, Karanlik);
	SetPVarInt(playerid, "IpBaglandi", 0);
	SetPVarInt(playerid, "GozBaglandi", 0);
	SetPVarInt(playerid, "KonumKabul", -1);
	SetPVarInt(playerid, "IsyeriBuluyor", -1);
	EMSKabul[playerid] = INVALID_PLAYER_ID;
	SetPVarInt(playerid, "EvBuluyor", -1);
	SetPVarInt(playerid, "BinaBuluyor", -1);
	DeletePVar(playerid, "Arayan");
	DeletePVar(playerid, "MaasGeldi");
    DeletePVar(playerid, "MaasTimer");
    DeletePVar(playerid, "MaasKod");
	DeletePVar(playerid, "IlkBalik");
	DeletePVar(playerid, "AracaBindi");
	DeletePVar(playerid, "Iyilestiriliyor");
	PetKontrol[playerid] = -1;
	AracCekiyor[playerid] = INVALID_VEHICLE_ID;
	ResetPlayerDamages(playerid);
	CevapSifirla(playerid);
	SigaraDurum[playerid] = false;
	SetPVarInt(playerid, "kumar_id", INVALID_PLAYER_ID);
	if (PlayerData[playerid][pDragged])
	{
	    PlayerData[playerid][pDragged] = 0;
	    PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	    KillTimer(PlayerData[playerid][pDragTimer]);
	}
	foreach(new i:Player)
	{
	    if (PlayerData[i][pDraggedBy] == playerid) {
		    KillTimer(PlayerData[i][pDragTimer]);

		    PlayerData[i][pDragged] = 0;
            PlayerData[i][pDraggedBy] = INVALID_PLAYER_ID;
		}
	}
 	DestroyPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
 	PlayerData[playerid][pDrinkBar] = INVALID_PLAYER_BAR_ID;
 	BalikTimer[playerid] = -1;
	for(new i; i<13; i++)
	{
	    if(i < 10)
	    {
		    PlayerData[playerid][pBalikID][i] = -1;
		    PlayerData[playerid][pBalikGram][i] = 0;
	    }
	    if(i < 5)
	    {
	    	PlayerData[playerid][pTelefonAyar][i] = 0;
	    }
	    PlayerData[playerid][pSilahlar][i] = 0;
	    PlayerData[playerid][pMermiler][i] = 0;
	    PlayerData[playerid][pEsyalar][i] = 0;
	    PlayerData[playerid][pAyarlar][i] = 0;
	}
	PlayerData[playerid][pAyarlar][14] = 0;
	PlayerData[playerid][pEsyalar][13] = 0;
	PlayerData[playerid][pEsyalar][14] = 0;
	PlayerData[playerid][pAyarlar][4] = 1;
	for (new j = 0; j < 10; j ++) {
			PlayerData[playerid][pARenk][j] = 0;
	    	AksesuarData[playerid][j][j] = 0.0;
	    	PlayerData[playerid][pASlot][j] = 0;
	    	PlayerData[playerid][pTSlot][j] = 0;
	    	PlayerData[playerid][pABone][j] = 0;
	    }
	for (new i = 0; i != MAX_PLAYER_TICKETS; i ++) {
        TicketData[playerid][i][ticketID] = 0;
        TicketData[playerid][i][ticketExists] = false;
        TicketData[playerid][i][ticketFee] = 0;
    }
    RemovePlayerAttachedObject(playerid,2);
    RemovePlayerAttachedObject(playerid,3);
    RemovePlayerAttachedObject(playerid,4);
    RemovePlayerAttachedObject(playerid,6);
	DeletePVar(playerid,"davet");
	SetPVarInt(playerid,"mobilyaid",-1);
	RemovePlayerAttachedObject(playerid,1);
	RemovePlayerAttachedObject(playerid,5);
	DeletePVar(playerid,"ehliyethata");
	DeletePVar(playerid,"ehliyetaliyor");
	DeletePVar(playerid,"ehliyetsinavinda");
	DeletePVar(playerid,"Logged");
	DeletePVar(playerid,"Kayit");
	DeletePVar(playerid,"hata");
	DeletePVar(playerid,"Sifre");
	DeletePVar(playerid,"Yas");
	DeletePVar(playerid,"dogum");
	DeletePVar(playerid,"Sex");
	return 1;
}
stock TurkceKarakter(yazi[])
{
	if(strfind(yazi, "þ", true) != -1) return 1;
	if(strfind(yazi, "Þ", true) != -1) return 1;
	if(strfind(yazi, "ç", true) != -1) return 1;
	if(strfind(yazi, "Ç", true) != -1) return 1;
	if(strfind(yazi, "ö", true) != -1) return 1;
	if(strfind(yazi, "Ö", true) != -1) return 1;
	if(strfind(yazi, "ð", true) != -1) return 1;
	if(strfind(yazi, "Ð", true) != -1) return 1;
	if(strfind(yazi, "ü", true) != -1) return 1;
	if(strfind(yazi, "Ü", true) != -1) return 1;
	return 0;
}
forward Giris_Yap(playerid);
public Giris_Yap(playerid)
{
	new query[228];
	format(query,sizeof(query),"SELECT * FROM `oyuncular` WHERE `Isim` = '%s'",ReturnName(playerid));
	new Cache:sawyer = mysql_query(baglanti,query);
	new rows;
	cache_get_row_count(rows);
	cache_delete(sawyer);
	if(!rows)
	{
	    EkranTemizle(playerid);
	    if(karakterbasvuru == 1)
	    {
	        HataMesajGonder(playerid, "Karakteriniz bulunamadý, karakter baþvurusu göndererek karakter oluþturabilirsiniz. (www.victimrpg.com)");
	        return Kick(playerid);
	    }
	    /*if(SoyadKilitlimi(GetPlayerLastName(playerid, ReturnName(playerid), 1)))
	    {
	        HataMesajGonder(playerid, "Bu soyadý kullanamazsýnýz, soyad kilitlenmiþ.");
	        return Kick(playerid);
	    }*/

	    if(SonSoruID > 0) SoruSor(playerid);
	    else
	    {
			DeletePVar(playerid,"hata");
			new string[280];
			format(string,sizeof(string),"{FFFFFF}Sunucumuza hoþ geldin {808080}%s {FFFFFF}\nkayýt olmak için lütfen þifrenizi boþ kutucuða girin.\n\nÞifrenizi girin:",ReturnName(playerid,1));
			ShowPlayerDialog(playerid,6,DIALOG_STYLE_PASSWORD,"{FFFFFF}Kayýt - Þifre",string,"Devam","Iptal");
	    }
	}
	else
	{
	    EkranTemizle(playerid);
	    BilgiMesajGonder(playerid,"Karakteriniz bulundu, lütfen giriþ yapýnýz.");
	    format(query,sizeof(query),"{FFFFFF}Sunucumuza tekrar hoþ geldin {808080}%s, {FFFFFF}\ngiriþ yapmak için þifrenizi girmelisiniz.\n\nÞifreniz:",ReturnName(playerid,0));
	    ShowPlayerDialog(playerid,11,DIALOG_STYLE_PASSWORD,"{FFFFFF}Giriþ - Þifre",query,"Giriþ","Iptal");
	}
	return 1;
}
stock GetPlayerLastName(playerid, soyad[], nm = 0)
{
    new
        namestring[2][MAX_PLAYER_NAME];

    if(nm) {
        new name[MAX_PLAYER_NAME];

        GetPlayerName(playerid,name,MAX_PLAYER_NAME);
        split(name, namestring, '_');
    } else {
        split(soyad, namestring, '_');
    }
    return namestring[1];
}
stock split(const strsrc[], strdest[][], delimiter)
{
    new i, li;
    new aNum;
    new len;
    while(i <= strlen(strsrc))
    {
        if(strsrc[i] == delimiter || i == strlen(strsrc))
        {
            len = strmid(strdest[aNum], strsrc, li, i, 128);
            strdest[aNum][len] = 0;
            li = i+1;
            aNum++;
        }
        i++;
    }
    return 1;
}
Dialog:SoruCevapla(playerid, response, listitem, inputtext[]) {

	if(!response) return Kick(playerid);

	if(listitem != Cevaplar[SoruID[playerid]])
	{
		YanlisCevap[playerid]++;
	}
	CevaplananSoru[playerid]++;
	if(CevaplananSoru[playerid] < SonSoruID) SoruSor(playerid);
	else {
	    if(YanlisCevap[playerid] >= 1)
	    {
	        HataMesajGonder(playerid, "Sorulara yanlýþ cevap verdiniz, daha sonra tekrar deneyin.");
	        return Kick(playerid);
	    }
	    MesajGonder(playerid, "Sorulara doðru cevap verdiniz, artýk karakter oluþturabilirsiniz.");

		DeletePVar(playerid,"hata");
		CevapSifirla(playerid);
		new string[280];
		format(string,sizeof(string),"{FFFFFF}Sunucumuza hoþ geldin {808080}%s {FFFFFF}\nkayýt olmak için lütfen þifrenizi boþ kutucuða girin.\n\nÞifrenizi girin:",ReturnName(playerid,1));
		ShowPlayerDialog(playerid,6,DIALOG_STYLE_PASSWORD,"{FFFFFF}Kayýt - Þifre",string,"Devam","Iptal");
	}

	return 1;
}
/*stock ClientKontrol(playerid)
{
	new query[124];
	format(query, sizeof(query), "SELECT * FROM `serials` WHERE `username` = '%s'", Player_GetName(playerid));
	new Cache: sawyer = mysql_query(baglanti, query);
	new rows;
	cache_get_row_count(rows);
	if(!rows) return 0;
	if(rows)
	{
	    new onaylandi;
	    cache_get_value_name_int(0, "onaylandi", onaylandi);
	    if(onaylandi == 0) return 0;
	    else
	    {
	        new serial[75];
	        cache_get_value_name(0, "hddserial", serial, 75);
	        cache_delete(sawyer);
	        format(PlayerData[playerid][pSerial], 75, serial);
	        return 1;
	    }
	}
 	return 0;
}*/
stock IsValidRoleplayName(const name[]) {
	if (!name[0] || strfind(name, "_") == -1)
	    return 0;

	else for (new i = 0, len = strlen(name); i != len; i ++) {
	    if ((i == 0) && (name[i] < 'A' || name[i] > 'Z'))
	        return 0;

		else if ((i != 0 && i < len  && name[i] == '_') && (name[i + 1] < 'A' || name[i + 1] > 'Z'))
		    return 0;

		else if ((name[i] < 'A' || name[i] > 'Z') && (name[i] < 'a' || name[i] > 'z') && name[i] != '_' && name[i] != '.')
		    return 0;
	}
	return 1;
}
stock EkranTemizle(playerid)
{
	for(new i; i<25; i++)
	{
	    SendClientMessage(playerid,-1,"");
	}
	return 1;
}
ReturnName(playerid, underscore=1)
{
	static
	    name[MAX_PLAYER_NAME + 1];

	GetPlayerName(playerid, name, sizeof(name));

	if (!underscore) {
	    for (new i = 0, len = strlen(name); i < len; i ++) {
	        if (name[i] == '_') name[i] = ' ';
		}
	}
	if(PetKontrol[playerid] != -1 && GetPVarInt(playerid, "Logged") == 1) format(name, sizeof(name), "%s", PetBilgi[PetKontrol[playerid]][petAdi]);
	if (PlayerData[playerid][pMaske] == true && PetKontrol[playerid] == -1)
	    format(name, sizeof(name), "Gizli (#%d)", PlayerData[playerid][pMaskeID]);

	return name;
}
stock SendClientMessageToAllEx(color, const text[], {Float, _}:...)
{
    static
        args,
        str[512];

    /*
     *  Custom function that uses #emit to format variables into a string.
     *  This code is very fragile; touching any code here will cause crashing!
    */
    if ((args = numargs()) == 2)
    {
        SendClientMessageToAll(color, text);
    }
    else
    {
        while (--args >= 2)
        {
            #emit LCTRL 5
            #emit LOAD.alt args
            #emit SHL.C.alt 2
            #emit ADD.C 12
            #emit ADD
            #emit LOAD.I
            #emit PUSH.pri
        }
        #emit PUSH.S text
        #emit PUSH.C 144
        #emit PUSH.C str
        #emit LOAD.S.pri 8
        #emit ADD.C 4
        #emit PUSH.pri
        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        SendClientMessageToAll(color, str);

        #emit RETN
    }
    return 1;
}
stock SendVehicleMessage(except, vehicleid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (GetPlayerVehicleID(i) == vehicleid && i != except ) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (GetPlayerVehicleID(i) == vehicleid && i != except) {
 		SendClientMessage(i, color, string);
	}
	return 1;
}
/*stock SendVehicleMessage(vehicleid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (GetPlayerVehicleID(i) == vehicleid) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (GetPlayerVehicleID(i) == vehicleid) {
 		SendClientMessage(i, color, string);
	}
	return 1;
}*/
stock SendClientMessageEx(playerid, color, const text[], {Float, _}:...)
{
	static
	    args,
	    str[144];

	/*
     *  Custom function that uses #emit to format variables into a string.
     *  This code is very fragile; touching any code here will cause crashing!
	*/
	if ((args = numargs()) == 3)
	{
	    SendClientMessage(playerid, color, text);
	}
	else
	{
		while (--args >= 3)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 144
		#emit PUSH.C str
		#emit PUSH.S 8
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SendClientMessage(playerid, color, str);

		#emit RETN
	}
	return 1;
}
stock SoruEkle(soru[], siklar[], cevap)
{
	format(Quiz[SonSoruID], 1024, "%s", soru);
	Cevaplar[SonSoruID] = cevap;
	format(Siklar[SonSoruID], 1024, "%s", siklar);
	SonSoruID++;
	return 1;
}
stock SoruSor(playerid)
{
	soru_al:
	new id = random(SonSoruID);

	if(SoruSoruldu[playerid][id]) goto soru_al;
	Dialog_Show(playerid, SoruCevapla, DIALOG_STYLE_LIST, Quiz[id], Siklar[id], "Seç", "");
	SoruID[playerid] = id;
	SoruSoruldu[playerid][id] = 1;
	return 1;
}
stock CevapSifirla(playerid)
{
    SoruID[playerid] = -1;
	CevaplananSoru[playerid] = 0;
	YanlisCevap[playerid] = 0;
	for(new i; i < MAX_QUIZ; i++) SoruSoruldu[playerid][i] = 0;
	return 1;
}
Fuel_InitPlayer(playerid)
{
	UsingPumpID[playerid] = -1;
	RefuelTimer[playerid] = -1;
	FuelBought[playerid] = 0;

	FuelText[playerid] = CreatePlayerTextDraw(playerid, 40.000000, 305.000000, "~b~~h~Dolduruluyor...~n~~n~~w~Fiyat: ~g~~h~$0 ~y~~h~(0 L)");
	PlayerTextDrawBackgroundColor(playerid, FuelText[playerid], 255);
	PlayerTextDrawFont(playerid, FuelText[playerid], 1);
	PlayerTextDrawLetterSize(playerid, FuelText[playerid], 0.240000, 1.100000);
	PlayerTextDrawColor(playerid, FuelText[playerid], -1);
	PlayerTextDrawSetOutline(playerid, FuelText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, FuelText[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, FuelText[playerid], 0);

	//FuelBar[playerid] = CreatePlayerProgressBar(playerid, 498.0, 104.0, 113.0, 6.2, 0xF1C40FFF, 100.0, 0);
	return 1;
}
Pump_Update(id)
{
    new string[96];
	format(string, sizeof(string), "Gaz Pompasý\n\n{2ECC71}$%d / Litre\n%s/yakital", GetServerBilgi("BenzinFiyat"), (IsPlayerConnected(PumpData[id][pumpUser])) ? ("{E74C3C}") : ("{FFFFFF}"));
	return UpdateDynamic3DTextLabelText(PumpData[id][pumpLabel], 0xF1C40FFF, string);
}

Pump_Closest(playerid, Float: range = 6.0)
{
	new id = -1, Float: dist = range, Float: tempdist;
	for(new i; i < MAX_GAS_PUMPS; i++)
	{
	    tempdist = GetPlayerDistanceFromPoint(playerid, PumpData[i][pumpX], PumpData[i][pumpY], PumpData[i][pumpZ]);

	    if(tempdist > range) continue;
		if(tempdist <= dist)
		{
			dist = tempdist;
			id = i;
		}
	}

	return id;
}
Vehicle_IsANoFuelVehicle(model)
{
	switch(model)
	{
		case 481, 509, 510: return 1;
		default: return 0;
	}

	return 0;
}
formatInt(intVariable, iThousandSeparator = ',', iCurrencyChar = '$')
{
    /*
		By Kar
		https://gist.github.com/Kar2k/bfb0eafb2caf71a1237b349684e091b9/8849dad7baa863afb1048f40badd103567c005a5#file-formatint-function
	*/
	static
		s_szReturn[ 32 ],
		s_szThousandSeparator[ 2 ] = { ' ', EOS },
		s_szCurrencyChar[ 2 ] = { ' ', EOS },
		s_iVariableLen,
		s_iChar,
		s_iSepPos,
		bool:s_isNegative
	;

	format( s_szReturn, sizeof( s_szReturn ), "%d", intVariable );

	if(s_szReturn[0] == '-')
		s_isNegative = true;
	else
		s_isNegative = false;

	s_iVariableLen = strlen( s_szReturn );

	if ( s_iVariableLen >= 4 && iThousandSeparator)
	{
		s_szThousandSeparator[ 0 ] = iThousandSeparator;

		s_iChar = s_iVariableLen;
		s_iSepPos = 0;

		while ( --s_iChar > _:s_isNegative )
		{
			if ( ++s_iSepPos == 3 )
			{
				strins( s_szReturn, s_szThousandSeparator, s_iChar );

				s_iSepPos = 0;
			}
		}
	}
	if(iCurrencyChar) {
		s_szCurrencyChar[ 0 ] = iCurrencyChar;
		strins( s_szReturn, s_szCurrencyChar, _:s_isNegative );
	}
	return s_szReturn;
}

GetClosestPlant(playerid, Float: range = 1.5)
{
	new id = -1, Float: dist = range, Float: tempdist;
	foreach(new i : Plants)
	{
	    tempdist = GetPlayerDistanceFromPoint(playerid, PlantData[i][plantX], PlantData[i][plantY], PlantData[i][plantZ]);

	    if(tempdist > range) continue;
		if(tempdist <= dist)
		{
			dist = tempdist;
			id = i;
		}
	}

	return id;
}
GetClosestDealer(playerid, Float: range = 2.0)
{
	new id = -1, Float: dist = range, Float: tempdist;
	foreach(new i : Dealers)
	{
	    tempdist = GetPlayerDistanceFromPoint(playerid, DealerData[i][dealerX], DealerData[i][dealerY], DealerData[i][dealerZ]);

	    if(tempdist > range) continue;
		if(tempdist <= dist)
		{
			dist = tempdist;
			id = i;
		}
	}

	return id;
}
GetClosestGraffiti(playerid, Float: range = 2.0)
{
	new id = -1, Float: dist = range, Float: tempdist;
	for(new i; i<MAX_GRAFFITI_POINTS; i++) if(GraffitiData[i][graffitiExists] == 1)
	{
	    tempdist = GetPlayerDistanceFromPoint(playerid, GraffitiData[i][graffitiPos][0], GraffitiData[i][graffitiPos][1], GraffitiData[i][graffitiPos][2]);

	    if(tempdist > range) continue;
		if(tempdist <= dist)
		{
			dist = tempdist;
			id = i;
		}
	}

	return id;
}
ShowDrugStats(playerid)
{
	new dialog[350];
	format(
		dialog,
		sizeof(dialog),
		"Baðýmlýlýk\t%s\n\
		Uyuþturucu\t%s gram\n\
		Tohum\t%s\n\
		Kullanýlan Uyuþturucu\t%s gram\n\
		Ekilen Tohum\t%s\n\
		Toplanan Tohum\t%s (%s gram)\n\
		Verilen Uyuþturucu\t%s gram\n\
		Alýnan Uyuþturucu\t%s gram\n\
		Satýn Alýnan Uyuþturucu\t%s gram {2ECC71}(%s)\n\
		Satýlan Uyuþturucu\t%s gram {2ECC71}(%s)\n\
		{FF0000}Ýstatistikleri Sýfýrla",
		(PlayerData[playerid][pBagimlilik] == 1) ? ("{2ECC71}Evet") : ("{FF0000}Hayýr"),
		formatInt(PlayerDrugData[playerid][Drugs], .iCurrencyChar = '\0'),
		formatInt(PlayerDrugData[playerid][Seeds], .iCurrencyChar = '\0'),
		formatInt(PlayerDrugData[playerid][TotalUsed], .iCurrencyChar = '\0'),
		formatInt(PlayerDrugData[playerid][TotalPlanted], .iCurrencyChar = '\0'),
		formatInt(PlayerDrugData[playerid][TotalHarvestedPlants], .iCurrencyChar = '\0'), formatInt(PlayerDrugData[playerid][TotalHarvestedGrams], .iCurrencyChar = '\0'),
		formatInt(PlayerDrugData[playerid][TotalGiven], .iCurrencyChar = '\0'),
		formatInt(PlayerDrugData[playerid][TotalReceived], .iCurrencyChar = '\0'),
		formatInt(PlayerDrugData[playerid][TotalBought], .iCurrencyChar = '\0'), formatInt(PlayerDrugData[playerid][TotalBoughtPrice]),
		formatInt(PlayerDrugData[playerid][TotalSold], .iCurrencyChar = '\0'), formatInt(PlayerDrugData[playerid][TotalSoldPrice])
	);

	ShowPlayerDialog(playerid, DIALOG_DRUG_STATS, DIALOG_STYLE_TABLIST, "Uyuþturucu Ýstatistikleri", dialog, "Seç", "Kapat");
	return 1;
}

ShowDealerMenu(playerid)
{
	new dialog[300], id = PlayerDrugData[playerid][DealerID];
	format(
		dialog,
		sizeof(dialog),
		"Ýþlem\tFiyat\tSizde Bulunan\n\
		{%06x}Uyuþturucu Tohumu Al\t{2ECC71}%s\t%s\n\
		{%06x}Uyuþturucu Satýn Al (%s gram satýcýda)\t{2ECC71}%s x gram\t%s gram\n\
		{%06x}Uyuþturucu Sat\t{2ECC71}%s x gram\t%s gram",
		(PlayerDrugData[playerid][Seeds] < SEED_LIMIT) ? 0xFFFFFFFF >>> 8 : 0xE74C3CFF >>> 8, formatInt(SEED_PRICE), formatInt(PlayerDrugData[playerid][Seeds], .iCurrencyChar = '\0'),
		(PlayerDrugData[playerid][Drugs] >= CARRY_LIMIT || DealerData[id][dealerDrugs] < 1) ? 0xE74C3CFF >>> 8 : 0xFFFFFFFF >>> 8, formatInt(DealerData[id][dealerDrugs], .iCurrencyChar = '\0'), formatInt(DRUG_BUY_PRICE), formatInt(PlayerDrugData[playerid][Drugs], .iCurrencyChar = '\0'),
		(PlayerDrugData[playerid][Drugs] > 0) ? 0xFFFFFFFF >>> 8 : 0xE74C3CFF >>> 8, formatInt(DRUG_SELL_PRICE), formatInt(PlayerDrugData[playerid][Drugs], .iCurrencyChar = '\0')
	);

	ShowPlayerDialog(playerid, DIALOG_DRUG_DEALER, DIALOG_STYLE_TABLIST_HEADERS, "Uyuþturucu Satýcýsý", dialog, "Seç", "Kapat");
	return 1;
}
Player_PlantCount(playerid)
{
	new count = 0, name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	foreach(new i : Plants) if(PlantData[i][plantedBy] == PlayerData[playerid][pID]) count++;
	return count;
}
Player_Init(playerid)
{
	new emptydata[E_PLAYER];
	PlayerDrugData[playerid] = emptydata;
	PlayerDrugData[playerid][DrugsOfferedBy] = INVALID_PLAYER_ID;
	RegenTimer[playerid] = EffectTimer[playerid] = -1;

	// load player
	new drugs, seeds, totalused, totalplanted, harvested[2], given, received, bought[2], sold[2];
	stmt_bind_value(LoadPlayer, 0, DB::TYPE_INT, PlayerData[playerid][pID]);
	stmt_bind_result_field(LoadPlayer, 0, DB::TYPE_INTEGER, drugs);
	stmt_bind_result_field(LoadPlayer, 1, DB::TYPE_INTEGER, seeds);
	stmt_bind_result_field(LoadPlayer, 2, DB::TYPE_INTEGER, totalused);
	stmt_bind_result_field(LoadPlayer, 3, DB::TYPE_INTEGER, totalplanted);
	stmt_bind_result_field(LoadPlayer, 4, DB::TYPE_INTEGER, harvested[0]);
    stmt_bind_result_field(LoadPlayer, 5, DB::TYPE_INTEGER, harvested[1]);
    stmt_bind_result_field(LoadPlayer, 6, DB::TYPE_INTEGER, given);
    stmt_bind_result_field(LoadPlayer, 7, DB::TYPE_INTEGER, received);
    stmt_bind_result_field(LoadPlayer, 8, DB::TYPE_INTEGER, bought[0]);
    stmt_bind_result_field(LoadPlayer, 9, DB::TYPE_INTEGER, bought[1]);
    stmt_bind_result_field(LoadPlayer, 10, DB::TYPE_INTEGER, sold[0]);
    stmt_bind_result_field(LoadPlayer, 11, DB::TYPE_INTEGER, sold[1]);

	if(stmt_execute(LoadPlayer))
	{
	    if(stmt_rows_left(LoadPlayer) > 0) {
	        stmt_fetch_row(LoadPlayer);

	        PlayerDrugData[playerid][Drugs] = drugs;
	        PlayerDrugData[playerid][Seeds] = seeds;
	        PlayerDrugData[playerid][TotalUsed] = totalused;
	        PlayerDrugData[playerid][TotalPlanted] = totalplanted;
	        PlayerDrugData[playerid][TotalHarvestedPlants] = harvested[0];
	        PlayerDrugData[playerid][TotalHarvestedGrams] = harvested[1];
	        PlayerDrugData[playerid][TotalGiven] = given;
	        PlayerDrugData[playerid][TotalReceived] = received;
	        PlayerDrugData[playerid][TotalBought] = bought[0];
	        PlayerDrugData[playerid][TotalBoughtPrice] = bought[1];
	        PlayerDrugData[playerid][TotalSold] = sold[0];
	        PlayerDrugData[playerid][TotalSoldPrice] = sold[1];
	    }else{
	        stmt_bind_value(InsertPlayer, 0, DB::TYPE_INT, PlayerData[playerid][pID]);
	        stmt_execute(InsertPlayer);
	    }
	}

	return 1;
}

Player_SaveDrugs(playerid)
{
    stmt_bind_value(SavePlayer, 0, DB::TYPE_INTEGER, PlayerDrugData[playerid][Drugs]);
	stmt_bind_value(SavePlayer, 1, DB::TYPE_INTEGER, PlayerDrugData[playerid][Seeds]);
	stmt_bind_value(SavePlayer, 2, DB::TYPE_INTEGER, PlayerDrugData[playerid][TotalUsed]);
	stmt_bind_value(SavePlayer, 3, DB::TYPE_INTEGER, PlayerDrugData[playerid][TotalPlanted]);
	stmt_bind_value(SavePlayer, 4, DB::TYPE_INTEGER, PlayerDrugData[playerid][TotalHarvestedPlants]);
	stmt_bind_value(SavePlayer, 5, DB::TYPE_INTEGER, PlayerDrugData[playerid][TotalHarvestedGrams]);
	stmt_bind_value(SavePlayer, 6, DB::TYPE_INTEGER, PlayerDrugData[playerid][TotalGiven]);
	stmt_bind_value(SavePlayer, 7, DB::TYPE_INTEGER, PlayerDrugData[playerid][TotalReceived]);
	stmt_bind_value(SavePlayer, 8, DB::TYPE_INTEGER, PlayerDrugData[playerid][TotalBought]);
	stmt_bind_value(SavePlayer, 9, DB::TYPE_INTEGER, PlayerDrugData[playerid][TotalBoughtPrice]);
	stmt_bind_value(SavePlayer, 10, DB::TYPE_INTEGER, PlayerDrugData[playerid][TotalSold]);
	stmt_bind_value(SavePlayer, 11, DB::TYPE_INTEGER, PlayerDrugData[playerid][TotalSoldPrice]);
	stmt_bind_value(SavePlayer, 12, DB::TYPE_INT, PlayerData[playerid][pID]);
	return stmt_execute(SavePlayer);
}
Player_GetName(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	return name;
}
Plant_GrowthPercentage(id)
{
	if(!Iter_Contains(Plants, id)) return 0;
	return (PlantData[id][plantGrowth] * 100) / PLANT_MAX_GROWTH;
}

Plant_Destroy(id)
{
	if(!Iter_Contains(Plants, id)) return 0;
	KillTimer(PlantData[id][plantTimer]);
	DestroyDynamicObject(PlantData[id][plantObj]);
	DestroyDynamic3DTextLabel(PlantData[id][plantLabel]);

	PlantData[id][plantObj] = PlantData[id][plantTimer] = -1;
	PlantData[id][plantLabel] = Text3D: -1;
	PlantData[id][gotLeaves] = false;

	Iter_Remove(Plants, id);
	return 1;
}
forward PlantGrowth(id);
public PlantGrowth(id)
{
    new label_string[128];
    PlantData[id][plantGrowth] += RandomEx(3, 7);

	if(PlantData[id][plantGrowth] >= PLANT_MAX_GROWTH) {
	    PlantData[id][plantGrowth] = PLANT_MAX_GROWTH;
	    KillTimer(PlantData[id][plantTimer]);
	    PlantData[id][plantTimer] = SetTimerEx("PlantRot", ROT_INTERVAL * 1000, false, "i", id);

	    new percentage = Plant_GrowthPercentage(id);
        format(label_string, sizeof(label_string), "Yetiþmiþ Uyuþturucu Tohumu (%d)\n\n{FFFFFF}Yerleþtiren: %s\nBüyüme: {%06x}%d%%\n\n{FFFFFF}/utohum topla", id, SQLName(PlantData[id][plantedBy], 0), (percentage < 25) ? 0xE74C3CFF >>> 8 : 0x2ECC71FF >>> 8, percentage);
		UpdateDynamic3DTextLabelText(PlantData[id][plantLabel], 0xF1C40FFF, label_string);

		SetDynamicObjectMaterial(PlantData[id][plantObj], 2, 2, "plants_TABLETOP", "CJ_PLANT", 0xFFD35400);
		new owner_id = GetPlayerIDWithSQLID(PlantData[id][plantedBy]);
    	if(owner_id != -1) BilgiMesajGonder(owner_id, "Yerleþtirdiðiniz uyuþturucu tohumu yetiþti, çürümeden önce onu topla!");
	}else{
	    new percentage = Plant_GrowthPercentage(id);
	    if(!PlantData[id][gotLeaves] && percentage >= 25)
	    {
	        SetDynamicObjectMaterial(PlantData[id][plantObj], 2, 2, "plants_TABLETOP", "CJ_PLANT", 0xFF2ECC71);
	        PlantData[id][gotLeaves] = true;
		}

	    format(label_string, sizeof(label_string), "Uyuþturucu Tohumu (%d)\n\n{FFFFFF}Yerleþtiren: %s\nBüyüme: {%06x}%d%%\n\n{FFFFFF}/utohum topla", id, SQLName(PlantData[id][plantedBy], 0), (percentage < 25) ? 0xE74C3CFF >>> 8 : 0x2ECC71FF >>> 8, percentage);
		UpdateDynamic3DTextLabelText(PlantData[id][plantLabel], 0xF1C40FFF, label_string);
	}

	return 1;
}

forward PlantRot(id);
public PlantRot(id)
{
    new owner_id = GetPlayerIDWithSQLID(PlantData[id][plantedBy]);
    if(owner_id != -1) BilgiMesajGonder(owner_id,"Ektiðiniz uyuþturucu tohumu çürüdü.");

    Plant_Destroy(id);
	return 1;
}
forward RegenHealth(playerid, amount);
public RegenHealth(playerid, amount)
{
	amount--;

	new Float: zirh;
	GetPlayerArmour(playerid, zirh);

	if(zirh + 2.5 < 95.0) ZirhAyarla(playerid, zirh + 2.5);
	if(amount > 0) {
		#if defined USE_DRUNKLEVEL
	    SetPlayerDrunkLevel(playerid, 4999);
		#endif

		RegenTimer[playerid] = SetTimerEx("RegenHealth", 500, false, "ii", playerid, amount);
	}else{
	    #if defined USE_DRUNKLEVEL
	    SetPlayerDrunkLevel(playerid, 0);
		#endif

	    if(RegenTimer[playerid] != -1)
		{
		    KillTimer(RegenTimer[playerid]);
		    RegenTimer[playerid] = -1;
		}
	}

	return 1;
}

forward RemoveEffects(playerid);
public RemoveEffects(playerid)
{
	#if defined USE_DRUNKLEVEL
	SetPlayerDrunkLevel(playerid, 0);
	#endif

	SetPlayerWeather(playerid, 10);
	if(EffectTimer[playerid] != -1)
	{
	    KillTimer(EffectTimer[playerid]);
	    EffectTimer[playerid] = -1;
	}

	return 1;
}

ConvertToMinutes(time)
{
    // http://forum.sa-mp.com/showpost.php?p=3223897&postcount=11
    new string[15];//-2000000000:00 could happen, so make the string 15 chars to avoid any errors
    format(string, sizeof(string), "%02d:%02d", time / 60, time % 60);
    return string;
}

IsPlayerNearBanker(playerid)
{
	foreach(new i : Bankers)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, BankerData[i][bankerX], BankerData[i][bankerY], BankerData[i][bankerZ])) return 1;
	}

	return 0;
}

GetClosestATM(playerid, Float: range = 3.0)
{
	new id = -1, Float: dist = range, Float: tempdist;
	foreach(new i : ATMs)
	{
	    tempdist = GetPlayerDistanceFromPoint(playerid, ATMData[i][atmX], ATMData[i][atmY], ATMData[i][atmZ]);

	    if(tempdist > range) continue;
		if(tempdist <= dist)
		{
			dist = tempdist;
			id = i;
		}
	}

	return id;
}

Bank_SaveLog(playerid, type, accid, toaccid, amount)
{
	if(type == TYPE_NONE) return 1;
	new query[256];

	switch(type)
	{
	    case TYPE_LOGIN, TYPE_PASSCHANGE: mysql_format(baglanti, query, sizeof(query), "INSERT INTO bank_logs SET AccountID=%d, Type=%d, Player='%e', Date=UNIX_TIMESTAMP()", accid, type, Player_GetName(playerid));
	    case TYPE_DEPOSIT, TYPE_WITHDRAW: mysql_format(baglanti, query, sizeof(query), "INSERT INTO bank_logs SET AccountID=%d, Type=%d, Player='%e', Amount=%d, Date=UNIX_TIMESTAMP()", accid, type, Player_GetName(playerid), amount);
		case TYPE_TRANSFER: mysql_format(baglanti, query, sizeof(query), "INSERT INTO bank_logs SET AccountID=%d, ToAccountID=%d, Type=%d, Player='%e', Amount=%d, Date=UNIX_TIMESTAMP()", accid, toaccid, type, Player_GetName(playerid), amount);
	}

	mysql_tquery(baglanti, query);
	return 1;
}

Bank_ShowMenu(playerid)
{
	new string[256], using_atm = GetPVarInt(playerid, "usingATM");
	if(CurrentAccountID[playerid] == -1) {
		format(string, sizeof(string), "{%06x}Hesap Oluþtur\t{2ECC71}%s\nBenim Hesaplarým\t{F1C40F}%d\nGiriþ Yap", (using_atm ? 0xE74C3CFF >>> 8 : 0xFFFFFFFF >>> 8), (using_atm ? ("") : formatInt(ACCOUNT_PRICE)), Bank_AccountCount(playerid));
		ShowPlayerDialog(playerid, DIALOG_BANK_MENU_NOLOGIN, DIALOG_STYLE_TABLIST, "{F1C40F}Banka: {FFFFFF}Menu", string, "Seç", "Kapat");
	}else{
	    new balance = Bank_GetBalance(CurrentAccountID[playerid]), menu_title[64];
		format(menu_title, sizeof(menu_title), "{F1C40F}Banka: {FFFFFF}Menu (Hesap Numarasý: {F1C40F}%d{FFFFFF})", CurrentAccountID[playerid]);

	    format(
			string,
			sizeof(string),
			"{%06x}Hesap Oluþtur\t{2ECC71}%s\nBenim Hesaplarým\t{F1C40F}%d\nPara Yatýr\t{2ECC71}%s\nPara Çek\t{2ECC71}%s\nPara Transfer\t{2ECC71}%s\n{%06x}Hesap Kayýtlarý\n{%06x}Þifre Deðiþtir\n{%06x}Hesap Sil\nÇýkýþ Yap",
			(using_atm ? 0xE74C3CFF >>> 8 : 0xFFFFFFFF >>> 8),
			(using_atm ? ("") : formatInt(ACCOUNT_PRICE)),
			Bank_AccountCount(playerid),
			formatInt(GetPlayerMoney(playerid)),
			formatInt(balance),
			formatInt(balance),
			(using_atm ? 0xE74C3CFF >>> 8 : 0xFFFFFFFF >>> 8),
			(using_atm ? 0xE74C3CFF >>> 8 : 0xFFFFFFFF >>> 8),
			(using_atm ? 0xE74C3CFF >>> 8 : 0xFFFFFFFF >>> 8)
		);

		ShowPlayerDialog(playerid, DIALOG_BANK_MENU, DIALOG_STYLE_TABLIST, menu_title, string, "Seç", "Kapat");
	}

	DeletePVar(playerid, "bankLoginAccount");
	DeletePVar(playerid, "bankTransferAccount");
	return 1;
}

Bank_ShowLogMenu(playerid)
{
	LogListType[playerid] = TYPE_NONE;
	LogListPage[playerid] = 0;
	ShowPlayerDialog(playerid, DIALOG_BANK_LOGS, DIALOG_STYLE_LIST, "{F1C40F}Banka: {FFFFFF}Kayýtlar", "Yatýrýlan Para Kayýtlarý\nÇekilen Para Kayýtlarý\nTransfer Edilen Para Kayýtlarý\nGiriþ Kayýtlarý\nÞifre Deðiþtirme Kayýtlarý", "Seç", "Geri");
	return 1;
}
Bank_AccountCount(playerid)
{
	new query[144], Cache: find_accounts;
	mysql_format(baglanti, query, sizeof(query), "SELECT null FROM bank_accounts WHERE Owner='%d' && Disabled=0", PlayerData[playerid][pID]);
	find_accounts = mysql_query(baglanti, query);

	new count = cache_num_rows();
	cache_delete(find_accounts);
	return count;
}

Bank_GetBalance(accountid)
{
	new query[144], Cache: get_balance;
	mysql_format(baglanti, query, sizeof(query), "SELECT Balance FROM bank_accounts WHERE ID=%d && Disabled=0", accountid);
	get_balance = mysql_query(baglanti, query);

	new balance;
	cache_get_value_name_int(0, "Balance", balance);
	cache_delete(get_balance);
	return balance;
}

Bank_GetOwner(accountid)
{
	new query[144], owner, Cache: get_owner;
	mysql_format(baglanti, query, sizeof(query), "SELECT Owner FROM bank_accounts WHERE ID=%d && Disabled=0", accountid);
	get_owner = mysql_query(baglanti, query);

	cache_get_value_name_int(0, "Owner", owner);
	cache_delete(get_owner);
	return owner;
}

Bank_ListAccounts(playerid)
{
    new query[256], Cache: get_accounts;
    mysql_format(baglanti, query, sizeof(query), "SELECT ID, Balance, LastAccess, FROM_UNIXTIME(CreatedOn, '%%d/%%m/%%Y %%H:%%i:%%s') AS Created, FROM_UNIXTIME(LastAccess, '%%d/%%m/%%Y %%H:%%i:%%s') AS Last FROM bank_accounts WHERE Owner='%d' && Disabled=0 ORDER BY CreatedOn DESC", PlayerData[playerid][pID]);
	get_accounts = mysql_query(baglanti, query);
    new rows = cache_num_rows();

	if(rows) {
	    new string[1024], acc_id, balance, last_access, cdate[24], ldate[24];
    	format(string, sizeof(string), "ID\tDenge\tOluþturulma\tSon Giriþ\n");
	    for(new i; i < rows; ++i)
	    {
	        cache_get_value_name_int(i, "ID", acc_id);
	        cache_get_value_name_int(i, "Balance", balance);
	        cache_get_value_name_int(i, "LastAccess", last_access);
        	cache_get_value_name(i, "Created", cdate);
        	cache_get_value_name(i, "Last", ldate);

	        format(string, sizeof(string), "%s{FFFFFF}%d\t{2ECC71}%s\t{FFFFFF}%s\t%s\n", string, acc_id, formatInt(balance), cdate, (last_access == 0) ? ("Yok") : ldate);
	    }

		ShowPlayerDialog(playerid, DIALOG_BANK_ACCOUNTS, DIALOG_STYLE_TABLIST_HEADERS, "{F1C40F}Banka: {FFFFFF}Hesaplarým", string, "Giriþ", "Geri");
	}else{
	    HataMesajGonder(playerid, "Hiç banka hesabýnýz yok.");
		Bank_ShowMenu(playerid);
	}

    cache_delete(get_accounts);
	return 1;
}

Bank_ShowLogs(playerid)
{
	new query[196], type = LogListType[playerid], Cache: bank_logs;
	mysql_format(baglanti, query, sizeof(query), "SELECT *, FROM_UNIXTIME(Date, '%%d/%%m/%%Y %%H:%%i:%%s') as ActionDate FROM bank_logs WHERE AccountID=%d && Type=%d ORDER BY Date DESC LIMIT %d, 15", CurrentAccountID[playerid], type, LogListPage[playerid] * 15);
	bank_logs = mysql_query(baglanti, query);

	new rows = cache_num_rows();
	if(rows) {
		new list[1512], title[96], name[MAX_PLAYER_NAME], date[24];
		switch(type)
		{
		    case TYPE_LOGIN:
			{
				format(list, sizeof(list), "By\tAction Date\n");
				format(title, sizeof(title), "{F1C40F}Banka: {FFFFFF}Giriþ Kayýtlarý (Sayfa %d)", LogListPage[playerid] + 1);
			}

			case TYPE_DEPOSIT:
			{
				format(list, sizeof(list), "Yatýran\tMiktar\tTarih\n");
				format(title, sizeof(title), "{F1C40F}Banka: {FFFFFF}Yatýrýlan Para Kayýtlarý (Sayfa %d)", LogListPage[playerid] + 1);
			}

			case TYPE_WITHDRAW:
			{
				format(list, sizeof(list), "Çeken\tMiktar\tTarih\n");
				format(title, sizeof(title), "{F1C40F}Banka: {FFFFFF}Çekilen Para Kayýtlarý (Sayfa %d)", LogListPage[playerid] + 1);
			}

			case TYPE_TRANSFER:
			{
				format(list, sizeof(list), "Transfer Eden\tHesap Numarasý\tMiktar\tTarih\n");
				format(title, sizeof(title), "{F1C40F}Banka: {FFFFFF}Transfer Edilen Para Kayýtlarý (Sayfa %d)", LogListPage[playerid] + 1);
			}

			case TYPE_PASSCHANGE:
			{
				format(list, sizeof(list), "Deðiþtiren\tTarih\n");
				format(title, sizeof(title), "{F1C40F}Banka: {FFFFFF}Þifre Deðiþtirme Kayýtlarý (Sayfa %d)", LogListPage[playerid] + 1);
			}
		}

		new amount, to_acc_id;
	    for(new i; i < rows; ++i)
	    {
	        cache_get_value_name(i, "Player", name);
        	cache_get_value_name(i, "ActionDate", date);

            switch(type)
			{
			    case TYPE_LOGIN:
				{
					format(list, sizeof(list), "%s%s\t%s\n", list, name, date);
				}

				case TYPE_DEPOSIT:
				{
				    cache_get_value_name_int(i, "Amount", amount);
					format(list, sizeof(list), "%s%s\t{2ECC71}%s\t%s\n", list, name, formatInt(amount), date);
				}

				case TYPE_WITHDRAW:
				{
				    cache_get_value_name_int(i, "Amount", amount);
					format(list, sizeof(list), "%s%s\t{2ECC71}%s\t%s\n", list, name, formatInt(amount), date);
				}

				case TYPE_TRANSFER:
				{
				    cache_get_value_name_int(i, "ToAccountID", to_acc_id);
				    cache_get_value_name_int(i, "Amount", amount);

					format(list, sizeof(list), "%s%s\t%d\t{2ECC71}%s\t%s\n", list, name, to_acc_id, formatInt(amount), date);
				}

				case TYPE_PASSCHANGE:
				{
					format(list, sizeof(list), "%s%s\t%s\n", list, name, date);
				}
			}
	    }

		ShowPlayerDialog(playerid, DIALOG_BANK_LOG_PAGE, DIALOG_STYLE_TABLIST_HEADERS, title, list, "Sonraki", "Geri");
	}else{
		HataMesajGonder(playerid, "Daha fazla kayýt bulunamadý.");
		Bank_ShowLogMenu(playerid);
	}

	cache_delete(bank_logs);
	return 1;
}
forward LoadBankers();
public LoadBankers()
{
	new rows = cache_num_rows();
	if(rows)
	{
	    new id, label_string[80];
	    for(new i; i < rows; i++)
		{
		    cache_get_value_name_int(i, "ID", id);
		    cache_get_value_name_int(i, "Skin", BankerData[id][Skin]);
		    cache_get_value_name_float(i, "PosX", BankerData[id][bankerX]);
		    cache_get_value_name_float(i, "PosY", BankerData[id][bankerY]);
		    cache_get_value_name_float(i, "PosZ", BankerData[id][bankerZ]);
		    cache_get_value_name_float(i, "PosA", BankerData[id][bankerA]);
		    cache_get_value_name_int(i, "Virtual", BankerData[id][bankerVw]);

		    BankerData[id][bankerActorID] = CreateActor(BankerData[id][Skin], BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ], BankerData[id][bankerA]);
		    if(!IsValidActor(BankerData[id][bankerActorID])) {
				printf("  [Bank System] Couldn't create an actor for banker ID %d.", id);
			}else{
			    SetActorInvulnerable(BankerData[id][bankerActorID], true); // people may use a version where actors aren't invulnerable by default
			    SetActorVirtualWorld(BankerData[id][bankerActorID], BankerData[id][bankerVw]);
			}

			#if defined BANKER_USE_MAPICON
			BankerData[id][bankerIconID] = CreateDynamicMapIcon(BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ], 58, 0, .streamdistance = BANKER_ICON_RANGE);
			#endif

			format(label_string, sizeof(label_string), "Bankacý (%d)\n\n{F1C40F}ALT {FFFFFF}tuþuna basarak etkileþime geçebilirsiniz.", id);
			BankerData[id][bankerLabel] = CreateDynamic3DTextLabel(label_string, 0x1ABC9CFF, BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ] + 0.25, 5.0, .testlos = 1);

			Iter_Add(Bankers, id);
		}
	}

	printf("» Toplam %d bankacý yüklenmiþtir.", Iter_Count(Bankers));
	return 1;
}

forward LoadATMs();
public LoadATMs()
{
	new rows = cache_num_rows();
	if(rows)
	{
	    new id, label_string[64];
	    #if defined ROBBABLE_ATMS
		new dataArray[E_ATMDATA];
	    #endif

	    for(new i; i < rows; i++)
		{
		    cache_get_value_name_int(i, "ID", id);
	     	cache_get_value_name_float(i, "PosX", ATMData[id][atmX]);
	     	cache_get_value_name_float(i, "PosY", ATMData[id][atmY]);
	     	cache_get_value_name_float(i, "PosZ", ATMData[id][atmZ]);
	     	cache_get_value_name_float(i, "RotX", ATMData[id][atmRX]);
	     	cache_get_value_name_float(i, "RotY", ATMData[id][atmRY]);
	     	cache_get_value_name_float(i, "RotZ", ATMData[id][atmRZ]);

		    ATMData[id][atmObjID] = CreateDynamicObject(-3002, ATMData[id][atmX], ATMData[id][atmY], ATMData[id][atmZ], ATMData[id][atmRX], ATMData[id][atmRY], ATMData[id][atmRZ]);

			#if defined ROBBABLE_ATMS
		    if(IsValidDynamicObject(ATMData[id][atmObjID])) {
		        format(dataArray[IDString], 8, "atm_sys");
		        dataArray[refID] = id;

		        Streamer_SetArrayData(STREAMER_TYPE_OBJECT, ATMData[id][atmObjID], E_STREAMER_EXTRA_ID, dataArray);
		    }else{
				printf("  [Bank System] Couldn't create an ATM object for ATM ID %d.", id);
		    }
			#else
			if(!IsValidDynamicObject(ATMData[id][atmObjID])) printf("  [Bank System] Couldn't create an ATM object for ATM ID %d.", id);
			#endif

			#if defined ATM_USE_MAPICON
			ATMData[id][atmIconID] = CreateDynamicMapIcon(ATMData[id][atmX], ATMData[id][atmY], ATMData[id][atmZ], 52, 0, .streamdistance = ATM_ICON_RANGE);
			#endif

			format(label_string, sizeof(label_string), "ATM (%d)\n\n{FFFFFF}Etkileþim {F1C40F}[ALT]", id);
			ATMData[id][atmLabel] = CreateDynamic3DTextLabel(label_string, 0x1ABC9CFF, ATMData[id][atmX], ATMData[id][atmY], ATMData[id][atmZ] + 0.85, 5.0, .testlos = 1);

			Iter_Add(ATMs, id);
		}
	}

    printf("» Toplam %d ATM yüklenmiþtir.", Iter_Count(ATMs));
	return 1;
}

forward OnBankAccountCreated(playerid, pass[]);
public OnBankAccountCreated(playerid, pass[])
{
	ParaVer(playerid, -ACCOUNT_PRICE);

	new id = cache_insert_id();
	MesajGonder(playerid, "Banka hesabýnýz oluþturuldu.");

	BilgiMesajGonder(playerid, "Hesap Numarasý: %d", id);
	BilgiMesajGonder(playerid, "Hesap Þifreniz: %s", pass);
	return 1;
}

forward OnBankAccountLogin(playerid, id);
public OnBankAccountLogin(playerid, id)
{
	if(cache_num_rows() > 0) {
	    new owner, last_access, ldate[24];
	    cache_get_value_name_int(0, "Owner", owner);
	    cache_get_value_name_int(0, "LastAccess", last_access);
	    cache_get_value_name(0, "Last", ldate);

	    BilgiMesajGonder(playerid, "Bu hesap %s adlý kiþiye kayýtlýdýr.", SQLName(owner));
	    BilgiMesajGonder(playerid, "Son Aktiflik: {F1C40F}%s", (last_access == 0) ? ("Never") : ldate);

	    CurrentAccountID[playerid] = id;
	    Bank_ShowMenu(playerid);

	    new query[96];
	    mysql_format(baglanti, query, sizeof(query), "UPDATE bank_accounts SET LastAccess=UNIX_TIMESTAMP() WHERE ID=%d && Disabled=0", id);
	    mysql_tquery(baglanti, query);

	    Bank_SaveLog(playerid, TYPE_LOGIN, id, -1, 0);
	}else{
	    HataMesajGonder(playerid, "Yanlýþ þifre veya hesap numarasý girdiniz.");
	    Bank_ShowMenu(playerid);
	}

	return 1;
}

forward OnBankAccountDeposit(playerid, amount);
public OnBankAccountDeposit(playerid, amount)
{
	if(cache_affected_rows() > 0) {
	    MesajGonder(playerid, "Banka hesabýnýza {2ECC71}%s {FFFFFF}miktar para yatýrdýnýz.", FormatNumber(amount));

	    ParaVer(playerid, -amount);
	    Bank_SaveLog(playerid, TYPE_DEPOSIT, CurrentAccountID[playerid], -1, amount);
	}else{
	    HataMesajGonder(playerid, "Hata oluþtu.");
	}

	Bank_ShowMenu(playerid);
	return 1;
}

forward OnBankAccountWithdraw(playerid, amount);
public OnBankAccountWithdraw(playerid, amount)
{
	if(cache_affected_rows() > 0) {
	    MesajGonder(playerid, "Banka hesabýnýzdan {2ECC71}%s {FFFFFF}miktar para çektiniz.", FormatNumber(amount));

	    ParaVer(playerid, amount);
	    Bank_SaveLog(playerid, TYPE_WITHDRAW, CurrentAccountID[playerid], -1, amount);
	}else{
	    HataMesajGonder(playerid, "Hata oluþtu.");
	}

    Bank_ShowMenu(playerid);
	return 1;
}

forward OnBankAccountTransfer(playerid, id, amount);
public OnBankAccountTransfer(playerid, id, amount)
{
	if(cache_affected_rows() > 0) {
		new query[144];
		mysql_format(baglanti, query, sizeof(query), "UPDATE bank_accounts SET Balance=Balance-%d WHERE ID=%d && Disabled=0", amount, CurrentAccountID[playerid]);
		mysql_tquery(baglanti, query, "OnBankAccountTransferDone", "iii", playerid, id, amount);
	}else{
	    HataMesajGonder(playerid, "Transfer baþarýsýz, hatalý hesap numarasý girmiþ olabilirsiniz.");
	    Bank_ShowMenu(playerid);
	}

	return 1;
}

forward OnBankAccountTransferDone(playerid, id, amount);
public OnBankAccountTransferDone(playerid, id, amount)
{
	if(cache_affected_rows() > 0) {
	    MesajGonder(playerid, "{F1C40F}%d {FFFFFF}numaralý hesaba {2ECC71}%s {FFFFFF}miktar para transfer ettiniz.", id, FormatNumber(amount));

		Bank_SaveLog(playerid, TYPE_TRANSFER, CurrentAccountID[playerid], id, amount);
	}else{
	   HataMesajGonder(playerid, "Transfer baþarýsýz, hatalý hesap numarasý girmiþ olabilirsiniz.");

	}

    Bank_ShowMenu(playerid);
	return 1;
}

forward OnBankAccountPassChange(playerid, newpass[]);
public OnBankAccountPassChange(playerid, newpass[])
{
	if(cache_affected_rows() > 0) {
	    BilgiMesajGonder(playerid, "Þifre '%s' olarak deðiþtirildi.", newpass);

        Bank_SaveLog(playerid, TYPE_PASSCHANGE, CurrentAccountID[playerid], -1, 0);
	}else{
	    HataMesajGonder(playerid, "Þifre deðiþtirme baþarýsýz.");
	}

    Bank_ShowMenu(playerid);
	return 1;
}

forward OnBankAccountDeleted(playerid, id, amount);
public OnBankAccountDeleted(playerid, id, amount)
{
    if(cache_affected_rows() > 0) {
        ParaVer(playerid, amount);

        foreach(new i : Player)
        {
            if(i == playerid) continue;
            if(CurrentAccountID[i] == id) CurrentAccountID[i] = -1;
        }

	    BilgiMesajGonder(playerid, "Banka hesabýnýz silindi.");
	}else{
	    SendClientMessage(playerid, 0xE74C3CFF, "Hata oluþtu.");
	}

	CurrentAccountID[playerid] = -1;
    Bank_ShowMenu(playerid);
	return 1;
}

forward OnBankAccountAdminEdit(playerid);
public OnBankAccountAdminEdit(playerid)
{
    if(cache_affected_rows() > 0) {
        MesajGonder(playerid, "Hesap düzenlendi.");
	}else{
	    SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Account editing failed. (No affected rows)");
	}

	return 1;
}
Ticket_Add(suspectid, price, reason[], memur[])
{
    new
        string[1024];


    for (new i = 0; i != MAX_PLAYER_TICKETS; i ++)
    {
        if (!TicketData[suspectid][i][ticketExists])
        {
            TicketData[suspectid][i][ticketExists] = true;
            TicketData[suspectid][i][ticketFee] = price;
			format(TicketData[suspectid][i][ticketMemur], 24, memur);
            format(TicketData[suspectid][i][ticketDate], 36, ReturnDate());
            format(TicketData[suspectid][i][ticketReason], 64, reason);

            format(string, sizeof(string), "INSERT INTO `tickets` (`ID`, `ticketFee`, `ticketDate`, `ticketReason`, `Memur`) VALUES('%d', '%d', '%s', '%s', '%s')", PlayerData[suspectid][pID], price, TicketData[suspectid][i][ticketDate], SQL_ReturnEscaped(reason), memur);
            mysql_tquery(baglanti, string, "OnTicketCreated", "dd", suspectid, i);
            return i;
        }
    }
    return -1;
}

Ticket_Remove(playerid, ticketid)
{
    if (ticketid != -1 && TicketData[playerid][ticketid][ticketExists])
    {
        new
            string[100];

        format(string, sizeof(string), "DELETE FROM `tickets` WHERE `ID` = '%d' AND `ticketID` = '%d'", PlayerData[playerid][pID], TicketData[playerid][ticketid][ticketID]);
        mysql_tquery(baglanti, string);

        TicketData[playerid][ticketid][ticketExists] = false;
        TicketData[playerid][ticketid][ticketID] = 0;
        TicketData[playerid][ticketid][ticketFee] = 0;
        format(TicketData[playerid][ticketid][ticketMemur], 24, "");
    }
    return 1;
}
forward OnTicketCreated(playerid, ticketid);
public OnTicketCreated(playerid, ticketid)
{
    TicketData[playerid][ticketid][ticketID] = cache_insert_id();
    return 1;
}
stock GetFreeObjectID()
{
	new id = -1;
	for(new i; i < MAX_COP_OBJECTS; i++)
	{
	    if(!CopObjectData[i][ObjCreated])
	    {
	        id = i;
	        break;
	    }
	}

	return id;
}

stock GetPlayerSpeed(vid)
{
    new Float:vx, Float:vy, Float:vz, Float:vel;
	vel = GetVehicleVelocity(vid, vx, vy, vz);
	vel = (floatsqroot(((vx*vx)+(vy*vy))+(vz*vz))* 181.5);
	return floatround(vel);
}

stock InsertObjectToDB(id)
{
    stmt_bind_value(AddObject, 0, DB::TYPE_INTEGER, id);
	stmt_bind_value(AddObject, 1, DB::TYPE_STRING, CopObjectData[id][Owner]);
	stmt_bind_value(AddObject, 2, DB::TYPE_INTEGER, CopObjectData[id][Type]);
	stmt_bind_value(AddObject, 3, DB::TYPE_INTEGER, CopObjectData[id][ObjData]);
    stmt_bind_value(AddObject, 4, DB::TYPE_INTEGER, CopObjectData[id][ObjModel]);
	stmt_bind_value(AddObject, 5, DB::TYPE_FLOAT, CopObjectData[id][ObjX]);
	stmt_bind_value(AddObject, 6, DB::TYPE_FLOAT, CopObjectData[id][ObjY]);
	stmt_bind_value(AddObject, 7, DB::TYPE_FLOAT, CopObjectData[id][ObjZ]);
	stmt_bind_value(AddObject, 8, DB::TYPE_FLOAT, CopObjectData[id][ObjRX]);
	stmt_bind_value(AddObject, 9, DB::TYPE_FLOAT, CopObjectData[id][ObjRY]);
	stmt_bind_value(AddObject, 10, DB::TYPE_FLOAT, CopObjectData[id][ObjRZ]);
	stmt_bind_value(AddObject, 11, DB::TYPE_INTEGER, CopObjectData[id][ObjInterior]);
	stmt_bind_value(AddObject, 12, DB::TYPE_INTEGER, CopObjectData[id][ObjVirtualWorld]);
	stmt_execute(AddObject);
	return 1;
}

stock SaveObjectToDB(id)
{
    stmt_bind_value(UpdateObject, 0, DB::TYPE_FLOAT, CopObjectData[id][ObjX]);
	stmt_bind_value(UpdateObject, 1, DB::TYPE_FLOAT, CopObjectData[id][ObjY]);
	stmt_bind_value(UpdateObject, 2, DB::TYPE_FLOAT, CopObjectData[id][ObjZ]);
	stmt_bind_value(UpdateObject, 3, DB::TYPE_FLOAT, CopObjectData[id][ObjRX]);
	stmt_bind_value(UpdateObject, 4, DB::TYPE_FLOAT, CopObjectData[id][ObjRY]);
	stmt_bind_value(UpdateObject, 5, DB::TYPE_FLOAT, CopObjectData[id][ObjRZ]);
	stmt_bind_value(UpdateObject, 6, DB::TYPE_INTEGER, id);
	stmt_execute(UpdateObject);
	return 1;
}
encode_tires(tire1, tire2, tire3, tire4) return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);
stock RemoveBuildings(playerid)
{
  //bamas kulüp
  RemoveBuildingForPlayer(playerid, 1283, 1750.270, -1719.630, 15.625, 0.250);
  RemoveBuildingForPlayer(playerid, 4027, 1783.099, -1702.300, 14.351, 0.250);
  RemoveBuildingForPlayer(playerid, 4076, 1783.099, -1702.300, 14.351, 0.250);
  RemoveBuildingForPlayer(playerid, 1531, 1799.130, -1708.770, 14.101, 0.250);
  RemoveBuildingForPlayer(playerid, 4018, 1791.800, -1716.979, 12.523, 0.250);
  RemoveBuildingForPlayer(playerid, 4075, 1791.800, -1716.979, 12.523, 0.250);

  //cankurtaran kulübe santamaria
  RemoveBuildingForPlayer(playerid, 3615, 200.483, -1875.000, 3.078, 0.250);
  RemoveBuildingForPlayer(playerid, 3778, 200.483, -1875.000, 3.078, 0.250);
  RemoveBuildingForPlayer(playerid, 3615, 245.539, -1875.000, 2.687, 0.250);
  RemoveBuildingForPlayer(playerid, 3778, 245.539, -1875.000, 2.687, 0.250);
  RemoveBuildingForPlayer(playerid, 3615, 289.226, -1875.000, 3.203, 0.250);
  RemoveBuildingForPlayer(playerid, 3778, 289.226, -1875.000, 3.203, 0.250);
  RemoveBuildingForPlayer(playerid, 3615, 337.453, -1875.000, 3.406, 0.250);
  RemoveBuildingForPlayer(playerid, 3778, 337.453, -1875.000, 3.406, 0.250);
  RemoveBuildingForPlayer(playerid, 3615, 445.031, -1875.000, 3.742, 0.250);
  RemoveBuildingForPlayer(playerid, 3778, 445.031, -1875.000, 3.742, 0.250);
  RemoveBuildingForPlayer(playerid, 3615, 498.484, -1875.000, 4.046, 0.250);
  RemoveBuildingForPlayer(playerid, 3778, 498.484, -1875.000, 4.046, 0.250);
  RemoveBuildingForPlayer(playerid, 3615, 553.351, -1875.000, 4.789, 0.250);
  RemoveBuildingForPlayer(playerid, 3778, 553.351, -1875.000, 4.789, 0.250);
  RemoveBuildingForPlayer(playerid, 3615, 609.546, -1875.000, 5.140, 0.250);
  RemoveBuildingForPlayer(playerid, 3778, 609.546, -1875.000, 5.140, 0.250);

  //Elektronik unitystion
  RemoveBuildingForPlayer(playerid, 5059, 1841.109, -1856.050, 14.937, 0.250);
  RemoveBuildingForPlayer(playerid, 5040, 1845.790, -1855.650, 15.984, 0.250);
  RemoveBuildingForPlayer(playerid, 5041, 1845.790, -1855.650, 15.984, 0.250);
  RemoveBuildingForPlayer(playerid, 5042, 1850.569, -1855.680, 14.367, 0.250);
  RemoveBuildingForPlayer(playerid, 5043, 1843.369, -1856.319, 13.875, 0.250);

  //vinewood tabela
  RemoveBuildingForPlayer(playerid, 13831, 1413.410, -804.742, 83.437, 0.250);
  RemoveBuildingForPlayer(playerid, 13759, 1413.410, -804.742, 83.437, 0.250);

	// Fakir Ev 2
	RemoveBuildingForPlayer(playerid, 2251, 266.4531, 303.3672, 998.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 14867, 270.2813, 302.5547, 999.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1720, 272.9063, 304.7891, 998.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 14870, 273.1641, 303.1719, 1000.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 2251, 273.9922, 303.3672, 998.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 14868, 274.1328, 304.5078, 1001.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 948, 266.5703, 306.4453, 998.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 14866, 270.1172, 307.6094, 998.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 14869, 273.8125, 305.0156, 998.9531, 0.25);

	// Fakir Ev 3
	RemoveBuildingForPlayer(playerid, 2865, 2499.5000, -1712.2188, 1014.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2821, 2500.9297, -1710.3516, 1014.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 1509, 2501.1953, -1710.6953, 1015.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 2277, 2494.7578, -1705.3281, 1018.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1512, 2500.8906, -1706.5703, 1015.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 1512, 2501.1172, -1705.4766, 1015.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 1509, 2501.1953, -1706.8594, 1015.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 1520, 2501.2969, -1707.2344, 1014.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 1520, 2501.2969, -1707.3594, 1014.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 2830, 2491.8359, -1702.9375, 1014.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 2306, 2491.8359, -1701.2813, 1017.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 1794, 2492.9688, -1701.8516, 1017.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 2306, 2494.0156, -1701.3125, 1017.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 2247, 2494.1172, -1700.3359, 1018.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 14478, 2494.4297, -1698.3359, 1014.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1740, 2495.2891, -1704.4922, 1017.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 2816, 2494.8047, -1702.5156, 1018.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 2272, 2496.2188, -1702.5234, 1018.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 14477, 2501.0703, -1697.6172, 1016.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 14490, 2501.0703, -1697.6172, 1016.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 14491, 2501.0703, -1697.6172, 1016.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 2252, 2493.0469, -1697.1875, 1014.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 2827, 2497.6563, -1697.0703, 1014.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 14489, 2490.4453, -1694.8672, 1015.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 2028, 2491.3438, -1694.7656, 1013.8359, 0.25);

	// Fakir Ev 4

	RemoveBuildingForPlayer(playerid, 15028, 2263.1250, -1138.2422, 1049.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 15026, 2264.9063, -1137.7656, 1051.3594, 0.25);

	// Fakir Ev 5

	RemoveBuildingForPlayer(playerid, 15028, 2263.1250, -1138.2422, 1049.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 15026, 2264.9063, -1137.7656, 1051.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 15032, 2278.5547, -1136.6250, 1051.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 15036, 2278.5859, -1135.2266, 1051.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 15051, 2279.9375, -1135.8203, 1049.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 1764, 2286.1250, -1138.4766, 1049.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 15037, 2280.5703, -1137.7422, 1050.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 2099, 2281.1953, -1136.0156, 1049.8828, 0.25);

	// Fakir Ev 6

	RemoveBuildingForPlayer(playerid, 2046, 2806.2266, -1174.5703, 1026.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 2049, 2805.2109, -1173.4922, 1026.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2241, 2805.6875, -1173.5156, 1025.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2060, 2810.3047, -1172.8516, 1025.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2060, 2810.3047, -1172.8516, 1025.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 2060, 2810.3047, -1172.8516, 1024.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2060, 2810.3047, -1172.8516, 1024.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2060, 2811.6016, -1172.8516, 1024.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2060, 2811.6016, -1172.8516, 1024.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2060, 2811.6016, -1172.8516, 1025.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 2060, 2811.6016, -1172.8516, 1025.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2048, 2805.2109, -1172.0547, 1026.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 2055, 2805.1953, -1170.5391, 1026.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 2060, 2810.0234, -1171.2266, 1024.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2064, 2810.8359, -1171.8984, 1025.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2068, 2809.2031, -1169.3672, 1027.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 2069, 2806.3906, -1166.8203, 1024.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1764, 2808.6563, -1166.9531, 1024.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 2100, 2805.5078, -1165.5625, 1024.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 2276, 2809.2109, -1165.2734, 1026.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1821, 2810.5938, -1167.6172, 1024.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 2053, 2810.6094, -1167.5781, 1024.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 2058, 2809.6406, -1165.3359, 1024.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 2272, 2811.3438, -1165.2734, 1026.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 2297, 2811.0234, -1165.0625, 1024.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 1765, 2811.4766, -1168.4063, 1024.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 2241, 2811.6875, -1168.5078, 1028.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 2059, 2814.8359, -1173.4766, 1025.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 2116, 2814.3047, -1173.4219, 1024.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 2050, 2813.1250, -1173.3359, 1026.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 1736, 2812.8281, -1172.2969, 1027.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 2051, 2813.1250, -1171.2891, 1026.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2813.9531, -1172.4609, 1025.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2815.3828, -1172.4844, 1025.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 2275, 2812.6094, -1168.1094, 1026.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 2156, 2813.6484, -1167.0000, 1024.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 2255, 2814.5703, -1169.2891, 1029.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 2047, 2817.3125, -1170.9688, 1031.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 2160, 2815.8984, -1164.9063, 1024.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 2159, 2817.2656, -1164.9063, 1024.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 2157, 2818.7109, -1173.9531, 1024.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 2157, 2818.6406, -1164.9063, 1024.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 2300, 2818.6484, -1166.5078, 1028.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 2046, 2819.4453, -1174.0000, 1026.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 2091, 2819.8047, -1165.6641, 1028.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2157, 2820.6328, -1167.3125, 1024.5703, 0.25);

	// Fakir Ev 7

	RemoveBuildingForPlayer(playerid, 2248, 2235.8281, -1081.6484, 1048.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 2248, 2239.2266, -1081.6484, 1048.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 1798, 2242.0469, -1078.4297, 1048.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 1798, 2244.5469, -1078.4297, 1048.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 2248, 2235.8281, -1070.2188, 1048.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 2236.0391, -1068.9063, 1048.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 2249, 2236.1406, -1064.1953, 1048.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 2264, 2239.0156, -1071.6094, 1050.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 15057, 2240.6016, -1072.7031, 1048.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 2270, 2238.9063, -1068.9844, 1050.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 2248, 2239.2188, -1070.2188, 1048.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 2280, 2240.3203, -1070.8906, 1050.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2240.7344, -1069.5156, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2526, 2237.2500, -1066.5391, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2237.9063, -1064.2891, 1047.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 2238.8516, -1068.1563, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2249, 2238.9531, -1064.8125, 1050.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 2269, 2240.3203, -1068.4453, 1050.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 2108, 2240.7734, -1066.3047, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1741, 2241.3125, -1072.4688, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2297, 2242.1719, -1066.2266, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1822, 2243.3281, -1067.8281, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2243.8203, -1073.1875, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2271, 2245.3203, -1068.4453, 1050.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2245.0313, -1067.6094, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2108, 2244.7969, -1066.2734, 1048.0234, 0.25);

	// Fakir Ev 8

	RemoveBuildingForPlayer(playerid, 2158, 305.2188, 1120.2109, 1082.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2330, 308.6953, 1120.8203, 1082.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 1802, 307.1875, 1121.8281, 1082.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 2846, 309.9844, 1121.4063, 1082.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 2840, 309.8125, 1123.4766, 1082.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2855, 309.0391, 1124.5547, 1082.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 1720, 309.8594, 1124.5938, 1082.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 1750, 315.6797, 1116.6563, 1082.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2867, 318.0703, 1122.9844, 1082.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 2858, 321.4141, 1122.4063, 1082.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 2855, 316.2578, 1124.5469, 1083.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2855, 316.3359, 1124.5547, 1082.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 2855, 316.4688, 1125.0313, 1083.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2855, 316.4688, 1125.0313, 1082.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 2855, 316.7266, 1124.5547, 1082.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 2855, 316.7266, 1124.5547, 1083.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2852, 316.5469, 1124.7031, 1083.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1728, 319.0469, 1124.3047, 1082.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 2262, 317.7266, 1124.8047, 1084.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 2844, 321.6406, 1127.9375, 1082.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 1793, 321.3828, 1128.4453, 1082.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 2859, 324.4453, 1118.9844, 1082.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 2860, 324.6094, 1120.7969, 1082.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 2103, 327.0391, 1116.9766, 1082.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1710, 326.2109, 1121.2656, 1082.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 2147, 331.9922, 1118.8672, 1082.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 2338, 334.3906, 1118.8203, 1082.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2337, 334.3906, 1119.8125, 1082.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2170, 334.4531, 1121.8281, 1082.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 2116, 331.4922, 1122.5469, 1082.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2857, 322.2422, 1123.7109, 1082.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2295, 326.8438, 1124.4844, 1082.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 2336, 334.2500, 1123.8672, 1082.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2335, 334.2422, 1124.8672, 1082.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2334, 334.2422, 1125.8672, 1082.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2852, 321.6719, 1130.3516, 1083.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 1728, 325.5078, 1130.8516, 1082.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2819, 323.4453, 1131.1250, 1082.8984, 0.25);

	// Fakir Ev 9

	RemoveBuildingForPlayer(playerid, 16408, 418.2266, 2538.8516, 11.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 1810, 418.7344, 2538.7578, 8.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 2147, 413.9688, 2538.2188, 8.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1748, 418.2734, 2541.0625, 9.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 1810, 417.6328, 2542.5000, 8.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1812, 416.2422, 2540.3359, 8.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2115, 418.6875, 2539.5938, 8.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 1810, 418.2031, 2539.9063, 8.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1738, 420.1328, 2542.8750, 9.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1763, 421.0781, 2540.8125, 8.9844, 0.25);

	// Orta Ev 1

	RemoveBuildingForPlayer(playerid, 1741, 2261.6953, -1223.0781, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2258.1406, -1220.5859, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2090, 2258.5938, -1221.5469, 1048.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 2249, 2251.3594, -1218.1797, 1048.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 2254.4063, -1218.2734, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2250.3047, -1213.9375, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2526, 2252.4297, -1215.4531, 1048.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 2254.1953, -1215.4531, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2297, 2255.4219, -1213.5313, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2248, 2262.3906, -1215.5469, 1048.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 1816, 2261.4141, -1213.4531, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2249, 2247.2969, -1212.1641, 1049.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 2249, 2247.2969, -1208.8594, 1049.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 2109, 2250.2813, -1212.2500, 1048.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2249.2344, -1211.4531, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2250.3047, -1210.8984, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2319, 2250.3438, -1206.9609, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1760, 2261.4609, -1212.0625, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2126, 2258.1094, -1210.3750, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 15044, 2255.0938, -1209.7813, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2247, 2258.4766, -1209.7891, 1048.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 2099, 2262.8047, -1208.4922, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2254, 2254.1172, -1206.5000, 1050.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 2254.6328, -1207.2734, 1048.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 2252, 2256.2109, -1206.1016, 1048.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 2235, 2256.2188, -1206.8594, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1760, 2257.6172, -1207.7266, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2235, 2261.4297, -1206.2031, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2252, 2262.1172, -1206.1016, 1048.8281, 0.25);

	// Orta Ev 2

	RemoveBuildingForPlayer(playerid, 2241, 2194.5469, -1226.4844, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2526, 2191.8750, -1225.3594, 1048.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 2191.8750, -1223.5938, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2241, 2194.5469, -1221.7969, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 2194.6953, -1223.1172, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2278, 2194.6406, -1221.5859, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2095, 2186.2109, -1219.1563, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2186.2500, -1220.3203, 1048.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2189.5000, -1220.3203, 1048.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2095, 2189.6250, -1219.1563, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2108, 2192.0547, -1219.5234, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2108, 2194.3359, -1219.5234, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2280, 2196.8828, -1219.9688, 1050.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2199.1875, -1219.0078, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1717, 2187.2422, -1215.6719, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2090, 2188.4453, -1217.1797, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2188.4688, -1213.0234, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2281, 2196.1484, -1214.6797, 1050.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 2298, 2197.2734, -1216.6250, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2197.2500, -1212.8516, 1048.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 2259, 2198.5859, -1213.1484, 1050.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 2828, 2198.5391, -1212.8359, 1048.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2199.9375, -1212.8516, 1048.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 2832, 2181.5000, -1206.5234, 1049.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 2134, 2181.6250, -1207.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2132, 2181.6328, -1205.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2339, 2181.6250, -1206.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2131, 2184.6250, -1207.8594, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2183.5625, -1204.2344, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2115, 2184.6641, -1204.1719, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2299, 2187.6250, -1212.1563, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2826, 2186.4531, -1210.5625, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2185.7109, -1209.4063, 1048.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 2259, 2185.3984, -1209.9609, 1050.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 2328, 2186.4375, -1210.1719, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2255, 2188.1563, -1209.1406, 1050.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2185.8047, -1205.2656, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2281, 2187.8516, -1207.1250, 1050.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2069, 2188.2109, -1207.5703, 1048.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2328, 2189.4531, -1210.1719, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2280, 2189.8984, -1207.8438, 1050.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 2249, 2190.2188, -1209.3828, 1049.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 2108, 2192.0547, -1209.7109, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2108, 2194.3359, -1209.7109, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2826, 2190.5781, -1204.4297, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 1702, 2191.5781, -1206.9375, 1048.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 2857, 2193.0938, -1204.2813, 1048.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 1818, 2193.1250, -1205.1328, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1702, 2196.1484, -1205.3828, 1048.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 2260, 2196.7188, -1206.4922, 1050.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2831, 2181.5625, -1203.5000, 1049.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2134, 2181.6250, -1203.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2141, 2181.6250, -1201.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2339, 2181.6250, -1202.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2831, 2184.6016, -1203.8906, 1048.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2185.8047, -1202.6094, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2183.3281, -1202.3750, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2131, 2183.3750, -1200.8672, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 15043, 2189.1641, -1203.6484, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 1717, 2190.5469, -1201.5625, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2244, 2188.0000, -1200.8516, 1048.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 2255, 2188.2656, -1200.8438, 1050.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2126, 2192.4063, -1200.5234, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2811, 2192.8359, -1200.0391, 1048.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 15040, 2193.2031, -1199.1094, 1050.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 2100, 2195.2500, -1200.4844, 1048.0234, 0.25);

	// Orta Ev 3

	RemoveBuildingForPlayer(playerid, 2077, 2357.5469, -1134.1875, 1050.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2298, 2361.2969, -1134.1484, 1049.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 2141, 2367.5625, -1135.3906, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2339, 2367.5625, -1134.3906, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2134, 2367.5625, -1133.3906, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2077, 2357.5469, -1131.5234, 1050.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 2271, 2357.8594, -1132.8828, 1051.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2087, 2360.2969, -1129.9766, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2103, 2360.8281, -1130.1406, 1051.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2279, 2369.8125, -1135.4375, 1052.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 2370.5781, -1134.0313, 1050.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 2371.7500, -1133.5938, 1050.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2278, 2372.1875, -1135.4297, 1052.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 2030, 2371.2266, -1132.9219, 1050.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 2812, 2371.2969, -1133.0156, 1050.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 2371.7500, -1131.8594, 1050.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 2370.5781, -1131.8594, 1050.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2288, 2373.3828, -1130.4531, 1051.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 2141, 2374.5000, -1135.3906, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2132, 2374.5000, -1131.3906, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2339, 2374.5078, -1134.3828, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2134, 2374.5078, -1133.3828, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2339, 2374.5078, -1130.3828, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2225, 2369.1797, -1125.8047, 1049.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2260, 2369.7188, -1123.8594, 1052.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 2331, 2367.3672, -1123.1563, 1050.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 2302, 2364.5547, -1122.9688, 1049.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2259, 2368.6094, -1122.5078, 1052.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 2333, 2367.5703, -1122.1484, 1049.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2255, 2361.5703, -1122.1484, 1052.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1734, 2364.8828, -1122.0469, 1053.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 2811, 2372.7031, -1128.9141, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 15061, 2371.6094, -1128.1875, 1051.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 15062, 2371.6094, -1128.1875, 1051.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2868, 2370.1250, -1125.2344, 1049.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2370.3906, -1124.4375, 1049.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1822, 2372.0938, -1124.2188, 1049.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 2828, 2374.2578, -1129.2578, 1050.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 2084, 2374.4688, -1129.2109, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2374.6797, -1122.5313, 1049.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2281, 2375.6641, -1128.1016, 1051.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2868, 2374.9766, -1125.2344, 1049.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2280, 2375.6484, -1122.3828, 1051.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 2227, 2370.2344, -1120.5859, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1742, 2366.6953, -1119.2500, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2371.6016, -1121.5078, 1049.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2227, 2375.5859, -1120.9922, 1049.8750, 0.25);

	// Orta Ev 4

	RemoveBuildingForPlayer(playerid, 2123, 2312.9609, -1145.0703, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2123, 2314.2969, -1146.3125, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2123, 2315.4219, -1145.0703, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2086, 2314.2734, -1144.8984, 1050.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 2123, 2314.2969, -1143.6250, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 15045, 2324.4297, -1143.3125, 1049.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1144.0859, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2335.3594, -1144.0703, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2135, 2336.3516, -1144.0781, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2305, 2337.3203, -1144.0781, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1143.1016, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1143.0938, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2322.2266, -1142.4766, 1049.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1822, 2323.9297, -1142.2578, 1049.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 1741, 2312.6484, -1140.7891, 1053.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1142.1094, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1141.1172, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2334.4219, -1140.9688, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2326.5234, -1140.5703, 1049.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1142.1094, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2337.3125, -1141.1094, 1049.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2338.4531, -1141.3672, 1053.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 2270, 2340.2734, -1141.7109, 1054.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 15050, 2330.3281, -1140.3047, 1051.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1140.1328, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2323.4375, -1139.5469, 1049.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2333.3281, -1139.8672, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2115, 2334.4297, -1139.6250, 1049.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 15049, 2334.3281, -1139.5859, 1051.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2335.3672, -1139.8750, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2303, 2337.3281, -1140.1172, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2090, 2309.5156, -1139.3438, 1053.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1139.1406, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2333.3281, -1138.8281, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2335.3672, -1138.8359, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2298, 2336.5391, -1138.7891, 1053.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1138.1563, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2136, 2337.3281, -1138.1328, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 2319.2500, -1137.8750, 1050.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 2329.5000, -1137.8750, 1050.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1137.1641, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2334.4219, -1137.5859, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2337.3125, -1137.1484, 1049.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2310.6641, -1136.3047, 1053.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 2257, 2320.4141, -1134.6328, 1053.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1136.1719, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1135.1875, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2254, 2328.1484, -1134.6172, 1054.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 2281, 2335.2656, -1136.4063, 1054.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2336.5156, -1135.0156, 1053.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 2271, 2337.8047, -1135.3516, 1054.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1136.1641, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1135.1797, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2339.2031, -1135.0156, 1053.8047, 0.25);

	// Zengin Ev 1

	RemoveBuildingForPlayer(playerid, 2123, 2312.9609, -1145.0703, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2123, 2314.2969, -1146.3125, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2123, 2315.4219, -1145.0703, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2086, 2314.2734, -1144.8984, 1050.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 2123, 2314.2969, -1143.6250, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 15045, 2324.4297, -1143.3125, 1049.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1144.0859, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2335.3594, -1144.0703, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2135, 2336.3516, -1144.0781, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2305, 2337.3203, -1144.0781, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1143.1016, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1143.0938, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2322.2266, -1142.4766, 1049.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1822, 2323.9297, -1142.2578, 1049.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 1741, 2312.6484, -1140.7891, 1053.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1142.1094, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1141.1172, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2334.4219, -1140.9688, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2326.5234, -1140.5703, 1049.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1142.1094, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2337.3125, -1141.1094, 1049.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2338.4531, -1141.3672, 1053.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 2270, 2340.2734, -1141.7109, 1054.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 15050, 2330.3281, -1140.3047, 1051.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1140.1328, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2323.4375, -1139.5469, 1049.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2333.3281, -1139.8672, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2115, 2334.4297, -1139.6250, 1049.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 15049, 2334.3281, -1139.5859, 1051.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2335.3672, -1139.8750, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2303, 2337.3281, -1140.1172, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2090, 2309.5156, -1139.3438, 1053.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1139.1406, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2333.3281, -1138.8281, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2335.3672, -1138.8359, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2298, 2336.5391, -1138.7891, 1053.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1138.1563, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2136, 2337.3281, -1138.1328, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 2319.2500, -1137.8750, 1050.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 2329.5000, -1137.8750, 1050.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1137.1641, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2334.4219, -1137.5859, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2337.3125, -1137.1484, 1049.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2310.6641, -1136.3047, 1053.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 2257, 2320.4141, -1134.6328, 1053.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1136.1719, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1135.1875, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2254, 2328.1484, -1134.6172, 1054.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 2281, 2335.2656, -1136.4063, 1054.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2336.5156, -1135.0156, 1053.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 2271, 2337.8047, -1135.3516, 1054.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1136.1641, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1135.1797, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2339.2031, -1135.0156, 1053.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 2259, 2316.3125, -1024.5156, 1051.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2242, 2321.4609, -1019.7500, 1049.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 2078, 2318.2578, -1017.6016, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2203, 2312.1641, -1014.5547, 1050.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2312.3750, -1014.5547, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2830, 2312.1406, -1013.6719, 1050.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2312.3750, -1013.5625, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2241, 2322.4453, -1026.4453, 1050.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 2244, 2322.3594, -1019.8906, 1049.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 2112, 2322.6563, -1026.4219, 1049.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 2105, 2323.0156, -1026.8594, 1050.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 2224, 2322.6953, -1019.0859, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2281, 2324.3125, -1017.7969, 1051.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2261, 2322.4609, -1015.4297, 1051.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2165, 2323.3750, -1015.8984, 1053.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1714, 2323.7500, -1014.8594, 1053.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 1755, 2325.2734, -1025.0625, 1049.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 2229, 2325.6406, -1017.2813, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2107, 2326.0703, -1016.6719, 1050.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2325.5313, -1015.0938, 1053.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 15060, 2326.6641, -1022.1953, 1049.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2280, 2327.3125, -1017.7969, 1051.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2104, 2327.1719, -1017.2109, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2327.4766, -1015.0938, 1053.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2312.3750, -1012.5703, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2303, 2312.3594, -1011.5859, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2313.8906, -1011.5781, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2314.9844, -1012.6797, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2115, 2314.9922, -1011.4063, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2832, 2315.0547, -1011.2813, 1050.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2315.9297, -1011.5859, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2831, 2312.1875, -1010.6563, 1050.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 2136, 2312.3594, -1010.6094, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2313.8906, -1010.5391, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2315.9297, -1010.5469, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2317.3438, -1009.5938, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2314.9844, -1009.2969, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1822, 2324.3359, -1012.2188, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2333, 2323.4922, -1009.7266, 1053.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2323.7891, -1009.5938, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2324.7813, -1009.5938, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2331, 2323.4453, -1009.2813, 1053.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 2298, 2325.0625, -1010.7188, 1053.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2325.7813, -1009.5938, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1822, 2326.6250, -1012.2188, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2326.7734, -1009.5938, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2312.3672, -1008.6094, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2314.3281, -1007.6328, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2305, 2312.3672, -1007.6250, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2135, 2313.3359, -1007.6250, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2317.3438, -1008.6016, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 1735, 2318.8047, -1007.9688, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2317.3438, -1007.6094, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2287, 2320.0547, -1007.2500, 1055.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 2194, 2322.3594, -1008.4453, 1054.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2325.0391, -1006.9453, 1054.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 2321.2656, -1006.0313, 1053.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 2249, 2323.0156, -1005.8828, 1054.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 2526, 2318.3750, -1003.0703, 1053.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 2322.2500, -1003.0703, 1053.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 1760, 2327.8047, -1021.0313, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2295, 2328.7891, -1015.8281, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 2328.8359, -1023.6016, 1050.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 2329.0469, -1022.6953, 1050.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 2229, 2329.0703, -1017.2813, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2295, 2329.2578, -1015.8281, 1053.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2327.7578, -1009.5938, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2327.7266, -1006.9453, 1054.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2329.1875, -1011.0078, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2329.1875, -1011.9922, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2329.1875, -1010.0234, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2285, 2328.9766, -1007.6406, 1051.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2869, 2329.2891, -1025.8672, 1049.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2829, 2329.4688, -1023.6250, 1050.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2868, 2329.7656, -1023.0156, 1050.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2117, 2329.6953, -1022.5859, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 2330.3672, -1023.5156, 1050.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 2330.3672, -1022.6875, 1050.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 2243, 2329.2969, -1018.0313, 1049.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 2096, 2330.2266, -1012.9688, 1053.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 2330.7422, -1010.7813, 1054.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 2096, 2330.2266, -1009.1875, 1053.7109, 0.25);

	RemoveBuildingForPlayer(playerid, 15039, 2232.340, -1106.739, 1049.750, 0.250);
	RemoveBuildingForPlayer(playerid, 15038, 2235.290, -1108.130, 1051.270, 0.250);
	return 1;
}

Trash_InitPlayer(playerid)
{
    HasTrash[playerid] = false;
    TrashCP[playerid] = -1;

    for(new i; i < sizeof(FactoryData); i++)
	{
		TogglePlayerDynamicCP(playerid, FactoryData[i][FactoryCP], 0);
		FactoryIcons[playerid][i] = -1;
	}

	CapacityText[playerid] = CreatePlayerTextDraw(playerid, 32.000000, 290.000000, "Arac Kapasitesi (0/10)");
	PlayerTextDrawBackgroundColor(playerid, CapacityText[playerid], 255);
	PlayerTextDrawFont(playerid, CapacityText[playerid], 1);
	PlayerTextDrawLetterSize(playerid, CapacityText[playerid], 0.200000, 1.000000);
	PlayerTextDrawColor(playerid, CapacityText[playerid], -1);
	PlayerTextDrawSetOutline(playerid, CapacityText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, CapacityText[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, CapacityText[playerid], 0);

	CapacityBar[playerid] = CreatePlayerProgressBar(playerid, 30.000000, 304.000000, 118.500000, 6.199999, -1429936641, TRASH_LIMIT, 0);
	return 1;
}

Trash_ResetPlayer(playerid, removeUI = 0)
{
	if(IsPlayerAttachedObjectSlotUsed(playerid, ATTACHMENT_INDEX)) RemovePlayerAttachedObject(playerid, ATTACHMENT_INDEX);
	if(IsValidDynamicCP(TrashCP[playerid])) DestroyDynamicCP(TrashCP[playerid]);
	HasTrash[playerid] = false;
	TrashCP[playerid] = -1;

	if(removeUI)
	{
	    PlayerTextDrawDestroy(playerid, CapacityText[playerid]);
	    DestroyPlayerProgressBar(playerid, CapacityBar[playerid]);
	}

	return 1;
}

Trash_ShowCapacity(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid), capacity_string[32];
    format(capacity_string, sizeof(capacity_string), "Arac Kapasitesi (%d/%d)", LoadedTrash[vehicleid], TRASH_LIMIT);
    PlayerTextDrawSetString(playerid, CapacityText[playerid], capacity_string);
    PlayerTextDrawShow(playerid, CapacityText[playerid]);

	SetPlayerProgressBarValue(playerid, CapacityBar[playerid], LoadedTrash[vehicleid]);
	ShowPlayerProgressBar(playerid, CapacityBar[playerid]);
	return 1;
}
Trash_Nearest(playerid)
{
	for(new i; i < sizeof(TrashData); i++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, TrashData[i][TrashX], TrashData[i][TrashY], TrashData[i][TrashZ]))
	    {
			return i;
	    }
	}
	return 1;
}
Trash_Closest(playerid)
{
	new closest_id = -1, Float: dist = 300.0, Float: tempdist;
    for(new i; i < sizeof(TrashData); i++)
	{
	    tempdist = GetPlayerDistanceFromPoint(playerid, TrashData[i][TrashX], TrashData[i][TrashY], TrashData[i][TrashZ]);
		if(tempdist > 300.0) continue;
		if(tempdist <= dist)
		{
		    dist = tempdist;
		    closest_id = i;
		}
	}

	return closest_id;
}
forward FillTrash(id);
public FillTrash(id)
{
	TrashData[id][TrashLevel]++;
	if(TrashData[id][TrashType] == TYPE_BIN && TrashData[id][TrashLevel] > 1) TrashData[id][TrashLevel] = 1;

	if(TrashData[id][TrashType] == TYPE_DUMPSTER) {
		if(TrashData[id][TrashLevel] == 1) TrashData[id][TrashTimer] = SetTimerEx("FillTrash", REFILL_TIME * 1000, false, "i", id);
		if(TrashData[id][TrashLevel] >= 2)
		{
			TrashData[id][TrashLevel] = 2;
			KillTimer(TrashData[id][TrashTimer]);
			TrashData[id][TrashTimer] = -1;
		}

		Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, TrashData[id][TrashLabel], E_STREAMER_COLOR, (TrashData[id][TrashLevel] == 1) ? 0xF39C12FF : 0x2ECC71FF);
		return 1;
	}

	Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, TrashData[id][TrashLabel], E_STREAMER_COLOR, 0x2ECC71FF);
	return 1;
}

GetClosestTree(playerid, Float: range = 2.0)
{
	new id = -1, Float: dist = range, Float: tempdist;
	foreach(new i : Trees)
	{
	    tempdist = GetPlayerDistanceFromPoint(playerid, TreeData[i][treeX], TreeData[i][treeY], TreeData[i][treeZ]);

	    if(tempdist > range) continue;
		if(tempdist <= dist)
		{
			dist = tempdist;
			id = i;
		}
	}

	return id;
}

IsPlayerNearALogBuyer(playerid)
{
	foreach(new i : Buyers)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, BuyerData[i][buyerX], BuyerData[i][buyerY], BuyerData[i][buyerZ])) return 1;
	}

	return 0;
}

Player_ResetCutting(playerid)
{
	if(!OyundaDegil(playerid) || CuttingTreeID[playerid] == -1) return 0;
	new id = CuttingTreeID[playerid];
	TreeData[id][treeGettingCut] = false;
	if(TreeData[id][treeSeconds] < 1) Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, TreeData[id][treeLabel], E_STREAMER_COLOR, 0x2ECC71FF);

	ClearAnimations(playerid);
    TogglePlayerControllable(playerid, 1);
    CuttingTreeID[playerid] = -1;

    if(CuttingTimer[playerid] != -1)
	{
	    KillTimer(CuttingTimer[playerid]);
		CuttingTimer[playerid] = -1;
	}

	SetPlayerProgressBarValue(playerid, CuttingBar[playerid], 0.0);
	HidePlayerProgressBar(playerid, CuttingBar[playerid]);
	return 1;
}

Player_GiveLog(playerid)
{
    if(!OyundaDegil(playerid)) return 0;
	CarryingLog[playerid] = true;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	SetPlayerAttachedObject(playerid, ATTACH_INDEX, 19793, 6, 0.077999, 0.043999, -0.170999, -13.799953, 79.70, 0.0);

	//SendClientMessage(playerid, 0x3498DBFF, ": {FFFFFF}You can press {F1C40F}~k~~CONVERSATION_NO~ {FFFFFF}to drop your log.");
	return 1;
}
Player_RemoveLog(playerid)
{
	if(!OyundaDegil(playerid) || !CarryingLog[playerid]) return 0;
	RemovePlayerAttachedObject(playerid, ATTACH_INDEX);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	CarryingLog[playerid] = false;
	return 1;
}
Tree_BeingEdited(id)
{
	if(!Iter_Contains(Trees, id)) return 0;
	foreach(new i : Player) if(EditingTreeID[i] == id) return 1;
	return 0;
}

Tree_UpdateLogLabel(id)
{
    if(!Iter_Contains(Trees, id)) return 0;
    new label[96];

    if(TreeData[id][treeLogs] > 0) {
	    format(label, sizeof(label), "Aðaç (%d)\n\n{FFFFFF}Odunlar: {F1C40F}%d\n{F1C40F}/odun al {FFFFFF}ile odun alabilirsiniz.", id, TreeData[id][treeLogs]);
		UpdateDynamic3DTextLabelText(TreeData[id][treeLabel], 0xE74C3CFF, label);
	}else{
	    TreeData[id][treeTimer] = SetTimerEx("RespawnTree", 1000, true, "i", id);

	    format(label, sizeof(label), "Aðaç (%d)\n\n{FFFFFF}%s", id, ConvertToMinutes(TreeData[id][treeSeconds]));
		UpdateDynamic3DTextLabelText(TreeData[id][treeLabel], 0xE74C3CFF, label);
	}

	return 1;
}
Oduncu_InitPlayer(playerid)
{
    CuttingTreeID[playerid] = -1;
    CuttingTimer[playerid] = -1;
	CarryingLog[playerid] = false;
    EditingTreeID[playerid] = -1;

    CuttingBar[playerid] = CreatePlayerProgressBar(playerid, 498.0, 104.0, 113.0, 6.2, 0x61381BFF, CUTTING_TIME, 0);
    ApplyAnimation(playerid, "CHAINSAW", "null", 0.0, 0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "CARRY", "null", 0.0, 0, 0, 0, 0, 0, 0);
	return 1;
}
forward CutTree(playerid);
public CutTree(playerid)
{
    if(CuttingTreeID[playerid] != -1)
	{
	    new id = CuttingTreeID[playerid], Float: value = GetPlayerProgressBarValue(playerid, CuttingBar[playerid]) + 1.0;

		if(value >= CUTTING_TIME) {
		    Player_ResetCutting(playerid);
			MoveDynamicObject(TreeData[id][treeObjID], TreeData[id][treeX], TreeData[id][treeY], TreeData[id][treeZ] + 0.03, 0.025, TreeData[id][treeRX], TreeData[id][treeRY] - 80.0, TreeData[id][treeRZ]);

			TreeData[id][treeLogs] = 5;
			TreeData[id][treeSeconds] = TREE_RESPAWN;
			Tree_UpdateLogLabel(id);
		}else{
		    SetPlayerProgressBarValue(playerid, CuttingBar[playerid], value);
		}
	}

	return 1;
}

forward RespawnTree(id);
public RespawnTree(id)
{
	new label[96];
	if(TreeData[id][treeSeconds] > 1) {
	    TreeData[id][treeSeconds]--;

	    format(label, sizeof(label), "Aðaç (%d)\n\n{FFFFFF}%s", id, ConvertToMinutes(TreeData[id][treeSeconds]));
		UpdateDynamic3DTextLabelText(TreeData[id][treeLabel], 0xE74C3CFF, label);
	}else if(TreeData[id][treeSeconds] == 1) {
	    KillTimer(TreeData[id][treeTimer]);

	    TreeData[id][treeLogs] = 0;
	    TreeData[id][treeSeconds] = 0;
	    TreeData[id][treeTimer] = -1;

	    SetDynamicObjectPos(TreeData[id][treeObjID], TreeData[id][treeX], TreeData[id][treeY], TreeData[id][treeZ]);
     	SetDynamicObjectRot(TreeData[id][treeObjID], TreeData[id][treeRX], TreeData[id][treeRY], TreeData[id][treeRZ]);

     	format(label, sizeof(label), "Aðaç (%d)\n\n{F1C40F}~k~~CONVERSATION_NO~ {FFFFFF}ile kesebilirsin.", id);
     	UpdateDynamic3DTextLabelText(TreeData[id][treeLabel], 0x2ECC71FF, label);
	}

	return 1;
}
Vehicle_LoadedOres(vehicleid)
{
	if(!IsValidVehicle(vehicleid)) return -1;
	new count = 0;
	for(new i; i < MAX_ORE_TYPES; i++) count += LoadedOres[vehicleid][i];
	return count;
}

Vehicle_GetOreValue(vehicleid)
{
    if(!IsValidVehicle(vehicleid)) return -1;
	new value = 0;
	for(new i; i < MAX_ORE_TYPES; i++) value += (LoadedOres[vehicleid][i] * OreData[i][Value]);
	return value;
}

Vehicle_GetOreValueByType(vehicleid, type)
{
    if(!IsValidVehicle(vehicleid)) return -1;
	return (LoadedOres[vehicleid][type] * OreData[type][Value]);
}

Vehicle_CleanUp(vehicleid)
{
    if(!IsValidVehicle(vehicleid)) return -1;
    for(new i; i < MAX_ORE_TYPES; i++) LoadedOres[vehicleid][i] = 0;
	return 1;
}

Vehicle_IsMiningVehicle(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
	    case 414, 455, 456, 498, 499, 609:
		{
		    new id = Car_GetID(vehicleid);
		    if(AracInfo[id][aracTip] == 4) return 1;
		    else return 0;
		}
	    default: return 0;
	}

	return 0;
}

// Player Functions
Madenci_InitPlayer(playerid)
{
	MiningVein[playerid] = -1;
	MiningTimer[playerid] = -1;
	CarryingOre[playerid] = -1;
	LoadingPoint[playerid] = -1;
	MiningBar[playerid] = CreatePlayerProgressBar(playerid, 498.0, 104.0, 113.0, 6.2, -1429936641, BAR_MAX, 0);
	for(new i; i < sizeof(DropPoints); i++)
	{
		TogglePlayerDynamicCP(playerid, DropPoints[i][PointCP], 0);
		PointIcons[playerid][i] = -1;
	}

	return 1;
}

Player_CleanUp(playerid, ore = 0)
{
    if(MiningVein[playerid] != -1)
	{
		VeinData[ MiningVein[playerid] ][BeingMined] = false;
        Vein_Update(MiningVein[playerid]);
        ClearAnimations(playerid);
        TogglePlayerControllable(playerid, 1);
        MiningVein[playerid] = -1;
	}

	if(MiningTimer[playerid] != -1)
	{
	    KillTimer(MiningTimer[playerid]);
		MiningTimer[playerid] = -1;
	}

	if(ore && CarryingOre[playerid] != -1)
	{
	    CarryingOre[playerid] = -1;
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}

	if(ore && LoadingPoint[playerid] != -1)
	{
	    DestroyDynamicCP(LoadingPoint[playerid]);
	    LoadingPoint[playerid] = -1;
	}

	if(IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_INDEX)) RemovePlayerAttachedObject(playerid, ATTACH_INDEX);
	SetPlayerProgressBarValue(playerid, MiningBar[playerid], 0.0);
	HidePlayerProgressBar(playerid, MiningBar[playerid]);
	return 1;
}

Player_GetClosestVein(playerid, Float: range = 3.0)
{
	new id = -1, Float: dist = range, Float: tempdist, Float: pos[3];
	for(new i; i < MAX_VEINS; i++)
	{
	    if(!VeinData[i][VeinExists]) continue;
	    GetDynamicObjectPos(VeinData[i][VeinObject], pos[0], pos[1], pos[2]);
	    tempdist = GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]);

	    if(tempdist > range) continue;
		if(tempdist <= dist)
		{
			dist = tempdist;
			id = i;
		}
	}

	return id;
}

Player_GetClosestOre(playerid, Float: range = 3.0)
{
	new id = -1, Float: dist = range, Float: tempdist, Float: pos[3];
	for(new i; i < MAX_ORES; i++)
	{
	    if(!DroppedOres[i][OreExists]) continue;
	    GetDynamicObjectPos(DroppedOres[i][OreObject], pos[0], pos[1], pos[2]);
	    tempdist = GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]);

	    if(tempdist > range) continue;
		if(tempdist <= dist)
		{
			dist = tempdist;
			id = i;
		}
	}

	return id;
}

Player_GiveOre(playerid, type, cooldown = 0)
{
    CarryingOre[playerid] = type;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	SetPlayerAttachedObject(playerid, ATTACH_INDEX, 2936, 5, 0.105, 0.086, 0.22, -80.3, 3.3, 28.7, 0.35, 0.35, 0.35, RGBAToARGB(OreData[type][Color]));
	SetPVarInt(playerid, "LoadingCooldown", gettime() + cooldown);

	new Float: x, Float: y, Float: z;
    GetVehicleBoot(PlayerData[playerid][pLastCar], x, y, z);
    LoadingPoint[playerid] = CreateDynamicCP(x, y, z, 3.0, .playerid = playerid);
    BilgiMesajGonder(playerid, "N tuþu ile cevherinizi yere býrakabilirsiniz.");
	return 1;
}

// Vein Functions
Vein_Update(id)
{
	new label[64], type = VeinData[id][Type], bool: is_red = false;
	if(VeinData[id][BeingMined] || VeinData[id][Amount] < 1) is_red = true;
	format(label, sizeof(label), "%s\n%d/%d%s\n\n/cevher bilgi - /cevher cikar", OreData[type][Name], VeinData[id][Amount], OreData[type][Amount], (is_red) ? ("{E74C3C}") : ("{FFFFFF}"));
	UpdateDynamic3DTextLabelText(VeinData[id][VeinLabel], OreData[type][Color], label);
	return 1;
}


// Ore Functions
Ore_FindFreeID()
{
	new id = -1;
	for(new i; i < MAX_ORES; i++)
	{
	    if(!DroppedOres[i][OreExists])
	    {
	        id = i;
	        break;
	    }
	}

	return id;
}

// http://forum.sa-mp.com/showpost.php?p=3117531&postcount=5
RGBAToARGB(rgba)
    return rgba >>> 8 | rgba << 24;

// edited from evf
GetNearestVehicleEx(playerid, Float: range = 6.5)
{
 	new Float: fX, Float: fY, Float: fZ, Float: fSX, Float: fSY, Float: fSZ;

	for (new i = 1, j = GetVehiclePoolSize(); i <= j; i ++)
	{
	    if (!IsVehicleStreamedIn(i, playerid)) continue;
		GetVehiclePos(i, fX, fY, fZ);
		GetVehicleModelInfo(GetVehicleModel(i), VEHICLE_MODEL_INFO_SIZE, fSX, fSY, fSZ);
		if(IsPlayerInRangeOfPoint(playerid, range, fX, fY, fZ) && GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(i)) return i;
	}

	return INVALID_VEHICLE_ID;
}
forward Vein_Generate();
public Vein_Generate()
{
    new Float: spawn_coords[][3] = {
        {670.500732, 926.557067, -41.475772},
		{678.838012, 925.259582, -41.473415},
		{673.852478, 922.303161, -41.548767},
		{679.489379, 917.357727, -41.276176},
		{673.862670, 914.984008, -41.207321},
		{666.973205, 921.626342, -41.613155},
		{686.447021, 913.041320, -40.560043},
		{679.475769, 910.190124, -41.048439},
		{689.223510, 906.631835, -40.269996},
		{683.865295, 905.557067, -40.672229},
		{685.984741, 899.446899, -40.296852},
		{694.975097, 902.076049, -39.668643},
		{692.622558, 896.177978, -39.817611},
		{697.621154, 891.354370, -39.355659},
		{687.311584, 891.855468, -40.107055},
		{692.106262, 887.992187, -39.684555},
		{690.451110, 879.733947, -40.143363},
		{696.097167, 882.666015, -39.491031},
		{694.623901, 872.130493, -41.227066},
		{693.549255, 862.414123, -43.129112},
		{688.462280, 868.132019, -42.136383},
		{688.172607, 857.167358, -43.610939},
		{667.181762, 819.235046, -43.610939},
		{663.166503, 811.138061, -43.610939},
		{654.977294, 812.527770, -43.610939},
		{651.793762, 805.835571, -43.610939},
		{660.028137, 820.449340, -43.610939},
		{646.762756, 814.375671, -43.610939},
		{643.352294, 808.098266, -43.610939},
		{637.106994, 812.568725, -43.610939},
		{630.459289, 810.016418, -43.610939},
		{624.303833, 813.422485, -43.610939},
		{615.880615, 812.158264, -43.610939},
		{610.537963, 815.100646, -43.603439},
		{603.759033, 817.793640, -43.646705},
		{597.451904, 822.874328, -43.579505},
		{605.012512, 823.405212, -43.728958},
		{618.658691, 818.265625, -43.603439},
		{580.120239, 931.571899, -43.610939},
		{569.243530, 928.569763, -43.610939},
		{560.821105, 926.251770, -43.610939},
		{576.770385, 923.246215, -43.610939},
		{567.994628, 919.691223, -43.610939},
		{575.571472, 916.415344, -43.664150},
		{569.872924, 912.386962, -43.610939},
		{587.315368, 913.924743, -43.796096},
		{582.004028, 910.695190, -43.892337},
		{560.253540, 909.118286, -43.610939},
		{560.626708, 917.773559, -43.610939},
		{530.954040, 909.995849, -43.610939},
		{611.991699, 933.569702, -40.581710},
		{609.077209, 922.338073, -42.479446},
		{608.724792, 927.748413, -41.762489},
		{649.643249, 928.250976, -39.830272},
		{653.457092, 922.054199, -41.079425},
		{644.637756, 922.242431, -41.463893},
		{647.455993, 914.794494, -42.107845},
		{657.229248, 914.974731, -41.061988},
		{590.929870, 838.788818, -43.386558},
		{600.051147, 841.034545, -44.017189},
		{590.187194, 846.630859, -43.336963},
		{582.725158, 843.719238, -43.011596},
		{576.576538, 849.726928, -43.056209},
		{573.548828, 844.638610, -42.740356},
		{566.613159, 843.542358, -42.616565},
		{559.421691, 840.400390, -42.141761},
		{552.358398, 837.908569, -41.532897},
		{562.215698, 848.450744, -42.990608},
		{553.209289, 843.931945, -42.226833},
		{545.759094, 836.563537, -41.645462},
		{546.358886, 844.129211, -42.148715},
		{553.752990, 849.901916, -42.900249},
		{539.853637, 845.818481, -42.563919},
		{528.839843, 843.820007, -43.529937},
		{533.157653, 848.349853, -43.296516},
		{520.944458, 846.692749, -43.610939},
		{526.440917, 850.654602, -43.610939},
		{536.822448, 852.424804, -43.107326},
		{546.298095, 850.573242, -42.897747},
		{551.512939, 879.981933, -43.265190},
		{559.212646, 886.721923, -43.916355},
		{566.831054, 885.784973, -44.073543},
		{574.826660, 883.917602, -44.008312},
		{573.601867, 877.364135, -44.474807},
		{573.405334, 865.376098, -43.900402},
		{566.972229, 867.566162, -44.025466},
		{566.110717, 875.090148, -44.276050},
		{559.155700, 867.633850, -43.972709},
		{552.657165, 871.074157, -43.586654},
		{590.525634, 884.257019, -44.786952},
		{581.356384, 885.243469, -44.612636},
		{595.025329, 891.404907, -45.047763},
		{601.949951, 893.569396, -45.066448},
		{599.344055, 887.141723, -44.512237},
		{597.956787, 880.352294, -43.925403},
		{597.799316, 872.847290, -43.639019},
		{603.701110, 881.868469, -43.749420},
		{609.776245, 877.436706, -43.610939},
		{609.780212, 888.589721, -44.169811},
		{609.496215, 894.040039, -44.493488},
		{615.364379, 883.519409, -43.610939},
		{616.436218, 866.841308, -43.610939},
		{624.843017, 869.950256, -43.603439},
		{620.875671, 875.108886, -43.603439},
		{631.959045, 874.122375, -43.603439},
		{626.006774, 879.856384, -43.610939},
		{638.100219, 880.400573, -43.610939},
		{634.172485, 885.813476, -43.610939},
		{635.576660, 893.294067, -43.603439},
		{641.967956, 898.003051, -43.558959},
		{648.679199, 897.242004, -42.743541},
		{654.830322, 895.541931, -42.002933},
		{662.546447, 893.076171, -41.048439},
		{652.472778, 889.743713, -42.355361},
		{644.680358, 887.102661, -43.205955},
		{638.895996, 888.600891, -43.603439},
		{643.382629, 892.997375, -43.376350},
		{681.386230, 863.475097, -42.681892},
		{646.588012, 860.239013, -43.376369},
		{648.004821, 851.773437, -43.610939},
		{654.417053, 855.355895, -43.610939},
		{660.318481, 849.473388, -43.610939},
		{661.591796, 861.592041, -43.277667},
		{660.899780, 867.371459, -42.788570}
	};

	// Destroy Old Veins
	for(new i; i < MAX_VEINS; i++)
	{
		if(!VeinData[i][VeinExists]) continue;
		DestroyDynamicObject(VeinData[i][VeinObject]);
		DestroyDynamic3DTextLabel(VeinData[i][VeinLabel]);
		VeinData[i][VeinExists] = false;
	}

	// Respawn
    new type;
	for(new i; i < sizeof(spawn_coords); i++)
	{
	    if(i >= MAX_VEINS) break;
	    type = random(MAX_ORE_TYPES);

	    VeinData[i][Type] = type;
	    VeinData[i][Amount] = OreData[type][Amount];
	    VeinData[i][VeinObject] = CreateDynamicObject(867, spawn_coords[i][0], spawn_coords[i][1], spawn_coords[i][2], 0.0, 0.0, random(360));
  		SetDynamicObjectMaterial(VeinData[i][VeinObject], 0, 2936, "kmb_rckx", "larock256", RGBAToARGB(OreData[type][Color]));
  		VeinData[i][VeinLabel] = CreateDynamic3DTextLabel("Label", OreData[type][Color], spawn_coords[i][0], spawn_coords[i][1], spawn_coords[i][2] + 0.5, 5.0, .testlos = 1);
	    VeinData[i][VeinExists] = true;
	    Vein_Update(i);
	}

	return 1;
}
forward Player_Mine(playerid);
public Player_Mine(playerid)
{
    if(MiningVein[playerid] != -1)
	{
	    new vein_id = MiningVein[playerid], Float: value = GetPlayerProgressBarValue(playerid, MiningBar[playerid]) + OreData[ VeinData[vein_id][Type] ][Modifier];
		if(value >= BAR_MAX) {
		    Player_CleanUp(playerid);

		    if(random(100) < OreData[ VeinData[vein_id][Type] ][Rate]) {
		    	VeinData[vein_id][Amount]--;
				Player_GiveOre(playerid, VeinData[vein_id][Type]);
                Vein_Update(vein_id);

		    	new string[64];
		    	format(string, sizeof(string), "~n~~g~~h~Kazildi %s", OreData[ VeinData[vein_id][Type] ][Name]);
		    	GameTextForPlayer(playerid, string, 2000, 3);
			}else{
			    GameTextForPlayer(playerid, "~n~~r~~h~Kazma Basarisiz", 2000, 3);
			}
		}else{
		    SetPlayerProgressBarValue(playerid, MiningBar[playerid], value);
		}
	}

	return 1;
}
forward Ore_Destroy(id);
public Ore_Destroy(id)
{
	KillTimer(DroppedOres[id][OreTimer]);
	DestroyDynamicObject(DroppedOres[id][OreObject]);
	DestroyDynamic3DTextLabel(DroppedOres[id][OreLabel]);
	DroppedOres[id][OreExists] = false;
	return 1;
}
stock IsPlayerNearPNS(playerid)
{
	for(new i; i<sizeof(PayNSpray); i++) if(IsPlayerInRangeOfPoint(playerid, 2.0, PayNSpray[i][0],PayNSpray[i][1], PayNSpray[i][2]))
	{
	    return i;
	}
	return -1;
}
stock GetComponentPrice2(componentid)
{
    static const ModifiyeFiyatlar[] = {
        400, 550, 200, 250, 100, 150, 80, 500, 200, 500,
        1000, 220, 250, 100, 400, 500, 200, 500, 350, 300,
        250, 200, 150, 350, 50, 1000, 480, 480, 770, 680,
        37, 370, 170, 120, 790, 150, 500, 690, 190, 390,
        500, 390, 1000, 500, 500, 510, 710, 670, 530, 810,
        620, 670, 530, 130, 210, 230, 520, 430, 620, 720,
        530, 180, 250, 430, 830, 850, 750, 250, 200, 550,
        450, 550, 450, 1000, 1030, 980, 1560, 1620, 1200, 1030,
        1000, 1230, 820, 1560, 1350, 770, 100, 1500, 150, 650,
        450, 100, 750, 350, 450, 350, 1000, 620, 1140, 1000,
        940, 780, 830, 3250, 1610, 1540, 780, 780, 780, 1610,
        1540, -1, -1, 3340, 3250, 2130, 2050, 2130, 780, 940,
        780, 940, 780, 860, 780, 1120, 3340, 3250, 3340, 1650,
        3380, 3290, 1590, 830, 800, 1500, 1000, 800, 580, 470,
        870, 980, 150, 150, 100, 100, 490, 600, 890, 1000,
        1090, 840, 910, 1200, 1030, 1030, 920, 930, 550, 1050,
        1050, 950, 650, 550, 450, 850, 950, 850, 950, 970,
        880, 990, 900, 950, 1000, 900, 1000, 900, 2050, 2150,
        2130, 2050, 2130, 2040, 2150, 2040, 2095, 2175, 2080, 2200,
        1200, 1040, 940, 1100
    };

    new comindex = componentid - 1000;

    if(!(0 <= comindex < sizeof(ModifiyeFiyatlar)))
        return -1;

    return ModifiyeFiyatlar[comindex];
}
stock GetComponentName(component) return ModName[component-1000];
stock Pet_Sil(id)
{
	new query[65];
	format(query, sizeof(query), "DELETE FROM `petler` WHERE `petid` = '%d'", PetBilgi[id][petID]);
	mysql_query(baglanti, query, false);
	FCNPC_Destroy(PetBilgi[id][NPCID]);
 	DestroyDynamic3DTextLabel(PetBilgi[id][petText]);
	PetBilgi[id][petID] = 0;
	PetBilgi[id][NPCID] = -1;
	format(PetBilgi[id][petAdi], 24, "Yok");
	PetBilgi[id][petSahip] = -1;
	PetBilgi[id][petTuru] = 0;
	PetBilgi[id][petCinsiyet] = 0;
	PetBilgi[id][petRenk] = 0;
	PetBilgi[id][petAclik] = 0;
	PetBilgi[id][petSaglik] = 0.0;
	PetBilgi[id][petTakip] = -1;
	PetBilgi[id][petYarali] = 0;
	PetBilgi[id][petDurum] = false;
	PetBilgi[id][petSaldir] = -1;
	PetBilgi[id][petAcikma] = 0;
	Iter_Remove(Petler, id);
	return 1;
}
stock PetYakin(playerid, Float:radius)
{
	foreach(new i:Petler) if(PetBilgi[i][petDurum] == true)
	{
	    new Float:pos[3];
	    FCNPC_GetPosition(PetBilgi[i][NPCID], pos[0], pos[1], pos[2]);
	    if(IsPlayerInRangeOfPoint(playerid, radius, pos[0], pos[1], pos[2]) && PetBilgi[i][petSahip] == PlayerData[playerid][pID] && FCNPC_GetVirtualWorld(PetBilgi[i][NPCID]) == GetPlayerVirtualWorld(playerid))
	    {
	        return i;
	    }
	}
	return -1;
}
stock PetDialog(playerid, id)
{
	new str[750], string[124], petrenk[20], petrenkkod[10];
	switch(PetBilgi[id][petRenk])
	{
	    case 1: petrenk = "Beyaz", petrenkkod = "FFFFFF";
	    case 2: petrenk = "Mavi", petrenkkod = "0295f7";
	    case 3: petrenk = "Kýrmýzý", petrenkkod = "f70202";
	    case 4: petrenk = "Turuncu", petrenkkod = "f77002";
	    case 5: petrenk = "Sarý", petrenkkod = "ffff00";
	    case 6: petrenk = "Mor", petrenkkod = "ee00ff";
	    case 7: petrenk = "Yeþil", petrenkkod = "2aff00";
	}
	strcat(str, "Ýþlem\tDurum\n");
	format(string, sizeof(string), "{ff0050}» {FFFFFF}Pet Adý\t{AFAFAF}%s\n", PetBilgi[id][petAdi]);
	strcat(str, string);
	format(string, sizeof(string), "{ff0050}» {FFFFFF}Pet Ad Rengi\t{%s}%s\n", petrenkkod, petrenk);
	strcat(str, string);
	format(string, sizeof(string), "{ff0050}» {FFFFFF}Pet Türü\t{AFAFAF}%s\n", PetTurIsim(PetBilgi[id][petTuru]));
	strcat(str, string);
	format(string, sizeof(string), "{ff0050}» {FFFFFF}Pet Cinsiyeti\t{AFAFAF}%s\n", (PetBilgi[id][petCinsiyet] == 1) ? ("Erkek") : ("Kadýn"));
	strcat(str, string);
	format(string, sizeof(string), "{ff0050}» {FFFFFF}Pet Açlýk\t{AFAFAF}%d\n", PetBilgi[id][petAclik]);
	strcat(str, string);
	format(string, sizeof(string), "{ff0050}» {FFFFFF}Pet Saðlýk\t{AFAFAF}%.1f \n", FCNPC_GetHealth(PetBilgi[id][NPCID]));
	strcat(str, string);
	format(string, sizeof(string), "{AFAFAF}» {FFFFFF}Pet Moduna Geç\n");
	strcat(str, string);
	format(string, sizeof(string), "{AFAFAF}» {FFFFFF}Pet Takip Modu\t{AFAFAF}%s {AFAFAF}\n", (PetBilgi[id][petTakip] == -1) ? ("{E74C3C}Kapalý") : ("{26ff00}Açýk"));
	strcat(str, string);
	format(string, sizeof(string), "{AFAFAF}» {FFFFFF}Peti Besle\n");
	strcat(str, string);
	format(string, sizeof(string), "{AFAFAF}» {FFFFFF}Peti Ýyileþtir\t{AFAFAF}{26ff00}$%d {AFAFAF}", floatround(100-FCNPC_GetHealth(PetBilgi[id][NPCID]))*3);
	strcat(str, string);

	format(string, sizeof(string), "{FFFFFF}%s'in Peti (ID: %d)", SQLName(PetBilgi[id][petSahip], 0), id);
	SetPVarInt(playerid, "PetID", id);
	ShowPlayerDialog(playerid, DIALOG_PET, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Seç", "Kapat");
	return 1;
}
stock Pet_Olustur(sahip, turu, cinsiyet)
{
	for(new i; i<MAX_PET; i++)
	{
	    if(!Iter_Contains(Petler, i))
	    {
	        format(PetBilgi[i][petAdi], 24, "Yok");
	        PetBilgi[i][petSahip] = sahip;
	        PetBilgi[i][petTuru] = turu;
	        PetBilgi[i][petCinsiyet] = cinsiyet;
	        PetBilgi[i][petRenk] = 3;
	        PetBilgi[i][petAclik] = 100;
	        PetBilgi[i][petSaglik] = 100.0;
	        PetBilgi[i][petTakip] = -1;
	        PetBilgi[i][petDurum] = false;
	        PetBilgi[i][petSaldir] = -1;
	        Iter_Add(Petler, i);
	        new query[200];
	        format(query, sizeof(query), "INSERT INTO `petler` (`petadi`, `petsahip`, `petturu`, `petcinsiyet`, `petrenk`, `petaclik`, `petsaglik`) VALUES ('Yok', '%d', '%d', '%d', '3', '100', '100.0')", sahip, turu, cinsiyet);
	        mysql_query(baglanti, query);
	        PetBilgi[i][petID] = cache_insert_id();
	        return i;
	    }
	}
	return -1;
}

stock PetTurIsim(tur)
{
	new isim[20];
	isim = "Yok";
	switch(tur)
	{
	    case 1: isim = "Black Pitbull";
	    case 2: isim = "Boxer Dog";
	    case 3: isim = "Brown Pitbull";
	    case 4: isim = "Bull Terrier";
	    case 5: isim = "Dalmation";
	    case 6: isim = "Doberman";
	    case 7: isim = "European Shepherd";
	    case 8: isim = "German Shorthair";
	    case 9: isim = "Gray Pitbull";
	    case 10: isim = "Siberian Husky";
	    case 11: isim = "White Pitbull";
	}
	return isim;
}

stock PetTurSkin(tur)
{
	new skin;
	switch(tur)
	{
	    case 1: skin = 20001;
	    case 2: skin = 20002;
	    case 3: skin = 20003;
	    case 4: skin = 20004;
	    case 5: skin = 20005;
	    case 6: skin = 20006;
	    case 7: skin = 20007;
	    case 8: skin = 20008;
	    case 9: skin = 20009;
	    case 10: skin = 20010;
	    case 11: skin = 20011;
	    default: skin = 20001;
	}
	return skin;
}
forward PetUpdate();
public PetUpdate()
{
	foreach(new i:Petler)
	{
	    if(PetBilgi[i][petDurum] == true)
	    {
	        new str[124];
	        if(PetBilgi[i][petRenk] == 1) format(str, sizeof(str), "{FFFFFF}%s (#%d)\n\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saðlýk: %.1f\nAçlýk: %d",PetBilgi[i][petAdi],i, PetTurIsim(PetBilgi[i][petTuru]), (PetBilgi[i][petCinsiyet] == 1) ? ("Erkek") : ("Kadýn"), FCNPC_GetHealth(PetBilgi[i][NPCID]), PetBilgi[i][petAclik]);
	        if(PetBilgi[i][petRenk] == 2) format(str, sizeof(str), "{0295f7}%s (#%d)\n\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saðlýk: %.1f\nAçlýk: %d",PetBilgi[i][petAdi],i, PetTurIsim(PetBilgi[i][petTuru]), (PetBilgi[i][petCinsiyet] == 1) ? ("Erkek") : ("Kadýn"), FCNPC_GetHealth(PetBilgi[i][NPCID]), PetBilgi[i][petAclik]);
	        if(PetBilgi[i][petRenk] == 3) format(str, sizeof(str), "{f70202}%s (#%d)\n\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saðlýk: %.1f\nAçlýk: %d",PetBilgi[i][petAdi],i, PetTurIsim(PetBilgi[i][petTuru]), (PetBilgi[i][petCinsiyet] == 1) ? ("Erkek") : ("Kadýn"), FCNPC_GetHealth(PetBilgi[i][NPCID]), PetBilgi[i][petAclik]);
			if(PetBilgi[i][petRenk] == 4) format(str, sizeof(str), "{f77002}%s (#%d)\n\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saðlýk: %.1f\nAçlýk: %d",PetBilgi[i][petAdi],i, PetTurIsim(PetBilgi[i][petTuru]), (PetBilgi[i][petCinsiyet] == 1) ? ("Erkek") : ("Kadýn"), FCNPC_GetHealth(PetBilgi[i][NPCID]), PetBilgi[i][petAclik]);
			if(PetBilgi[i][petRenk] == 5) format(str, sizeof(str), "{ffff00}%s (#%d)\n\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saðlýk: %.1f\nAçlýk: %d",PetBilgi[i][petAdi],i, PetTurIsim(PetBilgi[i][petTuru]), (PetBilgi[i][petCinsiyet] == 1) ? ("Erkek") : ("Kadýn"), FCNPC_GetHealth(PetBilgi[i][NPCID]), PetBilgi[i][petAclik]);
			if(PetBilgi[i][petRenk] == 6) format(str, sizeof(str), "{ee00ff}%s (#%d)\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saðlýk: %.1f\nAçlýk: %d",PetBilgi[i][petAdi],i, PetTurIsim(PetBilgi[i][petTuru]), (PetBilgi[i][petCinsiyet] == 1) ? ("Erkek") : ("Kadýn"), FCNPC_GetHealth(PetBilgi[i][NPCID]), PetBilgi[i][petAclik]);
			if(PetBilgi[i][petRenk] == 7) format(str, sizeof(str), "{2aff00}%s (#%d)\n\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saðlýk: %.1f\nAçlýk: %d",PetBilgi[i][petAdi],i, PetTurIsim(PetBilgi[i][petTuru]), (PetBilgi[i][petCinsiyet] == 1) ? ("Erkek") : ("Kadýn"), FCNPC_GetHealth(PetBilgi[i][NPCID]), PetBilgi[i][petAclik]);
			UpdateDynamic3DTextLabelText(PetBilgi[i][petText], -1, str);

			if(PetBilgi[i][petTakip] != -1 && OyundaDegil(PetBilgi[i][petTakip]) && !IsPlayerInWater(PetBilgi[i][petTakip]) && !IsPlayerInAnyVehicle(PetBilgi[i][petTakip]) && GetPlayerInterior(PetBilgi[i][petTakip]) == FCNPC_GetInterior(PetBilgi[i][NPCID]) && GetPlayerVirtualWorld(PetBilgi[i][petTakip]) == FCNPC_GetVirtualWorld(PetBilgi[i][NPCID]))
			{
			    new Float:pos[3];
			    FCNPC_GetPosition(PetBilgi[i][NPCID], pos[0], pos[1], pos[2]);
			    FCNPC_StopAttack(PetBilgi[i][NPCID]);
			    if(GetPlayerDistanceFromPoint(PetBilgi[i][petTakip], pos[0], pos[1], pos[2]) >= 20)
			    {
			        PetBilgi[i][petTakip] = -1;
			        PetBilgi[i][petSaldir] = -1;
			        FCNPC_Stop(PetBilgi[i][NPCID]);
			        FCNPC_StopAttack(PetBilgi[i][NPCID]);
			    }
			    if(GetPlayerDistanceFromPoint(PetBilgi[i][petTakip], pos[0], pos[1], pos[2]) >= 1 && GetPlayerDistanceFromPoint(PetBilgi[i][petTakip], pos[0], pos[1], pos[2]) <= 20)
			    {
			        FCNPC_StopAttack(PetBilgi[i][NPCID]);
					FCNPC_GoToPlayer(PetBilgi[i][NPCID], PetBilgi[i][petTakip]);
			    }
			    if(GetPlayerDistanceFromPoint(PetBilgi[i][petTakip], pos[0], pos[1], pos[2]) < 1 && PetBilgi[i][petSaldir] != -1)
			    {
			        FCNPC_MeleeAttack(PetBilgi[i][NPCID], -1, true);
				}

			}
			PetBilgi[i][petAcikma]++;
			if(PetBilgi[i][petAcikma] >= 360)
			{
			    PetBilgi[i][petAcikma] = 0;
			    PetBilgi[i][petAclik] -= 3;
			    if(PetBilgi[i][petAclik] < 0) PetBilgi[i][petAclik] = 0;
			}
	    }
	}
	return 1;
}
forward PetDelete(id);
public PetDelete(id)
{
	PetBilgi[id][petSaglik] = 100.0;
    FCNPC_Destroy(PetBilgi[id][NPCID]);
    PetBilgi[id][petTakip] = -1;
    PetBilgi[id][NPCID] = -1;
    PetBilgi[id][petDurum] = false;
    DestroyDynamic3DTextLabel(PetBilgi[id][petText]);
	return 1;
}
stock Pet_Kaydet(id)
{
	new query[1000];
	format(query, sizeof(query), "UPDATE `petler` SET `petadi` = '%s', `petsahip` = '%d', `petturu` = '%d', `petcinsiyet` = '%d', `petrenk` = '%d', `petaclik` = '%d', `petsaglik` = '%.1f', `petyarali` = '%d' WHERE `petid` = '%d'",
	PetBilgi[id][petAdi],
	PetBilgi[id][petSahip],
	PetBilgi[id][petTuru],
	PetBilgi[id][petCinsiyet],
	PetBilgi[id][petRenk],
	PetBilgi[id][petAclik],
	(PetBilgi[id][petDurum] == true) ? (FCNPC_GetHealth(PetBilgi[id][NPCID])) : (PetBilgi[id][petSaglik]),
	PetBilgi[id][petYarali],
	PetBilgi[id][petID]);
	mysql_query(baglanti, query, false);
	return 1;
}
stock HoodlariYukle()
{
	new Cache:sawyer = mysql_query(baglanti, "SELECT * FROM `hood`");
	new rows;
	cache_get_row_count(rows);
	for(new i; i<rows; i++)
	{
	    Hood[i][hExists] = true;
	    cache_get_value_name_int(i, "ID", Hood[i][hID]);
	    cache_get_value_name_float(i, "hoodX", Hood[i][hPos][0]);
	    cache_get_value_name_float(i, "hoodY", Hood[i][hPos][1]);
	    cache_get_value_name_float(i, "hoodZ", Hood[i][hPos][2]);
	    cache_get_value_name_int(i, "Birlik", Hood[i][hBirlik]);

	    Hood_Yenile(i);
	}
	cache_delete(sawyer);
	return 1;
}
stock NPCYukle()
{
	new Cache:sawyer = mysql_query(baglanti, "SELECT * FROM `npcler`");
	new rows;
	cache_get_row_count(rows);
	for (new i = 0; i < rows; i ++) if (i < MAXIMUM_NPC)
	{
	    NPCBilgi[i][npcExists] = true;
	    cache_get_value_name_int(i, "npcID", NPCBilgi[i][npcID]);
	    cache_get_value_name(i, "npcAd", NPCBilgi[i][npcAd], 24);
	    cache_get_value_name_int(i, "npcSkin", NPCBilgi[i][npcSkin]);
	    cache_get_value_name_float(i, "npcX", NPCBilgi[i][npcPos][0]);
	    cache_get_value_name_float(i, "npcY", NPCBilgi[i][npcPos][1]);
	    cache_get_value_name_float(i, "npcZ", NPCBilgi[i][npcPos][2]);
	    cache_get_value_name_float(i, "npcA", NPCBilgi[i][npcPos][3]);
	    cache_get_value_name_int(i, "npcVw", NPCBilgi[i][npcVw]);
	    cache_get_value_name(i, "Secenek1", NPCSecenekler[i][0], 50);
	    cache_get_value_name(i, "Secenek1Cevap", NPCSecenekCevaplar[i][0], 200);
	    cache_get_value_name(i, "Secenek2", NPCSecenekler[i][1], 50);
	    cache_get_value_name(i, "Secenek2Cevap", NPCSecenekCevaplar[i][1], 200);
	    cache_get_value_name(i, "Secenek3", NPCSecenekler[i][2], 50);
	    cache_get_value_name(i, "Secenek3Cevap", NPCSecenekCevaplar[i][2], 200);
	    cache_get_value_name(i, "Secenek4", NPCSecenekler[i][3], 50);
	    cache_get_value_name(i, "Secenek4Cevap", NPCSecenekCevaplar[i][3], 200);
	    cache_get_value_name(i, "Secenek5", NPCSecenekler[i][4], 50);
	    cache_get_value_name(i, "Secenek5Cevap", NPCSecenekCevaplar[i][4], 200);
	    NPC_Refresh(i);

	}
	cache_delete(sawyer);
	return 1;
}
stock NPC_Refresh(id)
{
	if(id != -1 && NPCBilgi[id][npcExists])
	{
	    if(IsValidDynamic3DTextLabel(NPCBilgi[id][npcLabel])) DestroyDynamic3DTextLabel(NPCBilgi[id][npcLabel]);
	    if(IsValidDynamicActor(NPCBilgi[id][npcActor])) DestroyDynamicActor(NPCBilgi[id][npcActor]);
	    NPCBilgi[id][npcActor] = CreateDynamicActor(NPCBilgi[id][npcSkin], NPCBilgi[id][npcPos][0], NPCBilgi[id][npcPos][1], NPCBilgi[id][npcPos][2], NPCBilgi[id][npcPos][3], 1, 100, NPCBilgi[id][npcVw]);
	    new str[124];
	    format(str, sizeof(str), "{E74C3C}[%s] (#%d)\n{E74C3C}[ALT] {FFFFFF}- Etkileþim", NPCBilgi[id][npcAd], id);
	    NPCBilgi[id][npcLabel] = CreateDynamic3DTextLabel(str, -1, NPCBilgi[id][npcPos][0], NPCBilgi[id][npcPos][1], NPCBilgi[id][npcPos][2]+1.2, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, NPCBilgi[id][npcVw]);
	}
	return 1;
}
stock GraffitiYukle()
{
    new Cache:sawyer = mysql_query(baglanti, "SELECT * FROM `graffiti`");

    new rows;
	cache_get_row_count(rows);
    for (new i = 0; i < rows; i ++) if (i < MAX_GRAFFITI_POINTS)
    {
        cache_get_value_name(i, "graffitiText", GraffitiData[i][graffitiText], 64);
        cache_get_value_name(i, "graffitiFont", GraffitiData[i][graffitiFont], 64);

        GraffitiData[i][graffitiExists] = 1;
        cache_get_value_name_int(i, "graffitiID", GraffitiData[i][graffitiID]);
        cache_get_value_name_float(i, "graffitiX", GraffitiData[i][graffitiPos][0]);
        cache_get_value_name_float(i, "graffitiY", GraffitiData[i][graffitiPos][1]);
        cache_get_value_name_float(i, "graffitiZ", GraffitiData[i][graffitiPos][2]);
        cache_get_value_name_float(i, "graffitiRX", GraffitiData[i][graffitiPos][3]);
        cache_get_value_name_float(i, "graffitiRY", GraffitiData[i][graffitiPos][4]);
        cache_get_value_name_float(i, "graffitiRZ", GraffitiData[i][graffitiPos][5]);

        Graffiti_Refresh(i);
    }
    cache_delete(sawyer);
    return 1;
}
stock Graffiti_Refresh(id)
{
    if (id != -1 && GraffitiData[id][graffitiExists])
    {

        if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
            DestroyDynamicObject(GraffitiData[id][graffitiObject]);


        GraffitiData[id][graffitiObject] = CreateDynamicObject(19482, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], GraffitiData[id][graffitiPos][3], GraffitiData[id][graffitiPos][4], GraffitiData[id][graffitiPos][5]);
		SetDynamicObjectMaterialText(GraffitiData[id][graffitiObject], 0, GraffitiData[id][graffitiText], OBJECT_MATERIAL_SIZE_256x256, GraffitiData[id][graffitiFont], 24, 0, 0xFFFFFFFF, 0, 1);
    }
    return 1;
}
stock Graffiti_Save(id)
{
    new
        query[384];

    format(query, sizeof(query), "UPDATE `graffiti` SET `graffitiX` = '%.4f', `graffitiY` = '%.4f', `graffitiZ` = '%.4f', `graffitiRX` = '%.4f', `graffitiRY` = '%.4f', `graffitiRZ` = '%.4f', `graffitiText` = '%s', `graffitiFont` = '%s' WHERE `graffitiID` = '%d'",
        GraffitiData[id][graffitiPos][0],
        GraffitiData[id][graffitiPos][1],
        GraffitiData[id][graffitiPos][2],
        GraffitiData[id][graffitiPos][3],
        GraffitiData[id][graffitiPos][4],
        GraffitiData[id][graffitiPos][5],
        SQL_ReturnEscaped(GraffitiData[id][graffitiText]),
        SQL_ReturnEscaped(GraffitiData[id][graffitiFont]),
        GraffitiData[id][graffitiID]
    );
    mysql_tquery(baglanti, query);
    return 1;
}
stock Graffiti_Create(Float:x, Float:y, Float:z)
{
    for (new i = 0; i < MAX_GRAFFITI_POINTS; i ++)
    {
        if (!GraffitiData[i][graffitiExists])
        {
            GraffitiData[i][graffitiExists] = 1;
            GraffitiData[i][graffitiPos][0] = x;
            GraffitiData[i][graffitiPos][1] = y;
            GraffitiData[i][graffitiPos][2] = z;
            GraffitiData[i][graffitiPos][3] = 0.0;
            GraffitiData[i][graffitiPos][4] = 0.0;
            GraffitiData[i][graffitiPos][5] = 0.0;

            format(GraffitiData[i][graffitiText], 32, "Graffiti");
            format(GraffitiData[i][graffitiFont], 32, "Arial");

            Graffiti_Refresh(i);
            mysql_tquery(baglanti, "INSERT INTO `graffiti` (`graffitiRX`) VALUES(0.0)", "OnGraffitiCreated", "d", i);

            return i;
        }
    }
    return -1;
}
forward OnGraffitiCreated(id);
public OnGraffitiCreated(id)
{
    GraffitiData[id][graffitiID] = cache_insert_id();
    Graffiti_Save(id);

    return 1;
}
stock Hood_Yenile(id)
{
	if(IsValidDynamic3DTextLabel(Hood[id][hLabel])) DestroyDynamic3DTextLabel(Hood[id][hLabel]);
	if(IsValidDynamicArea(Hood[id][hZone])) DestroyDynamicArea(Hood[id][hZone]);
	if(IsValidDynamicPickup(Hood[id][hPickup])) DestroyDynamicPickup(Hood[id][hPickup]);
	if(IsValidDynamicMapIcon(Hood[id][hMapIcon])) DestroyDynamicMapIcon(Hood[id][hMapIcon]);
	new str[124];
	format(str, sizeof(str), "Hood (#%d)\n%s", id, Birlikler[Hood[id][hBirlik]][birlikAd]);
	Hood[id][hLabel] = CreateDynamic3DTextLabel(str, COLOR_LIGHTBLUE, Hood[id][hPos][0], Hood[id][hPos][1], Hood[id][hPos][2], 10.0);
	Hood[id][hZone] = CreateDynamicRectangle(Hood[id][hPos][0]-45, Hood[id][hPos][1]-45, Hood[id][hPos][0]+45, Hood[id][hPos][1]+45, 0, 0);
	Hood[id][hPickup] = CreateDynamicPickup(1254, 23, Hood[id][hPos][0], Hood[id][hPos][1], Hood[id][hPos][2], 0, 0);
	Hood[id][hMapIcon] = CreateDynamicMapIcon(Hood[id][hPos][0], Hood[id][hPos][1], Hood[id][hPos][2], 23, 0, 0);
	return 1;
}
stock PetleriYukle()
{
	mysql_query(baglanti, "SELECT * FROM `petler`");
	new rows;
	cache_get_row_count(rows);
	if(!rows) return 1;
	for(new i; i<rows; i++)
	{
	    cache_get_value_name_int(i, "petid", PetBilgi[i][petID]);
	    cache_get_value_name(i, "petadi", PetBilgi[i][petAdi], 24);
	    cache_get_value_name_int(i, "petsahip", PetBilgi[i][petSahip]);
	    cache_get_value_name_int(i, "petturu", PetBilgi[i][petTuru]);
	    cache_get_value_name_int(i, "petcinsiyet", PetBilgi[i][petCinsiyet]);
	    cache_get_value_name_int(i, "petrenk", PetBilgi[i][petRenk]);
	    cache_get_value_name_int(i, "petaclik", PetBilgi[i][petAclik]);
	    cache_get_value_name_float(i, "petsaglik", PetBilgi[i][petSaglik]);
	    cache_get_value_name_int(i, "petyarali", PetBilgi[i][petYarali]);
	    PetBilgi[i][petTakip] = -1;
	    PetBilgi[i][petDurum] = false;
	    Iter_Add(Petler, i);
	}
	return 1;
}
stock GetPlayerPosEx(playerid, &Float:x, &Float:y, &Float:z)
{
	new id = Entrance_Inside(playerid);
	if(id != -1)
	{
	    x = EntranceData[id][entrancePos][0];
	    y = EntranceData[id][entrancePos][1];
	    z = EntranceData[id][entrancePos][2];
	    return 1;
	}
	id = House_Inside(playerid);
	if(id != -1)
	{
	    x = house_info[id][evPos][0];
	    y = house_info[id][evPos][1];
	    z = house_info[id][evPos][2];
	    return 1;
	}
	id = Garage_Inside(playerid);
	if(id != -1)
	{
	    x = GarageData[id][gPos][0];
	    y = GarageData[id][gPos][1];
	    z = GarageData[id][gPos][2];
	    return 1;
	}
	id = Business_Inside(playerid);
	if(id != -1)
	{
	    x = Isyeri[id][isyeriPos][0];
	    y = Isyeri[id][isyeriPos][1];
	    z = Isyeri[id][isyeriPos][2];
	    return 1;
	}
	GetPlayerPos(playerid, x, y, z);
	return 1;
}
stock IsPlayerInWater(playerid)
{
        new Float:Z;
        GetPlayerPos(playerid,Z,Z,Z);
        if(Z < 0.7) switch(GetPlayerAnimationIndex(playerid)) { case 1543,1538,1539: return 1; }
        if(GetPlayerDistanceFromPoint(playerid,-965,2438,42) <= 700 && Z < 45)return 1;
        new Float:water_places[][] =
        {
                {25.0,  2313.0, -1417.0,        23.0},
                {15.0,  1280.0, -773.0,         1082.0},
                {15.0,  1279.0, -804.0,         86.0},
                {20.0,  1094.0, -674.0,         111.0},
                {26.0,  194.0,  -1232.0,        76.0},
                {25.0,  2583.0, 2385.0,         15.0},
                {25.0,  225.0,  -1187.0,        73.0},
                {50.0,  1973.0, -1198.0,        17.0}
        };
        for(new t=0; t < sizeof water_places; t++)
                if(GetPlayerDistanceFromPoint(playerid,water_places[t][1],water_places[t][2],water_places[t][3]) <= water_places[t][0]) return 1;
        return 0;
}
stock GetInitials(const string[])
{
    new
        ret[32],
        index = 0;

    for (new i = 0, l = strlen(string); i != l; i ++)
    {
        if (('A' <= string[i] <= 'Z') && (i == 0 || string[i - 1] == ' '))
            ret[index++] = string[i];
    }
    return ret;
}
stock convertDatex(timestamp, _form=0){

    new year=1970, day=0, month=0, hour=0, mins=0, sec=0;

    new days_of_month[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };

    new names_of_month[12][10] = {"January","February","March","April","May","June","July","August","September","October","November","December"};

    new returnstring[56];

    while(timestamp>31622400){

        timestamp -= 31536000;

        if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) ) timestamp -= 86400;

        year++;

    }

    if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) )

        days_of_month[1] = 29;

    else

        days_of_month[1] = 28;

    while(timestamp>86400){

        timestamp -= 86400, day++;

        if(day==days_of_month[month]) day=0, month++;

    }

    while(timestamp>60){

        timestamp -= 60, mins++;

        if( mins == 60) mins=0, hour++;

    }

    sec=timestamp;

    switch( _form ){

        case 1: format(returnstring,56, "%02d/%02d/%d %02d:%02d:%02d", day+1, month+1, year, hour, mins, sec);

        case 2: format(returnstring,56, "%s %02d, %d, %02d:%02d:%02d", names_of_month[month],day+1,year, hour, mins, sec);

        case 3: format(returnstring,56, "%d %c%c%c %d, %02d:%02d", day+1,names_of_month[month][0],names_of_month[month][1],names_of_month[month][2], year,hour,mins);

        default: format(returnstring,56, "%02d/%02d/%d %02d:%02d:%02d", day+1, month+1, year, hour, mins, sec);

    }

    return returnstring;

}
stock GetFightStyleName(styleid)
{
    new sname[12];
    sname = "Bilinmiyor";
    switch(styleid)
    {
        case 4: sname = "Normal";
        case 5: sname = "Boxing";
        case 6: sname = "Kung Fu";
        case 7: sname = "Knee Head";
        case 15: sname = "Grabkick";
        case 26: sname = "Elbow";
    }
    return sname;
}
stock Graffiti_Delete(id)
{
    if (id != -1 && GraffitiData[id][graffitiExists])
    {
        new
            string[64];

        if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
            DestroyDynamicObject(GraffitiData[id][graffitiObject]);

        format(string, sizeof(string), "DELETE FROM `graffiti` WHERE `graffitiID` = '%d'", GraffitiData[id][graffitiID]);
        mysql_tquery(baglanti, string);

        GraffitiData[id][graffitiExists] = false;
        GraffitiData[id][graffitiText][0] = 0;
        GraffitiData[id][graffitiID] = 0;
    }
    return 1;
}
PaintballSpawn(playerid)
{
	new id = pbOda[playerid];
	if(Paintball[id][odaDurum] != ODA_BASLADI || Paintball[id][odaExists] == false || GetPVarInt(playerid, "OdadanAt") == 1)
	{
	    OdadanAt(playerid, 3);
	    DeletePVar(playerid, "OdadanAt");
	    return 1;
	}
	if(pbTakim[playerid] == 0 && Paintball[id][odaOyunTuru] == 1) return 1;
	if(Paintball[id][odaOyunTuru] == 2)
	{
	    switch(Paintball[id][odaArena])
	    {
	        case 1:
	        {
	            new rand = random(4);
	            switch(rand)
	            {
	                case 0:
	                {
	                    SetPlayerPos(playerid, 1059.3263,2081.4861,10.8203);
	                    SetPlayerFacingAngle(playerid, 322.0627);
	                    SetPlayerInterior(playerid, 0);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                }
	                case 1:
	                {
	                    SetPlayerPos(playerid, 1068.1041,2130.2908,10.8203);
	                    SetPlayerFacingAngle(playerid, 176.9880);
	                    SetPlayerInterior(playerid, 0);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                }
	                case 2:
	                {
	                    SetPlayerPos(playerid, 1087.8287,2078.1233,15.3504);
	                    SetPlayerFacingAngle(playerid, 30.0567);
	                    SetPlayerInterior(playerid, 0);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                }
	                case 3:
	                {
	                    SetPlayerPos(playerid, 1086.3816,2118.1890,15.3504);
	                    SetPlayerFacingAngle(playerid, 111.5241);
	                    SetPlayerInterior(playerid, 0);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                }
	            }
	        }
	        case 2:
	        {
	            new rand = random(5);
	            switch(rand)
	            {
	                case 0:
	                {
	                    SetPlayerPos(playerid, 1250.3260,-47.5597,1001.0268);
	                    SetPlayerFacingAngle(playerid, 304.2428);
	                    SetPlayerInterior(playerid, 18);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                }
	                case 1:
	                {
	                    SetPlayerPos(playerid, 1286.4022,-64.8159,1002.4961);
	                    SetPlayerFacingAngle(playerid, 349.2183);
	                    SetPlayerInterior(playerid, 18);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 3:
	                {
	                    SetPlayerPos(playerid, 1253.7115,-0.0914,1001.0323);
	                    SetPlayerFacingAngle(playerid, 214.8205);
	                    SetPlayerInterior(playerid, 18);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 4:
	                {
	                    SetPlayerPos(playerid, 1308.4783,-45.9482,1001.0313);
	                    SetPlayerFacingAngle(playerid, 68.8058);
	                    SetPlayerInterior(playerid, 18);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
					}
	            }
	        }
	        case 3:
	        {
	            new rand = random(6);
	            switch(rand)
	            {
	                case 0:
	                {
	                    SetPlayerPos(playerid, -975.1069,1061.2255,1345.6719);
	                    SetPlayerFacingAngle(playerid, 93.5594);
	                    SetPlayerInterior(playerid, 10);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
					}
					case 1:
					{
					    SetPlayerPos(playerid, -1130.9933,1057.7678,1346.4141);
	                    SetPlayerFacingAngle(playerid, 269.3412);
	                    SetPlayerInterior(playerid, 10);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
					}
					case 2:
					{
					    SetPlayerPos(playerid, -1084.8049,1042.5554,1343.4354);
	                    SetPlayerFacingAngle(playerid, 301.9282);
	                    SetPlayerInterior(playerid, 10);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
					}
					case 3:
					{
					    SetPlayerPos(playerid, -1038.9807,1049.7030,1342.1497);
	                    SetPlayerFacingAngle(playerid, 294.7213);
	                    SetPlayerInterior(playerid, 10);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
					}
					case 4:
					{
					    SetPlayerPos(playerid, -973.8306,1027.6724,1345.0436);
	                    SetPlayerFacingAngle(playerid, 355.1951);
	                    SetPlayerInterior(playerid, 10);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
					}
					case 5:
					{
					    SetPlayerPos(playerid, -973.0900,1088.9197,1344.9883);
	                    SetPlayerFacingAngle(playerid, 86.3523);
	                    SetPlayerInterior(playerid, 10);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
					}
				}
	        }
	        case 4:
	        {
	            new rand = random(6);
	            switch(rand)
	            {
	                case 0:
	                {
		                SetPlayerPos(playerid, 239.0441,143.9385,1003.0234);
	                 	SetPlayerFacingAngle(playerid, 357.3882);
	                  	SetPlayerInterior(playerid, 3);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
                    }
                    case 1:
                    {
                        SetPlayerPos(playerid, 300.0846,183.6274,1007.1719);
	                 	SetPlayerFacingAngle(playerid, 95.4391);
	                  	SetPlayerInterior(playerid, 3);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
                    }
                    case 2:
                    {
                        SetPlayerPos(playerid, 245.1610,185.1715,1008.1719);
	                 	SetPlayerFacingAngle(playerid, 321.9813);
	                  	SetPlayerInterior(playerid, 3);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
                    }
                    case 3:
                    {
                        SetPlayerPos(playerid, 208.3106,142.2589,1003.0234);
	                 	SetPlayerFacingAngle(playerid, 271.8475);
	                  	SetPlayerInterior(playerid, 3);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
                    }
                    case 4:
                    {
                        SetPlayerPos(playerid, 196.2699,179.3185,1003.0234);
	                 	SetPlayerFacingAngle(playerid, 250.2508);
	                  	SetPlayerInterior(playerid, 3);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
                    }
                    case 5:
                    {
                        SetPlayerPos(playerid, 230.5995,183.4883,1003.0313);
	                 	SetPlayerFacingAngle(playerid, 124.6263);
	                  	SetPlayerInterior(playerid, 3);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
                    }
	            }

	        }
	        case 5:
	        {
	            new rand = random(5);
	            switch(rand)
	            {
	                case 0:
	                {
	                    SetPlayerPos(playerid, 1058.8458,2081.5845,10.8203);
	                 	SetPlayerFacingAngle(playerid, 332.0316);
	                  	SetPlayerInterior(playerid, 0);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 1:
	                {
	                    SetPlayerPos(playerid, 1069.3534,2129.8914,10.8203);
	                 	SetPlayerFacingAngle(playerid, 172.2302);
	                  	SetPlayerInterior(playerid, 0);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
						SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 2:
					{
					    SetPlayerPos(playerid, 1087.8864,2079.1938,15.3504);
	                 	SetPlayerFacingAngle(playerid, 29.0823);
	                  	SetPlayerInterior(playerid, 0);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
					}
					case 3:
					{
					    SetPlayerPos(playerid, 1093.3832,2097.4788,10.8203);
	                 	SetPlayerFacingAngle(playerid, 87.9896);
	                  	SetPlayerInterior(playerid, 0);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
					}
					case 4:
					{
					    SetPlayerPos(playerid, 1065.2822,2111.1763,10.8203);
	                 	SetPlayerFacingAngle(playerid, 269.0746);
	                  	SetPlayerInterior(playerid, 0);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
					}
				}
	        }
	        case 6:
	        {
	            new rand = random(5);
	            switch(rand)
	            {
	                case 0:
	                {
	                    SetPlayerPos(playerid, 2543.4995,-1304.1349,1025.0703);
	                 	SetPlayerFacingAngle(playerid, 174.1336);
	                  	SetPlayerInterior(playerid, 2);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 1:
	                {
	                    SetPlayerPos(playerid, 2562.5330,-1296.9476,1031.4219);
	                 	SetPlayerFacingAngle(playerid, 84.4958);
	                  	SetPlayerInterior(playerid, 2);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 2:
	                {
	                    SetPlayerPos(playerid, 2574.8743,-1301.6804,1037.7734);
	                 	SetPlayerFacingAngle(playerid, 359.2685);
	                  	SetPlayerInterior(playerid, 2);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 3:
	                {
	                    SetPlayerPos(playerid, 2581.0449,-1285.3281,1044.1250);
	                 	SetPlayerFacingAngle(playerid, 171.9168);
	                  	SetPlayerInterior(playerid, 2);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 4:
	                {
	                    SetPlayerPos(playerid, 2529.1042,-1286.1699,1054.6406);
	                 	SetPlayerFacingAngle(playerid, 81.9662);
	                  	SetPlayerInterior(playerid, 2);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
				}
	        }
	        case 7:
	        {
	            new rand = random(7);
	            switch(rand)
	            {
	                case 0:
	                {
	                    SetPlayerPos(playerid, 2216.1829,-1149.5088,1025.7969);
	                 	SetPlayerFacingAngle(playerid, 300.7219);
	                  	SetPlayerInterior(playerid, 15);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 1:
	                {
	                    SetPlayerPos(playerid, 2240.9519,-1193.5115,1029.7969);
	                 	SetPlayerFacingAngle(playerid, 3.6791);
	                  	SetPlayerInterior(playerid, 15);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 2:
	                {
	                    SetPlayerPos(playerid, 2234.7319,-1159.3888,1029.7969);
	                 	SetPlayerFacingAngle(playerid, 270.6182);
	                  	SetPlayerInterior(playerid, 15);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 3:
	                {
	                    SetPlayerPos(playerid, 2234.0752,-1170.9261,1029.7969);
	                 	SetPlayerFacingAngle(playerid, 270.6182);
	                  	SetPlayerInterior(playerid, 15);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 4:
	                {
	                    SetPlayerPos(playerid, 2239.8977,-1188.0165,1033.7969);
	                 	SetPlayerFacingAngle(playerid, 258.4217);
	                  	SetPlayerInterior(playerid, 15);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 5:
	                {
	                    SetPlayerPos(playerid, 2225.8901,-1182.4353,1029.7969);
	                 	SetPlayerFacingAngle(playerid, 166.6141);
	                  	SetPlayerInterior(playerid, 15);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 6:
	                {
	                    SetPlayerPos(playerid, 2186.6885,-1182.1509,1033.7969);
	                 	SetPlayerFacingAngle(playerid, 201.6845);
	                  	SetPlayerInterior(playerid, 15);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
				}
	        }
	    }
	}
	else
	{
	    switch(Paintball[id][odaArena])
	    {
	        case 1:
	        {
	            if(pbTakim[playerid] == 1)
	            {
	                SetPlayerPos(playerid, 1059.3263,2081.4861,10.8203);
                	SetPlayerFacingAngle(playerid, 322.0627);
                	SetPlayerInterior(playerid, 0);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 10);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	            else
	            {
	                SetPlayerPos(playerid, 1068.1041,2130.2908,10.8203);
                	SetPlayerFacingAngle(playerid, 176.9880);
                	SetPlayerInterior(playerid, 0);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 20);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	        }
	        case 2:
	        {
	            if(pbTakim[playerid] == 1)
	            {
	                SetPlayerPos(playerid, 1303.3241,0.8544,1001.0255);
                	SetPlayerFacingAngle(playerid, 131.1362);
                	SetPlayerInterior(playerid, 18);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 10);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	            else
	            {
	                SetPlayerPos(playerid, 1250.3260,-47.5597,1001.0268);
                	SetPlayerFacingAngle(playerid, 304.2428);
                	SetPlayerInterior(playerid, 18);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 20);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	        }
	        case 3:
	        {
	            if(pbTakim[playerid] == 1)
	            {
	                SetPlayerPos(playerid, -975.1069,1061.2255,1345.6719);
                	SetPlayerFacingAngle(playerid, 93.5594);
                	SetPlayerInterior(playerid, 10);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 10);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	            else
	            {
	                SetPlayerPos(playerid, -1130.9933,1057.7678,1346.4141);
                	SetPlayerFacingAngle(playerid, 269.3412);
                	SetPlayerInterior(playerid, 10);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 20);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	        }
	        case 4:
	        {
	            if(pbTakim[playerid] == 1)
	            {
	                SetPlayerPos(playerid, 239.0441,143.9385,1003.0234);
                	SetPlayerFacingAngle(playerid, 357.3882);
                	SetPlayerInterior(playerid, 3);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 10);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	            else
	            {
	                SetPlayerPos(playerid, 300.0846,183.6274,1007.1719);
                	SetPlayerFacingAngle(playerid, 95.4391);
                	SetPlayerInterior(playerid, 3);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 20);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	        }
	        case 5:
	        {
	            if(pbTakim[playerid] == 1)
	            {
	                SetPlayerPos(playerid, 1058.8458,2081.5845,10.8203);
                	SetPlayerFacingAngle(playerid, 332.0316);
                	SetPlayerInterior(playerid, 0);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 10);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	            else
	            {
	                SetPlayerPos(playerid, 1069.3534,2129.8914,10.8203);
                	SetPlayerFacingAngle(playerid, 172.2302);
                	SetPlayerInterior(playerid, 0);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 20);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	        }
	        case 6:
	        {
	            if(pbTakim[playerid] == 1)
	            {
	                SetPlayerPos(playerid, 2543.4995,-1304.1349,1025.0703);
                	SetPlayerFacingAngle(playerid, 174.1336);
                	SetPlayerInterior(playerid, 2);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 10);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	            else
	            {
	                SetPlayerPos(playerid, 2562.5330,-1296.9476,1031.4219);
                	SetPlayerFacingAngle(playerid, 84.4958);
                	SetPlayerInterior(playerid, 2);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 20);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	        }
	        case 7:
	        {
	            if(pbTakim[playerid] == 1)
	            {
	                SetPlayerPos(playerid, 2216.1829,-1149.5088,1025.7969);
                	SetPlayerFacingAngle(playerid, 300.7219);
                	SetPlayerInterior(playerid, 15);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 10);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	            else
	            {
	                SetPlayerPos(playerid, 2240.9519,-1193.5115,1029.7969);
                	SetPlayerFacingAngle(playerid, 3.6791);
                	SetPlayerInterior(playerid, 15);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 20);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if(Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	        }
	    }
	}
	return 1;
}
TimeConvert(seconds, tarz=0, saat=0)
{
	new tmp[16];
 	new minutes = floatround(seconds/60);
	seconds -= minutes*60;
	if(minutes >= 60)
	{
	    saat++;
	}
  	if(tarz == 1)
  	{
   		format(tmp, sizeof(tmp), "%d:%02d", minutes, seconds);
   	} else {
   		format(tmp, sizeof(tmp), "%02d:%02d:%02d", saat, minutes, seconds);
   	}
   	return tmp;
}
KomutEkle(ad[], tanim[], katagori, olusum = -1)
{
	for (new i = 0; i != MAX_YARDIM_KOMUTLARI; i ++)
	{
 		if (!Komutlar[i][komutVarmi])
		{
		    Komutlar[i][komutVarmi] = true;
            Komutlar[i][komutKatagori] = katagori;
            Komutlar[i][komutOlusum] = olusum;
           	format(Komutlar[i][komutAd], 24, ad);
           	format(Komutlar[i][komutTanim], 256, tanim);
			return i;
		}
	}
	return -1;
}
KomutYukle()
{
	// -------------------------- Genel Komutlar ------------------------ //
	KomutEkle("/ayarlar", "Hesap ayarlarýna eriþme.", 0);
	KomutEkle("/mulklerim", "Karakterinize baðlý iþyerleri ve evleri listeler.", 0);
	KomutEkle("/karakter", "Karakterinizin bilgilerini görme.", 0);
	KomutEkle("/id", "Oyun adýna göre ID sorgulama.", 0);
	KomutEkle("/destek", "Admin ve Helper ekibine sorunlarýnýzý iletebilirsiniz.", 0);
	KomutEkle("/admins", "Çevrimiçi adminleri listeler.", 0);
	KomutEkle("/helpers", "Çevrimiçi helperleri listeler.", 0);
	KomutEkle("/animasyonlar", "Sunucuya eklenmiþ animasyonlarý listeler.", 0);
	KomutEkle("/dinle", "Dinleyebileceðiniz yayýn organlarýný listeler.", 0);
	KomutEkle("/cpsifirla", "Checkpointlerinizi sýfýrlar.", 0);
	KomutEkle("/kabulet", "Gelen teklifleri kabul etme.", 0);
	KomutEkle("/birlikler", "Birlik sýralamasýný gösterir.", 0);
	KomutEkle("/birlikara", "Belirli isim aralýðýnda birlikleri listelersiniz.", 0);
	KomutEkle("/hud", "Ekrandaki göstergeleri kapatýr/açar.", 0);
	KomutEkle("/anahtarver", "Ev/Araç anahtarý verme.", 0);
	KomutEkle("/silahlarim", "Silah menüsünü açar. ", 0);
	KomutEkle("/aractanat", "Herhangi bir oyuncuyu aracýnýzdan atmayý saðlar.", 0);
	KomutEkle("/aracaat", "Kelepçelenmiþ veya elleri baðlanmýþ kiþiyi yakýnýnýzdaki araca atmayý saðlar.", 0);
    // -------------------------- Chat & Roleplay Komutlarý    ------------------------ //
	KomutEkle("/chatimitemizle", "Chat ekranýný temizler.", 1);
	KomutEkle("/me", "Etkileþim komutu.", 1);
	KomutEkle("/do", "Etkileþim komutu.", 1);
	KomutEkle("/s(hout)", "Baðýrma.", 1);
	KomutEkle("/b", "Oyun dýþý kanal.", 1);
	KomutEkle("/pm", "Özel mesaj. (Private)", 1);
	KomutEkle("/p", "Son PM attýðýnýz kiþiye özel mesaj. (Private)", 1);
	KomutEkle("/w(hisper)", "Oyuncuya fýsýldama.", 1);
	KomutEkle("/c", "Sessiz konuþma.", 1);
	KomutEkle("/ame", "Etkileþim komutu (Karakter üstünde).", 1);
	KomutEkle("/ado", "Etkileþim komutu (Karakter üstünde).", 1);
    KomutEkle("/paraver", "Kiþiye para aktarma.", 1);
    KomutEkle("/dene", "Baþarýlý/Baþarýsýz olma þansý.", 1);
    KomutEkle("/tokalas", "Belirlediðiniz kiþiye tokalaþma isteði yollar.", 1);
    KomutEkle("/kimlikgoster", "Kimlik bilgilerinizi gösterme.", 1);
    KomutEkle("/lisansgoster", "Ehliyet/ruhsat durumunuzu gösterme.", 1);
    KomutEkle("/kapi", "Kapýlarý/gateleri açma.", 1);

    // -------------------------- TELEFON  ------------------------ //
    KomutEkle("/telefon", "Telefon menüsünü açar.", 2);
    KomutEkle("/ara", "Numara çevirme.", 2);
    KomutEkle("/sms", "SMS Gönderme.", 2);
    KomutEkle("/cagrikabul", "Gelen aramayý cevaplama.", 2);
    KomutEkle("/cagrikapat", "Aramayý sonlandýrma/Reddetme.", 2);

	// --------------------- Araç -------------------------------
    KomutEkle("/benzinkutusu", "Benzin kutusunu kullanma.", 3);
    KomutEkle("/motor", "Motoru açma/kapatma.", 3);
    KomutEkle("/kilit", "Kilidi açma/kapatma.", 3);
    KomutEkle("/bagaj", "Bagajý açma.", 3);
    KomutEkle("/araclarim", "Tüm araçlarýnýzý listeleme.", 3);
    KomutEkle("/arac", "Araç kontrol menüsü.", 3);
    KomutEkle("/acamlar", "Camlarý açma/kapatma.", 3);
    KomutEkle("/afarlar", "Farlarý açma/kapatma.", 3);
    KomutEkle("/kaput", "Kaputu açma/kapatma.", 3);
    KomutEkle("/aractanat", "Herhangi bir oyuncuyu aracýnýzdan atmayý saðlar.", 3);


    // -------------------------- UYUÞTURUCU  ------------------------ //
	KomutEkle("/ukullan", "Uyuþturucu kullanma.", 4);
	KomutEkle("/uver", "Belirlediðiniz kiþiye uyuþturucu verirsiniz.", 4);
	KomutEkle("/usat", "Belirlediðiniz kiþiye uyuþturucu satarsýnýz.", 4);
	KomutEkle("/utohum", "Tohum ekebilirsiniz ve toplayabilirsiniz.", 4);
	KomutEkle("/ubilgi", "Uyuþturucu istatistiklerinizi gösterir.", 4);

    // -------------------------- BÝRLÝK  ------------------------ //
    KomutEkle("/birlikler", "Birlik sýralamasýný gösterir.", 5);
    KomutEkle("/birlikara", "Belirli isim aralýðýnda birlikleri listelersiniz.", 5);
    KomutEkle("/f(ac)", "Birlik içi sohbet.", 5);
    KomutEkle("/graffiti", "Graffiti onaylý birlikler için graffiti komutu.", 5);
    KomutEkle("/birlik", "Birlik menüsünü açar.", 5);

	// ------------------------ MESLEKLER -------------------------- //

	KomutEkle("/meslekler", "Mesleklerin yerini bulabilirsiniz.", 6);

    /// -------------------------- POLÝS  ------------------------ //
	KomutEkle("/tazer", "Elektroþok cihazý.",  5, BIRLIK_LSPD);
    KomutEkle("/kelepce", "Kiþiyi kelepçeler.",  5, BIRLIK_LSPD);
    KomutEkle("/kelepcecikar", "Kiþinin kelepçesini çözer.",  5, BIRLIK_LSPD);
    KomutEkle("/surukle", "Kiþiyi sürüklersiniz.",  5, BIRLIK_LSPD);
    KomutEkle("/mdc", "Mobil Bilgi Sistemini açar.",  5, BIRLIK_LSPD);
    KomutEkle("/hapseat", "Hapse atma.",  5, BIRLIK_LSPD);
    KomutEkle("/t", "Telsiz iletiþimi.",  5, BIRLIK_LSPD);
    KomutEkle("/d(ept)", "Departman telsizi.",  5, BIRLIK_LSPD);
    KomutEkle("/yt(yakýn telsiz)", "Yakýn telsiz.",  5, BIRLIK_LSPD);
    KomutEkle("/elkoy", "Uyuþturuculara ve silahlara el koyma.",  5, BIRLIK_LSPD);
    KomutEkle("/objekoy", "Obje koyma. (barikat, çivi vs.)",  5, BIRLIK_LSPD);
    KomutEkle("/objesil", "Obje silme.", 5, BIRLIK_LSPD);
    KomutEkle("/objeduzenle", "Obje düzenleme.", 5, BIRLIK_LSPD);
    KomutEkle("/aracibagla", "Çekilmiþ aracý baðlama.",  5, BIRLIK_LSPD);
    KomutEkle("/kapiyikir", "Ev/iþyeri kapýsý kýrma.",  5, BIRLIK_LSPD);
    KomutEkle("/siren", "Tepe sireni koyma.",  5, BIRLIK_LSPD);
    KomutEkle("/flasor", "Farlarý hýzlý açýp kapama.",  5, BIRLIK_LSPD);
    KomutEkle("/callsign", "Birim kodu koyma.",  5, BIRLIK_LSPD);
    KomutEkle("/rozetgoster", "Rozet gösterme komutu.",  5, BIRLIK_LSPD);
    KomutEkle("/destekiste", "Birimlere sinyal göndererek destek isteme.",  5, BIRLIK_LSPD);
    KomutEkle("/bagaj", "Birim araçlarýnda silah deposuna ulaþma.",  5, BIRLIK_LSPD);
    KomutEkle("/yereyatir", "Kiþiyi yere yatýrma.",  5, BIRLIK_LSPD);
	/// -------------------------- Yayýn Ajansý  ------------------------ //
	KomutEkle("/yayin", "Yayýndan konuþmanýzý saðlar.",  5, BIRLIK_HABER);
	KomutEkle("/yayinmuzik", "Yayýna müzik ekleme.",  5, BIRLIK_HABER);
	KomutEkle("/yayindavet", "Yayýna konuk alma/çýkarma.",  5, BIRLIK_HABER);
    KomutEkle("/rozetgoster", "Basýn kartýný gösterme komutu.",  5, BIRLIK_HABER);
    /// -------------------------- LSMD  ------------------------ //
	KomutEkle("/r(adio)", "Telsiz iletiþimi.",  5, BIRLIK_LSMD);
    KomutEkle("/d(ept)", "Departman telsizi.",  5, BIRLIK_LSMD);
    KomutEkle("/yaracaat", "Yaralýyý araca yükleme.",  5, BIRLIK_LSMD);
    KomutEkle("/yteslim", "Araca yüklenen yaralýyý teslim etme.",  5, BIRLIK_LSMD);
    KomutEkle("/rozetgoster", "Rozet gösterme komutu.",  5, BIRLIK_LSMD);
    KomutEkle("/megafon", "Araç megafonu/el megafonu.",  5, BIRLIK_LSMD);


	return 1;

}
stock GuvenliBolgedeyse(playerid)
{
	for(new i; i < sizeof(GuvenliBolge); ++i)
	{
		if(IsPlayerInDynamicArea(playerid, GuvenliBolge[i][Rectangle])) return 1;
	}
	return 0;
}
stock LinkVehicleToInteriorEx(vehicleid, interiorid)
{
	CarInterior[vehicleid] = interiorid;
	return LinkVehicleToInterior(vehicleid, interiorid);
}
static stock GetPosOffset(Float: p_p_x, Float: p_p_y, Float: p_p_z, Float: p_c_x, Float: p_c_y, Float: p_c_z, &Float:p_n_x, &Float:p_n_y, &Float: p_n_z)
{
	p_n_x = (p_p_x > p_c_x) ? (p_p_x - p_c_x) : (p_c_x - p_p_x);
	p_n_y = (p_p_y > p_c_y) ? (p_p_y - p_c_y) : (p_c_y - p_p_y);
	p_n_z = (p_p_z > p_c_z) ? (p_p_z - p_c_z) : (p_c_z - p_p_z);
	return true;
}
stock IsVehicleUpgradeCompatible(model,componentid) // by AirKite
{
	switch(model)
	{
		case 400:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 401:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
			}
		}
		case 404:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1002: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1016: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 405:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1001: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 410:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 415:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 418:
		{
			switch(componentid)
			{
				case 1002: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 420:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1019: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 421:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1016: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 422:
		{
			switch(componentid)
			{
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 426:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1019: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 436:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1022: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 439:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 477:
		{
			switch(componentid)
			{
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 478:
		{
			switch(componentid)
			{
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1012: { return 1; }
				case 1013: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1022: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 489:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1002: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1016: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 491:
		{
			switch(componentid)
			{
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 492:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 496:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1002: { return 1; }
				case 1003: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1011: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
			}
		}
		case 500:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 516:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1002: { return 1; }
				case 1004: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1015: { return 1; }
				case 1016: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 517:
		{
			switch(componentid)
			{
				case 1002: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 518:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 527:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1015: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 529:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1011: { return 1; }
				case 1012: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 534:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1100: { return 1; }
				case 1101: { return 1; }
				case 1106: { return 1; }
				case 1122: { return 1; }
				case 1123: { return 1; }
				case 1124: { return 1; }
				case 1125: { return 1; }
				case 1126: { return 1; }
				case 1127: { return 1; }
				case 1178: { return 1; }
				case 1179: { return 1; }
				case 1180: { return 1; }
				case 1185: { return 1; }
			}
		}
		case 535:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1109: { return 1; }
				case 1110: { return 1; }
				case 1113: { return 1; }
				case 1114: { return 1; }
				case 1115: { return 1; }
				case 1116: { return 1; }
				case 1117: { return 1; }
				case 1118: { return 1; }
				case 1119: { return 1; }
				case 1120: { return 1; }
				case 1121: { return 1; }
			}
		}
		case 536:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1103: { return 1; }
				case 1104: { return 1; }
				case 1105: { return 1; }
				case 1107: { return 1; }
				case 1108: { return 1; }
				case 1128: { return 1; }
				case 1181: { return 1; }
				case 1182: { return 1; }
				case 1183: { return 1; }
				case 1184: { return 1; }
			}
		}
		case 540:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1004: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 542:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1015: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 546:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1002: { return 1; }
				case 1004: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1023: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 547:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1003: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
			}
		}
		case 549:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1011: { return 1; }
				case 1012: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 550:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 551:
		{
			switch(componentid)
			{
				case 1002: { return 1; }
				case 1003: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 558:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1088: { return 1; }
				case 1089: { return 1; }
				case 1090: { return 1; }
				case 1091: { return 1; }
				case 1092: { return 1; }
				case 1093: { return 1; }
				case 1094: { return 1; }
				case 1095: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1163: { return 1; }
				case 1164: { return 1; }
				case 1165: { return 1; }
				case 1166: { return 1; }
				case 1167: { return 1; }
				case 1168: { return 1; }
			}
		}
		case 559:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1065: { return 1; }
				case 1066: { return 1; }
				case 1067: { return 1; }
				case 1068: { return 1; }
				case 1069: { return 1; }
				case 1070: { return 1; }
				case 1071: { return 1; }
				case 1072: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1158: { return 1; }
				case 1159: { return 1; }
				case 1160: { return 1; }
				case 1161: { return 1; }
				case 1162: { return 1; }
				case 1173: { return 1; }
			}
		}
		case 560:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1026: { return 1; }
				case 1027: { return 1; }
				case 1028: { return 1; }
				case 1029: { return 1; }
				case 1030: { return 1; }
				case 1031: { return 1; }
				case 1032: { return 1; }
				case 1033: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1138: { return 1; }
				case 1139: { return 1; }
				case 1140: { return 1; }
				case 1141: { return 1; }
				case 1169: { return 1; }
				case 1170: { return 1; }
			}
		}
		case 561:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1055: { return 1; }
				case 1056: { return 1; }
				case 1057: { return 1; }
				case 1058: { return 1; }
				case 1059: { return 1; }
				case 1060: { return 1; }
				case 1061: { return 1; }
				case 1062: { return 1; }
				case 1063: { return 1; }
				case 1064: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1154: { return 1; }
				case 1155: { return 1; }
				case 1156: { return 1; }
				case 1157: { return 1; }
			}
		}
		case 562:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1034: { return 1; }
				case 1035: { return 1; }
				case 1036: { return 1; }
				case 1037: { return 1; }
				case 1038: { return 1; }
				case 1039: { return 1; }
				case 1040: { return 1; }
				case 1041: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1146: { return 1; }
				case 1147: { return 1; }
				case 1148: { return 1; }
				case 1149: { return 1; }
				case 1171: { return 1; }
				case 1172: { return 1; }
			}
		}
		case 565:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1045: { return 1; }
				case 1046: { return 1; }
				case 1047: { return 1; }
				case 1048: { return 1; }
				case 1049: { return 1; }
				case 1050: { return 1; }
				case 1051: { return 1; }
				case 1052: { return 1; }
				case 1053: { return 1; }
				case 1054: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1150: { return 1; }
				case 1151: { return 1; }
				case 1152: { return 1; }
				case 1153: { return 1; }
			}
		}
		case 567:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1102: { return 1; }
				case 1129: { return 1; }
				case 1130: { return 1; }
				case 1131: { return 1; }
				case 1132: { return 1; }
				case 1133: { return 1; }
				case 1186: { return 1; }
				case 1187: { return 1; }
				case 1188: { return 1; }
				case 1189: { return 1; }
			}
		}
		case 575:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1042: { return 1; }
				case 1043: { return 1; }
				case 1044: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1099: { return 1; }
				case 1174: { return 1; }
				case 1175: { return 1; }
				case 1176: { return 1; }
				case 1177: { return 1; }
			}
		}
		case 576:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1134: { return 1; }
				case 1135: { return 1; }
				case 1136: { return 1; }
				case 1137: { return 1; }
				case 1190: { return 1; }
				case 1191: { return 1; }
				case 1192: { return 1; }
				case 1193: { return 1; }
			}
		}
		case 580:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 585:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 589:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1016: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 600:
		{
			switch(componentid)
			{
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1022: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 603:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 402,403,406..409,411..414,416,419,423,424,427..429,431..435,437,438,440..445,448,450,451,455..459,461..463,466..468,470,471,474,475,479..486,490,494,495,498,499,502..510,514,515,521..526,528,530..533,541,552,543..545,554..557,566,568,578,571..574,579,581..584,586..588,591,594,596..599,601,602,604..611:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
	}
	return 0;
}




//Modüller
//#include "src/lsrp_poker.pwn"
